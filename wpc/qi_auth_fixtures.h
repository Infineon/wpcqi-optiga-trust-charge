/**
* MIT License
*
* Copyright (c) 2020 Infineon Technologies AG
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE
*
*
* \file qi_auth_fixtures.h
*
* \brief   This file defines APIs, types and data structures for Crypto Wrapper.
* @{
*/
#ifndef _QI_AUTH_FIXTURES_H_
#define _QI_AUTH_FIXTURES_H_


static const unsigned char qi_auth_cr660_draft5_ifx_root_cert[] = {
/* Infineon Test WPC Root CA

-----BEGIN CERTIFICATE-----
MIIBCDCBr6ADAgECAgQSNFZ4MAoGCCqGSM49BAMCMBExDzANBgNVBAMMBldQQ0NB
MTAgFw03MDAxMDEwMDAwMDBaGA85OTk5MTIzMTIzNTk1OVowETEPMA0GA1UEAwwG
V1BDQ0ExMDkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDIgACRrJRlZ8BO4U4FE9i/6S3
BhfKnrtB1kDwjqFhHvCTLYajEzARMA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0E
AwIDSAAwRQIhANQGTZMiejvGcvWwWXlqrS6IE02EndiXsK3zwuabQr3tAiBoeQ3p
C1dykPFtZ4vPZVMR/x8DhKm3/3oj//b3R/1q8g==
-----END CERTIFICATE-----
*/
//        0x30, 0x82, 0x01, 0x08, 0x30, 0x81, 0xaf, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x04, 0x12, 0x34,
//        0x56, 0x78, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x11,
//        0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06, 0x57, 0x50, 0x43, 0x43, 0x41,
//        0x31, 0x30, 0x20, 0x17, 0x0d, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
//        0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39,
//        0x35, 0x39, 0x5a, 0x30, 0x11, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06,
//        0x57, 0x50, 0x43, 0x43, 0x41, 0x31, 0x30, 0x39, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
//        0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x22, 0x00,
//        0x02, 0x46, 0xb2, 0x51, 0x95, 0x9f, 0x01, 0x3b, 0x85, 0x38, 0x14, 0x4f, 0x62, 0xff, 0xa4, 0xb7,
//        0x06, 0x17, 0xca, 0x9e, 0xbb, 0x41, 0xd6, 0x40, 0xf0, 0x8e, 0xa1, 0x61, 0x1e, 0xf0, 0x93, 0x2d,
//        0x86, 0xa3, 0x13, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
//        0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
//        0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xd4, 0x06, 0x4d, 0x93, 0x22, 0x7a,
//        0x3b, 0xc6, 0x72, 0xf5, 0xb0, 0x59, 0x79, 0x6a, 0xad, 0x2e, 0x88, 0x13, 0x4d, 0x84, 0x9d, 0xd8,
//        0x97, 0xb0, 0xad, 0xf3, 0xc2, 0xe6, 0x9b, 0x42, 0xbd, 0xed, 0x02, 0x20, 0x68, 0x79, 0x0d, 0xe9,
//        0x0b, 0x57, 0x72, 0x90, 0xf1, 0x6d, 0x67, 0x8b, 0xcf, 0x65, 0x53, 0x11, 0xff, 0x1f, 0x03, 0x84,
//        0xa9, 0xb7, 0xff, 0x7a, 0x23, 0xff, 0xf6, 0xf7, 0x47, 0xfd, 0x6a, 0xf2
        0x30, 0x82, 0x01, 0x08, 0x30, 0x81, 0xaf, 0x02, 0x04, 0x27, 0x7a, 0x8f, 0xed, 0x30, 0x0a, 0x06,
        0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x0e, 0x31, 0x0c, 0x30, 0x0a, 0x06,
        0x03, 0x55, 0x04, 0x03, 0x0c, 0x03, 0x57, 0x50, 0x43, 0x30, 0x20, 0x17, 0x0d, 0x32, 0x30, 0x30,
        0x37, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x18, 0x0f, 0x32, 0x31, 0x39, 0x39,
        0x31, 0x32, 0x33, 0x30, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x0e, 0x31, 0x0c, 0x30,
        0x0a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x03, 0x57, 0x50, 0x43, 0x30, 0x59, 0x30, 0x13, 0x06,
        0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03,
        0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xea, 0xc6, 0xdd, 0x0d, 0x17, 0x73, 0xbf, 0x1c, 0x35, 0x8a,
        0x18, 0xd2, 0xc7, 0x16, 0xdf, 0x10, 0x9b, 0xb4, 0x47, 0x13, 0xc5, 0x5a, 0x76, 0x8d, 0xe3, 0xd3,
        0x59, 0xa1, 0xda, 0xa4, 0x14, 0x4a, 0x43, 0xec, 0xa9, 0xf0, 0x4a, 0xaf, 0x1c, 0xb9, 0x8f, 0x2c,
        0x92, 0xf8, 0x42, 0xa6, 0x3a, 0x21, 0x22, 0x07, 0xb0, 0xaa, 0x60, 0x85, 0x93, 0xfd, 0x5f, 0x92,
        0xc1, 0xc5, 0x12, 0x6c, 0x0c, 0x56, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
        0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x33, 0x7d, 0xdf, 0x40, 0xe5, 0x41, 0x93,
        0x6e, 0x81, 0xec, 0xc6, 0x7c, 0xd6, 0x4e, 0xa7, 0x6b, 0x68, 0x5c, 0x37, 0xa3, 0xbd, 0x57, 0x2e,
        0x03, 0xd2, 0xc5, 0x93, 0xe2, 0x4a, 0xa4, 0xf4, 0x8e, 0x02, 0x21, 0x00, 0xcb, 0xba, 0xda, 0x4d,
        0x23, 0x6a, 0xb1, 0xe2, 0xe0, 0x1c, 0x83, 0xc4, 0x4a, 0x66, 0x24, 0x54, 0x4f, 0x0c, 0x32, 0x9e,
        0x4a, 0x23, 0xf4, 0x7e, 0xac, 0x38, 0x6c, 0x4f, 0xfe, 0xfe, 0x24, 0xca
};

static const unsigned char qi_auth_test_new_certchain[] = {
        // This is a Test Root CA certificate used to generate a test certificate chain
        // Refer to <root_folder>/certificates
        0x30, 0x82, 0x01, 0x07, 0x30, 0x81, 0xaf, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x04, 0x12, 0x34,
        0x56, 0x78, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x11,
        0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06, 0x57, 0x50, 0x43, 0x43, 0x41,
        0x31, 0x30, 0x20, 0x17, 0x0d, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39,
        0x35, 0x39, 0x5a, 0x30, 0x11, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06,
        0x57, 0x50, 0x43, 0x43, 0x41, 0x31, 0x30, 0x39, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
        0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x22, 0x00,
        0x02, 0x8a, 0x5a, 0xeb, 0x6a, 0xe1, 0xf3, 0x19, 0xfe, 0x61, 0x42, 0xa7, 0x6f, 0x70, 0xec, 0xef,
        0x51, 0x7a, 0x45, 0xeb, 0x4e, 0x01, 0x8e, 0xa7, 0xc4, 0x2c, 0x94, 0xa9, 0x17, 0x26, 0x76, 0x53,
        0x46, 0xa3, 0x13, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
        0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
        0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x4f, 0x64, 0x50, 0xc9, 0x2a, 0x49, 0x0d,
        0x7b, 0xc2, 0x43, 0xbd, 0xad, 0xb4, 0x3a, 0x59, 0xdc, 0xe4, 0x97, 0xd5, 0xd7, 0xae, 0x4d, 0x10,
        0x88, 0xd1, 0x5f, 0x48, 0x34, 0xf5, 0x03, 0x24, 0x80, 0x02, 0x20, 0x7c, 0xcb, 0x55, 0xf4, 0xb6,
        0x62, 0x68, 0xc8, 0xb6, 0x98, 0x48, 0x50, 0xb1, 0xd4, 0xbc, 0x8d, 0xbe, 0xa1, 0x59, 0xcd, 0xc1,
        0xb1, 0x61, 0x0a, 0xb8, 0xd3, 0xf0, 0x44, 0x6b, 0xbd, 0x50, 0x66
};

static const unsigned char qi_auth_cr660_draft5_pf4_root_cert[] = {
/* Plugfest #4 Test WPC Root CA
        "-----BEGIN CERTIFICATE-----\n"
        "MIIBLTCB1KADAgECAglHRKsAH/zdsaEwCgYIKoZIzj0EAwIwETEPMA0GA1UEAwwG\n"
        "V1BDQ0ExMCAXDTIwMTAxOTA3MDIwMFoYDzk5OTkxMjMxMjM1OTU5WjARMQ8wDQYD\n"
        "VQQDDAZXUENDQTEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASRbshHiPJo/sHu\n"
        "KZhNe2+y8F2R9eHg7WfWIyKogvpEntBz0Ms7iPVjuuFL4uNk9NNYLg4nb3mRms5q\n"
        "Hs2TTQqOoxMwETAPBgNVHRMBAf8EBTADAQH/MAoGCCqGSM49BAMCA0gAMEUCIQCt\n"
        "dVwTUYzQY3SV3cWiDMQO5ph1MT49N4ek2davwcSwowIgR70shGX2wfB7lzH5Bmvk\n"
        "e0XFiFyqsE6TRzYwQhKl1Ts=\n"
        "-----END CERTIFICATE-----"
*/
        0x30, 0x82, 0x01, 0x2d, 0x30, 0x81, 0xd4, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x47, 0x44,
        0xab, 0x00, 0x1f, 0xfc, 0xdd, 0xb1, 0xa1, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
        0x04, 0x03, 0x02, 0x30, 0x11, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06,
        0x57, 0x50, 0x43, 0x43, 0x41, 0x31, 0x30, 0x20, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x31, 0x39,
        0x30, 0x37, 0x30, 0x32, 0x30, 0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33,
        0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x11, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03,
        0x55, 0x04, 0x03, 0x0c, 0x06, 0x57, 0x50, 0x43, 0x43, 0x41, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06,
        0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03,
        0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x91, 0x6e, 0xc8, 0x47, 0x88, 0xf2, 0x68, 0xfe, 0xc1, 0xee,
        0x29, 0x98, 0x4d, 0x7b, 0x6f, 0xb2, 0xf0, 0x5d, 0x91, 0xf5, 0xe1, 0xe0, 0xed, 0x67, 0xd6, 0x23,
        0x22, 0xa8, 0x82, 0xfa, 0x44, 0x9e, 0xd0, 0x73, 0xd0, 0xcb, 0x3b, 0x88, 0xf5, 0x63, 0xba, 0xe1,
        0x4b, 0xe2, 0xe3, 0x64, 0xf4, 0xd3, 0x58, 0x2e, 0x0e, 0x27, 0x6f, 0x79, 0x91, 0x9a, 0xce, 0x6a,
        0x1e, 0xcd, 0x93, 0x4d, 0x0a, 0x8e, 0xa3, 0x13, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d,
        0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0a, 0x06, 0x08, 0x2a,
        0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xad,
        0x75, 0x5c, 0x13, 0x51, 0x8c, 0xd0, 0x63, 0x74, 0x95, 0xdd, 0xc5, 0xa2, 0x0c, 0xc4, 0x0e, 0xe6,
        0x98, 0x75, 0x31, 0x3e, 0x3d, 0x37, 0x87, 0xa4, 0xd9, 0xd6, 0xaf, 0xc1, 0xc4, 0xb0, 0xa3, 0x02,
        0x20, 0x47, 0xbd, 0x2c, 0x84, 0x65, 0xf6, 0xc1, 0xf0, 0x7b, 0x97, 0x31, 0xf9, 0x06, 0x6b, 0xe4,
        0x7b, 0x45, 0xc5, 0x88, 0x5c, 0xaa, 0xb0, 0x4e, 0x93, 0x47, 0x36, 0x30, 0x42, 0x12, 0xa5, 0xd5,
        0x3b
};

static const uint8_t qi_auth_cr660_draft5_pf4_test_cert[] =
{
        0x02, 0x7C,
        0xC4, 0x62, 0xCA, 0x97, 0x65, 0xA0, 0x32, 0xF3, 0x64, 0x7A, 0x23, 0x67, 0xB0, 0x1A,
        0xA4, 0x5C, 0xBB, 0x93, 0xF0, 0xED, 0x14, 0x7A, 0x07, 0x3A, 0x71, 0xCE, 0xBF, 0xB5, 0x44, 0xC4,
        0xC1, 0xF6,

        0x30, 0x82, 0x01, 0x25, 0x30, 0x81, 0xCC, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09,
        0x68, 0x01, 0x50, 0x7E, 0x28, 0xBE, 0x7F, 0x02, 0x5A, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48,
        0xCE, 0x3D, 0x04, 0x03, 0x02, 0x30, 0x11, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04, 0x03,
        0x0C, 0x06, 0x57, 0x50, 0x43, 0x43, 0x41, 0x31, 0x30, 0x20, 0x17, 0x0D, 0x32, 0x30, 0x31, 0x30,
        0x32, 0x32, 0x30, 0x39, 0x30, 0x39, 0x30, 0x30, 0x5A, 0x18, 0x0F, 0x39, 0x39, 0x39, 0x39, 0x31,
        0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x12, 0x31, 0x10, 0x30, 0x0E,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x07, 0x30, 0x30, 0x32, 0x41, 0x2D, 0x30, 0x31, 0x30, 0x39,
        0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48,
        0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 0x22, 0x00, 0x03, 0x13, 0xD4, 0x46, 0x02, 0x92, 0x2F, 0x9C,
        0xEB, 0xD3, 0xC2, 0x26, 0x01, 0x3C, 0x2E, 0x02, 0x94, 0x78, 0x0B, 0x9A, 0x16, 0xDA, 0xB8, 0x13,
        0xF0, 0xC7, 0x70, 0x6A, 0x72, 0x6E, 0xA4, 0xE1, 0x5C, 0xA3, 0x2A, 0x30, 0x28, 0x30, 0x12, 0x06,
        0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01,
        0x00, 0x30, 0x12, 0x06, 0x05, 0x67, 0x81, 0x7F, 0x01, 0x01, 0x01, 0x01, 0xFF, 0x04, 0x06, 0x04,
        0x04, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03,
        0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xC1, 0x49, 0x85, 0x79, 0xF2, 0x2E, 0x04,
        0x20, 0xE8, 0xA4, 0x8D, 0x2D, 0xAF, 0xCD, 0xB3, 0x0A, 0xCF, 0xFF, 0xF4, 0x5D, 0x07, 0xB0, 0x0C,
        0x8D, 0x35, 0xB4, 0xE8, 0xB4, 0xD1, 0xDF, 0x8E, 0xBB, 0x02, 0x20, 0x10, 0x92, 0x68, 0x5C, 0xCF,
        0xC2, 0xCE, 0x3D, 0x04, 0xF0, 0xA7, 0xCD, 0x59, 0xAC, 0xE3, 0xF3, 0x14, 0x0A, 0x73, 0x4B, 0xBB,
        0xFB, 0x7C, 0xEE, 0x84, 0xCD, 0xE6, 0xD1, 0xD9, 0xC7, 0xDD, 0x21,

        0x30, 0x82, 0x01, 0x2D, 0x30,
        0x81, 0xD3, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x02, 0x02, 0x26, 0x00, 0x48, 0x41, 0x91,
        0x64, 0x44, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x30, 0x12,
        0x31, 0x10, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x07, 0x30, 0x30, 0x32, 0x41, 0x2D,
        0x30, 0x31, 0x30, 0x22, 0x18, 0x0F, 0x32, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x5A, 0x18, 0x0F, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32,
        0x33, 0x35, 0x39, 0x35, 0x39, 0x5A, 0x30, 0x25, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04,
        0x03, 0x0C, 0x06, 0x30, 0x30, 0x36, 0x33, 0x38, 0x36, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55,
        0x04, 0x5C, 0x04, 0x09, 0x02, 0x02, 0x26, 0x00, 0x48, 0x41, 0x91, 0x64, 0x44, 0x30, 0x39, 0x30,
        0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE,
        0x3D, 0x03, 0x01, 0x07, 0x03, 0x22, 0x00, 0x03, 0x5A, 0x4C, 0xD6, 0x1C, 0xD5, 0x87, 0xB7, 0x90,
        0x75, 0xF4, 0x5B, 0x21, 0x1F, 0xD1, 0x3B, 0x8D, 0x5D, 0x79, 0x34, 0xA6, 0x37, 0x55, 0xE0, 0x20,
        0x32, 0x15, 0x7A, 0x3F, 0x8C, 0xB8, 0x81, 0x46, 0xA3, 0x1B, 0x30, 0x19, 0x30, 0x17, 0x06, 0x05,
        0x67, 0x81, 0x7F, 0x01, 0x02, 0x01, 0x01, 0xFF, 0x04, 0x0B, 0x04, 0x09, 0x02, 0x02, 0x26, 0x00,
        0x48, 0x41, 0x91, 0x64, 0x44, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03,
        0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xAE, 0x7A, 0x54, 0x52, 0xC3, 0x53, 0x8C,
        0xA9, 0xB6, 0x44, 0xC4, 0x41, 0x73, 0x1E, 0x26, 0x01, 0x64, 0xDD, 0xB9, 0x32, 0x57, 0x38, 0xBF,
        0x96, 0x1A, 0xF6, 0x33, 0x8A, 0x97, 0x66, 0x10, 0x87, 0x02, 0x21, 0x00, 0xBE, 0x84, 0x1A, 0xDF,
        0xB7, 0x97, 0xA2, 0xDF, 0xE2, 0xE2, 0x49, 0x1B, 0xE4, 0x48, 0x3D, 0x24, 0x9C, 0x96, 0xA5, 0xB8,
        0x1E, 0x33, 0x06, 0x82, 0x52, 0x54, 0x7B, 0xB2, 0x6D, 0x73, 0x32, 0x56
};

//static uint8_t qi_auth_cr660_draft5_certificate[] =
//{
//        // Size of the chain
//        0x02, 0x4f,
//        // Root CA Hash
//        0xf0, 0x53, 0x50, 0x6d, 0xc5, 0x75, 0x99, 0x05, 0xf6, 0xa5, 0x4c, 0x98, 0x31, 0xa1, 0x5e, 0x03,
//        0x74, 0x0e, 0xa7, 0xf7, 0x08, 0x67, 0x90, 0x52, 0xdd, 0xca, 0x52, 0x85, 0x50, 0x26, 0xee, 0x05,
//        /* Manufacturer CA
//         *
//-----BEGIN CERTIFICATE-----
//MIIBHzCBx6ADAgECAgQSNKvNMAoGCCqGSM49BAMCMBExDzANBgNVBAMMBldQQ0NB
//MTAgFw03MDAxMDEwMDAwMDBaGA85OTk5MTIzMTIzNTk1OVowEjEQMA4GA1UEAwwH
//Q0FGRS0xQTA5MBMGByqGSM49AgEGCCqGSM49AwEHAyIAA6gHULXRmCEYqSk1TUqo
//MzOvf5PwKZNl0+ngmZc4lpRdoyowKDASBgNVHRMBAf8ECDAGAQH/AgEAMBIGBWeB
//fwEBAQH/BAYEBAAAAAAwCgYIKoZIzj0EAwIDRwAwRAIgM+OJcOFv19yHy1DJg7qO
//b4U0cfei0KS88/LaBg7WYWQCIF0qVuVEZnLXzSZRHxqTlsEordJcAQQuXHxSsHZE
///Zr/
//-----END CERTIFICATE-----
//         */
//        0x30, 0x82, 0x01, 0x1f, 0x30, 0x81, 0xc7, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x04, 0x12, 0x34,
//        0xab, 0xcd, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x11,
//        0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06, 0x57, 0x50, 0x43, 0x43, 0x41,
//        0x31, 0x30, 0x20, 0x17, 0x0d, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
//        0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39,
//        0x35, 0x39, 0x5a, 0x30, 0x12, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x07,
//        0x43, 0x41, 0x46, 0x45, 0x2d, 0x31, 0x41, 0x30, 0x39, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,
//        0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x22,
//        0x00, 0x03, 0xa8, 0x07, 0x50, 0xb5, 0xd1, 0x98, 0x21, 0x18, 0xa9, 0x29, 0x35, 0x4d, 0x4a, 0xa8,
//        0x33, 0x33, 0xaf, 0x7f, 0x93, 0xf0, 0x29, 0x93, 0x65, 0xd3, 0xe9, 0xe0, 0x99, 0x97, 0x38, 0x96,
//        0x94, 0x5d, 0xa3, 0x2a, 0x30, 0x28, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff,
//        0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x12, 0x06, 0x05, 0x67, 0x81,
//        0x7f, 0x01, 0x01, 0x01, 0x01, 0xff, 0x04, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0a,
//        0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02,
//        0x20, 0x33, 0xe3, 0x89, 0x70, 0xe1, 0x6f, 0xd7, 0xdc, 0x87, 0xcb, 0x50, 0xc9, 0x83, 0xba, 0x8e,
//        0x6f, 0x85, 0x34, 0x71, 0xf7, 0xa2, 0xd0, 0xa4, 0xbc, 0xf3, 0xf2, 0xda, 0x06, 0x0e, 0xd6, 0x61,
//        0x64, 0x02, 0x20, 0x5d, 0x2a, 0x56, 0xe5, 0x44, 0x66, 0x72, 0xd7, 0xcd, 0x26, 0x51, 0x1f, 0x1a,
//        0x93, 0x96, 0xc1, 0x28, 0xad, 0xd2, 0x5c, 0x01, 0x04, 0x2e, 0x5c, 0x7c, 0x52, 0xb0, 0x76, 0x44,
//        0xfd, 0x9a, 0xff,
//        /*
//         * Product Unit Certificate
//-----BEGIN CERTIFICATE-----
//MIIBCDCBsKADAgECAgQSNO8BMAoGCCqGSM49BAMCMBIxEDAOBgNVBAMMB0NBRkUt
//MUEwIBcNNzAwMTAxMDAwMDAwWhgPOTk5OTEyMzEyMzU5NTlaMBExDzANBgNVBAMM
//BjAwNjM4NjA5MBMGByqGSM49AgEGCCqGSM49AwEHAyIAAzupJ+tP7fr+GAA3HsLo
//aUVwpQPeRkPgn2q7kw+uUpc+oxMwETAPBgVngX8BAgQGBAQAAAABMAoGCCqGSM49
//BAMCA0cAMEQCIEKxacFj2rlTPKJLsEmxHqMUjjZaW5Rp055FJwyhZfUXAiA7rmN0
//5pnWad8wxsUpSHJL6lqI/gSDZtng92ZPaX2a3w==
//-----END CERTIFICATE-----
//         */
//        0x30, 0x82, 0x01, 0x08, 0x30, 0x81, 0xb0, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x04, 0x12, 0x34,
//        0xef, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x12,
//        0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x07, 0x43, 0x41, 0x46, 0x45, 0x2d,
//        0x31, 0x41, 0x30, 0x20, 0x17, 0x0d, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30,
//        0x30, 0x30, 0x5a, 0x18, 0x0f, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35,
//        0x39, 0x35, 0x39, 0x5a, 0x30, 0x11, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c,
//        0x06, 0x30, 0x30, 0x36, 0x33, 0x38, 0x36, 0x30, 0x39, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,
//        0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x22,
//        0x00, 0x03, 0x3b, 0xa9, 0x27, 0xeb, 0x4f, 0xed, 0xfa, 0xfe, 0x18, 0x00, 0x37, 0x1e, 0xc2, 0xe8,
//        0x69, 0x45, 0x70, 0xa5, 0x03, 0xde, 0x46, 0x43, 0xe0, 0x9f, 0x6a, 0xbb, 0x93, 0x0f, 0xae, 0x52,
//        0x97, 0x3e, 0xa3, 0x13, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x05, 0x67, 0x81, 0x7f, 0x01, 0x02, 0x04,
//        0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
//        0x04, 0x03, 0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x42, 0xb1, 0x69, 0xc1, 0x63, 0xda,
//        0xb9, 0x53, 0x3c, 0xa2, 0x4b, 0xb0, 0x49, 0xb1, 0x1e, 0xa3, 0x14, 0x8e, 0x36, 0x5a, 0x5b, 0x94,
//        0x69, 0xd3, 0x9e, 0x45, 0x27, 0x0c, 0xa1, 0x65, 0xf5, 0x17, 0x02, 0x20, 0x3b, 0xae, 0x63, 0x74,
//        0xe6, 0x99, 0xd6, 0x69, 0xdf, 0x30, 0xc6, 0xc5, 0x29, 0x48, 0x72, 0x4b, 0xea, 0x5a, 0x88, 0xfe,
//        0x04, 0x83, 0x66, 0xd9, 0xe0, 0xf7, 0x66, 0x4f, 0x69, 0x7d, 0x9a, 0xdf
//};

static const char qi_auth_ptmc_value[] = "CACA-1A";

/*
  This array a place to define a range based revocation list
  First 9 bytes denote start of the RSIDs to be revoked, last 9 bytes denote end of the list
  The input parameters:
  RSID Start: 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
  RSID End: 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, , 0xff, 0xff, 0xff
  Will be presented below as following:
  static const uint32_t qi_auth_revoked_rsid[][3 + 3] = {
      {0x00, 0x01020304, 0x05060708,       0xff, 0xffffffff, 0xffffffff}
  };
*/
static const uint8_t qi_auth_revoked_rsid[][9 + 9] = {
        {0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}
};

//uint8_t qi_auth_cr660_draft5_challenge[] = {
//        0x1B, 0x00, 0xA5, 0x02, 0x3B, 0x84, 0xB4, 0x6C, 0xD7, 0x10, 0x2E, 0x6F, 0x51, 0x9A, 0xF7, 0x99,
//        0x37, 0x52
//};

static const uint8_t qi_auth_cr660_draft5_test_challenge[] =
{
        0x1B, 0x00, 0x01, 0x33, 0x6C, 0x22, 0x43, 0xB8, 0xF0, 0x40, 0x8D, 0xA2, 0x01, 0x83, 0x28, 0xB5,
        0x18, 0xC6
};

//uint8_t qi_auth_cr660_draft5_challenge_auth[] = {
//        0x13, 0x11, 0x0C, 0x02, 0x17, 0xE6, 0x17, 0xF0, 0xB6, 0x44, 0x39, 0x28, 0x27, 0x8F, 0x96, 0x99,
//        0x9E, 0x69, 0xA2, 0x3A, 0x4F, 0x2C, 0x15, 0x2B, 0xDF, 0x6D, 0x6C, 0xDF, 0x66, 0xE5, 0xB8, 0x02,
//        0x82, 0xD4, 0xED, 0x21, 0x5F, 0x0D, 0xD6, 0xEF, 0x65, 0xFE, 0x25, 0x53, 0x4B, 0xA9, 0x3C, 0x21,
//        0x80, 0x4E, 0xB0, 0x14, 0xB4, 0x2E, 0xBB, 0x6D, 0x89, 0xFC, 0x69, 0x1F, 0x47, 0xE0, 0xC0, 0x16,
//        0xD6, 0x99, 0x33
//};


static const uint8_t qi_auth_cr660_draft5_test_challenge_auth[] =
{
        0x13, 0x11, 0xF8, 0x2D, 0xBB, 0xE3, 0xD3, 0x44, 0xF9, 0x29, 0x87, 0x72, 0xC2, 0x1F, 0xC1, 0x33,
        0xAE, 0x6D, 0xC3, 0x01, 0x87, 0x8A, 0x8F, 0x91, 0x08, 0x17, 0x6F, 0x68, 0xA4, 0xBB, 0xA9, 0xCE,
        0x7E, 0x84, 0x1F, 0x44, 0x53, 0x7C, 0x61, 0x80, 0x13, 0xD7, 0x17, 0x35, 0xAB, 0xC0, 0xB0, 0xFE,
        0x0E, 0x6B, 0xFF, 0xF2, 0xDE, 0x9D, 0x99, 0x5D, 0x73, 0x67, 0x34, 0x29, 0xCB, 0xCB, 0x64, 0xDE,
        0x53, 0xF9, 0xEB

};

#endif
