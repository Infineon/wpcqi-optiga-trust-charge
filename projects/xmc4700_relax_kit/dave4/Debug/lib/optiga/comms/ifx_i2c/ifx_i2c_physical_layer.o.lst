   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ifx_i2c_physical_layer.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.ifx_i2c_pl_pal_slave_addr_event_handler,"ax",%progbits
  20              	 .align 1
  21              	 .thumb
  22              	 .thumb_func
  24              	ifx_i2c_pl_pal_slave_addr_event_handler:
  25              	.LFB14:
  26              	 .file 1 "C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c/ifx_i2c_physical_layer.c"
   1:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /**
   2:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * \copyright
   3:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * MIT License
   4:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
   5:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * Copyright (c) 2020 Infineon Technologies AG
   6:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
   7:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * Permission is hereby granted, free of charge, to any person obtaining a copy
   8:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * of this software and associated documentation files (the "Software"), to deal
   9:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * in the Software without restriction, including without limitation the rights
  10:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * copies of the Software, and to permit persons to whom the Software is
  12:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * furnished to do so, subject to the following conditions:
  13:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
  14:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * The above copyright notice and this permission notice shall be included in all
  15:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * copies or substantial portions of the Software.
  16:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
  17:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  23:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * SOFTWARE
  24:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
  25:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * \endcopyright
  26:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
  27:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * \author Infineon Technologies AG
  28:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
  29:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * \file ifx_i2c_physical_layer.c
  30:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
  31:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * \brief   This file implements the APIs for physical layer of the Infineon I2C Protocol Stack libr
  32:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
  33:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * \ingroup  grIFXI2C
  34:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** *
  35:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** * @{
  36:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** */
  37:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  38:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #include "optiga/ifx_i2c/ifx_i2c_physical_layer.h"
  39:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #include "optiga/pal/pal_os_event.h"
  40:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  41:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// @cond hidden
  42:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  43:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** // Physical Layer Register addresses
  44:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_DATA                     (0x80)
  45:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_DATA_REG_LEN             (0x81)
  46:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_I2C_STATE                (0x82)
  47:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_BASE_ADDR                (0x83)
  48:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_MAX_SCL_FREQU            (0x84)
  49:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_SOFT_RESET               (0x88)
  50:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_I2C_MODE                 (0x89)
  51:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  52:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** // Physical Layer Register lengths
  53:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_LEN_I2C_STATE            (4U)
  54:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_LEN_MAX_SCL_FREQU        (4U)
  55:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_LEN_I2C_MODE             (2U)
  56:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_LEN_DATA_REG_LEN         (2U)
  57:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_LEN_SOFT_RESET           (2U)
  58:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_LEN_BASE_ADDR            (2U)
  59:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  60:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** // Physical Layer State Register masks
  61:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_I2C_STATE_RESPONSE_READY (0x40)
  62:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_I2C_STATE_SOFT_RESET     (0x08)
  63:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  64:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** // Physical Layer low level interface constants
  65:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_ACTION_READ_REGISTER         (0x01)
  66:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_ACTION_WRITE_REGISTER        (0x02)
  67:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_I2C_CMD_WRITE                (0x01)
  68:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_I2C_CMD_READ                 (0x02)
  69:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  70:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** // Physical Layer high level interface constants
  71:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_ACTION_WRITE_FRAME           (0x01)
  72:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_ACTION_READ_FRAME            (0x02)
  73:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_STATE_UNINIT                 (0x00)
  74:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_STATE_INIT                   (0x01)
  75:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_STATE_READY                  (0x02)
  76:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_STATE_DATA_AVAILABLE         (0x03)
  77:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_STATE_RXTX                   (0x04)
  78:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_STATE_SOFT_RESET             (0x05)
  79:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  80:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** //Physical Layer negotiation constants
  81:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_SET_DATA_REG_LEN        (0x11)
  82:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_GET_DATA_REG_LEN        (0x22)
  83:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_GET_FREQ_REG            (0x33)
  84:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_SET_FREQ_REG            (0x44)
  85:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_READ_FREQ               (0x55)
  86:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_VERIFY_FREQ             (0x66)
  87:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_AGREE_FREQ              (0x77)
  88:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_VERIFY_DATA_REG         (0x88)
  89:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_GET_STATUS_REG          (0x99)
  90:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_DONE                    (0xAA)
  91:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_INIT_SET_FREQ_DEFAULT        (0xBB)
  92:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  93:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** //Physical layer soft reset states
  94:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_RESET_INIT                   (0xA1)
  95:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_RESET_WRITE                  (0xA2)
  96:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_RESET_STARTUP                (0xA3)
  97:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  98:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_I2C_MODE_PERSISTANT      (0x80)
  99:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_I2C_MODE_SM_FM           (0x03)
 100:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_I2C_MODE_FM_PLUS         (0x04)
 101:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_SM_FM_MAX_FREQUENCY          (0x190)
 102:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_DEFAULT_FREQUENCY            (0x64)
 103:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_BASE_ADDR_PERSISTANT     (0x80)
 104:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_BASE_ADDR_VOLATILE       (0x00)
 105:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 106:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** // Physical Layer Base Address Register mask
 107:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define PL_REG_I2C_BASE_ADDRESS_MASK    (0x7F)
 108:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 109:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** // Setup debug log statements
 110:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #if IFX_I2C_LOG_PL == 1
 111:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define LOG_PL IFX_I2C_LOG
 112:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #else
 113:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #define LOG_PL(...) //printf(__VA_ARGS__)
 114:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** #endif
 115:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 116:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H optiga_lib_status_t g_pal_event_status;
 117:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 118:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 119:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer low level interface function
 120:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_l
 121:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer low level interface function
 122:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
 123:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                          uint8_t reg_addr,
 124:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                          uint16_t reg_len,
 125:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                          const uint8_t * p_content);
 126:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer high level interface timer callback (Status register polling)
 127:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx);
 128:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer intermediate state machine (Negotiation with slave)
 129:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx);
 130:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer intermediate state machine(Set bit rate)
 131:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate);
 132:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer intermediate state machine (soft reset)
 133:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx);
 134:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer high level interface state machine (read/write frames)
 135:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
 136:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer low level interface timer callback (I2C Nack/Busy polling)
 137:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx);
 138:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer low level guard time callback
 139:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx);
 140:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical Layer low level interface state machine (read/write registers)
 141:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event);
 142:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// Physical layer low level event handler for set slave address
 143:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t even
 144:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 145:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** /// @endcond
 146:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 147:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
 148:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 149:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Init\n");
 150:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 151:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.upper_layer_event_handler = handler;
 152:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.frame_state = PL_STATE_UNINIT;
 153:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 154:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 155:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
 156:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 157:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (TRUE == p_ctx->do_pal_init)
 158:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 159:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         // Initialize I2C driver
 160:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 161:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 162:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             return (IFX_I2C_STACK_ERROR);
 163:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 164:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 165:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Set Physical Layer internal state
 166:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 167:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 168:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         //Set the soft reset request to initial state to read register
 169:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 170:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 171:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 172:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     else
 173:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 174:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->pl.frame_state = PL_STATE_INIT;
 175:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 176:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 177:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 178:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 179:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     return (IFX_I2C_STACK_SUCCESS);
 180:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 181:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 182:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t fr
 183:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 184:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Physical Layer must be idle, set requested action
 185:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 186:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 187:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         return (IFX_I2C_STACK_ERROR);
 188:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 189:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 190:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 191:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Store reference to frame for sending it later
 192:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.p_tx_frame   = p_frame;
 193:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.tx_frame_len = frame_len;
 194:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 195:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 196:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     return (IFX_I2C_STACK_SUCCESS);
 197:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 198:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 199:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
 200:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 201:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Physical Layer must be idle, set requested action
 202:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 203:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 204:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         return (IFX_I2C_STACK_ERROR);
 205:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 206:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 207:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 208:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 209:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     return (IFX_I2C_STACK_SUCCESS);
 210:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 211:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 212:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** optiga_lib_status_t ifx_i2c_pl_write_slave_address(ifx_i2c_context_t * p_ctx, uint8_t slave_address
 213:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 214:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 215:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     upper_layer_callback_t * p_temp_upper_layer_event_handler;
 216:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 217:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     /// @cond hidden
 218:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #define PAL_WRITE_INIT_STATUS       (0x00FF)
 219:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #define ADDRESS_OFFSET              (0x02)
 220:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #define BASE_ADDRESS_REG_OFFSET     (0x00)
 221:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #define MODE_OFFSET                 (0x01)
 222:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #define POLLING_INTERVAL            (0x01)
 223:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #define DELAY_FOR_COMPLETION        (0x0A)
 224:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     /// @endcond
 225:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 226:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
 227:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //ifx i2c wrapper api for setting slave address in synchronous. hence the event handler is back
 228:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_temp_upper_layer_event_handler = (upper_layer_callback_t * )(p_ctx->p_pal_i2c_ctx->upper_laye
 229:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //since the lower level APIs are asynchronous, a temporary event handler for set slave address 
 230:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_slave_addr_event_handler;
 231:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 232:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer[BASE_ADDRESS_REG_OFFSET] = PL_REG_BASE_ADDR;
 233:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer[MODE_OFFSET] = PL_REG_BASE_ADDR_VOLATILE;
 234:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //supported base addresses are 0x00 - 0x7F. Hence 8th bit is ignored
 235:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer[ADDRESS_OFFSET] = slave_address & PL_REG_I2C_BASE_ADDRESS_MASK;
 236:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_tx_len = 1 + PL_REG_LEN_BASE_ADDR;
 237:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 238:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (PL_REG_BASE_ADDR_VOLATILE != persistent)
 239:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 240:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->pl.buffer[MODE_OFFSET] = PL_REG_BASE_ADDR_PERSISTANT;
 241:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 242:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 243:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 244:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 245:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     while (0 != p_ctx->pl.retry_counter)
 246:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 247:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         g_pal_event_status = PAL_WRITE_INIT_STATUS;
 248:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 249:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         //lint --e{534} suppress "Error handling is not required so return value is not checked"
 250:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 251:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         while (PAL_WRITE_INIT_STATUS == g_pal_event_status){};
 252:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         if (PAL_I2C_EVENT_SUCCESS == g_pal_event_status)
 253:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 254:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 255:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 256:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->pl.retry_counter--;
 257:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         pal_os_timer_delay_in_milliseconds(POLLING_INTERVAL);
 258:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 259:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 260:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (PAL_I2C_EVENT_SUCCESS == g_pal_event_status)
 261:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 262:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->pl.buffer[ADDRESS_OFFSET];
 263:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         if (PL_REG_BASE_ADDR_VOLATILE != persistent)
 264:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 265:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             p_ctx->slave_address = p_ctx->pl.buffer[ADDRESS_OFFSET];
 266:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 267:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         pal_os_timer_delay_in_milliseconds(DELAY_FOR_COMPLETION);
 268:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         status = IFX_I2C_STACK_SUCCESS;
 269:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 270:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //restoring the backed up event handler
 271:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = p_temp_upper_layer_event_handler;
 272:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 273:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     /// @cond hidden
 274:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #undef PAL_WRITE_INIT_STATUS
 275:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #undef ADDRESS_OFFSET
 276:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #undef BASE_ADDRESS_REG_OFFSET
 277:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #undef MODE_OFFSET
 278:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #undef POLLING_INTERVAL
 279:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     #undef DELAY_FOR_COMPLETION
 280:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     /// @endcond
 281:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 282:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     return (status);
 283:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 284:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 285:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_l
 286:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 287:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);
 288:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 289:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Prepare transmit buffer to write register address
 290:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer[0]     = reg_addr;
 291:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_tx_len = 1;
 292:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 293:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Set low level interface variables and start transmission
 294:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_rx_len   = reg_len;
 295:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 296:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 297:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 298:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 299:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //lint --e{534} suppress "This is the last statement of asynchronous function hence return valu
 300:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 301:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 302:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 303:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 304:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
 305:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                          uint8_t reg_addr,
 306:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                          uint16_t reg_len,
 307:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                          const uint8_t * p_content)
 308:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 309:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);
 310:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 311:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Prepare transmit buffer to write register address and content
 312:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer[0] = reg_addr;
 313:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 314:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_tx_len = 1 + reg_len;
 315:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 316:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Set Physical Layer low level interface variables and start transmission
 317:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 318:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 319:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 320:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //lint --e{534} suppress "This is the last statement of asynchronous function hence return valu
 321:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 322:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 323:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 324:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 325:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
 326:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 327:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
 328:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 329:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 330:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 331:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
 332:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 333:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t status;
 334:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     void* p_pal_ctx_upper_layer_handler;
 335:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Save upper layer context in pal
 336:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 337:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Pass context as NULL to avoid callback invocation
 338:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 339:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 340:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Restore callback
 341:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 342:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (PAL_I2C_EVENT_SUCCESS != status)
 343:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 344:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         if (0 != (p_ctx->pl.retry_counter--))
 345:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 346:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
 347:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 348:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                     ifx_i2c_pl_negotiation_event_handler,
 349:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                    ((void * )p_ctx),
 350:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                    PL_POLLING_INVERVAL_US);
 351:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             status = IFX_I2C_STACK_BUSY;
 352:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 353:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         else
 354:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 355:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****            status = IFX_I2C_STACK_ERROR;
 356:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 357:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 358:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     else
 359:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 360:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         status = IFX_I2C_STACK_SUCCESS;
 361:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 362:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 363:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     return (status);
 364:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 365:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 366:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
 367:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 368:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 369:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint8_t continue_negotiation;
 370:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 371:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint8_t i2c_mode_value[2];
 372:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) }
 373:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint16_t buffer_len = 0;
 374:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint16_t slave_frequency;
 375:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint16_t slave_frame_len;
 376:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint8_t* p_buffer = NULL;
 377:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 378:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     do
 379:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 380:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         continue_negotiation = FALSE;
 381:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         LOG_PL("[IFX-PL]: Negotiation started\n");
 382:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         switch (p_ctx->pl.negotiate_state)
 383:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 384:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Set initial frequency to PL_DEFAULT_FREQUENCY to be able to negotiate with slave
 385:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_SET_FREQ_DEFAULT:
 386:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 387:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Default frequency set to master
 388:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 389:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (IFX_I2C_STACK_SUCCESS == event)
 390:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 391:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 392:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     continue_negotiation = TRUE;
 393:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 394:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 else if (IFX_I2C_STACK_ERROR == event)
 395:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 396:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_DONE;
 397:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_buffer = NULL;
 398:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     buffer_len = 0;
 399:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callba
 400:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                            (void * )p_ctx,
 401:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                            STARTUP_TIME_MSEC);
 402:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 403:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 404:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 405:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Read the current Max frequency supported by slave
 406:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_GET_FREQ_REG:
 407:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 408:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 409:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 410:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 411:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 412:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Set the I2C mode register
 413:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_SET_FREQ_REG:
 414:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 415:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 416:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 417:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 418:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX
 419:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 420:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     //Change to FM+ mode if slave's current supported frequency is below user's req
 421:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 422:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 423:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode
 424:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 425:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_F
 426:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 427:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     //Change to SM&FM mode if slave's current supported frequency is above user's r
 428:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 429:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 430:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode
 431:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 432:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 else
 433:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 434:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 435:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     continue_negotiation = TRUE;
 436:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 437:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 438:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 439:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // After setting I2C mode register, read the slave's supported frequency
 440:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_READ_FREQ:
 441:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 442:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 443:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 444:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 445:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 446:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Verify the requested frequency and slave's supported frequency
 447:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_VERIFY_FREQ:
 448:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 449:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 450:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (p_ctx->frequency > slave_frequency)
 451:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 452:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     LOG_PL("[IFX-PL]: Unexpected frequency in MAX_SCL_FREQU\n");
 453:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_buffer = NULL;
 454:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     buffer_len = 0;
 455:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_DONE;
 456:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 457:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 else
 458:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 459:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 460:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 461:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 continue_negotiation = TRUE;
 462:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 463:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 464:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Frequency negotiated, Set frequency at master
 465:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_AGREE_FREQ:
 466:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 467:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Frequency negotiation between master and slave is complete
 468:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 469:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (IFX_I2C_STACK_SUCCESS == event)
 470:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 471:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 472:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     continue_negotiation = TRUE;
 473:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 474:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 else if (IFX_I2C_STACK_ERROR == event)
 475:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 476:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_DONE;
 477:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_buffer = NULL;
 478:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     buffer_len = 0;
 479:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 480:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 481:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 482:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Start frame length negotiation by writing the requested frame length
 483:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_SET_DATA_REG_LEN:
 484:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 485:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 486:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_f
 487:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 488:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 489:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Read the frame length to verify
 490:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_GET_DATA_REG_LEN:
 491:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 492:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 493:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 494:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 495:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 496:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Check is slave accepted the new frame length
 497:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_VERIFY_DATA_REG:
 498:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 499:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.negotiate_state = PL_INIT_DONE;
 500:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 501:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Error if slave's frame length is more than requested frame length
 502:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (p_ctx->frame_size >= slave_frame_len)
 503:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 504:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->frame_size = slave_frame_len;
 505:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     event = IFX_I2C_STACK_SUCCESS;
 506:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 507:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_buffer = NULL;
 508:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 buffer_len = 0;
 509:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 continue_negotiation = TRUE;
 510:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 511:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 512:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_INIT_DONE:
 513:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 514:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (IFX_I2C_STACK_SUCCESS == event)
 515:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 516:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.frame_state = PL_STATE_READY;
 517:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 518:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 else
 519:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 520:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.frame_state = PL_STATE_UNINIT;
 521:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 522:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Negotiation between master and slave is complete
 523:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 524:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 525:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 526:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             default:
 527:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 break;
 528:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 529:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     } while (FALSE != continue_negotiation);
 530:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 531:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 532:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 533:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
 534:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 535:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint32_t time_stamp_diff;
 536:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint32_t current_time;
 537:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint16_t frame_size;
 538:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (IFX_I2C_STACK_SUCCESS != event)
 539:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 540:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->pl.frame_state = PL_STATE_READY;
 541:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         // I2C read or write failed, report to upper layer
 542:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 543:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 544:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     else
 545:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 546:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         switch (p_ctx->pl.frame_state)
 547:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 548:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Perform soft reset
 549:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_STATE_SOFT_RESET:
 550:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 551:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_soft_reset(p_ctx);
 552:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 553:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 554:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Negotiate frame and frequency with slave
 555:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_STATE_INIT:
 556:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 557:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_negotiation_event_handler(p_ctx);
 558:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 559:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 560:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Check status of slave data
 561:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_STATE_READY:
 562:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 563:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Start polling status register
 564:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 565:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 566:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 567:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 568:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     break;
 569:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 570:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 571:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             //lint -fallthrough "For write frame, polling of i2c status register is skipped"
 572:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Do read/write frame
 573:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_STATE_DATA_AVAILABLE:
 574:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 575:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Read frame, if response is ready. Ignore busy flag
 576:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 577:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 578:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 579:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 580:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 581:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     {
 582:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         p_ctx->pl.frame_state = PL_STATE_RXTX;
 583:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 584:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     }
 585:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     else
 586:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     {
 587:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         current_time = pal_os_timer_get_time_in_milliseconds();
 588:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 589:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         if (p_ctx->dl.frame_start_time > current_time)
 590:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         {
 591:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                             time_stamp_diff = (0xFFFFFFFF + (current_time -
 592:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                p_ctx->dl.frame_start_time)) + 0x01;
 593:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         }
 594:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         // Continue polling STATUS register if retry limit is not reached
 595:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 596:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         {
 597:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                             pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 598:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                                     ifx_i2c_pl_status_poll_callback
 599:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                                    (void * )p_ctx,
 600:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                                    PL_DATA_POLLING_INVERVAL_US);
 601:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         }
 602:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         else
 603:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         {
 604:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                             p_ctx->pl.frame_state = PL_STATE_READY;
 605:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                             p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 606:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         }
 607:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     }
 608:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 609:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Write frame is slave is not busy
 610:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 611:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 612:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     // Write frame if device is not busy, otherwise wait and poll STATUS again late
 613:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.frame_state = PL_STATE_RXTX;
 614:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     ifx_i2c_pl_write_register(p_ctx,
 615:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                               PL_REG_DATA,
 616:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                               p_ctx->pl.tx_frame_len,
 617:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                               (uint8_t * )p_ctx->pl.p_tx_frame);
 618:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 619:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Continue checking the slave status register
 620:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 else
 621:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 622:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     current_time = pal_os_timer_get_time_in_milliseconds();
 623:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 624:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     if (p_ctx->dl.frame_start_time > current_time)
 625:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     {
 626:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         time_stamp_diff = (0xFFFFFFFF + (current_time -
 627:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                            p_ctx->dl.frame_start_time)) + 0x01;
 628:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     }
 629:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     // Continue polling STATUS register if retry limit is not reached
 630:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 631:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     {
 632:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 633:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                                ifx_i2c_pl_status_poll_callback,
 634:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                                (void * )p_ctx,
 635:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                                PL_DATA_POLLING_INVERVAL_US);
 636:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     }
 637:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     else
 638:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     {
 639:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         p_ctx->pl.frame_state = PL_STATE_READY;
 640:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 641:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     }
 642:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 643:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 644:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 645:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Frame reading is complete
 646:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             case PL_STATE_RXTX:
 647:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 648:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Writing/reading of frame to/from DATA register complete
 649:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.frame_state = PL_STATE_READY;
 650:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 651:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                     p_ctx->pl.buffer,
 652:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                     p_ctx->pl.buffer_rx_len);
 653:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 654:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 655:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             default:
 656:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 657:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Default condition occurred
 658:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.frame_state = PL_STATE_INIT;
 659:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 660:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 661:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 662:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 663:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 664:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 665:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 666:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
 667:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 668:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 669:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 670:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 671:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
 672:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         //lint --e{534} suppress "This is the last statement of asynchronous function hence return 
 673:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx
 674:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 675:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 676:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 677:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
 678:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         //lint --e{534} suppress "This is the last statement of asynchronous function hence return 
 679:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_
 680:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 681:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 682:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 683:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 684:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
 685:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 686:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 687:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 688:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 689:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 690:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 691:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             LOG_PL("[IFX-PL]: GT done-> Start RX\n");
 692:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 693:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             //lint --e{534} suppress "This is the last statement of asynchronous function hence ret
 694:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer
 695:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 696:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 697:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 698:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             LOG_PL("[IFX-PL]: GT done -> REG is read\n");
 699:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 700:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 701:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 702:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 703:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 704:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         LOG_PL("[IFX-PL]: GT done -> REG written\n");
 705:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 706:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 707:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 708:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 709:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
 710:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 711:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 712:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     switch (event)
 713:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 714:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         case PAL_I2C_EVENT_ERROR:
 715:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         case PAL_I2C_EVENT_BUSY:
 716:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Error event usually occurs when the device is in sleep mode and needs time to wake u
 717:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             if (p_local_ctx->pl.retry_counter--)
 718:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 719:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
 720:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 721:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                         ifx_i2c_pal_poll_callback, p_local_ctx, PL_
 722:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 723:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             else
 724:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 725:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
 726:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 727:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 728:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 729:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 730:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         case PAL_I2C_EVENT_SUCCESS:
 731:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
 732:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_
 733:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                     p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
 734:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 735:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         default:
 736:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 737:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 738:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 739:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 740:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 741:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
 742:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
 743:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint8_t i2c_mode_value[2] = {0};
 744:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     switch (p_ctx->pl.request_soft_reset)
 745:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 746:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         case PL_INIT_GET_STATUS_REG:
 747:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 748:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 749:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             //Read the status register to check if soft reset is supported
 750:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 751:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 752:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 753:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         case PL_RESET_WRITE:
 754:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 755:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             //Mask for soft reset bit(5th bit) from the 1st byte of status register
 756:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 757:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 758:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 759:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 760:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 //Write 88 register with 0 value
 761:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode
 762:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 763:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             else
 764:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 765:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 //Soft reset is not supported by the slave
 766:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.frame_state = PL_STATE_UNINIT;
 767:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 768:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 769:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 770:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 771:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         case PL_RESET_STARTUP:
 772:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 773:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 774:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i
 775:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                    (void * )p_ctx,
 776:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                    STARTUP_TIME_MSEC);
 777:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 778:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 779:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         case PL_RESET_INIT:
 780:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 781:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             p_ctx->pl.frame_state = PL_STATE_INIT;
 782:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 783:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 784:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 785:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         default:
 786:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 787:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 788:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 789:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 790:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** //lint --e{715} suppress "This is used for synchromous implementation, hence p_ctx not used"
 791:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** //lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this a
 792:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_ctx, optiga_lib_status_t event)
 793:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** {
  27              	 .loc 1 793 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	.LVL0:
 794:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     g_pal_event_status = event;
  33              	 .loc 1 794 0
  34 0000 014B     	 ldr r3,.L2
  35 0002 1980     	 strh r1,[r3]
  36 0004 7047     	 bx lr
  37              	.L3:
  38 0006 00BF     	 .align 2
  39              	.L2:
  40 0008 00000000 	 .word .LANCHOR0
  41              	 .cfi_endproc
  42              	.LFE14:
  44              	 .section .text.ifx_i2c_pl_read_register,"ax",%progbits
  45              	 .align 1
  46              	 .thumb
  47              	 .thumb_func
  49              	ifx_i2c_pl_read_register:
  50              	.LFB4:
 286:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);
  51              	 .loc 1 286 0
  52              	 .cfi_startproc
  53              	 
  54              	 
  55              	.LVL1:
  56 0000 10B5     	 push {r4,lr}
  57              	.LCFI0:
  58              	 .cfi_def_cfa_offset 8
  59              	 .cfi_offset 4,-8
  60              	 .cfi_offset 14,-4
 291:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  61              	 .loc 1 291 0
  62 0002 0124     	 movs r4,#1
 290:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_tx_len = 1;
  63              	 .loc 1 290 0
  64 0004 80F88010 	 strb r1,[r0,#128]
 286:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);
  65              	 .loc 1 286 0
  66 0008 0346     	 mov r3,r0
 294:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
  67              	 .loc 1 294 0
  68 000a A0F89821 	 strh r2,[r0,#408]
 295:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
  69              	 .loc 1 295 0
  70 000e 80F89A41 	 strb r4,[r0,#410]
 296:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
  71              	 .loc 1 296 0
  72 0012 C822     	 movs r2,#200
  73              	.LVL2:
 297:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  74              	 .loc 1 297 0
  75 0014 80F89B41 	 strb r4,[r0,#411]
 291:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  76              	 .loc 1 291 0
  77 0018 A0F89641 	 strh r4,[r0,#406]
 296:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
  78              	 .loc 1 296 0
  79 001c A0F89C21 	 strh r2,[r0,#412]
 300:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
  80              	 .loc 1 300 0
  81 0020 03F18001 	 add r1,r3,#128
  82              	.LVL3:
  83 0024 2246     	 mov r2,r4
  84 0026 0069     	 ldr r0,[r0,#16]
  85              	.LVL4:
 301:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
  86              	 .loc 1 301 0
  87 0028 BDE81040 	 pop {r4,lr}
  88              	.LCFI1:
  89              	 .cfi_restore 14
  90              	 .cfi_restore 4
  91              	 .cfi_def_cfa_offset 0
 300:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
  92              	 .loc 1 300 0
  93 002c FFF7FEBF 	 b pal_i2c_write
  94              	.LVL5:
  95              	 .cfi_endproc
  96              	.LFE4:
  98              	 .section .text.ifx_i2c_pl_status_poll_callback,"ax",%progbits
  99              	 .align 1
 100              	 .thumb
 101              	 .thumb_func
 103              	ifx_i2c_pl_status_poll_callback:
 104              	.LFB6:
 326:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
 105              	 .loc 1 326 0
 106              	 .cfi_startproc
 107              	 
 108              	 
 109              	 
 110              	.LVL6:
 328:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 111              	 .loc 1 328 0
 112 0000 8221     	 movs r1,#130
 113 0002 0422     	 movs r2,#4
 114 0004 FFF7FEBF 	 b ifx_i2c_pl_read_register
 115              	.LVL7:
 116              	 .cfi_endproc
 117              	.LFE6:
 119              	 .section .text.ifx_i2c_pl_write_register,"ax",%progbits
 120              	 .align 1
 121              	 .thumb
 122              	 .thumb_func
 124              	ifx_i2c_pl_write_register:
 125              	.LFB5:
 308:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);
 126              	 .loc 1 308 0
 127              	 .cfi_startproc
 128              	 
 129              	 
 130              	.LVL8:
 131 0000 38B5     	 push {r3,r4,r5,lr}
 132              	.LCFI2:
 133              	 .cfi_def_cfa_offset 16
 134              	 .cfi_offset 3,-16
 135              	 .cfi_offset 4,-12
 136              	 .cfi_offset 5,-8
 137              	 .cfi_offset 14,-4
 308:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);
 138              	 .loc 1 308 0
 139 0002 0446     	 mov r4,r0
 312:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 140              	 .loc 1 312 0
 141 0004 80F88010 	 strb r1,[r0,#128]
 313:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_tx_len = 1 + reg_len;
 142              	 .loc 1 313 0
 143 0008 1946     	 mov r1,r3
 144              	.LVL9:
 145 000a 8130     	 adds r0,r0,#129
 146              	.LVL10:
 308:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);
 147              	 .loc 1 308 0
 148 000c 1546     	 mov r5,r2
 313:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_tx_len = 1 + reg_len;
 149              	 .loc 1 313 0
 150 000e FFF7FEFF 	 bl memcpy
 151              	.LVL11:
 317:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 152              	 .loc 1 317 0
 153 0012 0223     	 movs r3,#2
 314:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 154              	 .loc 1 314 0
 155 0014 6A1C     	 adds r2,r5,#1
 317:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 156              	 .loc 1 317 0
 157 0016 84F89A31 	 strb r3,[r4,#410]
 318:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 158              	 .loc 1 318 0
 159 001a C823     	 movs r3,#200
 160 001c A4F89C31 	 strh r3,[r4,#412]
 314:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 161              	 .loc 1 314 0
 162 0020 92B2     	 uxth r2,r2
 319:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //lint --e{534} suppress "This is the last statement of asynchronous function hence return valu
 163              	 .loc 1 319 0
 164 0022 0123     	 movs r3,#1
 314:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 165              	 .loc 1 314 0
 166 0024 A4F89621 	 strh r2,[r4,#406]
 319:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //lint --e{534} suppress "This is the last statement of asynchronous function hence return valu
 167              	 .loc 1 319 0
 168 0028 84F89B31 	 strb r3,[r4,#411]
 321:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 169              	 .loc 1 321 0
 170 002c 2069     	 ldr r0,[r4,#16]
 171 002e 04F18001 	 add r1,r4,#128
 322:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 172              	 .loc 1 322 0
 173 0032 BDE83840 	 pop {r3,r4,r5,lr}
 174              	.LCFI3:
 175              	 .cfi_restore 14
 176              	 .cfi_restore 5
 177              	 .cfi_restore 4
 178              	 .cfi_restore 3
 179              	 .cfi_def_cfa_offset 0
 180              	.LVL12:
 321:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 181              	 .loc 1 321 0
 182 0036 FFF7FEBF 	 b pal_i2c_write
 183              	.LVL13:
 184              	 .cfi_endproc
 185              	.LFE5:
 187              	 .section .text.ifx_i2c_pal_poll_callback,"ax",%progbits
 188              	 .align 1
 189              	 .thumb
 190              	 .thumb_func
 192              	ifx_i2c_pal_poll_callback:
 193              	.LFB10:
 667:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 194              	 .loc 1 667 0
 195              	 .cfi_startproc
 196              	 
 197              	 
 198              	 
 199              	.LVL14:
 669:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 200              	 .loc 1 669 0
 201 0000 90F89B21 	 ldrb r2,[r0,#411]
 202 0004 012A     	 cmp r2,#1
 667:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 203              	 .loc 1 667 0
 204 0006 0346     	 mov r3,r0
 669:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 205              	 .loc 1 669 0
 206 0008 06D1     	 bne .L8
 207              	.LVL15:
 208              	.LBB4:
 209              	.LBB5:
 673:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 210              	 .loc 1 673 0
 211 000a 0069     	 ldr r0,[r0,#16]
 212              	.LVL16:
 213 000c B3F89621 	 ldrh r2,[r3,#406]
 214 0010 03F18001 	 add r1,r3,#128
 215 0014 FFF7FEBF 	 b pal_i2c_write
 216              	.LVL17:
 217              	.L8:
 218              	.LBE5:
 219              	.LBE4:
 675:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 220              	 .loc 1 675 0
 221 0018 022A     	 cmp r2,#2
 222 001a 06D1     	 bne .L7
 679:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 223              	 .loc 1 679 0
 224 001c 0069     	 ldr r0,[r0,#16]
 225              	.LVL18:
 226 001e B3F89821 	 ldrh r2,[r3,#408]
 227 0022 03F18001 	 add r1,r3,#128
 228 0026 FFF7FEBF 	 b pal_i2c_read
 229              	.LVL19:
 230              	.L7:
 231 002a 7047     	 bx lr
 232              	 .cfi_endproc
 233              	.LFE10:
 235              	 .section .text.ifx_i2c_pl_set_bit_rate,"ax",%progbits
 236              	 .align 1
 237              	 .thumb
 238              	 .thumb_func
 240              	ifx_i2c_pl_set_bit_rate:
 241              	.LFB7:
 332:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t status;
 242              	 .loc 1 332 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	.LVL20:
 247 0000 38B5     	 push {r3,r4,r5,lr}
 248              	.LCFI4:
 249              	 .cfi_def_cfa_offset 16
 250              	 .cfi_offset 3,-16
 251              	 .cfi_offset 4,-12
 252              	 .cfi_offset 5,-8
 253              	 .cfi_offset 14,-4
 332:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t status;
 254              	 .loc 1 332 0
 255 0002 0446     	 mov r4,r0
 336:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Pass context as NULL to avoid callback invocation
 256              	 .loc 1 336 0
 257 0004 0069     	 ldr r0,[r0,#16]
 258              	.LVL21:
 338:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 259              	 .loc 1 338 0
 260 0006 0023     	 movs r3,#0
 336:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Pass context as NULL to avoid callback invocation
 261              	 .loc 1 336 0
 262 0008 C568     	 ldr r5,[r0,#12]
 263              	.LVL22:
 338:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 264              	 .loc 1 338 0
 265 000a C360     	 str r3,[r0,#12]
 339:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Restore callback
 266              	 .loc 1 339 0
 267 000c FFF7FEFF 	 bl pal_i2c_set_bitrate
 268              	.LVL23:
 341:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (PAL_I2C_EVENT_SUCCESS != status)
 269              	 .loc 1 341 0
 270 0010 2369     	 ldr r3,[r4,#16]
 271 0012 DD60     	 str r5,[r3,#12]
 342:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 272              	 .loc 1 342 0
 273 0014 88B1     	 cbz r0,.L12
 344:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 274              	 .loc 1 344 0
 275 0016 B4F89C31 	 ldrh r3,[r4,#412]
 276 001a 5A1E     	 subs r2,r3,#1
 277 001c A4F89C21 	 strh r2,[r4,#412]
 278 0020 4BB1     	 cbz r3,.L13
 279              	.LVL24:
 280              	.LBB8:
 281              	.LBB9:
 347:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                     ifx_i2c_pl_negotiation_event_handler,
 282              	 .loc 1 347 0
 283 0022 D4F8D004 	 ldr r0,[r4,#1232]
 284              	.LVL25:
 285 0026 0549     	 ldr r1,.L17
 286 0028 2246     	 mov r2,r4
 287 002a 4FF47A73 	 mov r3,#1000
 288 002e FFF7FEFF 	 bl pal_os_event_register_callback_oneshot
 289              	.LVL26:
 290 0032 0120     	 movs r0,#1
 291 0034 38BD     	 pop {r3,r4,r5,pc}
 292              	.LVL27:
 293              	.L13:
 294              	.LBE9:
 295              	.LBE8:
 355:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 296              	 .loc 1 355 0
 297 0036 4FF48170 	 mov r0,#258
 298              	.LVL28:
 299              	.L12:
 365:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** _STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
 300              	 .loc 1 365 0
 301 003a 38BD     	 pop {r3,r4,r5,pc}
 302              	.LVL29:
 303              	.L18:
 304              	 .align 2
 305              	.L17:
 306 003c 00000000 	 .word ifx_i2c_pl_negotiation_event_handler
 307              	 .cfi_endproc
 308              	.LFE7:
 310              	 .section .text.ifx_i2c_pl_negotiation_event_handler,"ax",%progbits
 311              	 .align 1
 312              	 .thumb
 313              	 .thumb_func
 315              	ifx_i2c_pl_negotiation_event_handler:
 316              	.LFB8:
 367:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 317              	 .loc 1 367 0
 318              	 .cfi_startproc
 319              	 
 320              	 
 321              	.LVL30:
 322 0000 37B5     	 push {r0,r1,r2,r4,r5,lr}
 323              	.LCFI5:
 324              	 .cfi_def_cfa_offset 24
 325              	 .cfi_offset 4,-12
 326              	 .cfi_offset 5,-8
 327              	 .cfi_offset 14,-4
 372:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint16_t buffer_len = 0;
 328              	 .loc 1 372 0
 329 0002 8388     	 ldrh r3,[r0,#4]
 330 0004 8DF80530 	 strb r3,[sp,#5]
 331              	.LVL31:
 332 0008 1A0A     	 lsrs r2,r3,#8
 367:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 333              	 .loc 1 367 0
 334 000a 0446     	 mov r4,r0
 372:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint16_t buffer_len = 0;
 335              	 .loc 1 372 0
 336 000c 8DF80420 	 strb r2,[sp,#4]
 368:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint8_t continue_negotiation;
 337              	 .loc 1 368 0
 338 0010 4FF48171 	 mov r1,#258
 339              	.LVL32:
 340              	.L44:
 382:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 341              	 .loc 1 382 0
 342 0014 94F8AC31 	 ldrb r3,[r4,#428]
 343 0018 552B     	 cmp r3,#85
 344 001a 5CD0     	 beq .L21
 345 001c 13D8     	 bhi .L22
 346 001e 222B     	 cmp r3,#34
 347 0020 00F08280 	 beq .L23
 348 0024 0AD8     	 bhi .L24
 349 0026 112B     	 cmp r3,#17
 350 0028 40F0A180 	 bne .L19
 485:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_f
 351              	 .loc 1 485 0
 352 002c 2223     	 movs r3,#34
 353 002e 84F8AC31 	 strb r3,[r4,#428]
 486:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 354              	 .loc 1 486 0
 355 0032 2046     	 mov r0,r4
 356 0034 8121     	 movs r1,#129
 357 0036 0222     	 movs r2,#2
 358 0038 01AB     	 add r3,sp,#4
 359 003a 72E0     	 b .L49
 360              	.L24:
 382:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 361              	 .loc 1 382 0
 362 003c 332B     	 cmp r3,#51
 363 003e 26D0     	 beq .L26
 364 0040 442B     	 cmp r3,#68
 365 0042 26D0     	 beq .L27
 366 0044 93E0     	 b .L19
 367              	.L22:
 368 0046 882B     	 cmp r3,#136
 369 0048 75D0     	 beq .L28
 370 004a 04D8     	 bhi .L29
 371 004c 662B     	 cmp r3,#102
 372 004e 4BD0     	 beq .L30
 373 0050 772B     	 cmp r3,#119
 374 0052 55D0     	 beq .L31
 375 0054 8BE0     	 b .L19
 376              	.L29:
 377 0056 AA2B     	 cmp r3,#170
 378 0058 7DD0     	 beq .L32
 379 005a BB2B     	 cmp r3,#187
 380 005c 40F08780 	 bne .L19
 388:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (IFX_I2C_STACK_SUCCESS == event)
 381              	 .loc 1 388 0
 382 0060 6421     	 movs r1,#100
 383 0062 2046     	 mov r0,r4
 384 0064 FFF7FEFF 	 bl ifx_i2c_pl_set_bit_rate
 385              	.LVL33:
 389:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 386              	 .loc 1 389 0
 387 0068 0146     	 mov r1,r0
 388 006a 08B9     	 cbnz r0,.L34
 391:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     continue_negotiation = TRUE;
 389              	 .loc 1 391 0
 390 006c 3323     	 movs r3,#51
 391 006e 4EE0     	 b .L45
 392              	.L34:
 394:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 393              	 .loc 1 394 0
 394 0070 B0F5817F 	 cmp r0,#258
 395 0074 7BD1     	 bne .L19
 396:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_buffer = NULL;
 396              	 .loc 1 396 0
 397 0076 AA23     	 movs r3,#170
 398 0078 84F8AC31 	 strb r3,[r4,#428]
 399:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                            (void * )p_ctx,
 399              	 .loc 1 399 0
 400 007c D4F8D004 	 ldr r0,[r4,#1232]
 401              	.LVL34:
 402 0080 3C49     	 ldr r1,.L51
 403 0082 2246     	 mov r2,r4
 404 0084 42F6E063 	 movw r3,#12000
 405 0088 FFF7FEFF 	 bl pal_os_event_register_callback_oneshot
 406              	.LVL35:
 407 008c 6FE0     	 b .L19
 408              	.L26:
 408:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 409              	 .loc 1 408 0
 410 008e 4423     	 movs r3,#68
 411 0090 22E0     	 b .L47
 412              	.L27:
 415:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 413              	 .loc 1 415 0
 414 0092 94F88220 	 ldrb r2,[r4,#130]
 415 0096 94F88330 	 ldrb r3,[r4,#131]
 416 009a 43EA0223 	 orr r3,r3,r2,lsl#8
 417              	.LVL36:
 417:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX
 418              	 .loc 1 417 0
 419 009e 8022     	 movs r2,#128
 420 00a0 8DF80020 	 strb r2,[sp]
 418:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 421              	 .loc 1 418 0
 422 00a4 6288     	 ldrh r2,[r4,#2]
 423 00a6 B2F5C87F 	 cmp r2,#400
 424 00aa 04D9     	 bls .L37
 418:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 425              	 .loc 1 418 0 is_stmt 0 discriminator 1
 426 00ac B3F5C87F 	 cmp r3,#400
 427 00b0 0FD8     	 bhi .L38
 421:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 428              	 .loc 1 421 0 is_stmt 1
 429 00b2 0423     	 movs r3,#4
 430              	.LVL37:
 431 00b4 03E0     	 b .L50
 432              	.LVL38:
 433              	.L37:
 425:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 434              	 .loc 1 425 0 discriminator 1
 435 00b6 B3F5C87F 	 cmp r3,#400
 436 00ba 0AD9     	 bls .L38
 428:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 437              	 .loc 1 428 0
 438 00bc 0323     	 movs r3,#3
 439              	.LVL39:
 440              	.L50:
 441 00be 8DF80130 	 strb r3,[sp,#1]
 429:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode
 442              	 .loc 1 429 0
 443 00c2 5523     	 movs r3,#85
 444 00c4 84F8AC31 	 strb r3,[r4,#428]
 430:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 445              	 .loc 1 430 0
 446 00c8 2046     	 mov r0,r4
 447 00ca 8921     	 movs r1,#137
 448 00cc 0222     	 movs r2,#2
 449 00ce 6B46     	 mov r3,sp
 450 00d0 27E0     	 b .L49
 451              	.LVL40:
 452              	.L38:
 434:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     continue_negotiation = TRUE;
 453              	 .loc 1 434 0
 454 00d2 6623     	 movs r3,#102
 455              	.LVL41:
 456 00d4 1BE0     	 b .L45
 457              	.LVL42:
 458              	.L21:
 442:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 459              	 .loc 1 442 0
 460 00d6 6623     	 movs r3,#102
 461              	.L47:
 462 00d8 84F8AC31 	 strb r3,[r4,#428]
 443:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 463              	 .loc 1 443 0
 464 00dc 2046     	 mov r0,r4
 465 00de 8421     	 movs r1,#132
 466 00e0 0422     	 movs r2,#4
 467              	.LVL43:
 468              	.L48:
 469 00e2 FFF7FEFF 	 bl ifx_i2c_pl_read_register
 470              	.LVL44:
 445:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Verify the requested frequency and slave's supported frequency
 471              	 .loc 1 445 0
 472 00e6 42E0     	 b .L19
 473              	.L30:
 474              	.LVL45:
 449:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (p_ctx->frequency > slave_frequency)
 475              	 .loc 1 449 0
 476 00e8 94F88200 	 ldrb r0,[r4,#130]
 477 00ec 94F88330 	 ldrb r3,[r4,#131]
 450:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 478              	 .loc 1 450 0
 479 00f0 6288     	 ldrh r2,[r4,#2]
 480 00f2 43EA0023 	 orr r3,r3,r0,lsl#8
 481 00f6 9A42     	 cmp r2,r3
 455:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 482              	 .loc 1 455 0
 483 00f8 8CBF     	 ite hi
 484 00fa AA23     	 movhi r3,#170
 459:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 485              	 .loc 1 459 0
 486 00fc 7723     	 movls r3,#119
 487 00fe 06E0     	 b .L45
 488              	.LVL46:
 489              	.L31:
 468:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (IFX_I2C_STACK_SUCCESS == event)
 490              	 .loc 1 468 0
 491 0100 6188     	 ldrh r1,[r4,#2]
 492 0102 2046     	 mov r0,r4
 493 0104 FFF7FEFF 	 bl ifx_i2c_pl_set_bit_rate
 494              	.LVL47:
 469:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 495              	 .loc 1 469 0
 496 0108 0146     	 mov r1,r0
 497 010a 18B9     	 cbnz r0,.L40
 471:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     continue_negotiation = TRUE;
 498              	 .loc 1 471 0
 499 010c 1123     	 movs r3,#17
 500              	.LVL48:
 501              	.L45:
 502 010e 84F8AC31 	 strb r3,[r4,#428]
 503              	.LVL49:
 504 0112 7FE7     	 b .L44
 505              	.LVL50:
 506              	.L40:
 474:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 507              	 .loc 1 474 0
 508 0114 B0F5817F 	 cmp r0,#258
 509 0118 29D1     	 bne .L19
 476:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     p_buffer = NULL;
 510              	 .loc 1 476 0
 511 011a AA23     	 movs r3,#170
 512 011c 84F8AC31 	 strb r3,[r4,#428]
 513 0120 25E0     	 b .L19
 514              	.LVL51:
 515              	.L49:
 486:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 516              	 .loc 1 486 0
 517 0122 FFF7FEFF 	 bl ifx_i2c_pl_write_register
 518              	.LVL52:
 488:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             // Read the frame length to verify
 519              	 .loc 1 488 0
 520 0126 22E0     	 b .L19
 521              	.L23:
 492:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 522              	 .loc 1 492 0
 523 0128 8823     	 movs r3,#136
 524 012a 84F8AC31 	 strb r3,[r4,#428]
 493:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 525              	 .loc 1 493 0
 526 012e 2046     	 mov r0,r4
 527 0130 8121     	 movs r1,#129
 528 0132 0222     	 movs r2,#2
 529 0134 D5E7     	 b .L48
 530              	.L28:
 499:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 531              	 .loc 1 499 0
 532 0136 AA23     	 movs r3,#170
 500:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Error if slave's frame length is more than requested frame length
 533              	 .loc 1 500 0
 534 0138 94F88020 	 ldrb r2,[r4,#128]
 499:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 535              	 .loc 1 499 0
 536 013c 84F8AC31 	 strb r3,[r4,#428]
 500:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 // Error if slave's frame length is more than requested frame length
 537              	 .loc 1 500 0
 538 0140 94F88130 	 ldrb r3,[r4,#129]
 539 0144 43EA0223 	 orr r3,r3,r2,lsl#8
 540              	.LVL53:
 502:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 541              	 .loc 1 502 0
 542 0148 A288     	 ldrh r2,[r4,#4]
 543 014a 9A42     	 cmp r2,r3
 544 014c FFF462AF 	 bcc .L44
 504:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     event = IFX_I2C_STACK_SUCCESS;
 545              	 .loc 1 504 0
 546 0150 A380     	 strh r3,[r4,#4]
 547              	.LVL54:
 505:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 548              	 .loc 1 505 0
 549 0152 0021     	 movs r1,#0
 550              	.LVL55:
 551 0154 5EE7     	 b .L44
 552              	.LVL56:
 553              	.L32:
 514:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 554              	 .loc 1 514 0
 555 0156 09B9     	 cbnz r1,.L42
 516:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 556              	 .loc 1 516 0
 557 0158 0223     	 movs r3,#2
 558 015a 00E0     	 b .L46
 559              	.L42:
 520:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 560              	 .loc 1 520 0
 561 015c 0023     	 movs r3,#0
 562              	.L46:
 523:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 563              	 .loc 1 523 0
 564 015e 0022     	 movs r2,#0
 520:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 }
 565              	 .loc 1 520 0
 566 0160 84F89F31 	 strb r3,[r4,#415]
 523:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 567              	 .loc 1 523 0
 568 0164 D4F8A851 	 ldr r5,[r4,#424]
 569 0168 2046     	 mov r0,r4
 570 016a 1346     	 mov r3,r2
 571 016c A847     	 blx r5
 572              	.LVL57:
 573              	.L19:
 530:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 574              	 .loc 1 530 0
 575 016e 03B0     	 add sp,sp,#12
 576              	.LCFI6:
 577              	 .cfi_def_cfa_offset 12
 578              	 
 579 0170 30BD     	 pop {r4,r5,pc}
 580              	.LVL58:
 581              	.L52:
 582 0172 00BF     	 .align 2
 583              	.L51:
 584 0174 00000000 	 .word ifx_i2c_pl_negotiation_event_handler
 585              	 .cfi_endproc
 586              	.LFE8:
 588              	 .section .text.ifx_i2c_pl_frame_event_handler,"ax",%progbits
 589              	 .align 1
 590              	 .thumb
 591              	 .thumb_func
 593              	ifx_i2c_pl_frame_event_handler:
 594              	.LFB9:
 534:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint32_t time_stamp_diff;
 595              	 .loc 1 534 0
 596              	 .cfi_startproc
 597              	 
 598              	 
 599              	.LVL59:
 600 0000 70B5     	 push {r4,r5,r6,lr}
 601              	.LCFI7:
 602              	 .cfi_def_cfa_offset 16
 603              	 .cfi_offset 4,-16
 604              	 .cfi_offset 5,-12
 605              	 .cfi_offset 6,-8
 606              	 .cfi_offset 14,-4
 534:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint32_t time_stamp_diff;
 607              	 .loc 1 534 0
 608 0002 0446     	 mov r4,r0
 538:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 609              	 .loc 1 538 0
 610 0004 41B1     	 cbz r1,.L54
 542:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 611              	 .loc 1 542 0
 612 0006 D0F8A841 	 ldr r4,[r0,#424]
 540:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         // I2C read or write failed, report to upper layer
 613              	 .loc 1 540 0
 614 000a 0223     	 movs r3,#2
 542:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 615              	 .loc 1 542 0
 616 000c 0022     	 movs r2,#0
 540:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         // I2C read or write failed, report to upper layer
 617              	 .loc 1 540 0
 618 000e 80F89F31 	 strb r3,[r0,#415]
 542:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 619              	 .loc 1 542 0
 620 0012 A446     	 mov ip,r4
 621 0014 1346     	 mov r3,r2
 622 0016 6EE0     	 b .L73
 623              	.L54:
 546:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 624              	 .loc 1 546 0
 625 0018 90F89F31 	 ldrb r3,[r0,#415]
 626 001c 013B     	 subs r3,r3,#1
 627 001e 042B     	 cmp r3,#4
 628 0020 5ED8     	 bhi .L55
 629 0022 DFE803F0 	 tbb [pc,r3]
 630              	.L57:
 631 0026 07       	 .byte (.L56-.L57)/2
 632 0027 0B       	 .byte (.L58-.L57)/2
 633 0028 15       	 .byte (.L59-.L57)/2
 634 0029 52       	 .byte (.L60-.L57)/2
 635 002a 03       	 .byte (.L61-.L57)/2
 636 002b 00       	 .p2align 1
 637              	.L61:
 664:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 638              	 .loc 1 664 0
 639 002c BDE87040 	 pop {r4,r5,r6,lr}
 640              	.LCFI8:
 641              	 .cfi_remember_state
 642              	 .cfi_restore 14
 643              	 .cfi_restore 6
 644              	 .cfi_restore 5
 645              	 .cfi_restore 4
 646              	 .cfi_def_cfa_offset 0
 551:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 647              	 .loc 1 551 0
 648 0030 FFF7FEBF 	 b ifx_i2c_pl_soft_reset
 649              	.LVL60:
 650              	.L56:
 651              	.LCFI9:
 652              	 .cfi_restore_state
 664:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 653              	 .loc 1 664 0
 654 0034 BDE87040 	 pop {r4,r5,r6,lr}
 655              	.LCFI10:
 656              	 .cfi_remember_state
 657              	 .cfi_restore 14
 658              	 .cfi_restore 6
 659              	 .cfi_restore 5
 660              	 .cfi_restore 4
 661              	 .cfi_def_cfa_offset 0
 557:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 662              	 .loc 1 557 0
 663 0038 FFF7FEBF 	 b ifx_i2c_pl_negotiation_event_handler
 664              	.LVL61:
 665              	.L58:
 666              	.LCFI11:
 667              	 .cfi_restore_state
 564:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 668              	 .loc 1 564 0
 669 003c 0323     	 movs r3,#3
 670 003e 80F89F31 	 strb r3,[r0,#415]
 565:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 671              	 .loc 1 565 0
 672 0042 90F89E31 	 ldrb r3,[r0,#414]
 673 0046 022B     	 cmp r3,#2
 674 0048 02D1     	 bne .L59
 567:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     break;
 675              	 .loc 1 567 0
 676 004a 8221     	 movs r1,#130
 677              	.LVL62:
 678 004c 0422     	 movs r2,#4
 679 004e 16E0     	 b .L76
 680              	.LVL63:
 681              	.L59:
 576:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 682              	 .loc 1 576 0
 683 0050 94F89E31 	 ldrb r3,[r4,#414]
 684 0054 022B     	 cmp r3,#2
 685 0056 16D1     	 bne .L62
 577:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 686              	 .loc 1 577 0
 687 0058 94F88030 	 ldrb r3,[r4,#128]
 688 005c 5B06     	 lsls r3,r3,#25
 689 005e 21D5     	 bpl .L63
 579:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 690              	 .loc 1 579 0
 691 0060 94F88220 	 ldrb r2,[r4,#130]
 692 0064 94F88330 	 ldrb r3,[r4,#131]
 693              	.LVL64:
 580:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     {
 694              	 .loc 1 580 0
 695 0068 53EA0222 	 orrs r2,r3,r2,lsl#8
 696              	.LVL65:
 697 006c 1AD0     	 beq .L63
 580:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     {
 698              	 .loc 1 580 0 is_stmt 0 discriminator 1
 699 006e A388     	 ldrh r3,[r4,#4]
 700              	.LVL66:
 701 0070 9342     	 cmp r3,r2
 702 0072 17D3     	 bcc .L63
 582:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 703              	 .loc 1 582 0 is_stmt 1
 704 0074 0423     	 movs r3,#4
 705 0076 84F89F31 	 strb r3,[r4,#415]
 583:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     }
 706              	 .loc 1 583 0
 707 007a 2046     	 mov r0,r4
 708              	.LVL67:
 709 007c 8021     	 movs r1,#128
 710              	.LVL68:
 711              	.L76:
 664:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 712              	 .loc 1 664 0
 713 007e BDE87040 	 pop {r4,r5,r6,lr}
 714              	.LCFI12:
 715              	 .cfi_remember_state
 716              	 .cfi_restore 14
 717              	 .cfi_restore 6
 718              	 .cfi_restore 5
 719              	 .cfi_restore 4
 720              	 .cfi_def_cfa_offset 0
 583:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     }
 721              	 .loc 1 583 0
 722 0082 FFF7FEBF 	 b ifx_i2c_pl_read_register
 723              	.LVL69:
 724              	.L62:
 725              	.LCFI13:
 726              	 .cfi_restore_state
 610:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 {
 727              	 .loc 1 610 0
 728 0086 012B     	 cmp r3,#1
 729 0088 0CD1     	 bne .L63
 613:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     ifx_i2c_pl_write_register(p_ctx,
 730              	 .loc 1 613 0
 731 008a 0423     	 movs r3,#4
 732 008c 84F89F31 	 strb r3,[r4,#415]
 614:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                               PL_REG_DATA,
 733              	 .loc 1 614 0
 734 0090 2046     	 mov r0,r4
 735              	.LVL70:
 736 0092 B4F8A421 	 ldrh r2,[r4,#420]
 737 0096 D4F8A031 	 ldr r3,[r4,#416]
 738 009a 8021     	 movs r1,#128
 739              	.LVL71:
 664:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 740              	 .loc 1 664 0
 741 009c BDE87040 	 pop {r4,r5,r6,lr}
 742              	.LCFI14:
 743              	 .cfi_remember_state
 744              	 .cfi_restore 14
 745              	 .cfi_restore 6
 746              	 .cfi_restore 5
 747              	 .cfi_restore 4
 748              	 .cfi_def_cfa_offset 0
 749              	.LVL72:
 614:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                               PL_REG_DATA,
 750              	 .loc 1 614 0
 751 00a0 FFF7FEBF 	 b ifx_i2c_pl_write_register
 752              	.LVL73:
 753              	.L63:
 754              	.LCFI15:
 755              	 .cfi_restore_state
 622:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 756              	 .loc 1 622 0
 757 00a4 FFF7FEFF 	 bl pal_os_timer_get_time_in_milliseconds
 758              	.LVL74:
 623:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     if (p_ctx->dl.frame_start_time > current_time)
 759              	 .loc 1 623 0
 760 00a8 A36F     	 ldr r3,[r4,#120]
 761 00aa C01A     	 subs r0,r0,r3
 762              	.LVL75:
 630:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                     {
 763              	 .loc 1 630 0
 764 00ac A36E     	 ldr r3,[r4,#104]
 765 00ae 9842     	 cmp r0,r3
 766 00b0 09D2     	 bcs .L66
 632:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                                ifx_i2c_pl_status_poll_callback,
 767              	 .loc 1 632 0
 768 00b2 D4F8D004 	 ldr r0,[r4,#1232]
 769              	.LVL76:
 770 00b6 1149     	 ldr r1,.L79
 771 00b8 2246     	 mov r2,r4
 772 00ba 41F28833 	 movw r3,#5000
 664:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 773              	 .loc 1 664 0
 774 00be BDE87040 	 pop {r4,r5,r6,lr}
 775              	.LCFI16:
 776              	 .cfi_remember_state
 777              	 .cfi_restore 14
 778              	 .cfi_restore 6
 779              	 .cfi_restore 5
 780              	 .cfi_restore 4
 781              	 .cfi_def_cfa_offset 0
 782              	.LVL77:
 632:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                                ifx_i2c_pl_status_poll_callback,
 783              	 .loc 1 632 0
 784 00c2 FFF7FEBF 	 b pal_os_event_register_callback_oneshot
 785              	.LVL78:
 786              	.L66:
 787              	.LCFI17:
 788              	 .cfi_restore_state
 639:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                         p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 789              	 .loc 1 639 0
 790 00c6 0223     	 movs r3,#2
 791 00c8 0BE0     	 b .L75
 792              	.LVL79:
 793              	.L60:
 649:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 794              	 .loc 1 649 0
 795 00ca 0223     	 movs r3,#2
 796 00cc 80F89F31 	 strb r3,[r0,#415]
 650:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                     p_ctx->pl.buffer,
 797              	 .loc 1 650 0
 798 00d0 D0F8A851 	 ldr r5,[r0,#424]
 799 00d4 B0F89831 	 ldrh r3,[r0,#408]
 800 00d8 0021     	 movs r1,#0
 801              	.LVL80:
 802 00da 00F18002 	 add r2,r0,#128
 803 00de 09E0     	 b .L74
 804              	.LVL81:
 805              	.L55:
 658:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 806              	 .loc 1 658 0
 807 00e0 0123     	 movs r3,#1
 808              	.LVL82:
 809              	.L75:
 659:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 810              	 .loc 1 659 0
 811 00e2 0022     	 movs r2,#0
 812 00e4 D4F8A851 	 ldr r5,[r4,#424]
 658:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 813              	 .loc 1 658 0
 814 00e8 84F89F31 	 strb r3,[r4,#415]
 659:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 815              	 .loc 1 659 0
 816 00ec 2046     	 mov r0,r4
 817 00ee 4FF48171 	 mov r1,#258
 818 00f2 1346     	 mov r3,r2
 819              	.LVL83:
 820              	.L74:
 821 00f4 AC46     	 mov ip,r5
 822              	.L73:
 664:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 823              	 .loc 1 664 0
 824 00f6 BDE87040 	 pop {r4,r5,r6,lr}
 825              	.LCFI18:
 826              	 .cfi_restore 14
 827              	 .cfi_restore 6
 828              	 .cfi_restore 5
 829              	 .cfi_restore 4
 830              	 .cfi_def_cfa_offset 0
 659:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 831              	 .loc 1 659 0
 832 00fa 6047     	 bx ip
 833              	.LVL84:
 834              	.L80:
 835              	 .align 2
 836              	.L79:
 837 00fc 00000000 	 .word ifx_i2c_pl_status_poll_callback
 838              	 .cfi_endproc
 839              	.LFE9:
 841              	 .section .text.ifx_i2c_pl_soft_reset,"ax",%progbits
 842              	 .align 1
 843              	 .thumb
 844              	 .thumb_func
 846              	ifx_i2c_pl_soft_reset:
 847              	.LFB13:
 742:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint8_t i2c_mode_value[2] = {0};
 848              	 .loc 1 742 0
 849              	 .cfi_startproc
 850              	 
 851              	 
 852              	.LVL85:
 853 0000 07B5     	 push {r0,r1,r2,lr}
 854              	.LCFI19:
 855              	 .cfi_def_cfa_offset 16
 856              	 .cfi_offset 14,-4
 743:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     switch (p_ctx->pl.request_soft_reset)
 857              	 .loc 1 743 0
 858 0002 0023     	 movs r3,#0
 859 0004 ADF80430 	 strh r3,[sp,#4]
 744:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 860              	 .loc 1 744 0
 861 0008 90F8AD31 	 ldrb r3,[r0,#429]
 862 000c 993B     	 subs r3,r3,#153
 742:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     uint8_t i2c_mode_value[2] = {0};
 863              	 .loc 1 742 0
 864 000e 0246     	 mov r2,r0
 744:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 865              	 .loc 1 744 0
 866 0010 0A2B     	 cmp r3,#10
 867 0012 37D8     	 bhi .L81
 868 0014 DFE803F0 	 tbb [pc,r3]
 869              	.L84:
 870 0018 06       	 .byte (.L83-.L84)/2
 871 0019 36       	 .byte (.L81-.L84)/2
 872 001a 36       	 .byte (.L81-.L84)/2
 873 001b 36       	 .byte (.L81-.L84)/2
 874 001c 36       	 .byte (.L81-.L84)/2
 875 001d 36       	 .byte (.L81-.L84)/2
 876 001e 36       	 .byte (.L81-.L84)/2
 877 001f 36       	 .byte (.L81-.L84)/2
 878 0020 30       	 .byte (.L85-.L84)/2
 879 0021 0E       	 .byte (.L86-.L84)/2
 880 0022 25       	 .byte (.L87-.L84)/2
 881 0023 00       	 .p2align 1
 882              	.L83:
 748:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             //Read the status register to check if soft reset is supported
 883              	 .loc 1 748 0
 884 0024 A223     	 movs r3,#162
 885 0026 80F8AD31 	 strb r3,[r0,#429]
 750:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 886              	 .loc 1 750 0
 887 002a 8221     	 movs r1,#130
 888 002c 0422     	 movs r2,#4
 889 002e FFF7FEFF 	 bl ifx_i2c_pl_read_register
 890              	.LVL86:
 751:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 891              	 .loc 1 751 0
 892 0032 27E0     	 b .L81
 893              	.LVL87:
 894              	.L86:
 756:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 895              	 .loc 1 756 0
 896 0034 90F88030 	 ldrb r3,[r0,#128]
 897 0038 03F00803 	 and r3,r3,#8
 898 003c DBB2     	 uxtb r3,r3
 899 003e 80F88030 	 strb r3,[r0,#128]
 757:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 900              	 .loc 1 757 0
 901 0042 43B1     	 cbz r3,.L88
 759:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 //Write 88 register with 0 value
 902              	 .loc 1 759 0
 903 0044 A323     	 movs r3,#163
 904 0046 80F8AD31 	 strb r3,[r0,#429]
 761:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 905              	 .loc 1 761 0
 906 004a 8821     	 movs r1,#136
 907 004c 0222     	 movs r2,#2
 908 004e 01AB     	 add r3,sp,#4
 909 0050 FFF7FEFF 	 bl ifx_i2c_pl_write_register
 910              	.LVL88:
 911 0054 16E0     	 b .L81
 912              	.LVL89:
 913              	.L88:
 766:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                 ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 914              	 .loc 1 766 0
 915 0056 0023     	 movs r3,#0
 916 0058 80F89F31 	 strb r3,[r0,#415]
 767:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 917              	 .loc 1 767 0
 918 005c 4FF48171 	 mov r1,#258
 919 0060 0EE0     	 b .L89
 920              	.L87:
 773:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i
 921              	 .loc 1 773 0
 922 0062 A123     	 movs r3,#161
 923 0064 80F8AD31 	 strb r3,[r0,#429]
 774:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                    (void * )p_ctx,
 924              	 .loc 1 774 0
 925 0068 0849     	 ldr r1,.L90
 926 006a D0F8D004 	 ldr r0,[r0,#1232]
 927              	.LVL90:
 928 006e 42F6E063 	 movw r3,#12000
 929 0072 FFF7FEFF 	 bl pal_os_event_register_callback_oneshot
 930              	.LVL91:
 777:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 931              	 .loc 1 777 0
 932 0076 05E0     	 b .L81
 933              	.LVL92:
 934              	.L85:
 781:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 935              	 .loc 1 781 0
 936 0078 0123     	 movs r3,#1
 937 007a 80F89F31 	 strb r3,[r0,#415]
 782:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             break;
 938              	 .loc 1 782 0
 939 007e 0021     	 movs r1,#0
 940              	.L89:
 941 0080 FFF7FEFF 	 bl ifx_i2c_pl_frame_event_handler
 942              	.LVL93:
 943              	.L81:
 788:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 944              	 .loc 1 788 0
 945 0084 03B0     	 add sp,sp,#12
 946              	.LCFI20:
 947              	 .cfi_def_cfa_offset 4
 948              	 
 949 0086 5DF804FB 	 ldr pc,[sp],#4
 950              	.L91:
 951 008a 00BF     	 .align 2
 952              	.L90:
 953 008c 00000000 	 .word ifx_i2c_pl_soft_reset
 954              	 .cfi_endproc
 955              	.LFE13:
 957              	 .section .text.ifx_i2c_pl_pal_event_handler,"ax",%progbits
 958              	 .align 1
 959              	 .thumb
 960              	 .thumb_func
 962              	ifx_i2c_pl_pal_event_handler:
 963              	.LFB12:
 710:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 964              	 .loc 1 710 0
 965              	 .cfi_startproc
 966              	 
 967              	 
 968              	 
 969              	.LVL94:
 710:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 970              	 .loc 1 710 0
 971 0000 0246     	 mov r2,r0
 972              	.LVL95:
 712:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 973              	 .loc 1 712 0
 974 0002 89B1     	 cbz r1,.L94
 975 0004 0229     	 cmp r1,#2
 976 0006 15D8     	 bhi .L92
 717:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             {
 977              	 .loc 1 717 0
 978 0008 B0F89C31 	 ldrh r3,[r0,#412]
 979 000c 591E     	 subs r1,r3,#1
 980              	.LVL96:
 981 000e A0F89C11 	 strh r1,[r0,#412]
 982 0012 2BB1     	 cbz r3,.L96
 983              	.LVL97:
 984              	.LBB12:
 985              	.LBB13:
 720:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                         ifx_i2c_pal_poll_callback, p_local_ctx, PL_
 986              	 .loc 1 720 0
 987 0014 D0F8D004 	 ldr r0,[r0,#1232]
 988              	.LVL98:
 989 0018 0749     	 ldr r1,.L98
 990 001a 4FF47A73 	 mov r3,#1000
 991 001e 07E0     	 b .L97
 992              	.LVL99:
 993              	.L96:
 994              	.LBE13:
 995              	.LBE12:
 726:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             }
 996              	 .loc 1 726 0
 997 0020 4FF48371 	 mov r1,#262
 998 0024 FFF7FEBF 	 b ifx_i2c_pl_frame_event_handler
 999              	.LVL100:
 1000              	.L94:
 732:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****                                                     p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
 1001              	 .loc 1 732 0
 1002 0028 D0F8D004 	 ldr r0,[r0,#1232]
 1003              	.LVL101:
 1004 002c 0349     	 ldr r1,.L98+4
 1005              	.LVL102:
 1006 002e 3223     	 movs r3,#50
 1007              	.L97:
 1008 0030 FFF7FEBF 	 b pal_os_event_register_callback_oneshot
 1009              	.LVL103:
 1010              	.L92:
 1011 0034 7047     	 bx lr
 1012              	.L99:
 1013 0036 00BF     	 .align 2
 1014              	.L98:
 1015 0038 00000000 	 .word ifx_i2c_pal_poll_callback
 1016 003c 00000000 	 .word ifx_i2c_pl_guard_time_callback
 1017              	 .cfi_endproc
 1018              	.LFE12:
 1020              	 .section .text.ifx_i2c_pl_guard_time_callback,"ax",%progbits
 1021              	 .align 1
 1022              	 .thumb
 1023              	 .thumb_func
 1025              	ifx_i2c_pl_guard_time_callback:
 1026              	.LFB11:
 685:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 1027              	 .loc 1 685 0
 1028              	 .cfi_startproc
 1029              	 
 1030              	 
 1031              	 
 1032              	.LVL104:
 687:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1033              	 .loc 1 687 0
 1034 0000 90F89A21 	 ldrb r2,[r0,#410]
 1035 0004 012A     	 cmp r2,#1
 685:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 1036              	 .loc 1 685 0
 1037 0006 0346     	 mov r3,r0
 687:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1038              	 .loc 1 687 0
 1039 0008 0DD1     	 bne .L102
 689:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 1040              	 .loc 1 689 0
 1041 000a 90F89B21 	 ldrb r2,[r0,#411]
 1042 000e 012A     	 cmp r2,#1
 1043 0010 09D1     	 bne .L102
 1044              	.LVL105:
 1045              	.LBB16:
 1046              	.LBB17:
 692:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****             //lint --e{534} suppress "This is the last statement of asynchronous function hence ret
 1047              	 .loc 1 692 0
 1048 0012 0222     	 movs r2,#2
 1049 0014 80F89B21 	 strb r2,[r0,#411]
 694:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 1050              	 .loc 1 694 0
 1051 0018 03F18001 	 add r1,r3,#128
 1052 001c 0069     	 ldr r0,[r0,#16]
 1053              	.LVL106:
 1054 001e B3F89821 	 ldrh r2,[r3,#408]
 1055 0022 FFF7FEBF 	 b pal_i2c_read
 1056              	.LVL107:
 1057              	.L102:
 1058              	.LBE17:
 1059              	.LBE16:
 696:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 1060              	 .loc 1 696 0
 1061 0026 022A     	 cmp r2,#2
 1062 0028 03D1     	 bne .L100
 699:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 1063              	 .loc 1 699 0
 1064 002a 1846     	 mov r0,r3
 1065              	.LVL108:
 1066 002c 0021     	 movs r1,#0
 1067 002e FFF7FEBF 	 b ifx_i2c_pl_frame_event_handler
 1068              	.LVL109:
 1069              	.L100:
 1070 0032 7047     	 bx lr
 1071              	 .cfi_endproc
 1072              	.LFE11:
 1074              	 .section .text.ifx_i2c_pl_init,"ax",%progbits
 1075              	 .align 1
 1076              	 .global ifx_i2c_pl_init
 1077              	 .thumb
 1078              	 .thumb_func
 1080              	ifx_i2c_pl_init:
 1081              	.LFB0:
 148:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Init\n");
 1082              	 .loc 1 148 0
 1083              	 .cfi_startproc
 1084              	 
 1085              	 
 1086              	.LVL110:
 1087 0000 10B5     	 push {r4,lr}
 1088              	.LCFI21:
 1089              	 .cfi_def_cfa_offset 8
 1090              	 .cfi_offset 4,-8
 1091              	 .cfi_offset 14,-4
 152:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 1092              	 .loc 1 152 0
 1093 0002 0023     	 movs r3,#0
 1094 0004 80F89F31 	 strb r3,[r0,#415]
 153:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 1095              	 .loc 1 153 0
 1096 0008 BB23     	 movs r3,#187
 1097 000a 80F8AC31 	 strb r3,[r0,#428]
 154:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
 1098              	 .loc 1 154 0
 1099 000e 0369     	 ldr r3,[r0,#16]
 1100 0010 0278     	 ldrb r2,[r0]
 151:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.frame_state = PL_STATE_UNINIT;
 1101              	 .loc 1 151 0
 1102 0012 C0F8A811 	 str r1,[r0,#424]
 154:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
 1103              	 .loc 1 154 0
 1104 0016 1A71     	 strb r2,[r3,#4]
 148:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     LOG_PL("[IFX-PL]: Init\n");
 1105              	 .loc 1 148 0
 1106 0018 0446     	 mov r4,r0
 155:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 1107              	 .loc 1 155 0
 1108 001a 0069     	 ldr r0,[r0,#16]
 1109              	.LVL111:
 1110 001c 104B     	 ldr r3,.L118
 1111 001e C360     	 str r3,[r0,#12]
 156:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     if (TRUE == p_ctx->do_pal_init)
 1112              	 .loc 1 156 0
 1113 0020 C823     	 movs r3,#200
 1114 0022 A4F89C31 	 strh r3,[r4,#412]
 157:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1115              	 .loc 1 157 0
 1116 0026 94F82F30 	 ldrb r3,[r4,#47]
 1117 002a 012B     	 cmp r3,#1
 1118 002c 08D0     	 beq .L109
 1119              	.LVL112:
 1120              	.L113:
 166:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1121              	 .loc 1 166 0
 1122 002e 94F8AD31 	 ldrb r3,[r4,#429]
 1123 0032 012B     	 cmp r3,#1
 1124 0034 0BD1     	 bne .L116
 169:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 1125              	 .loc 1 169 0
 1126 0036 9923     	 movs r3,#153
 1127 0038 84F8AD31 	 strb r3,[r4,#429]
 170:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 1128              	 .loc 1 170 0
 1129 003c 0523     	 movs r3,#5
 1130 003e 07E0     	 b .L117
 1131              	.LVL113:
 1132              	.L109:
 160:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 1133              	 .loc 1 160 0
 1134 0040 FFF7FEFF 	 bl pal_i2c_init
 1135              	.LVL114:
 1136 0044 0028     	 cmp r0,#0
 1137 0046 F2D0     	 beq .L113
 162:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 1138              	 .loc 1 162 0
 1139 0048 4FF48170 	 mov r0,#258
 180:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1140              	 .loc 1 180 0
 1141 004c 10BD     	 pop {r4,pc}
 1142              	.LVL115:
 1143              	.L116:
 174:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 1144              	 .loc 1 174 0
 1145 004e 0123     	 movs r3,#1
 1146              	.L117:
 177:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1147              	 .loc 1 177 0
 1148 0050 2046     	 mov r0,r4
 174:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 1149              	 .loc 1 174 0
 1150 0052 84F89F31 	 strb r3,[r4,#415]
 177:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1151              	 .loc 1 177 0
 1152 0056 0021     	 movs r1,#0
 1153 0058 FFF7FEFF 	 bl ifx_i2c_pl_frame_event_handler
 1154              	.LVL116:
 179:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 1155              	 .loc 1 179 0
 1156 005c 0020     	 movs r0,#0
 1157 005e 10BD     	 pop {r4,pc}
 1158              	.LVL117:
 1159              	.L119:
 1160              	 .align 2
 1161              	.L118:
 1162 0060 00000000 	 .word ifx_i2c_pl_pal_event_handler
 1163              	 .cfi_endproc
 1164              	.LFE0:
 1166              	 .section .text.ifx_i2c_pl_send_frame,"ax",%progbits
 1167              	 .align 1
 1168              	 .global ifx_i2c_pl_send_frame
 1169              	 .thumb
 1170              	 .thumb_func
 1172              	ifx_i2c_pl_send_frame:
 1173              	.LFB1:
 183:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Physical Layer must be idle, set requested action
 1174              	 .loc 1 183 0
 1175              	 .cfi_startproc
 1176              	 
 1177              	 
 1178              	.LVL118:
 1179 0000 10B5     	 push {r4,lr}
 1180              	.LCFI22:
 1181              	 .cfi_def_cfa_offset 8
 1182              	 .cfi_offset 4,-8
 1183              	 .cfi_offset 14,-4
 185:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1184              	 .loc 1 185 0
 1185 0002 90F89F41 	 ldrb r4,[r0,#415]
 1186 0006 013C     	 subs r4,r4,#1
 1187 0008 012C     	 cmp r4,#1
 1188 000a 0BD8     	 bhi .L122
 189:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1189              	 .loc 1 189 0
 1190 000c 0124     	 movs r4,#1
 1191 000e 80F89E41 	 strb r4,[r0,#414]
 192:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.tx_frame_len = frame_len;
 1192              	 .loc 1 192 0
 1193 0012 C0F8A011 	 str r1,[r0,#416]
 193:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1194              	 .loc 1 193 0
 1195 0016 A0F8A421 	 strh r2,[r0,#420]
 195:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     return (IFX_I2C_STACK_SUCCESS);
 1196              	 .loc 1 195 0
 1197 001a 0021     	 movs r1,#0
 1198              	.LVL119:
 1199 001c FFF7FEFF 	 bl ifx_i2c_pl_frame_event_handler
 1200              	.LVL120:
 196:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 1201              	 .loc 1 196 0
 1202 0020 0020     	 movs r0,#0
 1203 0022 10BD     	 pop {r4,pc}
 1204              	.LVL121:
 1205              	.L122:
 187:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 1206              	 .loc 1 187 0
 1207 0024 4FF48170 	 mov r0,#258
 1208              	.LVL122:
 197:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1209              	 .loc 1 197 0
 1210 0028 10BD     	 pop {r4,pc}
 1211              	 .cfi_endproc
 1212              	.LFE1:
 1214              	 .section .text.ifx_i2c_pl_receive_frame,"ax",%progbits
 1215              	 .align 1
 1216              	 .global ifx_i2c_pl_receive_frame
 1217              	 .thumb
 1218              	 .thumb_func
 1220              	ifx_i2c_pl_receive_frame:
 1221              	.LFB2:
 200:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     // Physical Layer must be idle, set requested action
 1222              	 .loc 1 200 0
 1223              	 .cfi_startproc
 1224              	 
 1225              	 
 1226              	.LVL123:
 1227 0000 08B5     	 push {r3,lr}
 1228              	.LCFI23:
 1229              	 .cfi_def_cfa_offset 8
 1230              	 .cfi_offset 3,-8
 1231              	 .cfi_offset 14,-4
 202:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1232              	 .loc 1 202 0
 1233 0002 90F89F31 	 ldrb r3,[r0,#415]
 1234 0006 013B     	 subs r3,r3,#1
 1235 0008 012B     	 cmp r3,#1
 1236 000a 07D8     	 bhi .L125
 206:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1237              	 .loc 1 206 0
 1238 000c 0223     	 movs r3,#2
 1239 000e 80F89E31 	 strb r3,[r0,#414]
 208:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     return (IFX_I2C_STACK_SUCCESS);
 1240              	 .loc 1 208 0
 1241 0012 0021     	 movs r1,#0
 1242 0014 FFF7FEFF 	 bl ifx_i2c_pl_frame_event_handler
 1243              	.LVL124:
 209:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** }
 1244              	 .loc 1 209 0
 1245 0018 0020     	 movs r0,#0
 1246 001a 08BD     	 pop {r3,pc}
 1247              	.LVL125:
 1248              	.L125:
 204:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 1249              	 .loc 1 204 0
 1250 001c 4FF48170 	 mov r0,#258
 1251              	.LVL126:
 210:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1252              	 .loc 1 210 0
 1253 0020 08BD     	 pop {r3,pc}
 1254              	 .cfi_endproc
 1255              	.LFE2:
 1257              	 .section .text.ifx_i2c_pl_write_slave_address,"ax",%progbits
 1258              	 .align 1
 1259              	 .global ifx_i2c_pl_write_slave_address
 1260              	 .thumb
 1261              	 .thumb_func
 1263              	ifx_i2c_pl_write_slave_address:
 1264              	.LFB3:
 213:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 1265              	 .loc 1 213 0
 1266              	 .cfi_startproc
 1267              	 
 1268              	 
 1269              	.LVL127:
 1270 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 1271              	.LCFI24:
 1272              	 .cfi_def_cfa_offset 24
 1273              	 .cfi_offset 3,-24
 1274              	 .cfi_offset 4,-20
 1275              	 .cfi_offset 5,-16
 1276              	 .cfi_offset 6,-12
 1277              	 .cfi_offset 7,-8
 1278              	 .cfi_offset 14,-4
 228:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //since the lower level APIs are asynchronous, a temporary event handler for set slave address 
 1279              	 .loc 1 228 0
 1280 0002 0369     	 ldr r3,[r0,#16]
 213:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 1281              	 .loc 1 213 0
 1282 0004 0446     	 mov r4,r0
 230:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1283              	 .loc 1 230 0
 1284 0006 2348     	 ldr r0,.L145
 1285              	.LVL128:
 228:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //since the lower level APIs are asynchronous, a temporary event handler for set slave address 
 1286              	 .loc 1 228 0
 1287 0008 DF68     	 ldr r7,[r3,#12]
 1288              	.LVL129:
 230:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1289              	 .loc 1 230 0
 1290 000a D860     	 str r0,[r3,#12]
 232:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer[MODE_OFFSET] = PL_REG_BASE_ADDR_VOLATILE;
 1291              	 .loc 1 232 0
 1292 000c 8323     	 movs r3,#131
 1293 000e 84F88030 	 strb r3,[r4,#128]
 233:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     //supported base addresses are 0x00 - 0x7F. Hence 8th bit is ignored
 1294              	 .loc 1 233 0
 1295 0012 0023     	 movs r3,#0
 1296 0014 84F88130 	 strb r3,[r4,#129]
 235:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_tx_len = 1 + PL_REG_LEN_BASE_ADDR;
 1297              	 .loc 1 235 0
 1298 0018 01F07F01 	 and r1,r1,#127
 1299              	.LVL130:
 236:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1300              	 .loc 1 236 0
 1301 001c 0323     	 movs r3,#3
 235:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     p_ctx->pl.buffer_tx_len = 1 + PL_REG_LEN_BASE_ADDR;
 1302              	 .loc 1 235 0
 1303 001e 84F88210 	 strb r1,[r4,#130]
 236:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1304              	 .loc 1 236 0
 1305 0022 A4F89631 	 strh r3,[r4,#406]
 238:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1306              	 .loc 1 238 0
 1307 0026 1646     	 mov r6,r2
 1308 0028 12B1     	 cbz r2,.L127
 240:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 1309              	 .loc 1 240 0
 1310 002a 8023     	 movs r3,#128
 1311 002c 84F88130 	 strb r3,[r4,#129]
 1312              	.L127:
 243:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1313              	 .loc 1 243 0
 1314 0030 C823     	 movs r3,#200
 1315 0032 A4F89C31 	 strh r3,[r4,#412]
 1316              	.LVL131:
 1317              	.L128:
 245:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1318              	 .loc 1 245 0
 1319 0036 B4F89C31 	 ldrh r3,[r4,#412]
 1320 003a 174D     	 ldr r5,.L145+4
 1321 003c 6BB1     	 cbz r3,.L134
 247:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1322              	 .loc 1 247 0
 1323 003e FF23     	 movs r3,#255
 250:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         while (PAL_WRITE_INIT_STATUS == g_pal_event_status){};
 1324              	 .loc 1 250 0
 1325 0040 2069     	 ldr r0,[r4,#16]
 1326 0042 B4F89621 	 ldrh r2,[r4,#406]
 247:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1327              	 .loc 1 247 0
 1328 0046 2B80     	 strh r3,[r5]
 250:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         while (PAL_WRITE_INIT_STATUS == g_pal_event_status){};
 1329              	 .loc 1 250 0
 1330 0048 04F18001 	 add r1,r4,#128
 1331 004c FFF7FEFF 	 bl pal_i2c_write
 1332              	.LVL132:
 251:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         if (PAL_I2C_EVENT_SUCCESS == g_pal_event_status)
 1333              	 .loc 1 251 0
 1334 0050 2B88     	 ldrh r3,[r5]
 1335 0052 FF2B     	 cmp r3,#255
 1336 0054 00D1     	 bne .L144
 1337              	.L142:
 1338 0056 FEE7     	 b .L142
 1339              	.L144:
 252:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 1340              	 .loc 1 252 0
 1341 0058 23B9     	 cbnz r3,.L130
 1342              	.L134:
 260:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     {
 1343              	 .loc 1 260 0
 1344 005a 2B88     	 ldrh r3,[r5]
 1345 005c 5BB1     	 cbz r3,.L131
 214:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     upper_layer_callback_t * p_temp_upper_layer_event_handler;
 1346              	 .loc 1 214 0
 1347 005e 4FF48170 	 mov r0,#258
 1348 0062 14E0     	 b .L132
 1349              	.L130:
 256:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         pal_os_timer_delay_in_milliseconds(POLLING_INTERVAL);
 1350              	 .loc 1 256 0
 1351 0064 B4F89C31 	 ldrh r3,[r4,#412]
 1352 0068 013B     	 subs r3,r3,#1
 1353 006a A4F89C31 	 strh r3,[r4,#412]
 257:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 1354              	 .loc 1 257 0
 1355 006e 0120     	 movs r0,#1
 1356 0070 FFF7FEFF 	 bl pal_os_timer_delay_in_milliseconds
 1357              	.LVL133:
 1358 0074 DFE7     	 b .L128
 1359              	.L131:
 262:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         if (PL_REG_BASE_ADDR_VOLATILE != persistent)
 1360              	 .loc 1 262 0
 1361 0076 2369     	 ldr r3,[r4,#16]
 1362 0078 94F88220 	 ldrb r2,[r4,#130]
 1363 007c 1A71     	 strb r2,[r3,#4]
 263:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         {
 1364              	 .loc 1 263 0
 1365 007e 16B1     	 cbz r6,.L135
 265:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         }
 1366              	 .loc 1 265 0
 1367 0080 94F88230 	 ldrb r3,[r4,#130]
 1368 0084 2370     	 strb r3,[r4]
 1369              	.L135:
 267:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****         status = IFX_I2C_STACK_SUCCESS;
 1370              	 .loc 1 267 0
 1371 0086 0A20     	 movs r0,#10
 1372 0088 FFF7FEFF 	 bl pal_os_timer_delay_in_milliseconds
 1373              	.LVL134:
 268:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c ****     }
 1374              	 .loc 1 268 0
 1375 008c 0020     	 movs r0,#0
 1376              	.LVL135:
 1377              	.L132:
 271:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1378              	 .loc 1 271 0
 1379 008e 2369     	 ldr r3,[r4,#16]
 1380 0090 DF60     	 str r7,[r3,#12]
 283:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c_physical_layer.c **** 
 1381              	 .loc 1 283 0
 1382 0092 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1383              	.LVL136:
 1384              	.L146:
 1385              	 .align 2
 1386              	.L145:
 1387 0094 00000000 	 .word ifx_i2c_pl_pal_slave_addr_event_handler
 1388 0098 00000000 	 .word .LANCHOR0
 1389              	 .cfi_endproc
 1390              	.LFE3:
 1392              	 .section .bss.g_pal_event_status,"aw",%nobits
 1393              	 .align 1
 1394              	 .set .LANCHOR0,.+0
 1397              	g_pal_event_status:
 1398 0000 0000     	 .space 2
 1399              	 .text
 1400              	.Letext0:
 1401              	 .file 2 "c:\\users\\yushev\\dave_4-4-2_32bit_2018-02-23\\dave-ide-4.4.2-32bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1402              	 .file 3 "c:\\users\\yushev\\dave_4-4-2_32bit_2018-02-23\\dave-ide-4.4.2-32bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1403              	 .file 4 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/common/optiga_lib_types.h"
 1404              	 .file 5 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal.h"
 1405              	 .file 6 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal_i2c.h"
 1406              	 .file 7 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal_gpio.h"
 1407              	 .file 8 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/ifx_i2c/ifx_i2c_config.h"
 1408              	 .file 9 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal_os_event.h"
 1409              	 .file 10 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal_os_timer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ifx_i2c_physical_layer.c
    {standard input}:20     .text.ifx_i2c_pl_pal_slave_addr_event_handler:00000000 $t
    {standard input}:24     .text.ifx_i2c_pl_pal_slave_addr_event_handler:00000000 ifx_i2c_pl_pal_slave_addr_event_handler
    {standard input}:40     .text.ifx_i2c_pl_pal_slave_addr_event_handler:00000008 $d
    {standard input}:45     .text.ifx_i2c_pl_read_register:00000000 $t
    {standard input}:49     .text.ifx_i2c_pl_read_register:00000000 ifx_i2c_pl_read_register
    {standard input}:99     .text.ifx_i2c_pl_status_poll_callback:00000000 $t
    {standard input}:103    .text.ifx_i2c_pl_status_poll_callback:00000000 ifx_i2c_pl_status_poll_callback
    {standard input}:120    .text.ifx_i2c_pl_write_register:00000000 $t
    {standard input}:124    .text.ifx_i2c_pl_write_register:00000000 ifx_i2c_pl_write_register
    {standard input}:188    .text.ifx_i2c_pal_poll_callback:00000000 $t
    {standard input}:192    .text.ifx_i2c_pal_poll_callback:00000000 ifx_i2c_pal_poll_callback
    {standard input}:236    .text.ifx_i2c_pl_set_bit_rate:00000000 $t
    {standard input}:240    .text.ifx_i2c_pl_set_bit_rate:00000000 ifx_i2c_pl_set_bit_rate
    {standard input}:306    .text.ifx_i2c_pl_set_bit_rate:0000003c $d
    {standard input}:315    .text.ifx_i2c_pl_negotiation_event_handler:00000000 ifx_i2c_pl_negotiation_event_handler
    {standard input}:311    .text.ifx_i2c_pl_negotiation_event_handler:00000000 $t
    {standard input}:584    .text.ifx_i2c_pl_negotiation_event_handler:00000174 $d
    {standard input}:589    .text.ifx_i2c_pl_frame_event_handler:00000000 $t
    {standard input}:593    .text.ifx_i2c_pl_frame_event_handler:00000000 ifx_i2c_pl_frame_event_handler
    {standard input}:631    .text.ifx_i2c_pl_frame_event_handler:00000026 $d
    {standard input}:846    .text.ifx_i2c_pl_soft_reset:00000000 ifx_i2c_pl_soft_reset
    {standard input}:837    .text.ifx_i2c_pl_frame_event_handler:000000fc $d
    {standard input}:842    .text.ifx_i2c_pl_soft_reset:00000000 $t
    {standard input}:870    .text.ifx_i2c_pl_soft_reset:00000018 $d
    {standard input}:953    .text.ifx_i2c_pl_soft_reset:0000008c $d
    {standard input}:958    .text.ifx_i2c_pl_pal_event_handler:00000000 $t
    {standard input}:962    .text.ifx_i2c_pl_pal_event_handler:00000000 ifx_i2c_pl_pal_event_handler
    {standard input}:1015   .text.ifx_i2c_pl_pal_event_handler:00000038 $d
    {standard input}:1025   .text.ifx_i2c_pl_guard_time_callback:00000000 ifx_i2c_pl_guard_time_callback
    {standard input}:1021   .text.ifx_i2c_pl_guard_time_callback:00000000 $t
    {standard input}:1075   .text.ifx_i2c_pl_init:00000000 $t
    {standard input}:1080   .text.ifx_i2c_pl_init:00000000 ifx_i2c_pl_init
    {standard input}:1162   .text.ifx_i2c_pl_init:00000060 $d
    {standard input}:1167   .text.ifx_i2c_pl_send_frame:00000000 $t
    {standard input}:1172   .text.ifx_i2c_pl_send_frame:00000000 ifx_i2c_pl_send_frame
    {standard input}:1215   .text.ifx_i2c_pl_receive_frame:00000000 $t
    {standard input}:1220   .text.ifx_i2c_pl_receive_frame:00000000 ifx_i2c_pl_receive_frame
    {standard input}:1258   .text.ifx_i2c_pl_write_slave_address:00000000 $t
    {standard input}:1263   .text.ifx_i2c_pl_write_slave_address:00000000 ifx_i2c_pl_write_slave_address
    {standard input}:1387   .text.ifx_i2c_pl_write_slave_address:00000094 $d
    {standard input}:1393   .bss.g_pal_event_status:00000000 $d
    {standard input}:1397   .bss.g_pal_event_status:00000000 g_pal_event_status
                     .debug_frame:00000010 $d
    {standard input}:636    .text.ifx_i2c_pl_frame_event_handler:0000002b $d
    {standard input}:636    .text.ifx_i2c_pl_frame_event_handler:0000002c $t
    {standard input}:881    .text.ifx_i2c_pl_soft_reset:00000023 $d
    {standard input}:881    .text.ifx_i2c_pl_soft_reset:00000024 $t

UNDEFINED SYMBOLS
pal_i2c_write
memcpy
pal_i2c_read
pal_i2c_set_bitrate
pal_os_event_register_callback_oneshot
pal_os_timer_get_time_in_milliseconds
pal_i2c_init
pal_os_timer_delay_in_milliseconds
