   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,4
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ifx_i2c.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.ifx_i2c_tl_event_handler,"ax",%progbits
  20              	 .align 1
  21              	 .global ifx_i2c_tl_event_handler
  22              	 .thumb
  23              	 .thumb_func
  25              	ifx_i2c_tl_event_handler:
  26              	.LFB5:
  27              	 .file 1 "C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c/ifx_i2c.c"
   1:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** /**
   2:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * \copyright
   3:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * MIT License
   4:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
   5:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * Copyright (c) 2020 Infineon Technologies AG
   6:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
   7:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * Permission is hereby granted, free of charge, to any person obtaining a copy
   8:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * of this software and associated documentation files (the "Software"), to deal
   9:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * in the Software without restriction, including without limitation the rights
  10:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * copies of the Software, and to permit persons to whom the Software is
  12:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * furnished to do so, subject to the following conditions:
  13:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
  14:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * The above copyright notice and this permission notice shall be included in all
  15:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * copies or substantial portions of the Software.
  16:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
  17:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  23:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * SOFTWARE
  24:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
  25:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * \endcopyright
  26:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
  27:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * \author Infineon Technologies AG
  28:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
  29:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * \file ifx_i2c.c
  30:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
  31:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * \brief   This file implements the wrapper API Layer for IFX I2C protocol v2.00.
  32:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
  33:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * \ingroup  grIFXI2C
  34:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** *
  35:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** * @{
  36:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** */
  37:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  38:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #include "optiga/ifx_i2c/ifx_i2c.h"
  39:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #include "optiga/pal/pal_os_event.h"
  40:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  41:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
  42:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #include "optiga/ifx_i2c/ifx_i2c_transport_layer.h"
  43:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #else
  44:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #include "optiga/ifx_i2c/ifx_i2c_presentation_layer.h"
  45:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
  46:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  47:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** /// @cond hidden
  48:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  49:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** // IFX I2C states
  50:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #define IFX_I2C_STATE_UNINIT         (0x01)
  51:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #define IFX_I2C_STATE_IDLE           (0x02)
  52:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #define IFX_I2C_STATUS_BUSY          (0x03)
  53:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #define IFX_I2C_STATUS_NOT_BUSY      (0x04)
  54:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  55:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** /// IFX I2C Reset states
  56:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #define IFX_I2C_STATE_RESET_PIN_LOW        (0xB1)
  57:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #define IFX_I2C_STATE_RESET_PIN_HIGH       (0xB2)
  58:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #define IFX_I2C_STATE_RESET_INIT           (0xB3)
  59:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  60:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
  61:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                               optiga_lib_status_t event,
  62:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                               const uint8_t * p_data,
  63:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                               uint16_t data_len);
  64:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  65:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
  66:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** _STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
  67:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                optiga_lib_status_t event,
  68:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                const uint8_t * p_data,
  69:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                uint16_t data_len);
  70:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
  71:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** _STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context);
  72:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  73:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** //lint --e{526} suppress "This API is defined in ifx_i2c_physical_layer.c file. As it is a low leve
  74:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** extern optiga_lib_status_t ifx_i2c_pl_write_slave_address(ifx_i2c_context_t * p_ctx,
  75:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                           uint8_t slave_address,
  76:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                           uint8_t storage_type);
  77:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** /// @endcond
  78:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  79:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
  80:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** {
  81:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
  82:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  83:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     //If api status is not busy, proceed
  84:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
  85:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
  86:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         do
  87:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
  88:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
  89:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
  90:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
  91:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             {
  92:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 break;
  93:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             }
  94:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
  95:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->do_pal_init = TRUE;
  96:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->state = IFX_I2C_STATE_UNINIT;
  97:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
  98:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             api_status = ifx_i2c_init(p_ctx);
  99:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             if (IFX_I2C_STACK_SUCCESS == api_status)
 100:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             {
 101:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 p_ctx->status = IFX_I2C_STATUS_BUSY;
 102:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             }
 103:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }while(FALSE);
 104:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 105:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     return (api_status);
 106:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** }
 107:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 108:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 109:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** optiga_lib_status_t ifx_i2c_reset(ifx_i2c_context_t * p_ctx,
 110:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                   ifx_i2c_reset_type_t reset_type)
 111:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** {
 112:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 113:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 114:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     // Proceed, if not busy and in idle state
 115:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 116:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 117:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->reset_type = (uint8_t)reset_type;
 118:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 119:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->do_pal_init = FALSE;
 120:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 121:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         api_status = ifx_i2c_init(p_ctx);
 122:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         if (IFX_I2C_STACK_SUCCESS == api_status)
 123:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 124:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->status = IFX_I2C_STATUS_BUSY;
 125:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 126:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 127:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     return (api_status);
 128:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** }
 129:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 130:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 131:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
 132:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                        const uint8_t * p_tx_data,
 133:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                        uint16_t tx_data_length,
 134:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                        uint8_t * p_rx_buffer,
 135:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                        uint16_t * p_rx_buffer_len)
 136:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** {
 137:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 138:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     // Proceed, if not busy and in idle state
 139:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 140:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 141:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 142:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 143:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
 144:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         api_status = ifx_i2c_tl_transceive(p_ctx,
 145:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                            (uint8_t * )p_tx_data,
 146:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                            (tx_data_length),
 147:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                            (uint8_t * )p_rx_buffer,
 148:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                            p_rx_buffer_len);
 149:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         if (IFX_I2C_STACK_SUCCESS == api_status)
 150:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 151:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->status = IFX_I2C_STATUS_BUSY;
 152:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 153:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #else
 154:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         api_status = ifx_i2c_prl_transceive(p_ctx,
 155:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                          (uint8_t * )p_tx_data,
 156:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                          tx_data_length,
 157:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                          (uint8_t * )p_rx_buffer,
 158:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                          p_rx_buffer_len);
 159:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
 160:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 161:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 162:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->status = IFX_I2C_STATUS_BUSY;
 163:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 164:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 165:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     return (api_status);
 166:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** }
 167:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 168:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 169:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
 170:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** {
 171:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 172:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     // Proceed, if not busy and in idle state
 173:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 174:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 175:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         api_status = IFX_I2C_STACK_SUCCESS;
 176:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 177:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
 178:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->close_state = IFX_I2C_STACK_ERROR;
 179:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->state = IFX_I2C_STATE_UNINIT;
 180:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded
 181:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 182:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         if (IFX_I2C_STACK_ERROR == api_status)
 183:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 184:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             //lint --e{534} suppress "Error handling is not required so return value is not checked
 185:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 186:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             // Also power off the device
 187:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 188:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 189:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 190:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 191:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #else
 192:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         ifx_i2c_tl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, NULL, 0);
 193:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         //lint --e{534} suppress "Error handling is not required so return value is not checked"
 194:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         // Close I2C master
 195:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 196:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         // Also power off the device
 197:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 198:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 199:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->state = IFX_I2C_STATE_UNINIT;
 200:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 201:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
 202:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 203:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 204:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     return (api_status);
 205:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** }
 206:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 207:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 208:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** optiga_lib_status_t ifx_i2c_set_slave_address(ifx_i2c_context_t * p_ctx,
 209:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                               uint8_t slave_address,
 210:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                               uint8_t persistent)
 211:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** {
 212:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 213:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 214:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     if ((IFX_I2C_STATE_IDLE == p_ctx->state))
 215:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 216:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 217:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 218:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         api_status = ifx_i2c_pl_write_slave_address(p_ctx, slave_address, persistent);
 219:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 220:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 221:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     return (api_status);
 222:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** }
 223:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 224:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** /// @cond hidden
 225:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** //lint --e{715} suppress "The arguments p_data and data_len is not used in this function 
 226:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** //                        but as per the function signature those 2 parameter should be passed"
 227:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
 228:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                               optiga_lib_status_t event,
 229:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                               const uint8_t * p_data,
 230:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                               uint16_t data_len)
 231:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** {
  28              	 .loc 1 231 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 38B5     	 push {r3,r4,r5,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 16
  36              	 .cfi_offset 3,-16
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 5,-8
  39              	 .cfi_offset 14,-4
 232:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     // If there is no upper layer handler, don't do anything and return
 233:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     if (NULL != p_ctx->upper_layer_event_handler)
  40              	 .loc 1 233 0
  41 0002 8369     	 ldr r3,[r0,#24]
  42              	.LVL1:
 231:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     // If there is no upper layer handler, don't do anything and return
  43              	 .loc 1 231 0
  44 0004 0446     	 mov r4,r0
  45 0006 0D46     	 mov r5,r1
  46              	 .loc 1 233 0
  47 0008 0BB1     	 cbz r3,.L2
 234:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 235:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
  48              	 .loc 1 235 0
  49 000a C069     	 ldr r0,[r0,#28]
  50              	.LVL2:
  51 000c 9847     	 blx r3
  52              	.LVL3:
  53              	.L2:
 236:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 237:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     p_ctx->close_state = event;
 238:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
  54              	 .loc 1 238 0
  55 000e 0423     	 movs r3,#4
  56 0010 84F82930 	 strb r3,[r4,#41]
 239:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     switch (p_ctx->state)
  57              	 .loc 1 239 0
  58 0014 94F82830 	 ldrb r3,[r4,#40]
 237:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
  59              	 .loc 1 237 0
  60 0018 A585     	 strh r5,[r4,#44]
  61              	 .loc 1 239 0
  62 001a 012B     	 cmp r3,#1
  63 001c 03D1     	 bne .L1
 240:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 241:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         case IFX_I2C_STATE_UNINIT:
 242:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 243:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             if (IFX_I2C_STACK_SUCCESS == event)
  64              	 .loc 1 243 0
  65 001e 15B9     	 cbnz r5,.L1
 244:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             {
 245:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 p_ctx->state = IFX_I2C_STATE_IDLE;
  66              	 .loc 1 245 0
  67 0020 0223     	 movs r3,#2
  68 0022 84F82830 	 strb r3,[r4,#40]
  69              	.L1:
  70 0026 38BD     	 pop {r3,r4,r5,pc}
  71              	 .cfi_endproc
  72              	.LFE5:
  74              	 .section .text.ifx_i2c_init,"ax",%progbits
  75              	 .align 1
  76              	 .thumb
  77              	 .thumb_func
  79              	ifx_i2c_init:
  80              	.LFB7:
 246:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             }
 247:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             break;
 248:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 249:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         default:
 250:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             break;
 251:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 252:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** }
 253:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
 254:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** /// @cond hidden
 255:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** //lint --e{715} suppress "The arguments p_data and data_len is not used in this function 
 256:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** //                        but as per the function signature those 2 parameter should be passed"
 257:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** _STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
 258:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                optiga_lib_status_t event,
 259:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                const uint8_t * p_data,
 260:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                uint16_t data_len)
 261:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** {
 262:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 263:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     switch (p_ctx->state)
 264:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 265:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         case IFX_I2C_STATE_UNINIT:
 266:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 267:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             //lint --e{534} suppress "Error handling is not required so return value is not checked
 268:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 269:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             // Also power off the device
 270:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 271:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 272:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             break;
 273:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 274:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         default:
 275:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             break;
 276:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 277:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     // If there is no upper layer handler, don't do anything and return
 278:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     if (NULL != p_ctx->upper_layer_event_handler)
 279:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 280:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 281:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 282:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** }
 283:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
 284:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** _STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
 285:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** {
  81              	 .loc 1 285 0
  82              	 .cfi_startproc
  83              	 
  84              	 
  85              	.LVL4:
  86 0000 10B5     	 push {r4,lr}
  87              	.LCFI1:
  88              	 .cfi_def_cfa_offset 8
  89              	 .cfi_offset 4,-8
  90              	 .cfi_offset 14,-4
 286:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 287:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 288:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
  91              	 .loc 1 288 0
  92 0002 90F82E30 	 ldrb r3,[r0,#46]
  93 0006 13F0FD0F 	 tst r3,#253
 285:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
  94              	 .loc 1 285 0
  95 000a 0446     	 mov r4,r0
  96              	 .loc 1 288 0
  97 000c 2CD1     	 bne .L10
 289:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 290:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 291:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         switch (p_ifx_i2c_context->reset_state)
  98              	 .loc 1 291 0
  99 000e 90F82A20 	 ldrb r2,[r0,#42]
 100 0012 B22A     	 cmp r2,#178
 101 0014 14D0     	 beq .L12
 102 0016 B32A     	 cmp r2,#179
 103 0018 29D0     	 beq .L19
 104 001a B12A     	 cmp r2,#177
 105 001c 2CD1     	 bne .L18
 292:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 293:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             case IFX_I2C_STATE_RESET_PIN_LOW:
 294:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             {
 295:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 // Setting the Vdd & Reset pin to low
 296:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 106              	 .loc 1 296 0
 107 001e 13B9     	 cbnz r3,.L15
 297:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 {
 298:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                     pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 108              	 .loc 1 298 0
 109 0020 8068     	 ldr r0,[r0,#8]
 110              	.LVL5:
 111 0022 FFF7FEFF 	 bl pal_gpio_set_low
 112              	.LVL6:
 113              	.L15:
 299:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 }
 300:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 114              	 .loc 1 300 0
 115 0026 E068     	 ldr r0,[r4,#12]
 116 0028 FFF7FEFF 	 bl pal_gpio_set_low
 117              	.LVL7:
 301:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 118              	 .loc 1 301 0
 119 002c B223     	 movs r3,#178
 120 002e 84F82A30 	 strb r3,[r4,#42]
 302:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 121              	 .loc 1 302 0
 122 0032 D4F8D004 	 ldr r0,[r4,#1232]
 123 0036 1249     	 ldr r1,.L21
 124 0038 2246     	 mov r2,r4
 125 003a 4FF4FA63 	 mov r3,#2000
 126 003e 0FE0     	 b .L20
 127              	.LVL8:
 128              	.L12:
 303:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                        (register_callback)ifx_i2c_init,
 304:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                        (void * )p_ifx_i2c_context,
 305:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                        RESET_LOW_TIME_MSEC);
 306:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 api_status = IFX_I2C_STACK_SUCCESS;
 307:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 break;
 308:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             }
 309:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             case IFX_I2C_STATE_RESET_PIN_HIGH:
 310:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             {
 311:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 // Setting the Vdd & Reset pin to high
 312:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 129              	 .loc 1 312 0
 130 0040 13B9     	 cbnz r3,.L16
 313:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 {
 314:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                     pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 131              	 .loc 1 314 0
 132 0042 8068     	 ldr r0,[r0,#8]
 133              	.LVL9:
 134 0044 FFF7FEFF 	 bl pal_gpio_set_high
 135              	.LVL10:
 136              	.L16:
 315:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 }
 316:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 137              	 .loc 1 316 0
 138 0048 E068     	 ldr r0,[r4,#12]
 139 004a FFF7FEFF 	 bl pal_gpio_set_high
 140              	.LVL11:
 317:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 141              	 .loc 1 317 0
 142 004e B323     	 movs r3,#179
 318:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 143              	 .loc 1 318 0
 144 0050 D4F8D004 	 ldr r0,[r4,#1232]
 145 0054 0A49     	 ldr r1,.L21
 317:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 146              	 .loc 1 317 0
 147 0056 84F82A30 	 strb r3,[r4,#42]
 148              	 .loc 1 318 0
 149 005a 2246     	 mov r2,r4
 150 005c 42F6E063 	 movw r3,#12000
 151              	.LVL12:
 152              	.L20:
 153 0060 FFF7FEFF 	 bl pal_os_event_register_callback_oneshot
 154              	.LVL13:
 319:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                        (register_callback)ifx_i2c_init,
 320:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                        (void * )p_ifx_i2c_context,
 321:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                                        STARTUP_TIME_MSEC);
 322:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 api_status = IFX_I2C_STACK_SUCCESS;
 155              	 .loc 1 322 0
 156 0064 0020     	 movs r0,#0
 323:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 break;
 157              	 .loc 1 323 0
 158 0066 10BD     	 pop {r4,pc}
 159              	.LVL14:
 160              	.L10:
 324:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             }
 325:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             case IFX_I2C_STATE_RESET_INIT:
 326:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             {
 327:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 //Frequency and frame size negotiation
 328:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
 329:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 330:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #else
 331:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 332:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
 333:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 break;
 334:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             }
 335:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             default:
 336:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                 break;
 337:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 338:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 339:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     //soft reset
 340:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     else
 341:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 342:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 161              	 .loc 1 342 0
 162 0068 0123     	 movs r3,#1
 163 006a 80F8AD31 	 strb r3,[r0,#429]
 164              	.L19:
 343:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
 344:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 345:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #else
 346:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 165              	 .loc 1 346 0
 166 006e 0549     	 ldr r1,.L21+4
 347:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
 348:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 349:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 350:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     return (api_status);
 351:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** }
 167              	 .loc 1 351 0
 168 0070 BDE81040 	 pop {r4,lr}
 169              	.LCFI2:
 170              	 .cfi_remember_state
 171              	 .cfi_restore 14
 172              	 .cfi_restore 4
 173              	 .cfi_def_cfa_offset 0
 346:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
 174              	 .loc 1 346 0
 175 0074 FFF7FEBF 	 b ifx_i2c_prl_init
 176              	.LVL15:
 177              	.L18:
 178              	.LCFI3:
 179              	 .cfi_restore_state
 286:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 180              	 .loc 1 286 0
 181 0078 4FF48170 	 mov r0,#258
 182              	.LVL16:
 183              	 .loc 1 351 0
 184 007c 10BD     	 pop {r4,pc}
 185              	.LVL17:
 186              	.L22:
 187 007e 00BF     	 .align 2
 188              	.L21:
 189 0080 00000000 	 .word ifx_i2c_init
 190 0084 00000000 	 .word ifx_i2c_tl_event_handler
 191              	 .cfi_endproc
 192              	.LFE7:
 194              	 .section .text.ifx_i2c_prl_close_event_handler,"ax",%progbits
 195              	 .align 1
 196              	 .thumb
 197              	 .thumb_func
 199              	ifx_i2c_prl_close_event_handler:
 200              	.LFB6:
 261:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 201              	 .loc 1 261 0
 202              	 .cfi_startproc
 203              	 
 204              	 
 205              	.LVL18:
 206 0000 70B5     	 push {r4,r5,r6,lr}
 207              	.LCFI4:
 208              	 .cfi_def_cfa_offset 16
 209              	 .cfi_offset 4,-16
 210              	 .cfi_offset 5,-12
 211              	 .cfi_offset 6,-8
 212              	 .cfi_offset 14,-4
 262:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     switch (p_ctx->state)
 213              	 .loc 1 262 0
 214 0002 0423     	 movs r3,#4
 215              	.LVL19:
 216 0004 80F82930 	 strb r3,[r0,#41]
 263:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 217              	 .loc 1 263 0
 218 0008 90F82830 	 ldrb r3,[r0,#40]
 219 000c 012B     	 cmp r3,#1
 261:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 220              	 .loc 1 261 0
 221 000e 0446     	 mov r4,r0
 222 0010 0D46     	 mov r5,r1
 263:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 223              	 .loc 1 263 0
 224 0012 08D1     	 bne .L24
 268:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             // Also power off the device
 225              	 .loc 1 268 0
 226 0014 0069     	 ldr r0,[r0,#16]
 227              	.LVL20:
 228 0016 FFF7FEFF 	 bl pal_i2c_deinit
 229              	.LVL21:
 270:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 230              	 .loc 1 270 0
 231 001a A068     	 ldr r0,[r4,#8]
 232 001c FFF7FEFF 	 bl pal_gpio_set_low
 233              	.LVL22:
 271:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             break;
 234              	 .loc 1 271 0
 235 0020 E068     	 ldr r0,[r4,#12]
 236 0022 FFF7FEFF 	 bl pal_gpio_set_low
 237              	.LVL23:
 238              	.L24:
 278:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 239              	 .loc 1 278 0
 240 0026 A369     	 ldr r3,[r4,#24]
 241 0028 23B1     	 cbz r3,.L23
 280:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 242              	 .loc 1 280 0
 243 002a E069     	 ldr r0,[r4,#28]
 244 002c 2946     	 mov r1,r5
 282:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #endif
 245              	 .loc 1 282 0
 246 002e BDE87040 	 pop {r4,r5,r6,lr}
 247              	.LCFI5:
 248              	 .cfi_remember_state
 249              	 .cfi_restore 14
 250              	 .cfi_restore 6
 251              	 .cfi_restore 5
 252              	 .cfi_restore 4
 253              	 .cfi_def_cfa_offset 0
 254              	.LVL24:
 280:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 255              	 .loc 1 280 0
 256 0032 1847     	 bx r3
 257              	.LVL25:
 258              	.L23:
 259              	.LCFI6:
 260              	 .cfi_restore_state
 261 0034 70BD     	 pop {r4,r5,r6,pc}
 262              	 .cfi_endproc
 263              	.LFE6:
 265              	 .section .text.ifx_i2c_open,"ax",%progbits
 266              	 .align 1
 267              	 .global ifx_i2c_open
 268              	 .thumb
 269              	 .thumb_func
 271              	ifx_i2c_open:
 272              	.LFB0:
  80:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 273              	 .loc 1 80 0
 274              	 .cfi_startproc
 275              	 
 276              	 
 277              	.LVL26:
 278 0000 10B5     	 push {r4,lr}
 279              	.LCFI7:
 280              	 .cfi_def_cfa_offset 8
 281              	 .cfi_offset 4,-8
 282              	 .cfi_offset 14,-4
  84:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 283              	 .loc 1 84 0
 284 0002 90F82930 	 ldrb r3,[r0,#41]
 285 0006 032B     	 cmp r3,#3
  80:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 286              	 .loc 1 80 0
 287 0008 0446     	 mov r4,r0
  84:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 288              	 .loc 1 84 0
 289 000a 13D0     	 beq .L29
  88:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 290              	 .loc 1 88 0
 291 000c 0369     	 ldr r3,[r0,#16]
 292 000e 9860     	 str r0,[r3,#8]
  89:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 293              	 .loc 1 89 0
 294 0010 0023     	 movs r3,#0
 295 0012 80F82E30 	 strb r3,[r0,#46]
  94:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->do_pal_init = TRUE;
 296              	 .loc 1 94 0
 297 0016 B123     	 movs r3,#177
 298 0018 80F82A30 	 strb r3,[r0,#42]
  95:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->state = IFX_I2C_STATE_UNINIT;
 299              	 .loc 1 95 0
 300 001c 0123     	 movs r3,#1
 301 001e 80F82F30 	 strb r3,[r0,#47]
  96:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 302              	 .loc 1 96 0
 303 0022 80F82830 	 strb r3,[r0,#40]
  98:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             if (IFX_I2C_STACK_SUCCESS == api_status)
 304              	 .loc 1 98 0
 305 0026 FFF7FEFF 	 bl ifx_i2c_init
 306              	.LVL27:
  99:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             {
 307              	 .loc 1 99 0
 308 002a 28B9     	 cbnz r0,.L28
 101:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             }
 309              	 .loc 1 101 0
 310 002c 0323     	 movs r3,#3
 311 002e 84F82930 	 strb r3,[r4,#41]
 312 0032 10BD     	 pop {r4,pc}
 313              	.LVL28:
 314              	.L29:
  81:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 315              	 .loc 1 81 0
 316 0034 4FF48170 	 mov r0,#258
 317              	.LVL29:
 318              	.L28:
 106:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 319              	 .loc 1 106 0
 320 0038 10BD     	 pop {r4,pc}
 321              	 .cfi_endproc
 322              	.LFE0:
 324              	 .section .text.ifx_i2c_reset,"ax",%progbits
 325              	 .align 1
 326              	 .global ifx_i2c_reset
 327              	 .thumb
 328              	 .thumb_func
 330              	ifx_i2c_reset:
 331              	.LFB1:
 111:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 332              	 .loc 1 111 0
 333              	 .cfi_startproc
 334              	 
 335              	 
 336              	.LVL30:
 337 0000 10B5     	 push {r4,lr}
 338              	.LCFI8:
 339              	 .cfi_def_cfa_offset 8
 340              	 .cfi_offset 4,-8
 341              	 .cfi_offset 14,-4
 115:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 342              	 .loc 1 115 0
 343 0002 90F82830 	 ldrb r3,[r0,#40]
 344 0006 022B     	 cmp r3,#2
 111:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 345              	 .loc 1 111 0
 346 0008 0446     	 mov r4,r0
 115:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 347              	 .loc 1 115 0
 348 000a 12D1     	 bne .L33
 115:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 349              	 .loc 1 115 0 is_stmt 0 discriminator 1
 350 000c 90F82930 	 ldrb r3,[r0,#41]
 351 0010 032B     	 cmp r3,#3
 352 0012 0ED0     	 beq .L33
 118:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->do_pal_init = FALSE;
 353              	 .loc 1 118 0 is_stmt 1
 354 0014 B123     	 movs r3,#177
 355 0016 80F82A30 	 strb r3,[r0,#42]
 119:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 356              	 .loc 1 119 0
 357 001a 0023     	 movs r3,#0
 117:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 358              	 .loc 1 117 0
 359 001c 80F82E10 	 strb r1,[r0,#46]
 119:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 360              	 .loc 1 119 0
 361 0020 80F82F30 	 strb r3,[r0,#47]
 121:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         if (IFX_I2C_STACK_SUCCESS == api_status)
 362              	 .loc 1 121 0
 363 0024 FFF7FEFF 	 bl ifx_i2c_init
 364              	.LVL31:
 122:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 365              	 .loc 1 122 0
 366 0028 28B9     	 cbnz r0,.L31
 124:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 367              	 .loc 1 124 0
 368 002a 0323     	 movs r3,#3
 369 002c 84F82930 	 strb r3,[r4,#41]
 370 0030 10BD     	 pop {r4,pc}
 371              	.LVL32:
 372              	.L33:
 112:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 373              	 .loc 1 112 0
 374 0032 4FF48170 	 mov r0,#258
 375              	.LVL33:
 376              	.L31:
 128:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 377              	 .loc 1 128 0
 378 0036 10BD     	 pop {r4,pc}
 379              	 .cfi_endproc
 380              	.LFE1:
 382              	 .section .text.ifx_i2c_transceive,"ax",%progbits
 383              	 .align 1
 384              	 .global ifx_i2c_transceive
 385              	 .thumb
 386              	 .thumb_func
 388              	ifx_i2c_transceive:
 389              	.LFB2:
 136:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 390              	 .loc 1 136 0
 391              	 .cfi_startproc
 392              	 
 393              	 
 394              	.LVL34:
 395 0000 F7B5     	 push {r0,r1,r2,r4,r5,r6,r7,lr}
 396              	.LCFI9:
 397              	 .cfi_def_cfa_offset 32
 398              	 .cfi_offset 4,-20
 399              	 .cfi_offset 5,-16
 400              	 .cfi_offset 6,-12
 401              	 .cfi_offset 7,-8
 402              	 .cfi_offset 14,-4
 139:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 403              	 .loc 1 139 0
 404 0002 90F82870 	 ldrb r7,[r0,#40]
 136:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 405              	 .loc 1 136 0
 406 0006 089D     	 ldr r5,[sp,#32]
 139:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 407              	 .loc 1 139 0
 408 0008 022F     	 cmp r7,#2
 136:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 409              	 .loc 1 136 0
 410 000a 0446     	 mov r4,r0
 139:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 411              	 .loc 1 139 0
 412 000c 0FD1     	 bne .L37
 139:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 413              	 .loc 1 139 0 is_stmt 0 discriminator 1
 414 000e 90F82970 	 ldrb r7,[r0,#41]
 415 0012 032F     	 cmp r7,#3
 416 0014 0BD0     	 beq .L37
 141:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 417              	 .loc 1 141 0 is_stmt 1
 418 0016 2362     	 str r3,[r4,#32]
 142:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** #ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
 419              	 .loc 1 142 0
 420 0018 4562     	 str r5,[r0,#36]
 154:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****                                          (uint8_t * )p_tx_data,
 421              	 .loc 1 154 0
 422 001a 0095     	 str r5,[sp]
 423 001c FFF7FEFF 	 bl ifx_i2c_prl_transceive
 424              	.LVL35:
 160:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 425              	 .loc 1 160 0
 426 0020 38B9     	 cbnz r0,.L35
 160:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 427              	 .loc 1 160 0 is_stmt 0 discriminator 1
 428 0022 A38D     	 ldrh r3,[r4,#44]
 429 0024 2BB9     	 cbnz r3,.L35
 162:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 430              	 .loc 1 162 0 is_stmt 1
 431 0026 0323     	 movs r3,#3
 432 0028 84F82930 	 strb r3,[r4,#41]
 433 002c 01E0     	 b .L35
 434              	.LVL36:
 435              	.L37:
 137:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     // Proceed, if not busy and in idle state
 436              	 .loc 1 137 0
 437 002e 4FF48170 	 mov r0,#258
 438              	.LVL37:
 439              	.L35:
 166:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 440              	 .loc 1 166 0
 441 0032 03B0     	 add sp,sp,#12
 442              	.LCFI10:
 443              	 .cfi_def_cfa_offset 20
 444              	 
 445 0034 F0BD     	 pop {r4,r5,r6,r7,pc}
 446              	 .cfi_endproc
 447              	.LFE2:
 449              	 .section .text.ifx_i2c_close,"ax",%progbits
 450              	 .align 1
 451              	 .global ifx_i2c_close
 452              	 .thumb
 453              	 .thumb_func
 455              	ifx_i2c_close:
 456              	.LFB3:
 170:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 457              	 .loc 1 170 0
 458              	 .cfi_startproc
 459              	 
 460              	 
 461              	.LVL38:
 462 0000 38B5     	 push {r3,r4,r5,lr}
 463              	.LCFI11:
 464              	 .cfi_def_cfa_offset 16
 465              	 .cfi_offset 3,-16
 466              	 .cfi_offset 4,-12
 467              	 .cfi_offset 5,-8
 468              	 .cfi_offset 14,-4
 173:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 469              	 .loc 1 173 0
 470 0002 90F82930 	 ldrb r3,[r0,#41]
 471 0006 032B     	 cmp r3,#3
 170:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 472              	 .loc 1 170 0
 473 0008 0446     	 mov r4,r0
 474 000a 4FF48175 	 mov r5,#258
 173:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 475              	 .loc 1 173 0
 476 000e 16D0     	 beq .L39
 477              	.LVL39:
 179:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded
 478              	 .loc 1 179 0
 479 0010 0123     	 movs r3,#1
 178:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         p_ctx->state = IFX_I2C_STATE_UNINIT;
 480              	 .loc 1 178 0
 481 0012 8585     	 strh r5,[r0,#44]
 179:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded
 482              	 .loc 1 179 0
 483 0014 80F82830 	 strb r3,[r0,#40]
 181:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         if (IFX_I2C_STACK_ERROR == api_status)
 484              	 .loc 1 181 0
 485 0018 0A49     	 ldr r1,.L41
 486 001a FFF7FEFF 	 bl ifx_i2c_prl_close
 487              	.LVL40:
 182:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 488              	 .loc 1 182 0
 489 001e B0F5817F 	 cmp r0,#258
 181:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         if (IFX_I2C_STACK_ERROR == api_status)
 490              	 .loc 1 181 0
 491 0022 0546     	 mov r5,r0
 492              	.LVL41:
 182:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         {
 493              	 .loc 1 182 0
 494 0024 0BD1     	 bne .L39
 185:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             // Also power off the device
 495              	 .loc 1 185 0
 496 0026 2069     	 ldr r0,[r4,#16]
 497              	.LVL42:
 498 0028 FFF7FEFF 	 bl pal_i2c_deinit
 499              	.LVL43:
 187:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 500              	 .loc 1 187 0
 501 002c A068     	 ldr r0,[r4,#8]
 502 002e FFF7FEFF 	 bl pal_gpio_set_low
 503              	.LVL44:
 188:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****             p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 504              	 .loc 1 188 0
 505 0032 E068     	 ldr r0,[r4,#12]
 506 0034 FFF7FEFF 	 bl pal_gpio_set_low
 507              	.LVL45:
 189:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****         }
 508              	 .loc 1 189 0
 509 0038 0423     	 movs r3,#4
 510 003a 84F82930 	 strb r3,[r4,#41]
 511              	.L39:
 512              	.LVL46:
 205:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 513              	 .loc 1 205 0
 514 003e 2846     	 mov r0,r5
 515 0040 38BD     	 pop {r3,r4,r5,pc}
 516              	.LVL47:
 517              	.L42:
 518 0042 00BF     	 .align 2
 519              	.L41:
 520 0044 00000000 	 .word ifx_i2c_prl_close_event_handler
 521              	 .cfi_endproc
 522              	.LFE3:
 524              	 .section .text.ifx_i2c_set_slave_address,"ax",%progbits
 525              	 .align 1
 526              	 .global ifx_i2c_set_slave_address
 527              	 .thumb
 528              	 .thumb_func
 530              	ifx_i2c_set_slave_address:
 531              	.LFB4:
 211:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 532              	 .loc 1 211 0
 533              	 .cfi_startproc
 534              	 
 535              	 
 536              	.LVL48:
 537 0000 10B5     	 push {r4,lr}
 538              	.LCFI12:
 539              	 .cfi_def_cfa_offset 8
 540              	 .cfi_offset 4,-8
 541              	 .cfi_offset 14,-4
 214:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     {
 542              	 .loc 1 214 0
 543 0002 90F82840 	 ldrb r4,[r0,#40]
 544 0006 022C     	 cmp r4,#2
 545 0008 05D1     	 bne .L44
 216:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 546              	 .loc 1 216 0
 547 000a 0469     	 ldr r4,[r0,#16]
 548 000c A060     	 str r0,[r4,#8]
 222:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 549              	 .loc 1 222 0
 550 000e BDE81040 	 pop {r4,lr}
 551              	.LCFI13:
 552              	 .cfi_remember_state
 553              	 .cfi_restore 14
 554              	 .cfi_restore 4
 555              	 .cfi_def_cfa_offset 0
 218:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c ****     }
 556              	 .loc 1 218 0
 557 0012 FFF7FEBF 	 b ifx_i2c_pl_write_slave_address
 558              	.LVL49:
 559              	.L44:
 560              	.LCFI14:
 561              	 .cfi_restore_state
 222:C:/Users/Yushev/git/optiga-trust-qi/optiga/comms/ifx_i2c\ifx_i2c.c **** 
 562              	 .loc 1 222 0
 563 0016 4FF48170 	 mov r0,#258
 564              	.LVL50:
 565 001a 10BD     	 pop {r4,pc}
 566              	 .cfi_endproc
 567              	.LFE4:
 569              	 .text
 570              	.Letext0:
 571              	 .file 2 "c:\\users\\yushev\\dave_4-4-2_32bit_2018-02-23\\dave-ide-4.4.2-32bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 572              	 .file 3 "c:\\users\\yushev\\dave_4-4-2_32bit_2018-02-23\\dave-ide-4.4.2-32bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 573              	 .file 4 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/common/optiga_lib_types.h"
 574              	 .file 5 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal.h"
 575              	 .file 6 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal_i2c.h"
 576              	 .file 7 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal_gpio.h"
 577              	 .file 8 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/ifx_i2c/ifx_i2c_config.h"
 578              	 .file 9 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/ifx_i2c/ifx_i2c.h"
 579              	 .file 10 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/pal/pal_os_event.h"
 580              	 .file 11 "C:/Users/Yushev/git/optiga-trust-qi/optiga/include/optiga/ifx_i2c/ifx_i2c_presentation_layer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ifx_i2c.c
    {standard input}:20     .text.ifx_i2c_tl_event_handler:00000000 $t
    {standard input}:25     .text.ifx_i2c_tl_event_handler:00000000 ifx_i2c_tl_event_handler
    {standard input}:75     .text.ifx_i2c_init:00000000 $t
    {standard input}:79     .text.ifx_i2c_init:00000000 ifx_i2c_init
    {standard input}:189    .text.ifx_i2c_init:00000080 $d
    {standard input}:195    .text.ifx_i2c_prl_close_event_handler:00000000 $t
    {standard input}:199    .text.ifx_i2c_prl_close_event_handler:00000000 ifx_i2c_prl_close_event_handler
    {standard input}:266    .text.ifx_i2c_open:00000000 $t
    {standard input}:271    .text.ifx_i2c_open:00000000 ifx_i2c_open
    {standard input}:325    .text.ifx_i2c_reset:00000000 $t
    {standard input}:330    .text.ifx_i2c_reset:00000000 ifx_i2c_reset
    {standard input}:383    .text.ifx_i2c_transceive:00000000 $t
    {standard input}:388    .text.ifx_i2c_transceive:00000000 ifx_i2c_transceive
    {standard input}:450    .text.ifx_i2c_close:00000000 $t
    {standard input}:455    .text.ifx_i2c_close:00000000 ifx_i2c_close
    {standard input}:520    .text.ifx_i2c_close:00000044 $d
    {standard input}:525    .text.ifx_i2c_set_slave_address:00000000 $t
    {standard input}:530    .text.ifx_i2c_set_slave_address:00000000 ifx_i2c_set_slave_address
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pal_gpio_set_low
pal_gpio_set_high
pal_os_event_register_callback_oneshot
ifx_i2c_prl_init
pal_i2c_deinit
ifx_i2c_prl_transceive
ifx_i2c_prl_close
ifx_i2c_pl_write_slave_address
