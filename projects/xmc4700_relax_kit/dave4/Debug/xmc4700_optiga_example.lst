
xmc4700_optiga_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e304  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000028  0800e304  0c00e304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0800e32c  0c00e32c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00005000  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  4 .data         000007cc  1ffed000  0c00e334  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00003064  1ffed7cc  0c00eb00  0001d7cc  2**2
                  ALLOC
  6 USB_RAM       00000e00  20000000  20000000  00020000  2**2
                  ALLOC
  7 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  8 .debug_aranges 00001c48  00000000  00000000  0001d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00057dbb  00000000  00000000  0001f418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cb06  00000000  00000000  000771d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000167d0  00000000  00000000  00083cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004fb0  00000000  00000000  0009a4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000132d7  00000000  00000000  0009f45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001981d  00000000  00000000  000b2733  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e00  00000000  00000000  000cbf50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00001758  00000000  00000000  000cdd50  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 d0 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 bd 42 00 08 99 02 00 08     .........B......
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 2d 42 00 08 99 02 00 08     ........-B......
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	95 2f 00 08 99 02 00 08 a1 2f 00 08 41 3b 00 08     ./......./..A;..
 80001ac:	35 3b 00 08 99 02 00 08 99 02 00 08 99 02 00 08     5;..............
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	59 2c 00 08 99 02 00 08 00 00 00 00 99 02 00 08     Y,..............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00e334 	.word	0x0c00e334
 800024c:	1ffed000 	.word	0x1ffed000
 8000250:	000007cc 	.word	0x000007cc
 8000254:	0c00e334 	.word	0x0c00e334
 8000258:	1ffed000 	.word	0x1ffed000
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffed7cc 	.word	0x1ffed7cc
 8000264:	00003064 	.word	0x00003064
 8000268:	20000000 	.word	0x20000000
 800026c:	00000e00 	.word	0x00000e00
 8000270:	20000e00 	.word	0x20000e00
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffed000 	.word	0x1ffed000

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08001c6d 	.word	0x08001c6d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800b71d 	.word	0x0800b71d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800b121 	.word	0x0800b121

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800029c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80002a0:	4403      	add	r3, r0
 80002a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80002a4:	f001 0403 	and.w	r4, r1, #3
 80002a8:	691e      	ldr	r6, [r3, #16]
 80002aa:	00e4      	lsls	r4, r4, #3
 80002ac:	25f8      	movs	r5, #248	; 0xf8
 80002ae:	40a5      	lsls	r5, r4
 80002b0:	ea26 0505 	bic.w	r5, r6, r5
 80002b4:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80002b6:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80002b8:	004f      	lsls	r7, r1, #1
 80002ba:	2503      	movs	r5, #3
 80002bc:	40bd      	lsls	r5, r7
 80002be:	ea26 0505 	bic.w	r5, r6, r5
 80002c2:	6745      	str	r5, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80002c4:	4d16      	ldr	r5, [pc, #88]	; (8000320 <XMC_GPIO_Init+0x84>)
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d003      	beq.n	80002d2 <XMC_GPIO_Init+0x36>
 80002ca:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80002ce:	42a8      	cmp	r0, r5
 80002d0:	d107      	bne.n	80002e2 <XMC_GPIO_Init+0x46>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80002d2:	6e05      	ldr	r5, [r0, #96]	; 0x60
 80002d4:	2601      	movs	r6, #1
 80002d6:	fa06 f101 	lsl.w	r1, r6, r1
 80002da:	ea25 0101 	bic.w	r1, r5, r1
 80002de:	6601      	str	r1, [r0, #96]	; 0x60
 80002e0:	e018      	b.n	8000314 <XMC_GPIO_Init+0x78>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80002e2:	f992 5000 	ldrsb.w	r5, [r2]
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	da14      	bge.n	8000314 <XMC_GPIO_Init+0x78>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80002ea:	6855      	ldr	r5, [r2, #4]
 80002ec:	408d      	lsls	r5, r1
 80002ee:	6045      	str	r5, [r0, #4]
 80002f0:	08cd      	lsrs	r5, r1, #3
 80002f2:	eb00 0085 	add.w	r0, r0, r5, lsl #2

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80002f6:	f001 0107 	and.w	r1, r1, #7
 80002fa:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80002fc:	0089      	lsls	r1, r1, #2
 80002fe:	2507      	movs	r5, #7
 8000300:	408d      	lsls	r5, r1
 8000302:	ea26 0505 	bic.w	r5, r6, r5
 8000306:	6405      	str	r5, [r0, #64]	; 0x40
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000308:	7a16      	ldrb	r6, [r2, #8]
 800030a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800030c:	fa06 f101 	lsl.w	r1, r6, r1
 8000310:	4329      	orrs	r1, r5
 8000312:	6401      	str	r1, [r0, #64]	; 0x40
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000314:	7812      	ldrb	r2, [r2, #0]
 8000316:	6919      	ldr	r1, [r3, #16]
 8000318:	40a2      	lsls	r2, r4
 800031a:	430a      	orrs	r2, r1
 800031c:	611a      	str	r2, [r3, #16]
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000320:	48028e00 	.word	0x48028e00

08000324 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000324:	b510      	push	{r4, lr}
 8000326:	4604      	mov	r4, r0
  uint32_t i;

  SystemCoreClockUpdate();
 8000328:	f001 fc5c 	bl	8001be4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <XMC_SCU_lDelay+0x24>)
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <XMC_SCU_lDelay+0x28>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	fbb3 f3f0 	udiv	r3, r3, r0
 8000336:	fb03 f004 	mul.w	r0, r3, r4

  for (i = 0U; i < delay; ++i)
 800033a:	2300      	movs	r3, #0
 800033c:	4283      	cmp	r3, r0
 800033e:	d002      	beq.n	8000346 <XMC_SCU_lDelay+0x22>
  {
    __NOP();
 8000340:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000342:	3301      	adds	r3, #1
 8000344:	e7fa      	b.n	800033c <XMC_SCU_lDelay+0x18>
  {
    __NOP();
  }
}
 8000346:	bd10      	pop	{r4, pc}
 8000348:	2003ffc0 	.word	0x2003ffc0
 800034c:	000f4240 	.word	0x000f4240

08000350 <XMC_SCU_RESET_AssertPeripheralReset>:
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000350:	0f02      	lsrs	r2, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8000352:	230c      	movs	r3, #12
 8000354:	4353      	muls	r3, r2
 8000356:	4a02      	ldr	r2, [pc, #8]	; (8000360 <XMC_SCU_RESET_AssertPeripheralReset+0x10>)

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000358:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800035c:	5098      	str	r0, [r3, r2]
 800035e:	4770      	bx	lr
 8000360:	50004410 	.word	0x50004410

08000364 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000364:	0f02      	lsrs	r2, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000366:	230c      	movs	r3, #12
 8000368:	4353      	muls	r3, r2
 800036a:	4a02      	ldr	r2, [pc, #8]	; (8000374 <XMC_SCU_RESET_DeassertPeripheralReset+0x10>)

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800036c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000370:	5098      	str	r0, [r3, r2]
 8000372:	4770      	bx	lr
 8000374:	50004414 	.word	0x50004414

08000378 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800037a:	4a04      	ldr	r2, [pc, #16]	; (800038c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800037c:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800037e:	6810      	ldr	r0, [r2, #0]
 8000380:	f003 0301 	and.w	r3, r3, #1
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000384:	40d8      	lsrs	r0, r3
 8000386:	4770      	bx	lr
 8000388:	50004600 	.word	0x50004600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000390:	4a03      	ldr	r2, [pc, #12]	; (80003a0 <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 8000392:	68d3      	ldr	r3, [r2, #12]
 8000394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000398:	4318      	orrs	r0, r3
 800039a:	60d0      	str	r0, [r2, #12]
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	50004600 	.word	0x50004600

080003a4 <XMC_SCU_CLOCK_SetUsbClockSource>:
}

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80003a4:	4a03      	ldr	r2, [pc, #12]	; (80003b4 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 80003a6:	6993      	ldr	r3, [r2, #24]
 80003a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ac:	4318      	orrs	r0, r3
 80003ae:	6190      	str	r0, [r2, #24]
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	50004600 	.word	0x50004600

080003b8 <XMC_SCU_CLOCK_SetWdtClockSource>:
}

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 80003ba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80003bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003c0:	4318      	orrs	r0, r3
 80003c2:	6250      	str	r0, [r2, #36]	; 0x24
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	50004600 	.word	0x50004600

080003cc <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80003cc:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x1c>)
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80003ce:	68d3      	ldr	r3, [r2, #12]

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80003d0:	b920      	cbnz	r0, 80003dc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x10>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80003d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003d6:	f023 0301 	bic.w	r3, r3, #1
 80003da:	e003      	b.n	80003e4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x18>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80003dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	60d3      	str	r3, [r2, #12]
 80003e6:	4770      	bx	lr
 80003e8:	50004710 	.word	0x50004710

080003ec <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 80003ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80003f2:	071b      	lsls	r3, r3, #28
 80003f4:	d4fa      	bmi.n	80003ec <XMC_SCU_HIB_SetRtcClockSource>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80003f6:	4a04      	ldr	r2, [pc, #16]	; (8000408 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 80003f8:	68d3      	ldr	r3, [r2, #12]
 80003fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003fe:	4318      	orrs	r0, r3
 8000400:	60d0      	str	r0, [r2, #12]
 8000402:	4770      	bx	lr
 8000404:	50004000 	.word	0x50004000
 8000408:	50004300 	.word	0x50004300

0800040c <XMC_SCU_HIB_SetStandbyClockSource>:
}

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <XMC_SCU_HIB_SetStandbyClockSource+0x18>)
 800040e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000412:	071b      	lsls	r3, r3, #28
 8000414:	d4fa      	bmi.n	800040c <XMC_SCU_HIB_SetStandbyClockSource>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 8000418:	68d3      	ldr	r3, [r2, #12]
 800041a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800041e:	4318      	orrs	r0, r3
 8000420:	60d0      	str	r0, [r2, #12]
 8000422:	4770      	bx	lr
 8000424:	50004000 	.word	0x50004000
 8000428:	50004300 	.word	0x50004300

0800042c <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800042c:	4a03      	ldr	r2, [pc, #12]	; (800043c <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 800042e:	68d3      	ldr	r3, [r2, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000430:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000436:	4303      	orrs	r3, r0
 8000438:	60d3      	str	r3, [r2, #12]
 800043a:	4770      	bx	lr
 800043c:	50004600 	.word	0x50004600

08000440 <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000440:	4a03      	ldr	r2, [pc, #12]	; (8000450 <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 8000442:	6a13      	ldr	r3, [r2, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000444:	3801      	subs	r0, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000446:	f023 0301 	bic.w	r3, r3, #1
 800044a:	4303      	orrs	r3, r0
 800044c:	6213      	str	r3, [r2, #32]
 800044e:	4770      	bx	lr
 8000450:	50004600 	.word	0x50004600

08000454 <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000454:	4a03      	ldr	r2, [pc, #12]	; (8000464 <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 8000456:	6913      	ldr	r3, [r2, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000458:	3801      	subs	r0, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800045a:	f023 0301 	bic.w	r3, r3, #1
 800045e:	4303      	orrs	r3, r0
 8000460:	6113      	str	r3, [r2, #16]
 8000462:	4770      	bx	lr
 8000464:	50004600 	.word	0x50004600

08000468 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000468:	4a03      	ldr	r2, [pc, #12]	; (8000478 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 800046a:	6953      	ldr	r3, [r2, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800046c:	3801      	subs	r0, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	4303      	orrs	r3, r0
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4770      	bx	lr
 8000478:	50004600 	.word	0x50004600

0800047c <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800047c:	4a03      	ldr	r2, [pc, #12]	; (800048c <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 800047e:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000480:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000482:	f023 0307 	bic.w	r3, r3, #7
 8000486:	4303      	orrs	r3, r0
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4770      	bx	lr
 800048c:	50004600 	.word	0x50004600

08000490 <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000490:	4a03      	ldr	r2, [pc, #12]	; (80004a0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 8000492:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000494:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000496:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800049a:	4303      	orrs	r3, r0
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4770      	bx	lr
 80004a0:	50004600 	.word	0x50004600

080004a4 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80004a4:	4a03      	ldr	r2, [pc, #12]	; (80004b4 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 80004a6:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80004a8:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80004aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80004ae:	4303      	orrs	r3, r0
 80004b0:	6253      	str	r3, [r2, #36]	; 0x24
 80004b2:	4770      	bx	lr
 80004b4:	50004600 	.word	0x50004600

080004b8 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80004b8:	4b01      	ldr	r3, [pc, #4]	; (80004c0 <XMC_SCU_CLOCK_EnableClock+0x8>)
 80004ba:	6058      	str	r0, [r3, #4]
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	50004600 	.word	0x50004600

080004c4 <XMC_SCU_CLOCK_GatePeripheralClock>:

#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 80004c4:	0f02      	lsrs	r2, r0, #28
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 80004c6:	230c      	movs	r3, #12
 80004c8:	4353      	muls	r3, r2
 80004ca:	4a02      	ldr	r2, [pc, #8]	; (80004d4 <XMC_SCU_CLOCK_GatePeripheralClock+0x10>)
#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80004cc:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 80004d0:	5098      	str	r0, [r3, r2]
 80004d2:	4770      	bx	lr
 80004d4:	50004644 	.word	0x50004644

080004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>:
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80004d8:	0f02      	lsrs	r2, r0, #28
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80004da:	230c      	movs	r3, #12
 80004dc:	4353      	muls	r3, r2
 80004de:	4a02      	ldr	r2, [pc, #8]	; (80004e8 <XMC_SCU_CLOCK_UngatePeripheralClock+0x10>)

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80004e0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80004e4:	5098      	str	r0, [r3, r2]
 80004e6:	4770      	bx	lr
 80004e8:	50004648 	.word	0x50004648

080004ec <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	f042 0201 	orr.w	r2, r2, #1
 80004f4:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004f6:	695a      	ldr	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80004f8:	3801      	subs	r0, #1

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80004fa:	3901      	subs	r1, #1
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80004fc:	0600      	lsls	r0, r0, #24
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004fe:	f042 0210 	orr.w	r2, r2, #16

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000502:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000506:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000508:	6159      	str	r1, [r3, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000510:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	f022 0210 	bic.w	r2, r2, #16
 8000518:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000520:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000522:	691a      	ldr	r2, [r3, #16]
 8000524:	0752      	lsls	r2, r2, #29
 8000526:	d5fc      	bpl.n	8000522 <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	50004710 	.word	0x50004710

08000530 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000530:	b510      	push	{r4, lr}
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000532:	4c0b      	ldr	r4, [pc, #44]	; (8000560 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x30>)
 8000534:	6863      	ldr	r3, [r4, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000536:	2801      	cmp	r0, #1

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800053c:	6063      	str	r3, [r4, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800053e:	d10a      	bne.n	8000556 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x26>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000540:	6863      	ldr	r3, [r4, #4]
 8000542:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000546:	6063      	str	r3, [r4, #4]
    XMC_SCU_lDelay(100UL);
 8000548:	2064      	movs	r0, #100	; 0x64
 800054a:	f7ff feeb 	bl	8000324 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800054e:	6863      	ldr	r3, [r4, #4]
 8000550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000554:	6063      	str	r3, [r4, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000556:	2064      	movs	r0, #100	; 0x64
}
 8000558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
 800055c:	f7ff bee2 	b.w	8000324 <XMC_SCU_lDelay>
 8000560:	50004710 	.word	0x50004710

08000564 <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000564:	4b02      	ldr	r3, [pc, #8]	; (8000570 <XMC_SCU_POWER_EnableUsb+0xc>)
 8000566:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	50004200 	.word	0x50004200

08000574 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <XMC_SCU_POWER_DisableUsb+0xc>)
 8000576:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	50004200 	.word	0x50004200

08000584 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <XMC_SCU_HIB_EnableHibernateDomain+0x2c>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	07d2      	lsls	r2, r2, #31
 800058a:	d504      	bpl.n	8000596 <XMC_SCU_HIB_EnableHibernateDomain+0x12>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <XMC_SCU_HIB_EnableHibernateDomain+0x30>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	0590      	lsls	r0, r2, #22
 8000592:	d406      	bmi.n	80005a2 <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
 8000594:	4770      	bx	lr
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000596:	2201      	movs	r2, #1
 8000598:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	07d1      	lsls	r1, r2, #31
 800059e:	d5fc      	bpl.n	800059a <XMC_SCU_HIB_EnableHibernateDomain+0x16>
 80005a0:	e7f4      	b.n	800058c <XMC_SCU_HIB_EnableHibernateDomain+0x8>
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80005a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a6:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	0592      	lsls	r2, r2, #22
 80005ac:	d4fc      	bmi.n	80005a8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
 80005ae:	4770      	bx	lr
 80005b0:	50004200 	.word	0x50004200
 80005b4:	50004400 	.word	0x50004400

080005b8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	f080 0008 	eor.w	r0, r0, #8
}
 80005c0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	50004300 	.word	0x50004300

080005cc <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 80005ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005d2:	60da      	str	r2, [r3, #12]
/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80005d4:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 80005d6:	69d1      	ldr	r1, [r2, #28]
 80005d8:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80005dc:	61d1      	str	r1, [r2, #28]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 80005de:	6859      	ldr	r1, [r3, #4]
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80005e0:	0208      	lsls	r0, r1, #8
 80005e2:	d5fc      	bpl.n	80005de <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x12>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80005e4:	490a      	ldr	r1, [pc, #40]	; (8000610 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 80005e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005ea:	60c8      	str	r0, [r1, #12]
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80005ec:	2108      	movs	r1, #8
 80005ee:	6051      	str	r1, [r2, #4]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 80005f0:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80005f2:	0391      	lsls	r1, r2, #14
 80005f4:	d5fc      	bpl.n	80005f0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x24>
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 80005f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80005fc:	60d1      	str	r1, [r2, #12]
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80005fe:	4905      	ldr	r1, [pc, #20]	; (8000614 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 8000600:	68ca      	ldr	r2, [r1, #12]
 8000602:	f042 0208 	orr.w	r2, r2, #8
 8000606:	60ca      	str	r2, [r1, #12]
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8000608:	685a      	ldr	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 800060a:	0312      	lsls	r2, r2, #12
 800060c:	d5fc      	bpl.n	8000608 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>
}
 800060e:	4770      	bx	lr
 8000610:	50004074 	.word	0x50004074
 8000614:	50004300 	.word	0x50004300

08000618 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000618:	b570      	push	{r4, r5, r6, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800061a:	4d0c      	ldr	r5, [pc, #48]	; (800064c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x34>)

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800061c:	4e0c      	ldr	r6, [pc, #48]	; (8000650 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800061e:	686b      	ldr	r3, [r5, #4]
 8000620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000624:	606b      	str	r3, [r5, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000626:	6874      	ldr	r4, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000628:	f003 faf0 	bl	8003c0c <OSCHP_GetFrequency>
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x3c>)
 800062e:	fbb0 f0f3 	udiv	r0, r0, r3
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000632:	f424 2370 	bic.w	r3, r4, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000636:	3801      	subs	r0, #1
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000638:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800063c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000640:	6073      	str	r3, [r6, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000642:	686b      	ldr	r3, [r5, #4]
 8000644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000648:	606b      	str	r3, [r5, #4]
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	50004710 	.word	0x50004710
 8000650:	50004700 	.word	0x50004700
 8000654:	002625a0 	.word	0x002625a0

08000658 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:
}

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 8000660:	f5a0 7360 	sub.w	r3, r0, #896	; 0x380
 8000664:	4258      	negs	r0, r3
 8000666:	4158      	adcs	r0, r3
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	50004710 	.word	0x50004710

08000670 <XMC_SCU_CLOCK_EnableSystemPll>:
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000670:	4a03      	ldr	r2, [pc, #12]	; (8000680 <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 8000672:	6853      	ldr	r3, [r2, #4]
 8000674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000678:	f023 0302 	bic.w	r3, r3, #2
 800067c:	6053      	str	r3, [r2, #4]
 800067e:	4770      	bx	lr
 8000680:	50004710 	.word	0x50004710

08000684 <XMC_SCU_CLOCK_DisableSystemPll>:
}

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 8000686:	6853      	ldr	r3, [r2, #4]
 8000688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6053      	str	r3, [r2, #4]
 8000692:	4770      	bx	lr
 8000694:	50004710 	.word	0x50004710

08000698 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x18>)
 800069a:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 800069c:	3801      	subs	r0, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800069e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80006a6:	6093      	str	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 80006a8:	2032      	movs	r0, #50	; 0x32
 80006aa:	f7ff be3b 	b.w	8000324 <XMC_SCU_lDelay>
 80006ae:	bf00      	nop
 80006b0:	50004710 	.word	0x50004710

080006b4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80006b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006b8:	460c      	mov	r4, r1
 80006ba:	4605      	mov	r5, r0
 80006bc:	4690      	mov	r8, r2
 80006be:	461f      	mov	r7, r3
 80006c0:	9e06      	ldr	r6, [sp, #24]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80006c2:	f7ff fe83 	bl	80003cc <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80006c6:	2c01      	cmp	r4, #1
 80006c8:	4c31      	ldr	r4, [pc, #196]	; (8000790 <XMC_SCU_CLOCK_StartSystemPll+0xdc>)
 80006ca:	d152      	bne.n	8000772 <XMC_SCU_CLOCK_StartSystemPll+0xbe>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80006cc:	b935      	cbnz	r5, 80006dc <XMC_SCU_CLOCK_StartSystemPll+0x28>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80006ce:	f003 fa9d 	bl	8003c0c <OSCHP_GetFrequency>
 80006d2:	4d30      	ldr	r5, [pc, #192]	; (8000794 <XMC_SCU_CLOCK_StartSystemPll+0xe0>)
 80006d4:	fbb0 f0f5 	udiv	r0, r0, r5
 80006d8:	0580      	lsls	r0, r0, #22
 80006da:	e001      	b.n	80006e0 <XMC_SCU_CLOCK_StartSystemPll+0x2c>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80006dc:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80006e0:	6863      	ldr	r3, [r4, #4]
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6063      	str	r3, [r4, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 80006e8:	6863      	ldr	r3, [r4, #4]
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6063      	str	r3, [r4, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80006f0:	68a1      	ldr	r1, [r4, #8]
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <XMC_SCU_CLOCK_StartSystemPll+0xe4>)
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80006f4:	f108 32ff 	add.w	r2, r8, #4294967295

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80006f8:	400b      	ands	r3, r1
 80006fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80006fe:	1e7a      	subs	r2, r7, #1
 8000700:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000704:	4378      	muls	r0, r7
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000706:	2318      	movs	r3, #24
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000708:	fbb0 f5f8 	udiv	r5, r0, r8
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800070c:	fbb5 f3f3 	udiv	r3, r5, r3
 8000710:	0d9b      	lsrs	r3, r3, #22
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000712:	3b01      	subs	r3, #1

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000714:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000718:	60a3      	str	r3, [r4, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800071a:	6863      	ldr	r3, [r4, #4]
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6063      	str	r3, [r4, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000722:	6863      	ldr	r3, [r4, #4]
 8000724:	f023 0310 	bic.w	r3, r3, #16
 8000728:	6063      	str	r3, [r4, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 800072a:	6863      	ldr	r3, [r4, #4]
 800072c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000730:	6063      	str	r3, [r4, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <XMC_SCU_CLOCK_StartSystemPll+0xdc>)
 8000736:	0759      	lsls	r1, r3, #29
 8000738:	d5fb      	bpl.n	8000732 <XMC_SCU_CLOCK_StartSystemPll+0x7e>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800073a:	6853      	ldr	r3, [r2, #4]
 800073c:	f023 0301 	bic.w	r3, r3, #1
 8000740:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	07da      	lsls	r2, r3, #31
 8000746:	d4fc      	bmi.n	8000742 <XMC_SCU_CLOCK_StartSystemPll+0x8e>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000748:	203c      	movs	r0, #60	; 0x3c
 800074a:	fbb5 f0f0 	udiv	r0, r5, r0
 800074e:	0d80      	lsrs	r0, r0, #22
    if (kdiv < kdiv_temp)
 8000750:	4286      	cmp	r6, r0
 8000752:	d201      	bcs.n	8000758 <XMC_SCU_CLOCK_StartSystemPll+0xa4>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000754:	f7ff ffa0 	bl	8000698 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000758:	205a      	movs	r0, #90	; 0x5a
 800075a:	fbb5 f0f0 	udiv	r0, r5, r0
 800075e:	0d80      	lsrs	r0, r0, #22
    if (kdiv < kdiv_temp)
 8000760:	4286      	cmp	r6, r0
 8000762:	d201      	bcs.n	8000768 <XMC_SCU_CLOCK_StartSystemPll+0xb4>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000764:	f7ff ff98 	bl	8000698 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000768:	4630      	mov	r0, r6
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 800076a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (kdiv < kdiv_temp)
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 800076e:	f7ff bf93 	b.w	8000698 <XMC_SCU_CLOCK_StepSystemPllFrequency>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000772:	68a3      	ldr	r3, [r4, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000774:	3e01      	subs	r6, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800077a:	431e      	orrs	r6, r3
 800077c:	60a6      	str	r6, [r4, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800077e:	6863      	ldr	r3, [r4, #4]
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6063      	str	r3, [r4, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	07db      	lsls	r3, r3, #31
 800078a:	d5fc      	bpl.n	8000786 <XMC_SCU_CLOCK_StartSystemPll+0xd2>
    {
      /* wait for prescaler mode */
    }
  }
}
 800078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000790:	50004710 	.word	0x50004710
 8000794:	000f4240 	.word	0x000f4240
 8000798:	f08080ff 	.word	0xf08080ff

0800079c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800079c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800079e:	4604      	mov	r4, r0
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fdf5 	bl	8000390 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80007a6:	f7ff feed 	bl	8000584 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80007aa:	79e3      	ldrb	r3, [r4, #7]
 80007ac:	b91b      	cbnz	r3, 80007b6 <XMC_SCU_CLOCK_Init+0x1a>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80007ae:	7a60      	ldrb	r0, [r4, #9]
 80007b0:	f7ff fe2c 	bl	800040c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80007b4:	e006      	b.n	80007c4 <XMC_SCU_CLOCK_Init+0x28>

  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80007b6:	f7ff ff09 	bl	80005cc <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80007ba:	f7ff fefd 	bl	80005b8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d0fb      	beq.n	80007ba <XMC_SCU_CLOCK_Init+0x1e>
 80007c2:	e7f4      	b.n	80007ae <XMC_SCU_CLOCK_Init+0x12>
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <XMC_SCU_CLOCK_Init+0x98>)
 80007c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
  while (XMC_SCU_GetMirrorStatus() != 0)
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1fa      	bne.n	80007c4 <XMC_SCU_CLOCK_Init+0x28>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80007ce:	7a20      	ldrb	r0, [r4, #8]
 80007d0:	f7ff feae 	bl	8000530 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80007d4:	7c20      	ldrb	r0, [r4, #16]
 80007d6:	f7ff fe29 	bl	800042c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80007da:	7c60      	ldrb	r0, [r4, #17]
 80007dc:	f7ff fe3a 	bl	8000454 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80007e0:	7ca0      	ldrb	r0, [r4, #18]
 80007e2:	f7ff fe2d 	bl	8000440 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80007e6:	7ce0      	ldrb	r0, [r4, #19]
 80007e8:	f7ff fe3e 	bl	8000468 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80007ec:	79a3      	ldrb	r3, [r4, #6]
 80007ee:	b923      	cbnz	r3, 80007fa <XMC_SCU_CLOCK_Init+0x5e>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80007f0:	78e3      	ldrb	r3, [r4, #3]
 80007f2:	b94b      	cbnz	r3, 8000808 <XMC_SCU_CLOCK_Init+0x6c>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80007f4:	f7ff ff46 	bl	8000684 <XMC_SCU_CLOCK_DisableSystemPll>
 80007f8:	e010      	b.n	800081c <XMC_SCU_CLOCK_Init+0x80>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80007fa:	f7ff ff0d 	bl	8000618 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80007fe:	f7ff ff2b 	bl	8000658 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000802:	2800      	cmp	r0, #0
 8000804:	d0fb      	beq.n	80007fe <XMC_SCU_CLOCK_Init+0x62>
 8000806:	e7f3      	b.n	80007f0 <XMC_SCU_CLOCK_Init+0x54>
    XMC_SCU_CLOCK_DisableSystemPll();
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000808:	f7ff ff32 	bl	8000670 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800080c:	78a5      	ldrb	r5, [r4, #2]
 800080e:	88a0      	ldrh	r0, [r4, #4]
 8000810:	78e1      	ldrb	r1, [r4, #3]
 8000812:	7862      	ldrb	r2, [r4, #1]
 8000814:	7823      	ldrb	r3, [r4, #0]
 8000816:	9500      	str	r5, [sp, #0]
 8000818:	f7ff ff4c 	bl	80006b4 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800081c:	68e0      	ldr	r0, [r4, #12]
 800081e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000822:	d101      	bne.n	8000828 <XMC_SCU_CLOCK_Init+0x8c>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000824:	f7ff fdb4 	bl	8000390 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
}
 8000828:	b003      	add	sp, #12
 800082a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
 800082e:	f001 b9d9 	b.w	8001be4 <SystemCoreClockUpdate>
 8000832:	bf00      	nop
 8000834:	50004000 	.word	0x50004000

08000838 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000838:	b510      	push	{r4, lr}
 800083a:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800083c:	2010      	movs	r0, #16
 800083e:	f7ff fe3b 	bl	80004b8 <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <XMC_CCU4_EnableModule+0x54>)
 8000844:	429c      	cmp	r4, r3
 8000846:	d104      	bne.n	8000852 <XMC_CCU4_EnableModule+0x1a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000848:	2004      	movs	r0, #4
 800084a:	f7ff fe45 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800084e:	2004      	movs	r0, #4
 8000850:	e016      	b.n	8000880 <XMC_CCU4_EnableModule+0x48>
  if (module == CCU40)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <XMC_CCU4_EnableModule+0x58>)
 8000854:	429c      	cmp	r4, r3
 8000856:	d104      	bne.n	8000862 <XMC_CCU4_EnableModule+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000858:	2008      	movs	r0, #8
 800085a:	f7ff fe3d 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 800085e:	2008      	movs	r0, #8
 8000860:	e00e      	b.n	8000880 <XMC_CCU4_EnableModule+0x48>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <XMC_CCU4_EnableModule+0x5c>)
 8000864:	429c      	cmp	r4, r3
 8000866:	d104      	bne.n	8000872 <XMC_CCU4_EnableModule+0x3a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000868:	2010      	movs	r0, #16
 800086a:	f7ff fe35 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 800086e:	2010      	movs	r0, #16
 8000870:	e006      	b.n	8000880 <XMC_CCU4_EnableModule+0x48>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <XMC_CCU4_EnableModule+0x60>)
 8000874:	429c      	cmp	r4, r3
 8000876:	d107      	bne.n	8000888 <XMC_CCU4_EnableModule+0x50>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <XMC_CCU4_EnableModule+0x64>)
 800087a:	f7ff fe2d 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 800087e:	4807      	ldr	r0, [pc, #28]	; (800089c <XMC_CCU4_EnableModule+0x64>)
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
 8000880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000884:	f7ff bd6e 	b.w	8000364 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000888:	bd10      	pop	{r4, pc}
 800088a:	bf00      	nop
 800088c:	4000c000 	.word	0x4000c000
 8000890:	40010000 	.word	0x40010000
 8000894:	40014000 	.word	0x40014000
 8000898:	48004000 	.word	0x48004000
 800089c:	10000001 	.word	0x10000001

080008a0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80008a0:	b538      	push	{r3, r4, r5, lr}
 80008a2:	4604      	mov	r4, r0
 80008a4:	460d      	mov	r5, r1
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80008a6:	f7ff ffc7 	bl	8000838 <XMC_CCU4_EnableModule>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80008aa:	68e3      	ldr	r3, [r4, #12]
 80008ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b0:	60e3      	str	r3, [r4, #12]
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 80008b2:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80008b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80008b8:	ea43 3185 	orr.w	r1, r3, r5, lsl #14
  
  module->GCTRL = gctrl;
 80008bc:	6021      	str	r1, [r4, #0]
 80008be:	bd38      	pop	{r3, r4, r5, pc}

080008c0 <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80008c0:	680b      	ldr	r3, [r1, #0]
 80008c2:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80008c4:	794b      	ldrb	r3, [r1, #5]
 80008c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80008ca:	051b      	lsls	r3, r3, #20
 80008cc:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80008ce:	790b      	ldrb	r3, [r1, #4]
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80008d6:	794b      	ldrb	r3, [r1, #5]
 80008d8:	f003 030f 	and.w	r3, r3, #15
 80008dc:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80008de:	794b      	ldrb	r3, [r1, #5]
 80008e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80008e4:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80008e6:	790b      	ldrb	r3, [r1, #4]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	62c3      	str	r3, [r0, #44]	; 0x2c
 80008ec:	4770      	bx	lr

080008ee <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80008ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80008f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80008f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  slice->FPC = fpc;
 80008f8:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80008fa:	6241      	str	r1, [r0, #36]	; 0x24
 80008fc:	4770      	bx	lr
	...

08000900 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000900:	2909      	cmp	r1, #9
 8000902:	b530      	push	{r4, r5, lr}
 8000904:	bf9c      	itt	ls
 8000906:	4c09      	ldrls	r4, [pc, #36]	; (800092c <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
 8000908:	4d09      	ldrls	r5, [pc, #36]	; (8000930 <XMC_CCU4_SLICE_SetInterruptNode+0x30>)

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800090a:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 800090e:	bf99      	ittee	ls
 8000910:	5c64      	ldrbls	r4, [r4, r1]
 8000912:	f835 1011 	ldrhls.w	r1, [r5, r1, lsl #1]
 8000916:	f44f 5140 	movhi.w	r1, #12288	; 0x3000
 800091a:	240c      	movhi	r4, #12
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
 800091c:	ea23 0301 	bic.w	r3, r3, r1
  srs |= (uint32_t)sr << pos;
 8000920:	40a2      	lsls	r2, r4
 8000922:	431a      	orrs	r2, r3
  slice->SRS = srs;
 8000924:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 8000928:	bd30      	pop	{r4, r5, pc}
 800092a:	bf00      	nop
 800092c:	0800c068 	.word	0x0800c068
 8000930:	0800c072 	.word	0x0800c072

08000934 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000934:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000938:	4418      	add	r0, r3
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 800093a:	f001 0103 	and.w	r1, r1, #3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 800093e:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000940:	00c9      	lsls	r1, r1, #3
 8000942:	6904      	ldr	r4, [r0, #16]
 8000944:	23f8      	movs	r3, #248	; 0xf8
 8000946:	408b      	lsls	r3, r1
 8000948:	ea24 0303 	bic.w	r3, r4, r3
 800094c:	6103      	str	r3, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800094e:	6903      	ldr	r3, [r0, #16]
 8000950:	408a      	lsls	r2, r1
 8000952:	4313      	orrs	r3, r2
 8000954:	6103      	str	r3, [r0, #16]
 8000956:	bd10      	pop	{r4, pc}

08000958 <XMC_GPIO_SetHardwareControl>:
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000958:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800095a:	0049      	lsls	r1, r1, #1
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800095c:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800095e:	2403      	movs	r4, #3
 8000960:	408c      	lsls	r4, r1
 8000962:	ea23 0304 	bic.w	r3, r3, r4
 8000966:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000968:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800096a:	408a      	lsls	r2, r1
 800096c:	4313      	orrs	r3, r2
 800096e:	6743      	str	r3, [r0, #116]	; 0x74
 8000970:	bd10      	pop	{r4, pc}

08000972 <XMC_I2C_CH_SetSlaveAddress>:
  channel->CCR = 0x0U;
}
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8000972:	f401 43f8 	and.w	r3, r1, #31744	; 0x7c00
 8000976:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 800097a:	bf01      	itttt	eq
 800097c:	004b      	lsleq	r3, r1, #1
 800097e:	f403 437e 	andeq.w	r3, r3, #65024	; 0xfe00
 8000982:	b2c9      	uxtbeq	r1, r1
 8000984:	4319      	orreq	r1, r3
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8000986:	bf18      	it	ne
 8000988:	0209      	lslne	r1, r1, #8
 800098a:	63c1      	str	r1, [r0, #60]	; 0x3c
 800098c:	4770      	bx	lr
	...

08000990 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8000990:	b510      	push	{r4, lr}
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8000992:	4c0c      	ldr	r4, [pc, #48]	; (80009c4 <XMC_I2C_CH_SetBaudrate+0x34>)
 8000994:	42a1      	cmp	r1, r4
 8000996:	d805      	bhi.n	80009a4 <XMC_I2C_CH_SetBaudrate+0x14>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8000998:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800099a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800099e:	63c2      	str	r2, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 80009a0:	220a      	movs	r2, #10
 80009a2:	e007      	b.n	80009b4 <XMC_I2C_CH_SetBaudrate+0x24>
    {
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 80009a4:	4c08      	ldr	r4, [pc, #32]	; (80009c8 <XMC_I2C_CH_SetBaudrate+0x38>)
 80009a6:	42a1      	cmp	r1, r4
 80009a8:	d80a      	bhi.n	80009c0 <XMC_I2C_CH_SetBaudrate+0x30>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 80009aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80009ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009b0:	63c2      	str	r2, [r0, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 80009b2:	2219      	movs	r2, #25
 80009b4:	f001 f812 	bl	80019dc <XMC_USIC_CH_SetBaudrate>
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
    {
      status = XMC_I2C_CH_STATUS_OK;
 80009b8:	3000      	adds	r0, #0
 80009ba:	bf18      	it	ne
 80009bc:	2001      	movne	r0, #1
 80009be:	bd10      	pop	{r4, pc}
      status = XMC_I2C_CH_STATUS_OK;
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 80009c0:	2001      	movs	r0, #1
  }
  
  return status;
}
 80009c2:	bd10      	pop	{r4, pc}
 80009c4:	000186a0 	.word	0x000186a0
 80009c8:	00061a80 	.word	0x00061a80

080009cc <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4604      	mov	r4, r0
 80009d0:	460d      	mov	r5, r1
  XMC_USIC_CH_Enable(channel);
 80009d2:	f001 f8cd 	bl	8001b70 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <XMC_I2C_CH_Init+0x30>)
 80009d8:	6363      	str	r3, [r4, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 80009da:	4620      	mov	r0, r4
 80009dc:	88a9      	ldrh	r1, [r5, #4]
 80009de:	f7ff ffc8 	bl	8000972 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 80009e2:	4620      	mov	r0, r4
 80009e4:	6829      	ldr	r1, [r5, #0]
 80009e6:	f7ff ffd3 	bl	8000990 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 80009ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009ee:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 80009f6:	2300      	movs	r3, #0
 80009f8:	6423      	str	r3, [r4, #64]	; 0x40
 80009fa:	bd38      	pop	{r3, r4, r5, pc}
 80009fc:	073f0303 	.word	0x073f0303

08000a00 <XMC_I2C_CH_MasterStart>:
  {
    temp |= 0x1U;
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000a00:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
  if (command == XMC_I2C_CH_CMD_READ)
 8000a04:	2a01      	cmp	r2, #1
  {
    temp |= 0x1U;
 8000a06:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000a0a:	bf08      	it	eq
 8000a0c:	f041 0101 	orreq.w	r1, r1, #1
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000a10:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000a14:	d109      	bne.n	8000a2a <XMC_I2C_CH_MasterStart+0x2a>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000a16:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000a18:	061b      	lsls	r3, r3, #24
 8000a1a:	d4fc      	bmi.n	8000a16 <XMC_I2C_CH_MasterStart+0x16>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 8000a1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000a1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a22:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = temp;
 8000a24:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000a28:	4770      	bx	lr
  }
  else
  {
    channel->IN[0U] = temp;
 8000a2a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000a2e:	4770      	bx	lr

08000a30 <XMC_I2C_CH_MasterRepeatedStart>:
  {
    tmp |= 0x1U;
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000a30:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
  if (command == XMC_I2C_CH_CMD_READ)
 8000a34:	2a01      	cmp	r2, #1
  {
    tmp |= 0x1U;
 8000a36:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
 8000a3a:	bf08      	it	eq
 8000a3c:	f041 0101 	orreq.w	r1, r1, #1
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000a40:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000a44:	d109      	bne.n	8000a5a <XMC_I2C_CH_MasterRepeatedStart+0x2a>
 8000a46:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000a48:	061b      	lsls	r3, r3, #24
 8000a4a:	d4fc      	bmi.n	8000a46 <XMC_I2C_CH_MasterRepeatedStart+0x16>
 8000a4c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000a4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a52:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = tmp;
 8000a54:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000a58:	4770      	bx	lr
  }
  else
  {
    channel->IN[0U] = tmp;
 8000a5a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000a5e:	4770      	bx	lr

08000a60 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000a60:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000a64:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000a68:	d10b      	bne.n	8000a82 <XMC_I2C_CH_MasterStop+0x22>
 8000a6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000a6c:	061b      	lsls	r3, r3, #24
 8000a6e:	d4fc      	bmi.n	8000a6a <XMC_I2C_CH_MasterStop+0xa>
 8000a70:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a76:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8000a78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a7c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8000a80:	4770      	bx	lr
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8000a82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a86:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000a8a:	4770      	bx	lr

08000a8c <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000a8c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000a90:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000a94:	d109      	bne.n	8000aaa <XMC_I2C_CH_MasterTransmit+0x1e>
 8000a96:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000a98:	061b      	lsls	r3, r3, #24
 8000a9a:	d4fc      	bmi.n	8000a96 <XMC_I2C_CH_MasterTransmit+0xa>
 8000a9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000a9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aa2:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8000aa4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000aa8:	4770      	bx	lr
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8000aaa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000aae:	4770      	bx	lr

08000ab0 <XMC_I2C_CH_MasterReceiveAck>:

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000ab0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000ab4:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000ab8:	d10b      	bne.n	8000ad2 <XMC_I2C_CH_MasterReceiveAck+0x22>
 8000aba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000abc:	061b      	lsls	r3, r3, #24
 8000abe:	d4fc      	bmi.n	8000aba <XMC_I2C_CH_MasterReceiveAck+0xa>
 8000ac0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000ac2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac6:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8000ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000acc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8000ad0:	4770      	bx	lr
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8000ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad6:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000ada:	4770      	bx	lr

08000adc <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000adc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000ae0:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000ae4:	d10b      	bne.n	8000afe <XMC_I2C_CH_MasterReceiveNack+0x22>
 8000ae6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000ae8:	061b      	lsls	r3, r3, #24
 8000aea:	d4fc      	bmi.n	8000ae6 <XMC_I2C_CH_MasterReceiveNack+0xa>
 8000aec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000aee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000af2:	64c3      	str	r3, [r0, #76]	; 0x4c
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8000af4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8000afc:	4770      	bx	lr
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8000afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b02:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 8000b06:	4770      	bx	lr

08000b08 <XMC_I2C_CH_GetReceivedData>:
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000b08:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000b0c:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint8_t)channel->RBUF;
 8000b10:	bf0c      	ite	eq
 8000b12:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8000b14:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000b18:	b2c0      	uxtb	r0, r0
  }

  return retval;
}
 8000b1a:	4770      	bx	lr

08000b1c <XMC_I2C_CH_EnableEvent>:
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= (event&0x1fc00U);
 8000b1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b1e:	f401 32fe 	and.w	r2, r1, #130048	; 0x1fc00
 8000b22:	4313      	orrs	r3, r2
 8000b24:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 8000b26:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <XMC_I2C_CH_EnableEvent+0x18>)
 8000b28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	41fc0000 	.word	0x41fc0000

08000b38 <XMC_I2C_CH_DisableEvent>:
}

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8000b38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b3a:	f401 32fe 	and.w	r2, r1, #130048	; 0x1fc00
 8000b3e:	ea23 0302 	bic.w	r3, r3, r2
 8000b42:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <XMC_I2C_CH_DisableEvent+0x1c>)
 8000b46:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000b48:	400a      	ands	r2, r1
 8000b4a:	ea23 0302 	bic.w	r3, r3, r2
 8000b4e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	41fc0000 	.word	0x41fc0000

08000b58 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	460e      	mov	r6, r1
 8000b5c:	4604      	mov	r4, r0
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8000b5e:	f001 f807 	bl	8001b70 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8000b62:	79f5      	ldrb	r5, [r6, #7]
  {
    oversampling = (uint32_t)config->oversampling;
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8000b64:	6831      	ldr	r1, [r6, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
  
  if(config->oversampling != 0U)
 8000b66:	2d00      	cmp	r5, #0
  {
    oversampling = (uint32_t)config->oversampling;
 8000b68:	bf08      	it	eq
 8000b6a:	2510      	moveq	r5, #16
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8000b6c:	462a      	mov	r2, r5
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f000 ff34 	bl	80019dc <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8000b74:	79b3      	ldrb	r3, [r6, #6]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8000b7e:	086d      	lsrs	r5, r5, #1
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	3501      	adds	r5, #1
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8000b86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8000b8a:	63e3      	str	r3, [r4, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8000b8c:	7933      	ldrb	r3, [r6, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	061b      	lsls	r3, r3, #24
 8000b92:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8000b96:	6363      	str	r3, [r4, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000b98:	7973      	ldrb	r3, [r6, #5]
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000b9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000b9c:	b903      	cbnz	r3, 8000ba0 <XMC_UART_CH_Init+0x48>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000b9e:	7933      	ldrb	r3, [r6, #4]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ba6:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000ba8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000bac:	63a3      	str	r3, [r4, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000bb4:	8933      	ldrh	r3, [r6, #8]
 8000bb6:	6423      	str	r3, [r4, #64]	; 0x40
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}

08000bba <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8000bba:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000bbe:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000bc2:	d108      	bne.n	8000bd6 <XMC_UART_CH_Transmit+0x1c>
 8000bc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000bc6:	061b      	lsls	r3, r3, #24
 8000bc8:	d4fc      	bmi.n	8000bc4 <XMC_UART_CH_Transmit+0xa>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR = flag;
 8000bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bce:	64c3      	str	r3, [r0, #76]	; 0x4c
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8000bd0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8000bd4:	4770      	bx	lr
  }
  else
  {
    channel->IN[0U] = data;
 8000bd6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
 8000bda:	4770      	bx	lr

08000bdc <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000bdc:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000be0:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint16_t)channel->RBUF;
 8000be4:	bf0c      	ite	eq
 8000be6:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000be8:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000bec:	b280      	uxth	r0, r0
  }

  return retval;
}
 8000bee:	4770      	bx	lr

08000bf0 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8000bf2:	4c1f      	ldr	r4, [pc, #124]	; (8000c70 <XMC_USBD_lReadFifo+0x80>)
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8000bf4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8000bf8:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8000bfc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000c00:	681b      	ldr	r3, [r3, #0]
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8000c02:	041b      	lsls	r3, r3, #16
 8000c04:	d532      	bpl.n	8000c6c <XMC_USBD_lReadFifo+0x7c>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8000c06:	2334      	movs	r3, #52	; 0x34
 8000c08:	fb03 4300 	mla	r3, r3, r0, r4
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	b36b      	cbz	r3, 8000c6c <XMC_USBD_lReadFifo+0x7c>
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
  word_count = (byte_count >> 2U );
 8000c10:	088e      	lsrs	r6, r1, #2
 8000c12:	2200      	movs	r2, #0
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8000c14:	42b2      	cmp	r2, r6
 8000c16:	d008      	beq.n	8000c2a <XMC_USBD_lReadFifo+0x3a>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8000c18:	2334      	movs	r3, #52	; 0x34
 8000c1a:	fb03 4300 	mla	r3, r3, r0, r4
 8000c1e:	682f      	ldr	r7, [r5, #0]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8000c26:	3201      	adds	r2, #1
 8000c28:	e7f4      	b.n	8000c14 <XMC_USBD_lReadFifo+0x24>
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
 8000c2a:	0093      	lsls	r3, r2, #2
    for (i = 0U;i < word_count; i++)
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d109      	bne.n	8000c44 <XMC_USBD_lReadFifo+0x54>
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8000c30:	2334      	movs	r3, #52	; 0x34
 8000c32:	fb03 4400 	mla	r4, r3, r0, r4
 8000c36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c38:	440b      	add	r3, r1
 8000c3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8000c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c3e:	4419      	add	r1, r3
 8000c40:	6261      	str	r1, [r4, #36]	; 0x24
 8000c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c44:	07d2      	lsls	r2, r2, #31
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
 8000c46:	682f      	ldr	r7, [r5, #0]
 8000c48:	1ad2      	subs	r2, r2, r3
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d2f0      	bcs.n	8000c30 <XMC_USBD_lReadFifo+0x40>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8000c4e:	2534      	movs	r5, #52	; 0x34
 8000c50:	fb05 4500 	mla	r5, r5, r0, r4
 8000c54:	189e      	adds	r6, r3, r2
 8000c56:	00f6      	lsls	r6, r6, #3
 8000c58:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
 8000c5c:	25ff      	movs	r5, #255	; 0xff
 8000c5e:	40b5      	lsls	r5, r6
 8000c60:	403d      	ands	r5, r7
 8000c62:	40f5      	lsrs	r5, r6
 8000c64:	f80e 5003 	strb.w	r5, [lr, r3]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	e7ee      	b.n	8000c4a <XMC_USBD_lReadFifo+0x5a>
 8000c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	1fff01a0 	.word	0x1fff01a0

08000c74 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8000c74:	b082      	sub	sp, #8
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	9301      	str	r3, [sp, #4]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8000c7a:	9b01      	ldr	r3, [sp, #4]
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	9301      	str	r3, [sp, #4]
  data.b.txfnum = fifo_num;
 8000c82:	9b01      	ldr	r3, [sp, #4]
 8000c84:	f000 001f 	and.w	r0, r0, #31
 8000c88:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8000c8c:	ea43 1080 	orr.w	r0, r3, r0, lsl #6
  xmc_device.global_register->grstctl = data.d32;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <XMC_USBD_lFlushTXFifo+0x38>)
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
  /*flush fifo */
  data.b.txfflsh = 1U;
  data.b.txfnum = fifo_num;
 8000c92:	9001      	str	r0, [sp, #4]
  xmc_device.global_register->grstctl = data.d32;
 8000c94:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000c98:	9a01      	ldr	r2, [sp, #4]
 8000c9a:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	9201      	str	r2, [sp, #4]
  } while (data.b.txfflsh);
 8000ca0:	9a01      	ldr	r2, [sp, #4]
 8000ca2:	0692      	lsls	r2, r2, #26
 8000ca4:	d4fa      	bmi.n	8000c9c <XMC_USBD_lFlushTXFifo+0x28>
    count = 0U;
  while (count++ < 1000U)
  {
    /* wait 3 phy clocks */
  }
}
 8000ca6:	b002      	add	sp, #8
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	1fff01a0 	.word	0x1fff01a0

08000cb0 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8000cb0:	b082      	sub	sp, #8
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9301      	str	r3, [sp, #4]
  data.b.rxfflsh = 1U;
 8000cb6:	9b01      	ldr	r3, [sp, #4]
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	9301      	str	r3, [sp, #4]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <XMC_USBD_lFlushRXFifo+0x28>)
 8000cc0:	9a01      	ldr	r2, [sp, #4]
 8000cc2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000cc6:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
    data.d32 = xmc_device.global_register->grstctl;
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	9201      	str	r2, [sp, #4]
  } while (data.b.rxfflsh);
 8000ccc:	9a01      	ldr	r2, [sp, #4]
 8000cce:	06d2      	lsls	r2, r2, #27
 8000cd0:	d4fa      	bmi.n	8000cc8 <XMC_USBD_lFlushRXFifo+0x18>
  count = 0U;
  while (count++ < 1000U)
  {
    /* wait 3 phy clocks */
  }
}
 8000cd2:	b002      	add	sp, #8
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	1fff01a0 	.word	0x1fff01a0

08000cdc <XMC_USBD_lStartReadXfer>:
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8000cdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000cde:	6881      	ldr	r1, [r0, #8]
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8000ce0:	b530      	push	{r4, r5, lr}
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8000ce2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000ce4:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000ce8:	1aa5      	subs	r5, r4, r2
 8000cea:	428d      	cmp	r5, r1
  {
    ep->xferLength += ep->maxTransferSize;
 8000cec:	bf88      	it	hi
 8000cee:	1852      	addhi	r2, r2, r1
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 8000cf0:	7801      	ldrb	r1, [r0, #0]
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
  {
    ep->xferLength += ep->maxTransferSize;
 8000cf2:	bf8c      	ite	hi
 8000cf4:	6282      	strhi	r2, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8000cf6:	6284      	strls	r4, [r0, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 8000cf8:	070a      	lsls	r2, r1, #28
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8000cfa:	f04f 0300 	mov.w	r3, #0
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 8000cfe:	d107      	bne.n	8000d10 <XMC_USBD_lStartReadXfer+0x34>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
 8000d00:	2201      	movs	r2, #1
 8000d02:	f362 43d4 	bfi	r3, r2, #19, #2
    ep0_data->b.supcnt = 0x3U;
 8000d06:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8000d0a:	f364 0306 	bfi	r3, r4, #0, #7
 8000d0e:	e014      	b.n	8000d3a <XMC_USBD_lStartReadXfer+0x5e>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8000d10:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000d12:	b92a      	cbnz	r2, 8000d20 <XMC_USBD_lStartReadXfer+0x44>
    {
      data.b.xfersize = 0U;
 8000d14:	f362 0312 	bfi	r3, r2, #0, #19
      data.b.pktcnt = 1U;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f362 43dc 	bfi	r3, r2, #19, #10
 8000d1e:	e00c      	b.n	8000d3a <XMC_USBD_lStartReadXfer+0x5e>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8000d20:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000d22:	1b12      	subs	r2, r2, r4
 8000d24:	6844      	ldr	r4, [r0, #4]
 8000d26:	f3c4 25c6 	ubfx	r5, r4, #11, #7
 8000d2a:	1954      	adds	r4, r2, r5
 8000d2c:	3c01      	subs	r4, #1
 8000d2e:	fbb4 f4f5 	udiv	r4, r4, r5
 8000d32:	f364 43dc 	bfi	r3, r4, #19, #10
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000d36:	f362 0312 	bfi	r3, r2, #0, #19
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <XMC_USBD_lStartReadXfer+0x90>)
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	7b54      	ldrb	r4, [r2, #13]
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <XMC_USBD_lStartReadXfer+0x94>)
 8000d42:	b93c      	cbnz	r4, 8000d54 <XMC_USBD_lStartReadXfer+0x78>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8000d44:	f001 040f 	and.w	r4, r1, #15
 8000d48:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8000d4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000d4e:	f8d4 41c4 	ldr.w	r4, [r4, #452]	; 0x1c4
 8000d52:	6160      	str	r0, [r4, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8000d54:	f001 010f 	and.w	r1, r1, #15
 8000d58:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8000d5c:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8000d60:	6113      	str	r3, [r2, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000d62:	6813      	ldr	r3, [r2, #0]
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
 8000d64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	bd30      	pop	{r4, r5, pc}
 8000d6c:	1fff019c 	.word	0x1fff019c
 8000d70:	1fff01a0 	.word	0x1fff01a0

08000d74 <XMC_USBD_lStartWriteXfer>:
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000d74:	7801      	ldrb	r1, [r0, #0]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000d76:	f8d0 c030 	ldr.w	ip, [r0, #48]	; 0x30
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8000d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000d7e:	f001 070f 	and.w	r7, r1, #15
 8000d82:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8000d86:	4c29      	ldr	r4, [pc, #164]	; (8000e2c <XMC_USBD_lStartWriteXfer+0xb8>)

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000d88:	6886      	ldr	r6, [r0, #8]
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000d8a:	f854 e023 	ldr.w	lr, [r4, r3, lsl #2]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000d8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000d90:	f8de 5000 	ldr.w	r5, [lr]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000d94:	ebc3 080c 	rsb	r8, r3, ip
 8000d98:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8000d9c:	45b0      	cmp	r8, r6
  {
    ep->xferLength = ep->xferTotal;
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8000d9e:	bf2a      	itet	cs
 8000da0:	199b      	addcs	r3, r3, r6
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
  {
    ep->xferLength = ep->xferTotal;
 8000da2:	f8c0 c028 	strcc.w	ip, [r0, #40]	; 0x28
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8000da6:	6283      	strcs	r3, [r0, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8000da8:	6a83      	ldr	r3, [r0, #40]	; 0x28
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8000daa:	2200      	movs	r2, #0
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
  }
  if (ep->xferLength == 0U)
 8000dac:	b92b      	cbnz	r3, 8000dba <XMC_USBD_lStartWriteXfer+0x46>
  {
    size.b.xfersize = 0U;
 8000dae:	f363 0212 	bfi	r2, r3, #0, #19
    size.b.pktcnt = 1U;
 8000db2:	2301      	movs	r3, #1
 8000db4:	f363 42dc 	bfi	r2, r3, #19, #10
 8000db8:	e02c      	b.n	8000e14 <XMC_USBD_lStartWriteXfer+0xa0>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8000dba:	f011 0f0f 	tst.w	r1, #15
 8000dbe:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8000dc0:	d107      	bne.n	8000dd2 <XMC_USBD_lStartWriteXfer+0x5e>
    {
      size.b.pktcnt = 1U;
 8000dc2:	f04f 0c01 	mov.w	ip, #1
 8000dc6:	f36c 42dc 	bfi	r2, ip, #19, #10
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8000dca:	1b9b      	subs	r3, r3, r6
 8000dcc:	f363 0212 	bfi	r2, r3, #0, #19
 8000dd0:	e00f      	b.n	8000df2 <XMC_USBD_lStartWriteXfer+0x7e>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000dd2:	1b9b      	subs	r3, r3, r6
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8000dd4:	6846      	ldr	r6, [r0, #4]
 8000dd6:	f3c6 26c6 	ubfx	r6, r6, #11, #7
 8000dda:	f106 3cff 	add.w	ip, r6, #4294967295
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000dde:	f363 0212 	bfi	r2, r3, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8000de2:	fa1f fc8c 	uxth.w	ip, ip
 8000de6:	fa1c f383 	uxtah	r3, ip, r3
 8000dea:	fb93 f3f6 	sdiv	r3, r3, r6
 8000dee:	f363 42dc 	bfi	r2, r3, #19, #10
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <XMC_USBD_lStartWriteXfer+0xbc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	7b5b      	ldrb	r3, [r3, #13]
 8000df8:	b91b      	cbnz	r3, 8000e02 <XMC_USBD_lStartWriteXfer+0x8e>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8000dfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000dfc:	f8ce 3014 	str.w	r3, [lr, #20]
 8000e00:	e008      	b.n	8000e14 <XMC_USBD_lStartWriteXfer+0xa0>
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000e02:	2b01      	cmp	r3, #1
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000e04:	bf01      	itttt	eq
 8000e06:	f8d4 61a4 	ldreq.w	r6, [r4, #420]	; 0x1a4
 8000e0a:	6b70      	ldreq	r0, [r6, #52]	; 0x34
 8000e0c:	40bb      	lsleq	r3, r7
 8000e0e:	4303      	orreq	r3, r0
 8000e10:	bf08      	it	eq
 8000e12:	6373      	streq	r3, [r6, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8000e14:	f001 010f 	and.w	r1, r1, #15
 8000e18:	316a      	adds	r1, #106	; 0x6a
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 8000e1a:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8000e1e:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8000e22:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8000e24:	601d      	str	r5, [r3, #0]
 8000e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e2a:	bf00      	nop
 8000e2c:	1fff01a0 	.word	0x1fff01a0
 8000e30:	1fff019c 	.word	0x1fff019c

08000e34 <XMC_USBD_GetCapabilities>:
  cap.event_remote_wakeup = 1U;
  cap.event_reset = 1U;
  cap.event_resume = 1U;
  cap.event_suspend = 1U;
  cap.reserved = 0U;
  return cap;
 8000e34:	2000      	movs	r0, #0
 8000e36:	f36f 0000 	bfc	r0, #0, #1
 8000e3a:	f36f 0041 	bfc	r0, #1, #1
 8000e3e:	f040 001c 	orr.w	r0, r0, #28
 8000e42:	f36f 1045 	bfc	r0, #5, #1
 8000e46:	f440 70e0 	orr.w	r0, r0, #448	; 0x1c0
}
 8000e4a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000e4e:	4770      	bx	lr

08000e50 <XMC_USBD_DeviceConnect>:
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <XMC_USBD_DeviceConnect+0x14>)
 8000e52:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000e56:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 0U;
 8000e58:	f36f 0341 	bfc	r3, #1, #1
  xmc_device.device_register->dctl = dctl.d32;
 8000e5c:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8000e5e:	2000      	movs	r0, #0
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	1fff01a0 	.word	0x1fff01a0

08000e68 <XMC_USBD_DeviceDisconnect>:
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <XMC_USBD_DeviceDisconnect+0x14>)
 8000e6a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000e6e:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8000e70:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 8000e74:	6053      	str	r3, [r2, #4]
  return XMC_USBD_STATUS_OK;
}
 8000e76:	2000      	movs	r0, #0
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	1fff01a0 	.word	0x1fff01a0

08000e80 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8000e80:	b510      	push	{r4, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <XMC_USBD_EndpointReadStart+0x3c>)
/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8000e84:	f000 030f 	and.w	r3, r0, #15
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8000e88:	2034      	movs	r0, #52	; 0x34
 8000e8a:	fb00 2003 	mla	r0, r0, r3, r2
 8000e8e:	6844      	ldr	r4, [r0, #4]
 8000e90:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000e94:	b984      	cbnz	r4, 8000eb8 <XMC_USBD_EndpointReadStart+0x38>
 8000e96:	7903      	ldrb	r3, [r0, #4]
 8000e98:	075b      	lsls	r3, r3, #29
 8000e9a:	d50d      	bpl.n	8000eb8 <XMC_USBD_EndpointReadStart+0x38>
    result = XMC_USBD_STATUS_ERROR;
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8000e9c:	6943      	ldr	r3, [r0, #20]
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	bf94      	ite	ls
 8000ea2:	6301      	strls	r1, [r0, #48]	; 0x30
 8000ea4:	6303      	strhi	r3, [r0, #48]	; 0x30
    ep->xferCount = 0U;
    ep->xferLength = 0U;
    ep->xferBuffer = ep->outBuffer;
 8000ea6:	68c3      	ldr	r3, [r0, #12]
    {
      size = ep->outBufferSize;
    }
    /* set ep values */
    ep->xferTotal = size;
    ep->xferCount = 0U;
 8000ea8:	62c4      	str	r4, [r0, #44]	; 0x2c
    ep->xferLength = 0U;
 8000eaa:	6284      	str	r4, [r0, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 8000eac:	6243      	str	r3, [r0, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 8000eae:	6104      	str	r4, [r0, #16]
    XMC_USBD_lStartReadXfer(ep);
 8000eb0:	f7ff ff14 	bl	8000cdc <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	bd10      	pop	{r4, pc}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
  {
    result = XMC_USBD_STATUS_ERROR;
 8000eb8:	2001      	movs	r0, #1
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
  }
  return result;
}
 8000eba:	bd10      	pop	{r4, pc}
 8000ebc:	1fff01a0 	.word	0x1fff01a0

08000ec0 <XMC_USBD_DeviceSetAddress>:
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <XMC_USBD_DeviceSetAddress+0x14>)
 8000ec2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000ec6:	681a      	ldr	r2, [r3, #0]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8000ec8:	b911      	cbnz	r1, 8000ed0 <XMC_USBD_DeviceSetAddress+0x10>
  {
    data.b.devaddr = address;
 8000eca:	f360 120a 	bfi	r2, r0, #4, #7
    xmc_device.device_register->dcfg = data.d32;
 8000ece:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	4770      	bx	lr
 8000ed4:	1fff01a0 	.word	0x1fff01a0

08000ed8 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8000ed8:	b510      	push	{r4, lr}
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <XMC_USBD_EndpointStall+0x78>)
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8000edc:	f000 040f 	and.w	r4, r0, #15
 8000ee0:	b240      	sxtb	r0, r0
  if (stall)
 8000ee2:	b1c1      	cbz	r1, 8000f16 <XMC_USBD_EndpointStall+0x3e>
 8000ee4:	2334      	movs	r3, #52	; 0x34
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000ee6:	4363      	muls	r3, r4
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000ee8:	2800      	cmp	r0, #0
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	f003 030f 	and.w	r3, r3, #15
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000ef0:	bfab      	itete	ge
 8000ef2:	eb02 0383 	addge.w	r3, r2, r3, lsl #2
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000ef6:	336a      	addlt	r3, #106	; 0x6a
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000ef8:	f8d3 11c4 	ldrge.w	r1, [r3, #452]	; 0x1c4
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000efc:	f852 1023 	ldrlt.w	r1, [r2, r3, lsl #2]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f00:	680b      	ldr	r3, [r1, #0]
      data.b.stall = 1U;
 8000f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000f06:	600b      	str	r3, [r1, #0]
    }
    ep->isStalled = 1U;
 8000f08:	2334      	movs	r3, #52	; 0x34
 8000f0a:	fb03 2204 	mla	r2, r3, r4, r2
 8000f0e:	7913      	ldrb	r3, [r2, #4]
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	e019      	b.n	8000f4a <XMC_USBD_EndpointStall+0x72>
 8000f16:	2334      	movs	r3, #52	; 0x34
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f18:	4363      	muls	r3, r4
    ep->isStalled = 1U;
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000f1a:	2800      	cmp	r0, #0
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f22:	bfab      	itete	ge
 8000f24:	eb02 0383 	addge.w	r3, r2, r3, lsl #2
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f28:	336a      	addlt	r3, #106	; 0x6a
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f2a:	f8d3 01c4 	ldrge.w	r0, [r3, #452]	; 0x1c4
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000f2e:	f852 0023 	ldrlt.w	r0, [r2, r3, lsl #2]
			data.b.setd0pid = 1U; /* reset pid to 0 */
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000f32:	6803      	ldr	r3, [r0, #0]
			data.b.stall = 0U;
 8000f34:	f361 5355 	bfi	r3, r1, #21, #1
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000f3c:	6003      	str	r3, [r0, #0]
		}
		ep->isStalled = 0U;
 8000f3e:	2334      	movs	r3, #52	; 0x34
 8000f40:	fb03 2204 	mla	r2, r3, r4, r2
 8000f44:	7913      	ldrb	r3, [r2, #4]
 8000f46:	f36f 1345 	bfc	r3, #5, #1
 8000f4a:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
}
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	bd10      	pop	{r4, pc}
 8000f50:	1fff01a0 	.word	0x1fff01a0

08000f54 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000f54:	f000 020f 	and.w	r2, r0, #15
  if (ep->address_u.address_st.direction)
 8000f58:	2134      	movs	r1, #52	; 0x34
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <XMC_USBD_EndpointAbort+0x4c>)
 8000f5c:	4351      	muls	r1, r2
 8000f5e:	1858      	adds	r0, r3, r1
 8000f60:	5c59      	ldrb	r1, [r3, r1]
 8000f62:	0609      	lsls	r1, r1, #24
  {
    ep->inInUse = 0U;
 8000f64:	bf42      	ittt	mi
 8000f66:	6841      	ldrmi	r1, [r0, #4]
 8000f68:	f021 0108 	bicmi.w	r1, r1, #8
 8000f6c:	6041      	strmi	r1, [r0, #4]
  }
  if (!ep->address_u.address_st.direction)
 8000f6e:	2134      	movs	r1, #52	; 0x34
 8000f70:	4351      	muls	r1, r2
 8000f72:	1858      	adds	r0, r3, r1
 8000f74:	5c59      	ldrb	r1, [r3, r1]
 8000f76:	0609      	lsls	r1, r1, #24
  {
    ep->outInUse = 0U;
 8000f78:	bf5e      	ittt	pl
 8000f7a:	6841      	ldrpl	r1, [r0, #4]
 8000f7c:	f021 0110 	bicpl.w	r1, r1, #16
 8000f80:	6041      	strpl	r1, [r0, #4]
  }
  ep->isStalled = 0U;
 8000f82:	2034      	movs	r0, #52	; 0x34
 8000f84:	fb00 3302 	mla	r3, r0, r2, r3
  ep->outBytesAvailable = 0U;
 8000f88:	2000      	movs	r0, #0
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
  }
  ep->isStalled = 0U;
 8000f8a:	791a      	ldrb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
 8000f8c:	6118      	str	r0, [r3, #16]
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
  }
  ep->isStalled = 0U;
 8000f8e:	f36f 1245 	bfc	r2, #5, #1
 8000f92:	711a      	strb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
  ep->outOffset = 0U;
 8000f94:	6198      	str	r0, [r3, #24]
  ep->xferLength = 0U;
 8000f96:	6298      	str	r0, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8000f98:	62d8      	str	r0, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8000f9a:	6318      	str	r0, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	1fff01a0 	.word	0x1fff01a0

08000fa4 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8000fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <XMC_USBD_EndpointUnconfigure+0xe8>)
/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000faa:	f000 040f 	and.w	r4, r0, #15
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000fae:	2234      	movs	r2, #52	; 0x34
 8000fb0:	4362      	muls	r2, r4
 8000fb2:	eb03 0e02 	add.w	lr, r3, r2
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000fb6:	f8d3 61a4 	ldr.w	r6, [r3, #420]	; 0x1a4
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8000fba:	f89e 1004 	ldrb.w	r1, [lr, #4]
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000fbe:	5c9a      	ldrb	r2, [r3, r2]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000fc0:	69f5      	ldr	r5, [r6, #28]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8000fc2:	f011 0f04 	tst.w	r1, #4
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8000fc6:	f04f 0700 	mov.w	r7, #0
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000fca:	f002 0c0f 	and.w	ip, r2, #15
 8000fce:	f04f 0001 	mov.w	r0, #1
  /* if not configured return an error */
  if (!ep->isConfigured)
 8000fd2:	d058      	beq.n	8001086 <XMC_USBD_EndpointUnconfigure+0xe2>
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
    data.b.stall =  0U;
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
 8000fd4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8000fd8:	f36f 1145 	bfc	r1, #5, #1
 8000fdc:	f88e 1004 	strb.w	r1, [lr, #4]
    ep->outInUse =  0U;
 8000fe0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8000fe4:	f021 0110 	bic.w	r1, r1, #16
 8000fe8:	f8ce 1004 	str.w	r1, [lr, #4]
    ep->inInUse =  0U;
 8000fec:	f8de 1004 	ldr.w	r1, [lr, #4]
     result = XMC_USBD_STATUS_ERROR;
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8000ff0:	f367 37cf 	bfi	r7, r7, #15, #1
    data.b.snak =  1U;
    data.b.stall =  0U;
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
 8000ff4:	f021 0108 	bic.w	r1, r1, #8
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000ff8:	fa00 f00c 	lsl.w	r0, r0, ip
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
 8000ffc:	f047 4790 	orr.w	r7, r7, #1207959552	; 0x48000000
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001000:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    data.b.snak =  1U;
    data.b.stall =  0U;
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
 8001004:	f8ce 1004 	str.w	r1, [lr, #4]
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
    data.b.stall =  0U;
 8001008:	f36f 5755 	bfc	r7, #21, #1
    ep->isConfigured =  0U;
    ep->isStalled =  0U;
    ep->outInUse =  0U;
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800100c:	f002 08ff 	and.w	r8, r2, #255	; 0xff
 8001010:	43c1      	mvns	r1, r0
 8001012:	b9aa      	cbnz	r2, 8001040 <XMC_USBD_EndpointUnconfigure+0x9c>
 8001014:	f89e 2004 	ldrb.w	r2, [lr, #4]
 8001018:	0790      	lsls	r0, r2, #30
 800101a:	d011      	beq.n	8001040 <XMC_USBD_EndpointUnconfigure+0x9c>
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800101c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8001020:	f8dc 21c4 	ldr.w	r2, [ip, #452]	; 0x1c4
 8001024:	6017      	str	r7, [r2, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8001026:	ea01 4215 	and.w	r2, r1, r5, lsr #16
 800102a:	f362 451f 	bfi	r5, r2, #16, #16
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800102e:	4a18      	ldr	r2, [pc, #96]	; (8001090 <XMC_USBD_EndpointUnconfigure+0xec>)
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	7b52      	ldrb	r2, [r2, #13]
 8001034:	2a01      	cmp	r2, #1
 8001036:	d116      	bne.n	8001066 <XMC_USBD_EndpointUnconfigure+0xc2>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8001038:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800103a:	400a      	ands	r2, r1
 800103c:	6372      	str	r2, [r6, #52]	; 0x34
 800103e:	e012      	b.n	8001066 <XMC_USBD_EndpointUnconfigure+0xc2>
    ep->inInUse =  0U;
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8001040:	f10c 026a 	add.w	r2, ip, #106	; 0x6a
 8001044:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001048:	6017      	str	r7, [r2, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 800104a:	ea01 0205 	and.w	r2, r1, r5
 800104e:	f362 050f 	bfi	r5, r2, #0, #16
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001052:	f1b8 0f00 	cmp.w	r8, #0
 8001056:	d0e1      	beq.n	800101c <XMC_USBD_EndpointUnconfigure+0x78>
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <XMC_USBD_EndpointUnconfigure+0xe8>)
 800105a:	2234      	movs	r2, #52	; 0x34
 800105c:	fb02 0204 	mla	r2, r2, r4, r0
 8001060:	7912      	ldrb	r2, [r2, #4]
 8001062:	0792      	lsls	r2, r2, #30
 8001064:	d0da      	beq.n	800101c <XMC_USBD_EndpointUnconfigure+0x78>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8001066:	2034      	movs	r0, #52	; 0x34
 8001068:	fb00 3004 	mla	r0, r0, r4, r3
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 800106c:	61f5      	str	r5, [r6, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 800106e:	8881      	ldrh	r1, [r0, #4]
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8001070:	2201      	movs	r2, #1
 8001072:	f3c1 1183 	ubfx	r1, r1, #6, #4
 8001076:	408a      	lsls	r2, r1
 8001078:	f8b3 11fc 	ldrh.w	r1, [r3, #508]	; 0x1fc
 800107c:	ea21 0202 	bic.w	r2, r1, r2
 8001080:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
    result = XMC_USBD_STATUS_OK;
 8001084:	2000      	movs	r0, #0
  }
  return result;
}
 8001086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108a:	bf00      	nop
 800108c:	1fff01a0 	.word	0x1fff01a0
 8001090:	1fff019c 	.word	0x1fff019c

08001094 <XMC_USBD_GetFrameNumber>:
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <XMC_USBD_GetFrameNumber+0x10>)
 8001096:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800109a:	6898      	ldr	r0, [r3, #8]
  result = (uint16_t)dsts.b.soffn;
  return result;
}
 800109c:	f3c0 200d 	ubfx	r0, r0, #8, #14
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	1fff01a0 	.word	0x1fff01a0

080010a8 <XMC_USBD_IsEnumDone>:
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <XMC_USBD_IsEnumDone+0x14>)
 80010aa:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
 80010ae:	f000 0005 	and.w	r0, r0, #5
}
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	4258      	negs	r0, r3
 80010b6:	4158      	adcs	r0, r3
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	1fff01a0 	.word	0x1fff01a0

080010c0 <XMC_USBD_Uninitialize>:
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <XMC_USBD_Uninitialize+0x20>)
 80010c2:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 80010c6:	b508      	push	{r3, lr}
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 80010c8:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 80010ca:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
 80010ce:	6053      	str	r3, [r2, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 80010d0:	2100      	movs	r1, #0
 80010d2:	f44f 7202 	mov.w	r2, #520	; 0x208
 80010d6:	f00a fb6a 	bl	800b7ae <memset>
  return XMC_USBD_STATUS_OK;
}
 80010da:	2000      	movs	r0, #0
 80010dc:	bd08      	pop	{r3, pc}
 80010de:	bf00      	nop
 80010e0:	1fff01a0 	.word	0x1fff01a0

080010e4 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 80010e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80010e8:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 80012a0 <XMC_USBD_EndpointConfigure+0x1bc>
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 80010ec:	4615      	mov	r5, r2
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80010ee:	f000 080f 	and.w	r8, r0, #15
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 80010f2:	2234      	movs	r2, #52	; 0x34
 80010f4:	fb02 fb08 	mul.w	fp, r2, r8
 80010f8:	eb0b 0409 	add.w	r4, fp, r9
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80010fc:	f8d9 31a4 	ldr.w	r3, [r9, #420]	; 0x1a4
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8001100:	4682      	mov	sl, r0
 8001102:	460e      	mov	r6, r1
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8001104:	4620      	mov	r0, r4
 8001106:	2100      	movs	r1, #0
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001108:	69df      	ldr	r7, [r3, #28]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 800110a:	f00a fb50 	bl	800b7ae <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
  ep->isConfigured = 1U;
 800110e:	7923      	ldrb	r3, [r4, #4]
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8001110:	f80b a009 	strb.w	sl, [fp, r9]
  ep->isConfigured = 1U;
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	7123      	strb	r3, [r4, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 800111a:	6863      	ldr	r3, [r4, #4]
 800111c:	4620      	mov	r0, r4
 800111e:	f365 23d1 	bfi	r3, r5, #11, #7
 8001122:	f840 3f04 	str.w	r3, [r0, #4]!
 8001126:	464b      	mov	r3, r9
  if (ep->address_u.address != 0U)
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8001128:	6842      	ldr	r2, [r0, #4]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
  /* do ep configuration */
  ep->address_u.address = ep_addr;
  ep->isConfigured = 1U;
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
  if (ep->address_u.address != 0U)
 800112a:	f1ba 0f00 	cmp.w	sl, #0
 800112e:	d002      	beq.n	8001136 <XMC_USBD_EndpointConfigure+0x52>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8001130:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8001134:	e000      	b.n	8001138 <XMC_USBD_EndpointConfigure+0x54>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	f361 0212 	bfi	r2, r1, #0, #19
 800113c:	6042      	str	r2, [r0, #4]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 800113e:	2234      	movs	r2, #52	; 0x34
 8001140:	fb02 f208 	mul.w	r2, r2, r8
 8001144:	f8df e15c 	ldr.w	lr, [pc, #348]	; 80012a4 <XMC_USBD_EndpointConfigure+0x1c0>
 8001148:	5c99      	ldrb	r1, [r3, r2]
 800114a:	f001 010f 	and.w	r1, r1, #15
 800114e:	0208      	lsls	r0, r1, #8
 8001150:	189c      	adds	r4, r3, r2
 8001152:	eb0e 0c00 	add.w	ip, lr, r0
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001156:	f50e 6ee0 	add.w	lr, lr, #1792	; 0x700
 800115a:	4470      	add	r0, lr
 800115c:	60e0      	str	r0, [r4, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800115e:	484e      	ldr	r0, [pc, #312]	; (8001298 <XMC_USBD_EndpointConfigure+0x1b4>)
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001160:	f8c4 c01c 	str.w	ip, [r4, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001164:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8001168:	6220      	str	r0, [r4, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 800116a:	484c      	ldr	r0, [pc, #304]	; (800129c <XMC_USBD_EndpointConfigure+0x1b8>)
 800116c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8001170:	6160      	str	r0, [r4, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001172:	5c9a      	ldrb	r2, [r3, r2]
 8001174:	0610      	lsls	r0, r2, #24
 8001176:	d401      	bmi.n	800117c <XMC_USBD_EndpointConfigure+0x98>
 8001178:	2e00      	cmp	r6, #0
 800117a:	d154      	bne.n	8001226 <XMC_USBD_EndpointConfigure+0x142>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800117c:	f101 026a 	add.w	r2, r1, #106	; 0x6a
 8001180:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 8001184:	f8dc 2000 	ldr.w	r2, [ip]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8001188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800118c:	f366 4293 	bfi	r2, r6, #18, #2
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001190:	b99e      	cbnz	r6, 80011ba <XMC_USBD_EndpointConfigure+0xd6>
    {
			switch(ep_max_packet_size)
 8001192:	2d10      	cmp	r5, #16
 8001194:	d00d      	beq.n	80011b2 <XMC_USBD_EndpointConfigure+0xce>
 8001196:	d803      	bhi.n	80011a0 <XMC_USBD_EndpointConfigure+0xbc>
 8001198:	2d08      	cmp	r5, #8
 800119a:	d110      	bne.n	80011be <XMC_USBD_EndpointConfigure+0xda>
				break;
				case (16U):
				data.b.mps = 0x2U;
				break;
				case (8U):
				data.b.mps = 0x3U;
 800119c:	2003      	movs	r0, #3
 800119e:	e009      	b.n	80011b4 <XMC_USBD_EndpointConfigure+0xd0>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 80011a0:	2d20      	cmp	r5, #32
 80011a2:	d004      	beq.n	80011ae <XMC_USBD_EndpointConfigure+0xca>
 80011a4:	2d40      	cmp	r5, #64	; 0x40
 80011a6:	d10a      	bne.n	80011be <XMC_USBD_EndpointConfigure+0xda>
			{
				case (64U):
				data.b.mps = 0x0U;
 80011a8:	f366 020a 	bfi	r2, r6, #0, #11
				break;
 80011ac:	e007      	b.n	80011be <XMC_USBD_EndpointConfigure+0xda>
				case (32U):
				data.b.mps = 0x1U;
 80011ae:	2001      	movs	r0, #1
 80011b0:	e000      	b.n	80011b4 <XMC_USBD_EndpointConfigure+0xd0>
				break;
				case (16U):
				data.b.mps = 0x2U;
 80011b2:	2002      	movs	r0, #2
				break;
				case (8U):
				data.b.mps = 0x3U;
 80011b4:	f360 020a 	bfi	r2, r0, #0, #11
				break;
 80011b8:	e001      	b.n	80011be <XMC_USBD_EndpointConfigure+0xda>
				break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80011ba:	f365 020a 	bfi	r2, r5, #0, #11
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 80011be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80011c2:	f8b3 e1fc 	ldrh.w	lr, [r3, #508]	; 0x1fc
			data.b.mps = ep_max_packet_size;
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
 80011c6:	f36f 5255 	bfc	r2, #21, #1
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80011ca:	f04f 0900 	mov.w	r9, #0
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
 80011ce:	2001      	movs	r0, #1
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80011d0:	ea10 0f0e 	tst.w	r0, lr
 80011d4:	fa5f f489 	uxtb.w	r4, r9
 80011d8:	d007      	beq.n	80011ea <XMC_USBD_EndpointConfigure+0x106>
 80011da:	f109 0901 	add.w	r9, r9, #1
  {
    mask = (uint16_t)(mask << 1U);
 80011de:	0040      	lsls	r0, r0, #1
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80011e0:	f1b9 0f07 	cmp.w	r9, #7
  {
    mask = (uint16_t)(mask << 1U);
 80011e4:	b280      	uxth	r0, r0
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80011e6:	d1f3      	bne.n	80011d0 <XMC_USBD_EndpointConfigure+0xec>
 80011e8:	464c      	mov	r4, r9
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80011ea:	ea10 0f0e 	tst.w	r0, lr
  {
    xmc_device.txfifomsk |= mask;
 80011ee:	bf04      	itt	eq
 80011f0:	ea40 000e 	orreq.w	r0, r0, lr
 80011f4:	f8a3 01fc 	strheq.w	r0, [r3, #508]	; 0x1fc
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 80011f8:	f04f 0034 	mov.w	r0, #52	; 0x34
 80011fc:	fb00 3008 	mla	r0, r0, r8, r3
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
 8001200:	bf18      	it	ne
 8001202:	2400      	movne	r4, #0
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001204:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 8001208:	f004 040f 	and.w	r4, r4, #15
		data.b.txfnum = ep->txFifoNum;
 800120c:	f364 5299 	bfi	r2, r4, #22, #4
		/* set first data0 pid */
		data.b.setd0pid = 1U;
		/* clear stall */
		data.b.stall = 0U;
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8001210:	f364 1e89 	bfi	lr, r4, #6, #4
 8001214:	f8a0 e004 	strh.w	lr, [r0, #4]
		data.b.txfnum = ep->txFifoNum;
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8001218:	f8cc 2000 	str.w	r2, [ip]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800121c:	2201      	movs	r2, #1
 800121e:	408a      	lsls	r2, r1
 8001220:	433a      	orrs	r2, r7
 8001222:	f362 070f 	bfi	r7, r2, #0, #16
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001226:	2234      	movs	r2, #52	; 0x34
 8001228:	fb02 f808 	mul.w	r8, r2, r8
 800122c:	f813 2008 	ldrb.w	r2, [r3, r8]
 8001230:	0612      	lsls	r2, r2, #24
 8001232:	d500      	bpl.n	8001236 <XMC_USBD_EndpointConfigure+0x152>
 8001234:	bb56      	cbnz	r6, 800128c <XMC_USBD_EndpointConfigure+0x1a8>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001236:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800123a:	f8d2 01c4 	ldr.w	r0, [r2, #452]	; 0x1c4
 800123e:	6802      	ldr	r2, [r0, #0]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8001240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8001244:	f366 4293 	bfi	r2, r6, #18, #2
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001248:	b99e      	cbnz	r6, 8001272 <XMC_USBD_EndpointConfigure+0x18e>
		{
			switch(ep_max_packet_size)
 800124a:	2d10      	cmp	r5, #16
 800124c:	d00d      	beq.n	800126a <XMC_USBD_EndpointConfigure+0x186>
 800124e:	d803      	bhi.n	8001258 <XMC_USBD_EndpointConfigure+0x174>
 8001250:	2d08      	cmp	r5, #8
 8001252:	d110      	bne.n	8001276 <XMC_USBD_EndpointConfigure+0x192>
					break;
				case (16U):
					data.b.mps = 0x2U;
					break;
				case (8U):
					data.b.mps = 0x3U;
 8001254:	2403      	movs	r4, #3
 8001256:	e009      	b.n	800126c <XMC_USBD_EndpointConfigure+0x188>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 8001258:	2d20      	cmp	r5, #32
 800125a:	d004      	beq.n	8001266 <XMC_USBD_EndpointConfigure+0x182>
 800125c:	2d40      	cmp	r5, #64	; 0x40
 800125e:	d10a      	bne.n	8001276 <XMC_USBD_EndpointConfigure+0x192>
			{
				case (64U):
					data.b.mps = 0x0U;
 8001260:	f366 020a 	bfi	r2, r6, #0, #11
					break;
 8001264:	e007      	b.n	8001276 <XMC_USBD_EndpointConfigure+0x192>
				case (32U):
					data.b.mps = 0x1U;
 8001266:	2401      	movs	r4, #1
 8001268:	e000      	b.n	800126c <XMC_USBD_EndpointConfigure+0x188>
					break;
				case (16U):
					data.b.mps = 0x2U;
 800126a:	2402      	movs	r4, #2
					break;
				case (8U):
					data.b.mps = 0x3U;
 800126c:	f364 020a 	bfi	r2, r4, #0, #11
					break;
 8001270:	e001      	b.n	8001276 <XMC_USBD_EndpointConfigure+0x192>
					break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8001272:	f365 020a 	bfi	r2, r5, #0, #11
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8001276:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 800127a:	f36f 5255 	bfc	r2, #21, #1
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 800127e:	6002      	str	r2, [r0, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8001280:	2201      	movs	r2, #1
 8001282:	408a      	lsls	r2, r1
 8001284:	ea42 4217 	orr.w	r2, r2, r7, lsr #16
 8001288:	f362 471f 	bfi	r7, r2, #16, #16
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 800128c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
  return XMC_USBD_STATUS_OK;
}
 8001290:	2000      	movs	r0, #0
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8001292:	61df      	str	r7, [r3, #28]
  return XMC_USBD_STATUS_OK;
}
 8001294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001298:	1ffed7e8 	.word	0x1ffed7e8
 800129c:	1ffed7cc 	.word	0x1ffed7cc
 80012a0:	1fff01a0 	.word	0x1fff01a0
 80012a4:	20000000 	.word	0x20000000

080012a8 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 80012a8:	b538      	push	{r3, r4, r5, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
  if (length > ep->outBytesAvailable)
 80012aa:	4c0c      	ldr	r4, [pc, #48]	; (80012dc <XMC_USBD_EndpointRead+0x34>)
 80012ac:	2334      	movs	r3, #52	; 0x34
 80012ae:	fb03 4400 	mla	r4, r3, r0, r4
  {
    length = ep->outBytesAvailable;
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 80012b2:	4608      	mov	r0, r1
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
  if (length > ep->outBytesAvailable)
 80012b4:	6925      	ldr	r5, [r4, #16]
  {
    length = ep->outBytesAvailable;
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 80012b6:	69a3      	ldr	r3, [r4, #24]
 80012b8:	4295      	cmp	r5, r2
 80012ba:	bf28      	it	cs
 80012bc:	4615      	movcs	r5, r2
 80012be:	68e2      	ldr	r2, [r4, #12]
 80012c0:	18d1      	adds	r1, r2, r3
 80012c2:	462a      	mov	r2, r5
 80012c4:	f00a fa68 	bl	800b798 <memcpy>
  ep->outBytesAvailable -= length;
 80012c8:	6923      	ldr	r3, [r4, #16]
 80012ca:	1b5b      	subs	r3, r3, r5
 80012cc:	6123      	str	r3, [r4, #16]
  if (ep->outBytesAvailable)
 80012ce:	b10b      	cbz	r3, 80012d4 <XMC_USBD_EndpointRead+0x2c>
  {
    ep->outOffset += length;
 80012d0:	69a3      	ldr	r3, [r4, #24]
 80012d2:	442b      	add	r3, r5
  }
  else
  {
    ep->outOffset = 0U;
 80012d4:	61a3      	str	r3, [r4, #24]
  }
  return (int32_t)length;
}
 80012d6:	4628      	mov	r0, r5
 80012d8:	bd38      	pop	{r3, r4, r5, pc}
 80012da:	bf00      	nop
 80012dc:	1fff01a0 	.word	0x1fff01a0

080012e0 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 80012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
  int32_t result;
  if (!ep->isConfigured)
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <XMC_USBD_EndpointWrite+0x50>)
/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 80012e4:	f000 000f 	and.w	r0, r0, #15
  int32_t result;
  if (!ep->isConfigured)
 80012e8:	2434      	movs	r4, #52	; 0x34
 80012ea:	fb04 3400 	mla	r4, r4, r0, r3
 80012ee:	7923      	ldrb	r3, [r4, #4]
 80012f0:	0758      	lsls	r0, r3, #29
 80012f2:	d519      	bpl.n	8001328 <XMC_USBD_EndpointWrite+0x48>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
  }
  else if (ep->inInUse == 1U)
 80012f4:	6863      	ldr	r3, [r4, #4]
 80012f6:	071b      	lsls	r3, r3, #28
 80012f8:	d418      	bmi.n	800132c <XMC_USBD_EndpointWrite+0x4c>
  {
    result=(int32_t)0;
  }
  else
  {
    if (length > ep->inBufferSize)
 80012fa:	6a23      	ldr	r3, [r4, #32]
    {
      length = ep->inBufferSize;
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 80012fc:	69e0      	ldr	r0, [r4, #28]
 80012fe:	429a      	cmp	r2, r3
 8001300:	bf28      	it	cs
 8001302:	461a      	movcs	r2, r3
 8001304:	4615      	mov	r5, r2
 8001306:	f00a fa47 	bl	800b798 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 800130a:	69e3      	ldr	r3, [r4, #28]
 800130c:	6263      	str	r3, [r4, #36]	; 0x24
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	62a3      	str	r3, [r4, #40]	; 0x28
    ep->xferCount = 0U;
 8001312:	62e3      	str	r3, [r4, #44]	; 0x2c
    ep->inInUse = 1U;
 8001314:	6863      	ldr	r3, [r4, #4]
      length = ep->inBufferSize;
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
 8001316:	6325      	str	r5, [r4, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
    ep->inInUse = 1U;
 8001318:	f043 0308 	orr.w	r3, r3, #8
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 800131c:	4620      	mov	r0, r4
		ep->xferBuffer = ep->inBuffer;
    ep->xferTotal = length;
    /* set transfer values */
    ep->xferLength = 0U;
    ep->xferCount = 0U;
    ep->inInUse = 1U;
 800131e:	6063      	str	r3, [r4, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 8001320:	f7ff fd28 	bl	8000d74 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8001324:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
  int32_t result;
  if (!ep->isConfigured)
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8001328:	2001      	movs	r0, #1
 800132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else if (ep->inInUse == 1U)
  {
    result=(int32_t)0;
 800132c:	2000      	movs	r0, #0
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
    result=(int32_t)ep->xferTotal;
  }
  return result;
}
 800132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001330:	1fff01a0 	.word	0x1fff01a0

08001334 <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8001334:	b510      	push	{r4, lr}
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001336:	2300      	movs	r3, #0
 8001338:	7b01      	ldrb	r1, [r0, #12]
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
 800133a:	4618      	mov	r0, r3
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800133c:	b2da      	uxtb	r2, r3
 800133e:	428a      	cmp	r2, r1
 8001340:	d20f      	bcs.n	8001362 <XMC_USBD_lDeviceActive+0x2e>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001342:	4c08      	ldr	r4, [pc, #32]	; (8001364 <XMC_USBD_lDeviceActive+0x30>)
 8001344:	2234      	movs	r2, #52	; 0x34
 8001346:	fb02 4203 	mla	r2, r2, r3, r4
 800134a:	6854      	ldr	r4, [r2, #4]
 800134c:	0724      	lsls	r4, r4, #28
 800134e:	d405      	bmi.n	800135c <XMC_USBD_lDeviceActive+0x28>
 8001350:	6852      	ldr	r2, [r2, #4]
    {
      result = 1U;
 8001352:	f012 0f10 	tst.w	r2, #16
 8001356:	bf18      	it	ne
 8001358:	2001      	movne	r0, #1
 800135a:	e000      	b.n	800135e <XMC_USBD_lDeviceActive+0x2a>
 800135c:	2001      	movs	r0, #1
 800135e:	3301      	adds	r3, #1
 8001360:	e7ec      	b.n	800133c <XMC_USBD_lDeviceActive+0x8>
    }
  }
  return result;
}
 8001362:	bd10      	pop	{r4, pc}
 8001364:	1fff01a0 	.word	0x1fff01a0

08001368 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8001368:	b570      	push	{r4, r5, r6, lr}
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 800136a:	4e0b      	ldr	r6, [pc, #44]	; (8001398 <XMC_USBD_DeviceGetState+0x30>)
 800136c:	f896 51fe 	ldrb.w	r5, [r6, #510]	; 0x1fe
  state.active = XMC_USBD_lDeviceActive(obj);
 8001370:	f7ff ffe0 	bl	8001334 <XMC_USBD_lDeviceActive>
  state.powered = xmc_device.IsPowered;
 8001374:	f896 31fe 	ldrb.w	r3, [r6, #510]	; 0x1fe
/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
  XMC_USBD_STATE_t state={0U};
 8001378:	2400      	movs	r4, #0
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
  state.active = XMC_USBD_lDeviceActive(obj);
  state.powered = xmc_device.IsPowered;
  return state;
 800137a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
  XMC_USBD_STATE_t state={0U};
  state.speed = XMC_USBD_SPEED_FULL;
  state.connected = xmc_device.IsConnected;
 800137e:	f005 0501 	and.w	r5, r5, #1
  state.active = XMC_USBD_lDeviceActive(obj);
  state.powered = xmc_device.IsPowered;
  return state;
 8001382:	f363 0400 	bfi	r4, r3, #0, #1
 8001386:	f365 0441 	bfi	r4, r5, #1, #1
 800138a:	f360 0482 	bfi	r4, r0, #2, #1
 800138e:	2301      	movs	r3, #1
 8001390:	f363 04c4 	bfi	r4, r3, #3, #2
}
 8001394:	4620      	mov	r0, r4
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	1fff01a0 	.word	0x1fff01a0

0800139c <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 800139c:	b510      	push	{r4, lr}
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 800139e:	4c05      	ldr	r4, [pc, #20]	; (80013b4 <XMC_USBD_Enable+0x18>)
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff f899 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80013a6:	4620      	mov	r0, r4
 80013a8:	f7fe ffdc 	bl	8000364 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
}
 80013ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
  XMC_SCU_POWER_EnableUsb();
 80013b0:	f7ff b8d8 	b.w	8000564 <XMC_SCU_POWER_EnableUsb>
 80013b4:	20000080 	.word	0x20000080

080013b8 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	4605      	mov	r5, r0
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 80013bc:	f7ff ffee 	bl	800139c <XMC_USBD_Enable>
  
  usbd_init = obj;
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <XMC_USBD_Init+0xf0>)
 80013c2:	601d      	str	r5, [r3, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80013c4:	2300      	movs	r3, #0
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80013c6:	4939      	ldr	r1, [pc, #228]	; (80014ac <XMC_USBD_Init+0xf4>)
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 80013ce:	4938      	ldr	r1, [pc, #224]	; (80014b0 <XMC_USBD_Init+0xf8>)
 80013d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  XMC_USBD_Enable();
  
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80013d4:	3301      	adds	r3, #1
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	d1f5      	bne.n	80013c6 <XMC_USBD_Init+0xe>
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 80013da:	4c36      	ldr	r4, [pc, #216]	; (80014b4 <XMC_USBD_Init+0xfc>)
 80013dc:	2100      	movs	r1, #0
 80013de:	f44f 7202 	mov.w	r2, #520	; 0x208
 80013e2:	4620      	mov	r0, r4
 80013e4:	f00a f9e3 	bl	800b7ae <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 80013e8:	686b      	ldr	r3, [r5, #4]
 80013ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 80013ee:	68ab      	ldr	r3, [r5, #8]
 80013f0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 80013f4:	682b      	ldr	r3, [r5, #0]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 80013f6:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 80013fa:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80013fe:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
 8001402:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 8001406:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 800140a:	f503 601e 	add.w	r0, r3, #2528	; 0x9e0
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 800140e:	f841 2f04 	str.w	r2, [r1, #4]!
 8001412:	3220      	adds	r2, #32
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001414:	4282      	cmp	r2, r0
 8001416:	d1fa      	bne.n	800140e <XMC_USBD_Init+0x56>
 8001418:	4927      	ldr	r1, [pc, #156]	; (80014b8 <XMC_USBD_Init+0x100>)
 800141a:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 800141e:	f503 603e 	add.w	r0, r3, #3040	; 0xbe0
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8001422:	f841 2f04 	str.w	r2, [r1, #4]!
 8001426:	3220      	adds	r2, #32
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001428:	4282      	cmp	r2, r0
 800142a:	d1fa      	bne.n	8001422 <XMC_USBD_Init+0x6a>
 800142c:	4923      	ldr	r1, [pc, #140]	; (80014bc <XMC_USBD_Init+0x104>)
 800142e:	2200      	movs	r2, #0
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8001430:	3201      	adds	r2, #1
 8001432:	eb03 3002 	add.w	r0, r3, r2, lsl #12
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8001436:	2a07      	cmp	r2, #7
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8001438:	f841 0f04 	str.w	r0, [r1, #4]!
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800143c:	d1f8      	bne.n	8001430 <XMC_USBD_Init+0x78>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 800143e:	689a      	ldr	r2, [r3, #8]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001440:	7b69      	ldrb	r1, [r5, #13]
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8001442:	f042 0281 	orr.w	r2, r2, #129	; 0x81
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001446:	b911      	cbnz	r1, 800144e <XMC_USBD_Init+0x96>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8001448:	f042 0220 	orr.w	r2, r2, #32
 800144c:	e001      	b.n	8001452 <XMC_USBD_Init+0x9a>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 800144e:	f36f 1245 	bfc	r2, #5, #1
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8001452:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8001454:	68da      	ldr	r2, [r3, #12]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8001456:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800145a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 800145e:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8001460:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8001464:	f042 0203 	orr.w	r2, r2, #3
  dcfg.b.descdma = 0U;
 8001468:	f36f 52d7 	bfc	r2, #23, #1
  xmc_device.device_register->dcfg = dcfg.d32;
 800146c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8001470:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8001474:	f042 0202 	orr.w	r2, r2, #2
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8001478:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 800147c:	2010      	movs	r0, #16
 800147e:	f7ff fbf9 	bl	8000c74 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8001482:	f7ff fc15 	bl	8000cb0 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001486:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
  gintmsk.b.usbsuspend = 1U;
  gintmsk.b.wkupintr = 1U;
  gintmsk.b.sofintr = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    gintmsk.b.rxstsqlvl = 1U;
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <XMC_USBD_Init+0x108>)
  gintmsk.b.enumdone = 1U;
  gintmsk.b.erlysuspend = 1U;
  gintmsk.b.usbsuspend = 1U;
  gintmsk.b.wkupintr = 1U;
  gintmsk.b.sofintr = 1U;
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800148c:	7b6c      	ldrb	r4, [r5, #13]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
  XMC_USBD_lFlushRXFifo();
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 800148e:	2000      	movs	r0, #0
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
  XMC_USBD_lFlushRXFifo();
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001494:	6190      	str	r0, [r2, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001496:	6153      	str	r3, [r2, #20]
  gintmsk.b.usbreset = 1U;
  gintmsk.b.enumdone = 1U;
  gintmsk.b.erlysuspend = 1U;
  gintmsk.b.usbsuspend = 1U;
  gintmsk.b.wkupintr = 1U;
  gintmsk.b.sofintr = 1U;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <XMC_USBD_Init+0x10c>)
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    gintmsk.b.rxstsqlvl = 1U;
 800149a:	2c01      	cmp	r4, #1
 800149c:	bf08      	it	eq
 800149e:	460b      	moveq	r3, r1
  }
  gintmsk.b.outepintr = 1U;
  gintmsk.b.inepintr = 1U;
 80014a0:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
  xmc_device.global_register->gintmsk = gintmsk.d32;
 80014a4:	6193      	str	r3, [r2, #24]
  return XMC_USBD_STATUS_OK;
}
 80014a6:	bd38      	pop	{r3, r4, r5, pc}
 80014a8:	1fff019c 	.word	0x1fff019c
 80014ac:	1ffed7cc 	.word	0x1ffed7cc
 80014b0:	1ffed7e8 	.word	0x1ffed7e8
 80014b4:	1fff01a0 	.word	0x1fff01a0
 80014b8:	1fff0360 	.word	0x1fff0360
 80014bc:	1fff037c 	.word	0x1fff037c
 80014c0:	c0003c1e 	.word	0xc0003c1e
 80014c4:	c0003c0e 	.word	0xc0003c0e

080014c8 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 80014c8:	b510      	push	{r4, lr}
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80014ca:	4c05      	ldr	r4, [pc, #20]	; (80014e0 <XMC_USBD_Disable+0x18>)
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7fe ff3f 	bl	8000350 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7fe fff6 	bl	80004c4 <XMC_SCU_CLOCK_GatePeripheralClock>
#endif
  XMC_SCU_POWER_DisableUsb();
}
 80014d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 80014dc:	f7ff b84a 	b.w	8000574 <XMC_SCU_POWER_DisableUsb>
 80014e0:	20000080 	.word	0x20000080

080014e4 <XMC_USBD_ClearEvent>:
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
  gintsts_data_t clear;
  clear.d32 = 0U;
 80014e4:	2300      	movs	r3, #0
  switch(event)
 80014e6:	280d      	cmp	r0, #13
 80014e8:	d81e      	bhi.n	8001528 <XMC_USBD_ClearEvent+0x44>
 80014ea:	e8df f000 	tbb	[pc, r0]
 80014ee:	1d07      	.short	0x1d07
 80014f0:	1d0a1d1d 	.word	0x1d0a1d1d
 80014f4:	1310100d 	.word	0x1310100d
 80014f8:	1b1d1815 	.word	0x1b1d1815
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 80014fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	  break;
 8001500:	e012      	b.n	8001528 <XMC_USBD_ClearEvent+0x44>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  break;
 8001506:	e00f      	b.n	8001528 <XMC_USBD_ClearEvent+0x44>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8001508:	f44f 6300 	mov.w	r3, #2048	; 0x800
	  break;
 800150c:	e00c      	b.n	8001528 <XMC_USBD_ClearEvent+0x44>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
	  break;
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 800150e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	  break;
 8001512:	e009      	b.n	8001528 <XMC_USBD_ClearEvent+0x44>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8001514:	2308      	movs	r3, #8
	  break;
 8001516:	e007      	b.n	8001528 <XMC_USBD_ClearEvent+0x44>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
	  break;
 800151c:	e004      	b.n	8001528 <XMC_USBD_ClearEvent+0x44>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 800151e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  break;
 8001522:	e001      	b.n	8001528 <XMC_USBD_ClearEvent+0x44>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8001524:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	  break;
		default:
		break;
	}
	xmc_device.global_register->gintsts = clear.d32;
 8001528:	4a02      	ldr	r2, [pc, #8]	; (8001534 <XMC_USBD_ClearEvent+0x50>)
 800152a:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 800152e:	6153      	str	r3, [r2, #20]
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	1fff01a0 	.word	0x1fff01a0

08001538 <XMC_USBD_EnableEventOUTEP>:
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
	doepint_data_t doepint;
	doepint.d32 = event;
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <XMC_USBD_EnableEventOUTEP+0x10>)
 800153a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 800153e:	6953      	ldr	r3, [r2, #20]
 8001540:	4318      	orrs	r0, r3
 8001542:	6150      	str	r0, [r2, #20]
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	1fff01a0 	.word	0x1fff01a0

0800154c <XMC_USBD_EnableEventINEP>:
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
	diepint_data_t diepint;
	diepint.d32 = event;
	xmc_device.device_register->diepmsk |= diepint.d32;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <XMC_USBD_EnableEventINEP+0x10>)
 800154e:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001552:	6913      	ldr	r3, [r2, #16]
 8001554:	4318      	orrs	r0, r3
 8001556:	6110      	str	r0, [r2, #16]
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	1fff01a0 	.word	0x1fff01a0

08001560 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8001564:	4cc1      	ldr	r4, [pc, #772]	; (800186c <XMC_USBD_IRQHandler+0x30c>)
 8001566:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800156a:	699f      	ldr	r7, [r3, #24]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 800156c:	695d      	ldr	r5, [r3, #20]
 800156e:	403d      	ands	r5, r7
	
  if (data.b.sofintr)
 8001570:	fa5f f885 	uxtb.w	r8, r5
 8001574:	f018 0f08 	tst.w	r8, #8
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8001578:	b085      	sub	sp, #20
 800157a:	4606      	mov	r6, r0
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
	
  if (data.b.sofintr)
 800157c:	d006      	beq.n	800158c <XMC_USBD_IRQHandler+0x2c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 800157e:	2009      	movs	r0, #9
 8001580:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001584:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8001586:	2009      	movs	r0, #9
 8001588:	f7ff ffac 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800158c:	7b73      	ldrb	r3, [r6, #13]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d119      	bne.n	80015c6 <XMC_USBD_IRQHandler+0x66>
  {
    if (data.b.rxstsqlvl)
 8001592:	f018 0f10 	tst.w	r8, #16
 8001596:	d016      	beq.n	80015c6 <XMC_USBD_IRQHandler+0x66>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8001598:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
  {
    if (data.b.rxstsqlvl)
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 800159c:	f36f 1704 	bfc	r7, #4, #1
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80015a0:	619f      	str	r7, [r3, #24]
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 80015a2:	6a19      	ldr	r1, [r3, #32]

  switch (data.b.pktsts)
 80015a4:	f3c1 4343 	ubfx	r3, r1, #17, #4
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d001      	beq.n	80015b0 <XMC_USBD_IRQHandler+0x50>
 80015ac:	2b06      	cmp	r3, #6
 80015ae:	d105      	bne.n	80015bc <XMC_USBD_IRQHandler+0x5c>
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
      break;
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80015b0:	f001 000f 	and.w	r0, r1, #15
 80015b4:	f3c1 110a 	ubfx	r1, r1, #4, #11
 80015b8:	f7ff fb1a 	bl	8000bf0 <XMC_USBD_lReadFifo>
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
      xmc_device.global_register->gintmsk = gintmsk.d32;
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
      gintmsk.b.rxstsqlvl = 1U;
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80015bc:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
      xmc_device.global_register->gintmsk = gintmsk.d32;
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
      gintmsk.b.rxstsqlvl = 1U;
 80015c0:	f047 0710 	orr.w	r7, r7, #16
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80015c4:	619f      	str	r7, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 80015c6:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80015ca:	077a      	lsls	r2, r7, #29
 80015cc:	d502      	bpl.n	80015d4 <XMC_USBD_IRQHandler+0x74>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 80015ce:	200a      	movs	r0, #10
 80015d0:	f7ff ff88 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 80015d4:	073b      	lsls	r3, r7, #28
 80015d6:	d506      	bpl.n	80015e6 <XMC_USBD_IRQHandler+0x86>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 80015d8:	2006      	movs	r0, #6
 80015da:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80015de:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 80015e0:	2006      	movs	r0, #6
 80015e2:	f7ff ff7f 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 80015e6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80015ea:	f018 0f80 	tst.w	r8, #128	; 0x80
 80015ee:	d006      	beq.n	80015fe <XMC_USBD_IRQHandler+0x9e>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80015f0:	2008      	movs	r0, #8
 80015f2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80015f6:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80015f8:	2008      	movs	r0, #8
 80015fa:	f7ff ff73 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 80015fe:	f018 0f40 	tst.w	r8, #64	; 0x40
 8001602:	d00c      	beq.n	800161e <XMC_USBD_IRQHandler+0xbe>
  {
    xmc_device.IsPowered = 1U;
 8001604:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8001610:	2000      	movs	r0, #0
 8001612:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001616:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff ff63 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 800161e:	06f8      	lsls	r0, r7, #27
 8001620:	d55c      	bpl.n	80016dc <XMC_USBD_IRQHandler+0x17c>
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8001622:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 8001626:	6853      	ldr	r3, [r2, #4]
  dctl.b.rmtwkupsig = 1U;
 8001628:	f043 0301 	orr.w	r3, r3, #1
  xmc_device.device_register->dctl = dctl.d32;
 800162c:	6053      	str	r3, [r2, #4]
 800162e:	4b90      	ldr	r3, [pc, #576]	; (8001870 <XMC_USBD_IRQHandler+0x310>)
 8001630:	f103 001c 	add.w	r0, r3, #28

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001634:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8001638:	680a      	ldr	r2, [r1, #0]
		epctl.b.snak = 1U;
 800163a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
		epctl.b.stall = 0U;
 800163e:	f36f 5255 	bfc	r2, #21, #1
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001642:	4283      	cmp	r3, r0
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
		epctl.b.snak = 1U;
		epctl.b.stall = 0U;
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8001644:	600a      	str	r2, [r1, #0]
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001646:	d1f5      	bne.n	8001634 <XMC_USBD_IRQHandler+0xd4>
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001648:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800164c:	2140      	movs	r1, #64	; 0x40
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
 800164e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  gnptxfsiz.b.startaddr = 64U;
 8001652:	f361 020f 	bfi	r2, r1, #0, #16
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8001656:	6259      	str	r1, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 800165a:	4a86      	ldr	r2, [pc, #536]	; (8001874 <XMC_USBD_IRQHandler+0x314>)
 800165c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8001660:	3210      	adds	r2, #16
 8001662:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8001666:	3210      	adds	r2, #16
 8001668:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800166c:	3210      	adds	r2, #16
 800166e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001672:	3210      	adds	r2, #16
 8001674:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001678:	3210      	adds	r2, #16
 800167a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 800167e:	2010      	movs	r0, #16
 8001680:	f7ff faf8 	bl	8000c74 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff faf5 	bl	8000c74 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 800168a:	f7ff fb11 	bl	8000cb0 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
  daint.b.inep0 = 1U;
  daint.b.outep0 = 1U;
  xmc_device.device_register->daintmsk = daint.d32;
 800168e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8001692:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001696:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8001698:	200f      	movs	r0, #15
 800169a:	f7ff ff4d 	bl	8001538 <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff ff54 	bl	800154c <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 80016a4:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 80016a8:	6813      	ldr	r3, [r2, #0]
  XMC_USBD_lFlushTXFifo(0x0U);
  XMC_USBD_lFlushRXFifo();
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
  daint.b.inep0 = 1U;
 80016aa:	f04f 0800 	mov.w	r8, #0
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
  dcfg.b.devaddr = 0U;
 80016ae:	f368 130a 	bfi	r3, r8, #4, #7
  xmc_device.device_register->dcfg = dcfg.d32;
 80016b2:	6013      	str	r3, [r2, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80016b4:	7b73      	ldrb	r3, [r6, #13]
 80016b6:	2b01      	cmp	r3, #1
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 80016b8:	bf08      	it	eq
 80016ba:	f8c2 8034 	streq.w	r8, [r2, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 80016be:	6863      	ldr	r3, [r4, #4]
 80016c0:	f023 0310 	bic.w	r3, r3, #16
 80016c4:	6063      	str	r3, [r4, #4]
  xmc_device.ep[0U].inInUse = 0U;
 80016c6:	6863      	ldr	r3, [r4, #4]
 80016c8:	f023 0308 	bic.w	r3, r3, #8
 80016cc:	6063      	str	r3, [r4, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 80016ce:	2004      	movs	r0, #4
 80016d0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80016d4:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 80016d6:	2004      	movs	r0, #4
 80016d8:	f7ff ff04 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
  {
    XMC_USBD_lHandleUSBReset(obj);
  }
  if (data.b.enumdone)
 80016dc:	06b9      	lsls	r1, r7, #26
 80016de:	d519      	bpl.n	8001714 <XMC_USBD_IRQHandler+0x1b4>
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 80016e0:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
 80016e4:	6813      	ldr	r3, [r2, #0]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 80016e6:	f36f 030a 	bfc	r3, #0, #11
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 80016ea:	6013      	str	r3, [r2, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 80016ec:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 80016f0:	f043 0305 	orr.w	r3, r3, #5
 80016f4:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 80016f8:	2002      	movs	r0, #2
 80016fa:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80016fe:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8001700:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 8001704:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001706:	2109      	movs	r1, #9
 8001708:	f361 238d 	bfi	r3, r1, #10, #4
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 800170c:	60d3      	str	r3, [r2, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 800170e:	200b      	movs	r0, #11
 8001710:	f7ff fee8 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if (data.b.enumdone)
  {
    XMC_USBD_lHandleEnumDone();
  }
  if (data.b.inepint)
 8001714:	f3c5 4707 	ubfx	r7, r5, #16, #8
 8001718:	077a      	lsls	r2, r7, #29
 800171a:	f140 80bb 	bpl.w	8001894 <XMC_USBD_IRQHandler+0x334>
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 800171e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8001722:	699a      	ldr	r2, [r3, #24]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	9301      	str	r3, [sp, #4]
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
 8001728:	f04f 0a00 	mov.w	sl, #0
 800172c:	b293      	uxth	r3, r2
 800172e:	9302      	str	r3, [sp, #8]
	
  daint.d32 = xmc_device.device_register->daint;
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
  
  dieptsiz.d32 = 0U;
 8001730:	46d0      	mov	r8, sl
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 8001732:	9b02      	ldr	r3, [sp, #8]
 8001734:	fa5f f48a 	uxtb.w	r4, sl
 8001738:	4123      	asrs	r3, r4
 800173a:	f000 80a8 	beq.w	800188e <XMC_USBD_IRQHandler+0x32e>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
 800173e:	07db      	lsls	r3, r3, #31
 8001740:	f140 80a2 	bpl.w	8001888 <XMC_USBD_IRQHandler+0x328>
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001744:	4a49      	ldr	r2, [pc, #292]	; (800186c <XMC_USBD_IRQHandler+0x30c>)
 8001746:	f104 036a 	add.w	r3, r4, #106	; 0x6a
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800174a:	f04f 0e34 	mov.w	lr, #52	; 0x34
 800174e:	fb0e fe04 	mul.w	lr, lr, r4
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001752:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001756:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 800175a:	f8d0 c008 	ldr.w	ip, [r0, #8]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	eb02 010e 	add.w	r1, r2, lr
 8001764:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8001768:	f00e 090f 	and.w	r9, lr, #15
 800176c:	fa23 f309 	lsr.w	r3, r3, r9
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8001770:	ea4f 19c3 	mov.w	r9, r3, lsl #7
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	fa5f f989 	uxtb.w	r9, r9
 800177a:	ea49 0903 	orr.w	r9, r9, r3
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800177e:	7b73      	ldrb	r3, [r6, #13]
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 8001780:	ea09 090c 	and.w	r9, r9, ip
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001784:	b913      	cbnz	r3, 800178c <XMC_USBD_IRQHandler+0x22c>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 8001786:	f8d0 8010 	ldr.w	r8, [r0, #16]
 800178a:	e03c      	b.n	8001806 <XMC_USBD_IRQHandler+0x2a6>
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800178c:	2b01      	cmp	r3, #1
 800178e:	d13a      	bne.n	8001806 <XMC_USBD_IRQHandler+0x2a6>
      {
        if (diepint.b.emptyintr)
 8001790:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001794:	d037      	beq.n	8001806 <XMC_USBD_IRQHandler+0x2a6>
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8001796:	f00e 0e0f 	and.w	lr, lr, #15
 800179a:	f10e 0078 	add.w	r0, lr, #120	; 0x78
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 800179e:	f10e 0e6a 	add.w	lr, lr, #106	; 0x6a
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 80017a2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80017a6:	9003      	str	r0, [sp, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 80017a8:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80017aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80017ac:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
  if (!byte_count)
 80017b0:	1a40      	subs	r0, r0, r1
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80017b2:	6992      	ldr	r2, [r2, #24]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
  if (!byte_count)
 80017b4:	d01d      	beq.n	80017f2 <XMC_USBD_IRQHandler+0x292>
    result = 0U;
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 80017b6:	f100 0c03 	add.w	ip, r0, #3
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 80017ba:	b292      	uxth	r2, r2
    result = 0U;
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 80017bc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 80017c0:	4594      	cmp	ip, r2
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 80017c2:	bf84      	itt	hi
 80017c4:	0090      	lslhi	r0, r2, #2
 80017c6:	4694      	movhi	ip, r2
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80017c8:	f04f 0b00 	mov.w	fp, #0
 80017cc:	45e3      	cmp	fp, ip
 80017ce:	d010      	beq.n	80017f2 <XMC_USBD_IRQHandler+0x292>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 80017d0:	4926      	ldr	r1, [pc, #152]	; (800186c <XMC_USBD_IRQHandler+0x30c>)
 80017d2:	2234      	movs	r2, #52	; 0x34
 80017d4:	fb02 1e04 	mla	lr, r2, r4, r1
      i++;
 80017d8:	f10b 0b01 	add.w	fp, fp, #1
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 80017dc:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
 80017e0:	680a      	ldr	r2, [r1, #0]
 80017e2:	9903      	ldr	r1, [sp, #12]
 80017e4:	600a      	str	r2, [r1, #0]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80017e6:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 80017ea:	3204      	adds	r2, #4
 80017ec:	f8ce 2024 	str.w	r2, [lr, #36]	; 0x24
 80017f0:	e7ec      	b.n	80017cc <XMC_USBD_IRQHandler+0x26c>
      {
        if (diepint.b.emptyintr)
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
          ep->xferCount += bytes;
 80017f2:	4a1e      	ldr	r2, [pc, #120]	; (800186c <XMC_USBD_IRQHandler+0x30c>)
 80017f4:	2134      	movs	r1, #52	; 0x34
 80017f6:	fb01 2104 	mla	r1, r1, r4, r2
 80017fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80017fc:	4402      	add	r2, r0
 80017fe:	62ca      	str	r2, [r1, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001800:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001802:	4402      	add	r2, r0
 8001804:	624a      	str	r2, [r1, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 8001806:	f019 0f01 	tst.w	r9, #1
 800180a:	d037      	beq.n	800187c <XMC_USBD_IRQHandler+0x31c>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800180c:	b983      	cbnz	r3, 8001830 <XMC_USBD_IRQHandler+0x2d0>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 800180e:	f028 4260 	bic.w	r2, r8, #3758096384	; 0xe0000000
 8001812:	b96a      	cbnz	r2, 8001830 <XMC_USBD_IRQHandler+0x2d0>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001814:	4a15      	ldr	r2, [pc, #84]	; (800186c <XMC_USBD_IRQHandler+0x30c>)
 8001816:	2134      	movs	r1, #52	; 0x34
 8001818:	fb01 2104 	mla	r1, r1, r4, r2
 800181c:	f8d1 e028 	ldr.w	lr, [r1, #40]	; 0x28
 8001820:	6aca      	ldr	r2, [r1, #44]	; 0x2c
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
 8001822:	6a48      	ldr	r0, [r1, #36]	; 0x24
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
            ep->xferCount += Bytes;
 8001824:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 8001828:	ebc2 020e 	rsb	r2, r2, lr
            ep->xferCount += Bytes;
            ep->xferBuffer += Bytes;
 800182c:	4402      	add	r2, r0
 800182e:	624a      	str	r2, [r1, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8001830:	f8df e038 	ldr.w	lr, [pc, #56]	; 800186c <XMC_USBD_IRQHandler+0x30c>
 8001834:	2034      	movs	r0, #52	; 0x34
 8001836:	fb00 e004 	mla	r0, r0, r4, lr
 800183a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800183c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800183e:	4291      	cmp	r1, r2
 8001840:	d11a      	bne.n	8001878 <XMC_USBD_IRQHandler+0x318>
        {
          ep->inInUse = 0U;
 8001842:	6842      	ldr	r2, [r0, #4]
 8001844:	f022 0208 	bic.w	r2, r2, #8
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001848:	2b01      	cmp	r3, #1
            ep->xferBuffer += Bytes;
          }
        }
        if (ep->xferTotal==ep->xferLength)
        {
          ep->inInUse = 0U;
 800184a:	6042      	str	r2, [r0, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 800184c:	bf01      	itttt	eq
 800184e:	f8de 21a4 	ldreq.w	r2, [lr, #420]	; 0x1a4
 8001852:	6b51      	ldreq	r1, [r2, #52]	; 0x34
 8001854:	40a3      	lsleq	r3, r4
 8001856:	ea21 0303 	biceq.w	r3, r1, r3
        {
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800185a:	bf08      	it	eq
 800185c:	6353      	streq	r3, [r2, #52]	; 0x34
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 800185e:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 8001862:	f8de 3204 	ldr.w	r3, [lr, #516]	; 0x204
 8001866:	2102      	movs	r1, #2
 8001868:	4798      	blx	r3
 800186a:	e007      	b.n	800187c <XMC_USBD_IRQHandler+0x31c>
 800186c:	1fff01a0 	.word	0x1fff01a0
 8001870:	1fff0360 	.word	0x1fff0360
 8001874:	00100050 	.word	0x00100050
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8001878:	f7ff fa7c 	bl	8000d74 <XMC_USBD_lStartWriteXfer>
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
  diepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 800187c:	346a      	adds	r4, #106	; 0x6a
 800187e:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <XMC_USBD_IRQHandler+0x478>)
 8001880:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001884:	f8c3 9008 	str.w	r9, [r3, #8]
 8001888:	f10a 0a01 	add.w	sl, sl, #1
 800188c:	e751      	b.n	8001732 <XMC_USBD_IRQHandler+0x1d2>

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
    }
    ep_num++;
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 800188e:	200e      	movs	r0, #14
 8001890:	f7ff fe28 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if (data.b.inepint)
  {
    XMC_USBD_lHandleIEPInt(obj);
  }
  if (data.b.outepintr)
 8001894:	0738      	lsls	r0, r7, #28
 8001896:	f140 8087 	bpl.w	80019a8 <XMC_USBD_IRQHandler+0x448>
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 800189a:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <XMC_USBD_IRQHandler+0x478>)
 800189c:	f8d2 11a4 	ldr.w	r1, [r2, #420]	; 0x1a4
 80018a0:	698b      	ldr	r3, [r1, #24]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 80018a2:	69cf      	ldr	r7, [r1, #28]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 80018a4:	6949      	ldr	r1, [r1, #20]
 80018a6:	9101      	str	r1, [sp, #4]
  
  mask = daint.ep.out & daintmsk.ep.out;
 80018a8:	f3c3 430f 	ubfx	r3, r3, #16, #16
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 80018ac:	f04f 0800 	mov.w	r8, #0
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
  
  mask = daint.ep.out & daintmsk.ep.out;
 80018b0:	ea03 4717 	and.w	r7, r3, r7, lsr #16
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 80018b4:	46c2      	mov	sl, r8
 80018b6:	4693      	mov	fp, r2
 80018b8:	fa5f f48a 	uxtb.w	r4, sl
 
  while ((uint16_t)mask >> ep_num)
 80018bc:	fa57 f304 	asrs.w	r3, r7, r4
 80018c0:	d06f      	beq.n	80019a2 <XMC_USBD_IRQHandler+0x442>
  {
    temp1 = (mask >> (uint16_t)ep_num);
    temp = temp1 & 0x1U;
    if (temp)
 80018c2:	07d9      	lsls	r1, r3, #31
 80018c4:	d56a      	bpl.n	800199c <XMC_USBD_IRQHandler+0x43c>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80018c6:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 80018ca:	9a01      	ldr	r2, [sp, #4]
 80018cc:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 80018d0:	688b      	ldr	r3, [r1, #8]
 80018d2:	ea03 0902 	and.w	r9, r3, r2
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80018d6:	7b73      	ldrb	r3, [r6, #13]
 80018d8:	b90b      	cbnz	r3, 80018de <XMC_USBD_IRQHandler+0x37e>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 80018da:	f8d1 8010 	ldr.w	r8, [r1, #16]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 80018de:	fa5f fc89 	uxtb.w	ip, r9
 80018e2:	f01c 0f08 	tst.w	ip, #8
 80018e6:	d029      	beq.n	800193c <XMC_USBD_IRQHandler+0x3dc>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 80018e8:	2034      	movs	r0, #52	; 0x34
 80018ea:	fb00 b004 	mla	r0, r0, r4, fp
 80018ee:	7901      	ldrb	r1, [r0, #4]
 80018f0:	f36f 1145 	bfc	r1, #5, #1
 80018f4:	7101      	strb	r1, [r0, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80018f6:	b92b      	cbnz	r3, 8001904 <XMC_USBD_IRQHandler+0x3a4>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 80018f8:	f3c8 7341 	ubfx	r3, r8, #29, #2
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	f1c3 0318 	rsb	r3, r3, #24
 8001902:	e004      	b.n	800190e <XMC_USBD_IRQHandler+0x3ae>
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001904:	2b01      	cmp	r3, #1
 8001906:	d103      	bne.n	8001910 <XMC_USBD_IRQHandler+0x3b0>
		{
			ep->outBytesAvailable += ep->xferCount;
 8001908:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800190a:	6903      	ldr	r3, [r0, #16]
 800190c:	440b      	add	r3, r1
 800190e:	6103      	str	r3, [r0, #16]
		}
		ep->outInUse = 0U;
 8001910:	2334      	movs	r3, #52	; 0x34
 8001912:	fb03 b304 	mla	r3, r3, r4, fp
 8001916:	f8cd c008 	str.w	ip, [sp, #8]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	f021 0110 	bic.w	r1, r1, #16
 8001920:	6059      	str	r1, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8001922:	2000      	movs	r0, #0
 8001924:	f8db 3204 	ldr.w	r3, [fp, #516]	; 0x204
 8001928:	4601      	mov	r1, r0
 800192a:	4798      	blx	r3
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
  doepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 800192c:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
 8001930:	2108      	movs	r1, #8
 8001932:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001936:	f8dd c008 	ldr.w	ip, [sp, #8]
 800193a:	6099      	str	r1, [r3, #8]
		ep->outInUse = 0U;
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
      }
      if (doepint.b.xfercompl)
 800193c:	f01c 0f01 	tst.w	ip, #1
 8001940:	d026      	beq.n	8001990 <XMC_USBD_IRQHandler+0x430>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001942:	7b73      	ldrb	r3, [r6, #13]
 8001944:	b973      	cbnz	r3, 8001964 <XMC_USBD_IRQHandler+0x404>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8001946:	2334      	movs	r3, #52	; 0x34
 8001948:	fb03 b304 	mla	r3, r3, r4, fp
 800194c:	f3c8 0c12 	ubfx	ip, r8, #0, #19
 8001950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001952:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001954:	1a40      	subs	r0, r0, r1
 8001956:	ebcc 0000 	rsb	r0, ip, r0
          ep->xferCount += bytes;
 800195a:	4401      	add	r1, r0
 800195c:	62d9      	str	r1, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 800195e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001960:	4401      	add	r1, r0
 8001962:	6259      	str	r1, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8001964:	2034      	movs	r0, #52	; 0x34
 8001966:	fb00 b004 	mla	r0, r0, r4, fp
 800196a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800196c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800196e:	4299      	cmp	r1, r3
 8001970:	d10c      	bne.n	800198c <XMC_USBD_IRQHandler+0x42c>
        {
          ep->outBytesAvailable = ep->xferCount;
 8001972:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001974:	6103      	str	r3, [r0, #16]
          ep->outInUse = 0U;
 8001976:	6843      	ldr	r3, [r0, #4]
 8001978:	f023 0310 	bic.w	r3, r3, #16
 800197c:	6043      	str	r3, [r0, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <XMC_USBD_IRQHandler+0x478>)
 8001980:	4620      	mov	r0, r4
 8001982:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001986:	2101      	movs	r1, #1
 8001988:	4798      	blx	r3
 800198a:	e001      	b.n	8001990 <XMC_USBD_IRQHandler+0x430>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 800198c:	f7ff f9a6 	bl	8000cdc <XMC_USBD_lStartReadXfer>
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
  doepint_data_t clear;
  clear.d32 = event;
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001990:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
 8001994:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 8001998:	f8c3 9008 	str.w	r9, [r3, #8]
 800199c:	f10a 0a01 	add.w	sl, sl, #1
 80019a0:	e78a      	b.n	80018b8 <XMC_USBD_IRQHandler+0x358>
    }
    ep_num++;
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 80019a2:	200d      	movs	r0, #13
 80019a4:	f7ff fd9e 	bl	80014e4 <XMC_USBD_ClearEvent>
  }
  if (data.b.outepintr)
  {
		XMC_USBD_lHandleOEPInt(obj);
  }
	if (data.b.otgintr)
 80019a8:	076a      	lsls	r2, r5, #29
 80019aa:	d512      	bpl.n	80019d2 <XMC_USBD_IRQHandler+0x472>
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 80019ac:	4c0a      	ldr	r4, [pc, #40]	; (80019d8 <XMC_USBD_IRQHandler+0x478>)
 80019ae:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80019b2:	685d      	ldr	r5, [r3, #4]
  if (data.b.sesenddet)
 80019b4:	076b      	lsls	r3, r5, #29
 80019b6:	d509      	bpl.n	80019cc <XMC_USBD_IRQHandler+0x46c>
  {
		xmc_device.IsPowered = 0U;
 80019b8:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80019bc:	f36f 0382 	bfc	r3, #2, #1
 80019c0:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80019ca:	4798      	blx	r3
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
  gotgint_data_t clear = { .d32 = 0U};
  clear.d32 = event;
  xmc_device.global_register->gotgint = clear.d32;
 80019cc:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80019d0:	605d      	str	r5, [r3, #4]
	if (data.b.otgintr)
  {
	  XMC_USBD_lHandleOTGInt();
  }

}
 80019d2:	b005      	add	sp, #20
 80019d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019d8:	1fff01a0 	.word	0x1fff01a0

080019dc <XMC_USIC_CH_SetBaudrate>:
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80019dc:	2963      	cmp	r1, #99	; 0x63
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80019de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e2:	4605      	mov	r5, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	4616      	mov	r6, r2
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80019e8:	d930      	bls.n	8001a4c <XMC_USIC_CH_SetBaudrate+0x70>
 80019ea:	b37a      	cbz	r2, 8001a4c <XMC_USIC_CH_SetBaudrate+0x70>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80019ec:	f7fe fcc4 	bl	8000378 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80019f0:	2164      	movs	r1, #100	; 0x64
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
 80019f2:	f240 3cff 	movw	ip, #1023	; 0x3ff
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80019f6:	fbb0 fef1 	udiv	lr, r0, r1
    rate = rate / 100U;
 80019fa:	fbb4 f4f1 	udiv	r4, r4, r1

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
 80019fe:	2101      	movs	r1, #1
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001a00:	4374      	muls	r4, r6
 8001a02:	ebce 278e 	rsb	r7, lr, lr, lsl #10
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
 8001a06:	460a      	mov	r2, r1
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001a08:	4660      	mov	r0, ip
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001a0a:	fbb7 f3f4 	udiv	r3, r7, r4
      pdiv_int = pdiv >> 10U;
 8001a0e:	ea4f 2893 	mov.w	r8, r3, lsr #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001a12:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8001a16:	d206      	bcs.n	8001a26 <XMC_USIC_CH_SetBaudrate+0x4a>

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
 8001a18:	f3c3 0309 	ubfx	r3, r3, #0, #10

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001a1c:	4563      	cmp	r3, ip
 8001a1e:	bf3e      	ittt	cc
 8001a20:	469c      	movcc	ip, r3
 8001a22:	4641      	movcc	r1, r8
 8001a24:	4602      	movcc	r2, r0

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001a26:	3801      	subs	r0, #1
 8001a28:	ebce 0707 	rsb	r7, lr, r7
 8001a2c:	d1ed      	bne.n	8001a0a <XMC_USIC_CH_SetBaudrate+0x2e>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a32:	612a      	str	r2, [r5, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001a34:	696a      	ldr	r2, [r5, #20]
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <XMC_USIC_CH_SetBaudrate+0x78>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001a38:	3e01      	subs	r6, #1
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001a3a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001a3c:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001a40:	3901      	subs	r1, #1

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001a42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001a46:	616b      	str	r3, [r5, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001a4c:	2001      	movs	r0, #1
  }
  
  return status;
}
 8001a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a52:	bf00      	nop
 8001a54:	fc0080ef 	.word	0xfc0080ef

08001a58 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001a58:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001a5a:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8001a5e:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8001a62:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001a66:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8001a6a:	4c05      	ldr	r4, [pc, #20]	; (8001a80 <XMC_USIC_CH_TXFIFO_Configure+0x28>)
 8001a6c:	402c      	ands	r4, r5
 8001a6e:	4321      	orrs	r1, r4
 8001a70:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001a74:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001a78:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8001a7c:	bd30      	pop	{r4, r5, pc}
 8001a7e:	bf00      	nop
 8001a80:	f8ffc0c0 	.word	0xf8ffc0c0

08001a84 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001a84:	b530      	push	{r4, r5, lr}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001a86:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
 8001a8a:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8001a8e:	f8c0 410c 	str.w	r4, [r0, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001a92:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c
 8001a96:	4c06      	ldr	r4, [pc, #24]	; (8001ab0 <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
 8001a98:	402c      	ands	r4, r5
 8001a9a:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8001a9e:	4321      	orrs	r1, r4
 8001aa0:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8001aa4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001aa8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001aac:	bd30      	pop	{r4, r5, pc}
 8001aae:	bf00      	nop
 8001ab0:	efffc0c0 	.word	0xefffc0c0

08001ab4 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001ab4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8001ab8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001abc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001ac0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001ac4:	0609      	lsls	r1, r1, #24
 8001ac6:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001aca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8001ad4:	4770      	bx	lr

08001ad6 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001ad6:	b510      	push	{r4, lr}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001ad8:	2307      	movs	r3, #7
 8001ada:	6984      	ldr	r4, [r0, #24]
 8001adc:	408b      	lsls	r3, r1
 8001ade:	ea24 0303 	bic.w	r3, r4, r3
                  (service_request << (uint32_t)interrupt_node));
 8001ae2:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	6182      	str	r2, [r0, #24]
 8001ae8:	bd10      	pop	{r4, pc}

08001aea <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001aea:	b510      	push	{r4, lr}
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001aec:	2307      	movs	r3, #7
 8001aee:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8001af2:	408b      	lsls	r3, r1
 8001af4:	ea24 0303 	bic.w	r3, r4, r3
                   (service_request << (uint32_t)interrupt_node));
 8001af8:	408a      	lsls	r2, r1

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001afa:	431a      	orrs	r2, r3
 8001afc:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
 8001b00:	bd10      	pop	{r4, pc}

08001b02 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001b02:	b510      	push	{r4, lr}
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001b04:	2307      	movs	r3, #7
 8001b06:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
 8001b0a:	408b      	lsls	r3, r1
 8001b0c:	ea24 0303 	bic.w	r3, r4, r3
                   (service_request << (uint32_t)interrupt_node));
 8001b10:	408a      	lsls	r2, r1

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001b12:	431a      	orrs	r2, r3
 8001b14:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8001b18:	bd10      	pop	{r4, pc}
	...

08001b1c <XMC_USIC_Enable>:
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001b1c:	b508      	push	{r3, lr}
  if (usic == USIC0)
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <XMC_USIC_Enable+0x40>)
 8001b20:	4298      	cmp	r0, r3
 8001b22:	d106      	bne.n	8001b32 <XMC_USIC_Enable+0x16>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001b24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b28:	f7fe fcd6 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001b2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b30:	e00e      	b.n	8001b50 <XMC_USIC_Enable+0x34>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <XMC_USIC_Enable+0x44>)
 8001b34:	4298      	cmp	r0, r3
 8001b36:	d104      	bne.n	8001b42 <XMC_USIC_Enable+0x26>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001b38:	480a      	ldr	r0, [pc, #40]	; (8001b64 <XMC_USIC_Enable+0x48>)
 8001b3a:	f7fe fccd 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001b3e:	4809      	ldr	r0, [pc, #36]	; (8001b64 <XMC_USIC_Enable+0x48>)
 8001b40:	e006      	b.n	8001b50 <XMC_USIC_Enable+0x34>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <XMC_USIC_Enable+0x4c>)
 8001b44:	4298      	cmp	r0, r3
 8001b46:	d107      	bne.n	8001b58 <XMC_USIC_Enable+0x3c>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8001b48:	4808      	ldr	r0, [pc, #32]	; (8001b6c <XMC_USIC_Enable+0x50>)
 8001b4a:	f7fe fcc5 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001b4e:	4807      	ldr	r0, [pc, #28]	; (8001b6c <XMC_USIC_Enable+0x50>)
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001b50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001b54:	f7fe bc06 	b.w	8000364 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001b58:	bd08      	pop	{r3, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40030008 	.word	0x40030008
 8001b60:	48020008 	.word	0x48020008
 8001b64:	10000080 	.word	0x10000080
 8001b68:	48024008 	.word	0x48024008
 8001b6c:	10000100 	.word	0x10000100

08001b70 <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <XMC_USIC_CH_Enable+0x5c>)
 8001b72:	4298      	cmp	r0, r3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001b74:	b510      	push	{r4, lr}
 8001b76:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001b78:	d003      	beq.n	8001b82 <XMC_USIC_CH_Enable+0x12>
 8001b7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b7e:	4298      	cmp	r0, r3
 8001b80:	d101      	bne.n	8001b86 <XMC_USIC_CH_Enable+0x16>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001b82:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <XMC_USIC_CH_Enable+0x60>)
 8001b84:	e015      	b.n	8001bb2 <XMC_USIC_CH_Enable+0x42>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <XMC_USIC_CH_Enable+0x64>)
 8001b88:	4298      	cmp	r0, r3
 8001b8a:	d003      	beq.n	8001b94 <XMC_USIC_CH_Enable+0x24>
 8001b8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b90:	4298      	cmp	r0, r3
 8001b92:	d106      	bne.n	8001ba2 <XMC_USIC_CH_Enable+0x32>
  }
#if defined(USIC1)  
  else if (usic == USIC1)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001b94:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <XMC_USIC_CH_Enable+0x68>)
 8001b96:	f7fe fc9f 	bl	80004d8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001b9a:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <XMC_USIC_CH_Enable+0x68>)
 8001b9c:	f7fe fbe2 	bl	8000364 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001ba0:	e009      	b.n	8001bb6 <XMC_USIC_CH_Enable+0x46>
  {
    XMC_USIC_Enable(XMC_USIC1);
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <XMC_USIC_CH_Enable+0x6c>)
 8001ba4:	4298      	cmp	r0, r3
 8001ba6:	d003      	beq.n	8001bb0 <XMC_USIC_CH_Enable+0x40>
 8001ba8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001bac:	4298      	cmp	r0, r3
 8001bae:	d102      	bne.n	8001bb6 <XMC_USIC_CH_Enable+0x46>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <XMC_USIC_CH_Enable+0x70>)
 8001bb2:	f7ff ffb3 	bl	8001b1c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001bba:	68e3      	ldr	r3, [r4, #12]
 8001bbc:	07db      	lsls	r3, r3, #31
 8001bbe:	d5fc      	bpl.n	8001bba <XMC_USIC_CH_Enable+0x4a>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bc2:	f023 030f 	bic.w	r3, r3, #15
 8001bc6:	6423      	str	r3, [r4, #64]	; 0x40
 8001bc8:	bd10      	pop	{r4, pc}
 8001bca:	bf00      	nop
 8001bcc:	40030000 	.word	0x40030000
 8001bd0:	40030008 	.word	0x40030008
 8001bd4:	48020000 	.word	0x48020000
 8001bd8:	10000080 	.word	0x10000080
 8001bdc:	48024000 	.word	0x48024000
 8001be0:	48024008 	.word	0x48024008

08001be4 <SystemCoreClockUpdate>:
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <SystemCoreClockUpdate+0x78>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	03d9      	lsls	r1, r3, #15

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8001bea:	b510      	push	{r4, lr}
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001bec:	d525      	bpl.n	8001c3a <SystemCoreClockUpdate+0x56>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <SystemCoreClockUpdate+0x7c>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	f012 0f01 	tst.w	r2, #1
 8001bf6:	461c      	mov	r4, r3
 8001bf8:	d102      	bne.n	8001c00 <SystemCoreClockUpdate+0x1c>
      temp = OFI_FREQUENCY;
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8001bfa:	f002 f807 	bl	8003c0c <OSCHP_GetFrequency>
 8001bfe:	e000      	b.n	8001c02 <SystemCoreClockUpdate+0x1e>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001c00:	4818      	ldr	r0, [pc, #96]	; (8001c64 <SystemCoreClockUpdate+0x80>)
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <SystemCoreClockUpdate+0x7c>)
 8001c06:	0752      	lsls	r2, r2, #29
 8001c08:	d510      	bpl.n	8001c2c <SystemCoreClockUpdate+0x48>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8001c0a:	689a      	ldr	r2, [r3, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8001c0c:	6899      	ldr	r1, [r3, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8001c0e:	689b      	ldr	r3, [r3, #8]
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8001c10:	f3c2 6203 	ubfx	r2, r2, #24, #4
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8001c14:	f3c3 4406 	ubfx	r4, r3, #16, #7
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8001c18:	1c53      	adds	r3, r2, #1
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001c1a:	fb04 3303 	mla	r3, r4, r3, r3
 8001c1e:	fbb0 f0f3 	udiv	r0, r0, r3
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8001c22:	f3c1 2306 	ubfx	r3, r1, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001c26:	fb03 0000 	mla	r0, r3, r0, r0
 8001c2a:	e007      	b.n	8001c3c <SystemCoreClockUpdate+0x58>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c32:	3301      	adds	r3, #1
      
      temp = (temp / kdiv);
 8001c34:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c38:	e000      	b.n	8001c3c <SystemCoreClockUpdate+0x58>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001c3a:	480a      	ldr	r0, [pc, #40]	; (8001c64 <SystemCoreClockUpdate+0x80>)
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <SystemCoreClockUpdate+0x78>)
 8001c3e:	68d3      	ldr	r3, [r2, #12]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	fbb0 f0f3 	udiv	r0, r0, r3
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001c48:	6913      	ldr	r3, [r2, #16]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	3301      	adds	r3, #1
 8001c50:	fbb0 f0f3 	udiv	r0, r0, r3

  SystemCoreClock = temp;
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <SystemCoreClockUpdate+0x84>)
 8001c56:	6018      	str	r0, [r3, #0]
 8001c58:	bd10      	pop	{r4, pc}
 8001c5a:	bf00      	nop
 8001c5c:	50004600 	.word	0x50004600
 8001c60:	50004710 	.word	0x50004710
 8001c64:	016e3600 	.word	0x016e3600
 8001c68:	2003ffc0 	.word	0x2003ffc0

08001c6c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001c6c:	b538      	push	{r3, r4, r5, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <SystemInit+0x28>)
 8001c70:	4d09      	ldr	r5, [pc, #36]	; (8001c98 <SystemInit+0x2c>)
 8001c72:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8001c76:	4623      	mov	r3, r4
 8001c78:	cb03      	ldmia	r3!, {r0, r1}
 8001c7a:	42ab      	cmp	r3, r5
 8001c7c:	6010      	str	r0, [r2, #0]
 8001c7e:	6051      	str	r1, [r2, #4]
 8001c80:	461c      	mov	r4, r3
 8001c82:	f102 0208 	add.w	r2, r2, #8
 8001c86:	d1f6      	bne.n	8001c76 <SystemInit+0xa>
  
  SystemCoreSetup();
 8001c88:	f001 ff80 	bl	8003b8c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001c8c:	f001 ffc2 	bl	8003c14 <SystemCoreClockSetup>
 8001c90:	bd38      	pop	{r3, r4, r5, pc}
 8001c92:	bf00      	nop
 8001c94:	2003ffc4 	.word	0x2003ffc4
 8001c98:	20000010 	.word	0x20000010

08001c9c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001c9c:	b508      	push	{r3, lr}
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <_sbrk+0x34>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	b90a      	cbnz	r2, 8001ca8 <_sbrk+0xc>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <_sbrk+0x38>)
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001ca8:	681a      	ldr	r2, [r3, #0]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001caa:	490b      	ldr	r1, [pc, #44]	; (8001cd8 <_sbrk+0x3c>)
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001cac:	1cc3      	adds	r3, r0, #3
 8001cae:	f023 0303 	bic.w	r3, r3, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001cb2:	4413      	add	r3, r2
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d203      	bcs.n	8001cc0 <_sbrk+0x24>
  {
    heap_ptr += nbytes;
 8001cb8:	4905      	ldr	r1, [pc, #20]	; (8001cd0 <_sbrk+0x34>)
    return (base);
 8001cba:	4610      	mov	r0, r2

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
  {
    heap_ptr += nbytes;
 8001cbc:	600b      	str	r3, [r1, #0]
    return (base);
 8001cbe:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001cc0:	f009 fd26 	bl	800b710 <__errno>
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8001ccc:	bd08      	pop	{r3, pc}
 8001cce:	bf00      	nop
 8001cd0:	1ffed804 	.word	0x1ffed804
 8001cd4:	20000e00 	.word	0x20000e00
 8001cd8:	2003ffc0 	.word	0x2003ffc0

08001cdc <_init>:

/* Init */
void _init(void)
{}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <USBD_VCOM_Event_GetDescriptor>:
	const uint8_t  descriptor_type   = (w_value >> 8);
	const uint8_t  descriptor_number = (w_value & 0xFF);
	const void* address = NULL;
	uint16_t    size    = NO_DESCRIPTOR;

	switch (descriptor_type)
 8001ce0:	0a03      	lsrs	r3, r0, #8
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d006      	beq.n	8001cf4 <USBD_VCOM_Event_GetDescriptor+0x14>
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d007      	beq.n	8001cfa <USBD_VCOM_Event_GetDescriptor+0x1a>
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10e      	bne.n	8001d0c <USBD_VCOM_Event_GetDescriptor+0x2c>
	{
		case DTYPE_Device:
			address = &device_descriptor;
			size    = sizeof(USB_Descriptor_Device_t);
 8001cee:	2012      	movs	r0, #18
	uint16_t    size    = NO_DESCRIPTOR;

	switch (descriptor_type)
	{
		case DTYPE_Device:
			address = &device_descriptor;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <USBD_VCOM_Event_GetDescriptor+0x34>)
 8001cf2:	e00d      	b.n	8001d10 <USBD_VCOM_Event_GetDescriptor+0x30>
			size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			address = &configuration_descriptor;
			size    = sizeof(USB_Descriptor_Configuration_t);
 8001cf4:	203e      	movs	r0, #62	; 0x3e
		case DTYPE_Device:
			address = &device_descriptor;
			size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <USBD_VCOM_Event_GetDescriptor+0x38>)
			size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 8001cf8:	e00a      	b.n	8001d10 <USBD_VCOM_Event_GetDescriptor+0x30>
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
	const uint8_t  descriptor_type   = (w_value >> 8);
	const uint8_t  descriptor_number = (w_value & 0xFF);
 8001cfa:	b2c0      	uxtb	r0, r0
 8001cfc:	2802      	cmp	r0, #2
 8001cfe:	d805      	bhi.n	8001d0c <USBD_VCOM_Event_GetDescriptor+0x2c>
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <USBD_VCOM_Event_GetDescriptor+0x3c>)
 8001d02:	4907      	ldr	r1, [pc, #28]	; (8001d20 <USBD_VCOM_Event_GetDescriptor+0x40>)
 8001d04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d08:	5c08      	ldrb	r0, [r1, r0]
 8001d0a:	e001      	b.n	8001d10 <USBD_VCOM_Event_GetDescriptor+0x30>
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	4603      	mov	r3, r0
			}
			break;
	}

	(void)w_index;
	*descriptor_address = address;
 8001d10:	6013      	str	r3, [r2, #0]
	return size;
}
 8001d12:	4770      	bx	lr
 8001d14:	0800c12e 	.word	0x0800c12e
 8001d18:	0800c21b 	.word	0x0800c21b
 8001d1c:	0800c20c 	.word	0x0800c20c
 8001d20:	0800c218 	.word	0x0800c218

08001d24 <Endpoint_SelectEndpoint>:
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <Endpoint_SelectEndpoint+0x14>)
 8001d26:	f000 020f 	and.w	r2, r0, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001d2a:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d2e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001d32:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
 8001d36:	4770      	bx	lr
 8001d38:	1fff0698 	.word	0x1fff0698

08001d3c <Endpoint_BytesInEndpoint>:
	 *  buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <Endpoint_BytesInEndpoint+0x18>)
 8001d3e:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
		if (ep->Direction)
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 3302 	mla	r3, r1, r2, r3
 8001d48:	791a      	ldrb	r2, [r3, #4]
 8001d4a:	0612      	lsls	r2, r2, #24
			return (uint16_t)(ep->InBytesAvailable);
 8001d4c:	bf4c      	ite	mi
 8001d4e:	8b98      	ldrhmi	r0, [r3, #28]
		else
			return (uint16_t)(ep->OutBytesAvailable);
 8001d50:	8998      	ldrhpl	r0, [r3, #12]
	}
 8001d52:	4770      	bx	lr
 8001d54:	1fff0698 	.word	0x1fff0698

08001d58 <CDC_Device_ProcessControlRequest>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001d58:	b510      	push	{r4, lr}
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <CDC_Device_ProcessControlRequest+0x10c>)
 8001d5c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8001d60:	0792      	lsls	r2, r2, #30
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001d62:	4604      	mov	r4, r0
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8001d64:	d57c      	bpl.n	8001e60 <CDC_Device_ProcessControlRequest+0x108>
 8001d66:	4a40      	ldr	r2, [pc, #256]	; (8001e68 <CDC_Device_ProcessControlRequest+0x110>)
 8001d68:	7c80      	ldrb	r0, [r0, #18]
 8001d6a:	8891      	ldrh	r1, [r2, #4]
 8001d6c:	b289      	uxth	r1, r1
 8001d6e:	4288      	cmp	r0, r1
 8001d70:	d176      	bne.n	8001e60 <CDC_Device_ProcessControlRequest+0x108>
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 8001d72:	7851      	ldrb	r1, [r2, #1]
 8001d74:	3920      	subs	r1, #32
 8001d76:	2903      	cmp	r1, #3
 8001d78:	d872      	bhi.n	8001e60 <CDC_Device_ProcessControlRequest+0x108>
 8001d7a:	e8df f001 	tbb	[pc, r1]
 8001d7e:	0226      	.short	0x0226
 8001d80:	5e4b      	.short	0x5e4b
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	2aa1      	cmp	r2, #161	; 0xa1
 8001d86:	d16b      	bne.n	8001e60 <CDC_Device_ProcessControlRequest+0x108>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8001d88:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001d8c:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8001d90:	f022 0202 	bic.w	r2, r2, #2
 8001d94:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 8001d98:	222c      	movs	r2, #44	; 0x2c
 8001d9a:	fb02 3201 	mla	r2, r2, r1, r3
 8001d9e:	6890      	ldr	r0, [r2, #8]
 8001da0:	06c0      	lsls	r0, r0, #27
 8001da2:	d4f9      	bmi.n	8001d98 <CDC_Device_ProcessControlRequest+0x40>
 8001da4:	6892      	ldr	r2, [r2, #8]
 8001da6:	0790      	lsls	r0, r2, #30
 8001da8:	d5f6      	bpl.n	8001d98 <CDC_Device_ProcessControlRequest+0x40>
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsINReady()));

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8001daa:	69a0      	ldr	r0, [r4, #24]
 8001dac:	f000 fb7a 	bl	80024a4 <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8001db0:	7f20      	ldrb	r0, [r4, #28]
 8001db2:	f000 fb4b 	bl	800244c <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8001db6:	7f60      	ldrb	r0, [r4, #29]
 8001db8:	f000 fb48 	bl	800244c <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8001dbc:	7fa0      	ldrb	r0, [r4, #30]
 8001dbe:	f000 fb45 	bl	800244c <Endpoint_Write_8>
				}

				break;
		}
	}
}
 8001dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

					Endpoint_ClearIN();
 8001dc6:	f000 baf1 	b.w	80023ac <Endpoint_ClearIN>
					Endpoint_ClearStatusStage();
				}

				break;
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8001dca:	7812      	ldrb	r2, [r2, #0]
 8001dcc:	2a21      	cmp	r2, #33	; 0x21
 8001dce:	d147      	bne.n	8001e60 <CDC_Device_ProcessControlRequest+0x108>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8001dd0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001dd4:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8001dd8:	f022 0202 	bic.w	r2, r2, #2
 8001ddc:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->IsOutRecieved;
 8001de0:	222c      	movs	r2, #44	; 0x2c
 8001de2:	fb02 3201 	mla	r2, r2, r1, r3
 8001de6:	6892      	ldr	r2, [r2, #8]
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 8001de8:	0692      	lsls	r2, r2, #26
 8001dea:	d404      	bmi.n	8001df6 <CDC_Device_ProcessControlRequest+0x9e>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <CDC_Device_ProcessControlRequest+0x114>)
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	2a00      	cmp	r2, #0
 8001df2:	d1f5      	bne.n	8001de0 <CDC_Device_ProcessControlRequest+0x88>
 8001df4:	e034      	b.n	8001e60 <CDC_Device_ProcessControlRequest+0x108>
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 8001df6:	f000 fb6b 	bl	80024d0 <Endpoint_Read_32_LE>
 8001dfa:	61a0      	str	r0, [r4, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8001dfc:	f000 fb3c 	bl	8002478 <Endpoint_Read_8>
 8001e00:	7720      	strb	r0, [r4, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 8001e02:	f000 fb39 	bl	8002478 <Endpoint_Read_8>
 8001e06:	7760      	strb	r0, [r4, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8001e08:	f000 fb36 	bl	8002478 <Endpoint_Read_8>

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.LineEncodingChanged)
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <CDC_Device_ProcessControlRequest+0x118>)
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8001e0e:	77a0      	strb	r0, [r4, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.LineEncodingChanged)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e00d      	b.n	8001e30 <CDC_Device_ProcessControlRequest+0xd8>

				}

				break;
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8001e14:	7812      	ldrb	r2, [r2, #0]
 8001e16:	2a21      	cmp	r2, #33	; 0x21
 8001e18:	d122      	bne.n	8001e60 <CDC_Device_ProcessControlRequest+0x108>
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8001e1a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8001e1e:	f022 0202 	bic.w	r2, r2, #2
 8001e22:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				{
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <CDC_Device_ProcessControlRequest+0x110>)
 8001e28:	885b      	ldrh	r3, [r3, #2]
 8001e2a:	82a3      	strh	r3, [r4, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <CDC_Device_ProcessControlRequest+0x118>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	b1b3      	cbz	r3, 8001e60 <CDC_Device_ProcessControlRequest+0x108>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8001e32:	4620      	mov	r0, r4
				}

				break;
		}
	}
}
 8001e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

					if(0 != cdc_class_events.ControLineStateChanged)
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8001e38:	4718      	bx	r3

				}

				break;
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8001e3a:	7812      	ldrb	r2, [r2, #0]
 8001e3c:	2a21      	cmp	r2, #33	; 0x21
 8001e3e:	d10f      	bne.n	8001e60 <CDC_Device_ProcessControlRequest+0x108>
 8001e40:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8001e44:	f022 0202 	bic.w	r2, r2, #2
 8001e48:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				{
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.Device_BreakSent)
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <CDC_Device_ProcessControlRequest+0x118>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	b133      	cbz	r3, 8001e60 <CDC_Device_ProcessControlRequest+0x108>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <CDC_Device_ProcessControlRequest+0x110>)
 8001e54:	8851      	ldrh	r1, [r2, #2]
 8001e56:	4620      	mov	r0, r4
 8001e58:	b2c9      	uxtb	r1, r1
				}

				break;
		}
	}
}
 8001e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					Endpoint_ClearSETUP();
					Endpoint_ClearStatusStage();

					if(0 != cdc_class_events.Device_BreakSent)
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 8001e5e:	4718      	bx	r3
 8001e60:	bd10      	pop	{r4, pc}
 8001e62:	bf00      	nop
 8001e64:	1fff0698 	.word	0x1fff0698
 8001e68:	1fff048e 	.word	0x1fff048e
 8001e6c:	1fff048d 	.word	0x1fff048d
 8001e70:	1ffed000 	.word	0x1ffed000

08001e74 <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001e74:	b538      	push	{r3, r4, r5, lr}
	bool status = true;
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8001e76:	220c      	movs	r2, #12




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001e78:	4604      	mov	r4, r0
	bool status = true;
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	3014      	adds	r0, #20
 8001e7e:	f009 fc96 	bl	800b7ae <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8001e82:	2302      	movs	r3, #2
 8001e84:	7123      	strb	r3, [r4, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8001e86:	72a3      	strb	r3, [r4, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	7423      	strb	r3, [r4, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	2101      	movs	r1, #1
 8001e90:	f000 fb36 	bl	8002500 <Endpoint_ConfigureEndpointTable>
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8001e94:	2101      	movs	r1, #1

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8001e96:	4605      	mov	r5, r0
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8001e98:	1da0      	adds	r0, r4, #6
 8001e9a:	f000 fb31 	bl	8002500 <Endpoint_ConfigureEndpointTable>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8001e9e:	2101      	movs	r1, #1
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8001ea0:	2800      	cmp	r0, #0
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8001ea2:	f104 000c 	add.w	r0, r4, #12
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 8001ea6:	bf08      	it	eq
 8001ea8:	2500      	moveq	r5, #0
	}

	if (!(Endpoint_ConfigureEndpointTable(
 8001eaa:	f000 fb29 	bl	8002500 <Endpoint_ConfigureEndpointTable>
 8001eae:	2800      	cmp	r0, #0
	{
		status = false;
	}

	return status;
}
 8001eb0:	bf14      	ite	ne
 8001eb2:	4628      	movne	r0, r5
 8001eb4:	2000      	moveq	r0, #0
 8001eb6:	bd38      	pop	{r3, r4, r5, pc}

08001eb8 <CDC_Device_SendData>:
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 8001eb8:	b538      	push	{r3, r4, r5, lr}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <CDC_Device_SendData+0x2c>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b04      	cmp	r3, #4
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 8001ec0:	460d      	mov	r5, r1
 8001ec2:	4614      	mov	r4, r2
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8001ec4:	d10b      	bne.n	8001ede <CDC_Device_SendData+0x26>
 8001ec6:	6983      	ldr	r3, [r0, #24]
 8001ec8:	b14b      	cbz	r3, 8001ede <CDC_Device_SendData+0x26>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001eca:	7800      	ldrb	r0, [r0, #0]
 8001ecc:	f7ff ff2a 	bl	8001d24 <Endpoint_SelectEndpoint>
		status = Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	2200      	movs	r2, #0
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
	}
	return status;
}
 8001ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
		status = Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 8001eda:	f000 b95f 	b.w	800219c <Endpoint_Write_Stream_LE>
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
	}
	return status;
}
 8001ede:	2002      	movs	r0, #2
 8001ee0:	bd38      	pop	{r3, r4, r5, pc}
 8001ee2:	bf00      	nop
 8001ee4:	1fff048d 	.word	0x1fff048d

08001ee8 <CDC_Device_Flush>:
	return status;

}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001ee8:	b508      	push	{r3, lr}
	uint8_t status = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <CDC_Device_Flush+0x28>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d10b      	bne.n	8001f0a <CDC_Device_Flush+0x22>
 8001ef2:	6983      	ldr	r3, [r0, #24]
 8001ef4:	b14b      	cbz	r3, 8001f0a <CDC_Device_Flush+0x22>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001ef6:	7800      	ldrb	r0, [r0, #0]
 8001ef8:	f7ff ff14 	bl	8001d24 <Endpoint_SelectEndpoint>

		if (Endpoint_BytesInEndpoint())
 8001efc:	f7ff ff1e 	bl	8001d3c <Endpoint_BytesInEndpoint>
 8001f00:	b120      	cbz	r0, 8001f0c <CDC_Device_Flush+0x24>
		{
			Endpoint_ClearIN();
 8001f02:	f000 fa53 	bl	80023ac <Endpoint_ClearIN>
 8001f06:	2000      	movs	r0, #0
 8001f08:	bd08      	pop	{r3, pc}

		status = ENDPOINT_READYWAIT_NoError;
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 8001f0a:	2002      	movs	r0, #2
	}

	return status;
}
 8001f0c:	bd08      	pop	{r3, pc}
 8001f0e:	bf00      	nop
 8001f10:	1fff048d 	.word	0x1fff048d

08001f14 <CDC_Device_USBTask>:

	return status;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001f14:	b510      	push	{r4, lr}
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <CDC_Device_USBTask+0x3c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b04      	cmp	r3, #4

	return status;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001f1c:	4604      	mov	r4, r0
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8001f1e:	d115      	bne.n	8001f4c <CDC_Device_USBTask+0x38>
 8001f20:	6983      	ldr	r3, [r0, #24]
 8001f22:	b19b      	cbz	r3, 8001f4c <CDC_Device_USBTask+0x38>
	{
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001f24:	7800      	ldrb	r0, [r0, #0]
 8001f26:	f7ff fefd 	bl	8001d24 <Endpoint_SelectEndpoint>
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <CDC_Device_USBTask+0x40>)
 8001f2c:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
		return ep->InInUse == 0 && ep->IsEnabled;
 8001f30:	212c      	movs	r1, #44	; 0x2c
 8001f32:	fb01 3302 	mla	r3, r1, r2, r3
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	06d2      	lsls	r2, r2, #27
 8001f3a:	d407      	bmi.n	8001f4c <CDC_Device_USBTask+0x38>
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	079b      	lsls	r3, r3, #30
 8001f40:	d504      	bpl.n	8001f4c <CDC_Device_USBTask+0x38>

		if (Endpoint_IsINReady())
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
 8001f42:	4620      	mov	r0, r4
		}
		#endif
	}
}
 8001f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

		if (Endpoint_IsINReady())
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
 8001f48:	f7ff bfce 	b.w	8001ee8 <CDC_Device_Flush>
 8001f4c:	bd10      	pop	{r4, pc}
 8001f4e:	bf00      	nop
 8001f50:	1fff048d 	.word	0x1fff048d
 8001f54:	1fff0698 	.word	0x1fff0698

08001f58 <CDC_Device_BytesReceived>:

	return status;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8001f58:	b510      	push	{r4, lr}
	uint16_t bytes = 0;
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <CDC_Device_BytesReceived+0x3c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d001      	beq.n	8001f66 <CDC_Device_BytesReceived+0xe>
	return status;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint16_t bytes = 0;
 8001f62:	2400      	movs	r4, #0
 8001f64:	e014      	b.n	8001f90 <CDC_Device_BytesReceived+0x38>
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8001f66:	6983      	ldr	r3, [r0, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0fa      	beq.n	8001f62 <CDC_Device_BytesReceived+0xa>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8001f6c:	7980      	ldrb	r0, [r0, #6]
 8001f6e:	f7ff fed9 	bl	8001d24 <Endpoint_SelectEndpoint>
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <CDC_Device_BytesReceived+0x40>)
 8001f74:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
		return ep->IsOutRecieved;
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 3302 	mla	r3, r1, r2, r3
 8001f7e:	689b      	ldr	r3, [r3, #8]

		if (Endpoint_IsOUTReceived())
 8001f80:	069b      	lsls	r3, r3, #26
 8001f82:	d5ee      	bpl.n	8001f62 <CDC_Device_BytesReceived+0xa>
		{
			if (!(Endpoint_BytesInEndpoint()))
 8001f84:	f7ff feda 	bl	8001d3c <Endpoint_BytesInEndpoint>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	b908      	cbnz	r0, 8001f90 <CDC_Device_BytesReceived+0x38>
			{
				Endpoint_ClearOUT();
 8001f8c:	f000 f9e4 	bl	8002358 <Endpoint_ClearOUT>
			bytes = 0;
		}
	}

	return bytes;
}
 8001f90:	4620      	mov	r0, r4
 8001f92:	bd10      	pop	{r4, pc}
 8001f94:	1fff048d 	.word	0x1fff048d
 8001f98:	1fff0698 	.word	0x1fff0698

08001f9c <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 8001f9c:	4b01      	ldr	r3, [pc, #4]	; (8001fa4 <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x8>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	4770      	bx	lr
 8001fa4:	1fff03e8 	.word	0x1fff03e8

08001fa8 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 8001fa8:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x8>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	705a      	strb	r2, [r3, #1]
 8001fae:	4770      	bx	lr
 8001fb0:	1fff03e8 	.word	0x1fff03e8

08001fb4 <USBD_VCOM_CDCClass_Event_BreakSent>:
/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 8001fb4:	4b01      	ldr	r3, [pc, #4]	; (8001fbc <USBD_VCOM_CDCClass_Event_BreakSent+0x8>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	709a      	strb	r2, [r3, #2]
 8001fba:	4770      	bx	lr
 8001fbc:	1fff03e8 	.word	0x1fff03e8

08001fc0 <USBD_VCOM_Event_ConfigurationChanged>:

}

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 8001fc0:	b508      	push	{r3, lr}
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 8001fc2:	2081      	movs	r0, #129	; 0x81
 8001fc4:	490e      	ldr	r1, [pc, #56]	; (8002000 <USBD_VCOM_Event_ConfigurationChanged+0x40>)
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	f000 fe34 	bl	8002c34 <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8001fcc:	2082      	movs	r0, #130	; 0x82
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	f000 fe2f 	bl	8002c34 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	490b      	ldr	r1, [pc, #44]	; (8002008 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	f000 fe2a 	bl	8002c34 <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 8001fe0:	480a      	ldr	r0, [pc, #40]	; (800200c <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 8001fe2:	f7ff ff47 	bl	8001e74 <CDC_Device_ConfigureEndpoints>
 8001fe6:	b148      	cbz	r0, 8001ffc <USBD_VCOM_Event_ConfigurationChanged+0x3c>
  {
    device.IsConfigured = 1U;
 8001fe8:	4a09      	ldr	r2, [pc, #36]	; (8002010 <USBD_VCOM_Event_ConfigurationChanged+0x50>)
 8001fea:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <USBD_VCOM_Event_ConfigurationChanged+0x54>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	bd08      	pop	{r3, pc}
 8001ffe:	bf00      	nop
 8002000:	1fff03eb 	.word	0x1fff03eb
 8002004:	1fff03a8 	.word	0x1fff03a8
 8002008:	1fff042b 	.word	0x1fff042b
 800200c:	1fff046c 	.word	0x1fff046c
 8002010:	1fff0698 	.word	0x1fff0698
 8002014:	1fff048d 	.word	0x1fff048d

08002018 <USBD_VCOM_Event_ControlRequest>:
}

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 8002018:	4801      	ldr	r0, [pc, #4]	; (8002020 <USBD_VCOM_Event_ControlRequest+0x8>)
 800201a:	f7ff be9d 	b.w	8001d58 <CDC_Device_ProcessControlRequest>
 800201e:	bf00      	nop
 8002020:	1fff046c 	.word	0x1fff046c

08002024 <USBD_VCOM_IsEnumDone>:
  return status;
}

/*The function check if the enumeration has been done already. */
uint32_t USBD_VCOM_IsEnumDone(void)
{
 8002024:	b508      	push	{r3, lr}
  return (uint32_t)(USBD_IsEnumDone() && (USB_DeviceState == (uint8_t)DEVICE_STATE_Configured));
 8002026:	f000 fdff 	bl	8002c28 <USBD_IsEnumDone>
 800202a:	b120      	cbz	r0, 8002036 <USBD_VCOM_IsEnumDone+0x12>
 800202c:	4b02      	ldr	r3, [pc, #8]	; (8002038 <USBD_VCOM_IsEnumDone+0x14>)
 800202e:	7818      	ldrb	r0, [r3, #0]
 8002030:	1f03      	subs	r3, r0, #4
 8002032:	4258      	negs	r0, r3
 8002034:	4158      	adcs	r0, r3
}
 8002036:	bd08      	pop	{r3, pc}
 8002038:	1fff048d 	.word	0x1fff048d

0800203c <USBD_VCOM_SendData>:
  return status;
}

/* This function sends multiple bytes to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendData(const int8_t* const data_buffer, const uint16_t length)
{
 800203c:	b510      	push	{r4, lr}
 800203e:	4603      	mov	r3, r0
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  if ((length == 0U) || (data_buffer == NULL))
 8002040:	460a      	mov	r2, r1
 8002042:	b179      	cbz	r1, 8002064 <USBD_VCOM_SendData+0x28>
 8002044:	b170      	cbz	r0, 8002064 <USBD_VCOM_SendData+0x28>
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
 8002046:	4619      	mov	r1, r3
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <USBD_VCOM_SendData+0x30>)
 800204a:	f7ff ff35 	bl	8001eb8 <CDC_Device_SendData>
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
 800204e:	2800      	cmp	r0, #0
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 8002050:	4806      	ldr	r0, [pc, #24]	; (800206c <USBD_VCOM_SendData+0x30>)
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 8002052:	bf14      	ite	ne
 8002054:	2406      	movne	r4, #6
 8002056:	2400      	moveq	r4, #0
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 8002058:	f7ff ff46 	bl	8001ee8 <CDC_Device_Flush>
 800205c:	2800      	cmp	r0, #0
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 800205e:	bf18      	it	ne
 8002060:	2406      	movne	r4, #6
 8002062:	e000      	b.n	8002066 <USBD_VCOM_SendData+0x2a>
{
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  if ((length == 0U) || (data_buffer == NULL))
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
 8002064:	2406      	movs	r4, #6
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
    }
  }
  return status;
}
 8002066:	4620      	mov	r0, r4
 8002068:	bd10      	pop	{r4, pc}
 800206a:	bf00      	nop
 800206c:	1fff046c 	.word	0x1fff046c

08002070 <USBD_VCOM_ReceiveData>:
  return status;
}

/* This function receives number of bytes from the USB host.*/
USBD_VCOM_STATUS_t USBD_VCOM_ReceiveData(int8_t* data_buffer, uint16_t data_byte)
{
 8002070:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
  uint16_t bytes_processed = 0U;
 8002072:	2200      	movs	r2, #0
  return status;
}

/* This function receives number of bytes from the USB host.*/
USBD_VCOM_STATUS_t USBD_VCOM_ReceiveData(int8_t* data_buffer, uint16_t data_byte)
{
 8002074:	4605      	mov	r5, r0
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
  uint16_t bytes_processed = 0U;
 8002076:	f8ad 2006 	strh.w	r2, [sp, #6]
  uint8_t ret = 0U;

  if ((data_byte > 0U) && (data_buffer != NULL))
 800207a:	460c      	mov	r4, r1
 800207c:	b199      	cbz	r1, 80020a6 <USBD_VCOM_ReceiveData+0x36>
 800207e:	b190      	cbz	r0, 80020a6 <USBD_VCOM_ReceiveData+0x36>
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <USBD_VCOM_ReceiveData+0x3c>)
 8002082:	2103      	movs	r1, #3
 8002084:	f883 113c 	strb.w	r1, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002088:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  {
    /* Fix for new read/write */
    Endpoint_SelectEndpoint(CDC_RX_EPNUM);
    while ((uint8_t)ENDPOINT_RWSTREAM_IncompleteTransfer == 
 800208c:	4628      	mov	r0, r5
 800208e:	4621      	mov	r1, r4
 8002090:	f10d 0206 	add.w	r2, sp, #6
 8002094:	f000 f8d4 	bl	8002240 <Endpoint_Read_Stream_LE>
 8002098:	2805      	cmp	r0, #5
 800209a:	d0f7      	beq.n	800208c <USBD_VCOM_ReceiveData+0x1c>
    (ret = Endpoint_Read_Stream_LE(data_buffer, data_byte,	&bytes_processed)))
    {      
    }      
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError != ret )
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 800209c:	2800      	cmp	r0, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2000      	moveq	r0, #0
 80020a2:	2006      	movne	r0, #6
 80020a4:	e000      	b.n	80020a8 <USBD_VCOM_ReceiveData+0x38>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;
 80020a6:	2006      	movs	r0, #6
  }

  return status;
}
 80020a8:	b003      	add	sp, #12
 80020aa:	bd30      	pop	{r4, r5, pc}
 80020ac:	1fff0698 	.word	0x1fff0698

080020b0 <USBD_VCOM_BytesReceived>:
  return status;
}

/* This function checks number of bytes received from the USB host. */
uint16_t USBD_VCOM_BytesReceived(void)
{
 80020b0:	b538      	push	{r3, r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	4c07      	ldr	r4, [pc, #28]	; (80020d0 <USBD_VCOM_BytesReceived+0x20>)
 80020b4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80020b8:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020bc:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80020c0:	f3bf 8f6f 	isb	sy
  uint16_t bytes = 0U;

  /* Check if bytes are received from host */
  NVIC_DisableIRQ(USB0_0_IRQn);
  bytes = CDC_Device_BytesReceived(&USBD_VCOM_cdc_interface);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <USBD_VCOM_BytesReceived+0x24>)
 80020c6:	f7ff ff47 	bl	8001f58 <CDC_Device_BytesReceived>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	60e5      	str	r5, [r4, #12]
  NVIC_EnableIRQ(USB0_0_IRQn);	
    
  return bytes;
}
 80020cc:	bd38      	pop	{r3, r4, r5, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	1fff046c 	.word	0x1fff046c

080020d8 <USBD_VCOM_Register_USBEvent_CB>:
USBD_VCOM_STATUS_t USBD_VCOM_Register_USBEvent_CB(USBD_Event_CB_t *event_callback)
{
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  /*Register USB event call backs*/
  if (event_callback != NULL)
 80020d8:	b1c0      	cbz	r0, 800210c <USBD_VCOM_Register_USBEvent_CB+0x34>
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <USBD_VCOM_Register_USBEvent_CB+0x38>)
 80020dc:	6902      	ldr	r2, [r0, #16]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	611a      	str	r2, [r3, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 80020e4:	6882      	ldr	r2, [r0, #8]
 80020e6:	609a      	str	r2, [r3, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
 80020e8:	6802      	ldr	r2, [r0, #0]
 80020ea:	601a      	str	r2, [r3, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
 80020ec:	68c2      	ldr	r2, [r0, #12]
 80020ee:	60da      	str	r2, [r3, #12]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 80020f0:	6842      	ldr	r2, [r0, #4]
 80020f2:	605a      	str	r2, [r3, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 80020f4:	6942      	ldr	r2, [r0, #20]
 80020f6:	615a      	str	r2, [r3, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 80020f8:	69c2      	ldr	r2, [r0, #28]
 80020fa:	61da      	str	r2, [r3, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 80020fc:	6982      	ldr	r2, [r0, #24]
 80020fe:	619a      	str	r2, [r3, #24]
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 8002100:	6a02      	ldr	r2, [r0, #32]
 8002102:	621a      	str	r2, [r3, #32]
    USBD_handle->event_cb->reset = event_callback->reset;
 8002104:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
 * Register the USB event call backs.
 * Call this API before calling USBD_Init
 **/
USBD_VCOM_STATUS_t USBD_VCOM_Register_USBEvent_CB(USBD_Event_CB_t *event_callback)
{
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 8002108:	2000      	movs	r0, #0
 800210a:	4770      	bx	lr
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
    USBD_handle->event_cb->reset = event_callback->reset;
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 800210c:	2001      	movs	r0, #1
  }

  return status;

}
 800210e:	4770      	bx	lr
 8002110:	1ffed038 	.word	0x1ffed038

08002114 <USBD_VCOM_Init>:
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <USBD_VCOM_Init+0x48>)
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8002116:	2002      	movs	r0, #2
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 8002118:	b510      	push	{r4, lr}

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 800211a:	7118      	strb	r0, [r3, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 800211c:	7298      	strb	r0, [r3, #10]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 800211e:	2081      	movs	r0, #129	; 0x81

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 8002120:	2182      	movs	r1, #130	; 0x82
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8002122:	7318      	strb	r0, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8002124:	2008      	movs	r0, #8
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002126:	2200      	movs	r2, #0
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 8002128:	2440      	movs	r4, #64	; 0x40

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 800212a:	7019      	strb	r1, [r3, #0]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 800212c:	81d8      	strh	r0, [r3, #14]
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 800212e:	2103      	movs	r1, #3
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <USBD_VCOM_Init+0x4c>)
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 8002132:	749a      	strb	r2, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 8002134:	805c      	strh	r4, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 8002136:	715a      	strb	r2, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 8002138:	7199      	strb	r1, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 800213a:	811c      	strh	r4, [r3, #8]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 800213c:	72da      	strb	r2, [r3, #11]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 800213e:	7419      	strb	r1, [r3, #16]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 8002140:	745a      	strb	r2, [r3, #17]

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
 8002142:	f7ff ffc9 	bl	80020d8 <USBD_VCOM_Register_USBEvent_CB>
 8002146:	b938      	cbnz	r0, 8002158 <USBD_VCOM_Init+0x44>
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <USBD_VCOM_Init+0x50>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f000 fcdc 	bl	8002b08 <USBD_Init>
    {
      status = USBD_VCOM_STATUS_FAILURE;
 8002150:	3000      	adds	r0, #0
 8002152:	bf18      	it	ne
 8002154:	2001      	movne	r0, #1
 8002156:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 8002158:	2001      	movs	r0, #1
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
}
 800215a:	bd10      	pop	{r4, pc}
 800215c:	1fff046c 	.word	0x1fff046c
 8002160:	1ffed00c 	.word	0x1ffed00c
 8002164:	1ffed038 	.word	0x1ffed038

08002168 <USBD_VCOM_Event_Reset>:
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
}

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 8002168:	b508      	push	{r3, lr}
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <USBD_VCOM_Event_Reset+0x28>)
 800216c:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002170:	07d9      	lsls	r1, r3, #31
 8002172:	d50c      	bpl.n	800218e <USBD_VCOM_Event_Reset+0x26>
  {
    device.IsConfigured = 0U;
 8002174:	f36f 0300 	bfc	r3, #0, #1
 8002178:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Init(USBD_VCOM_handle))
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <USBD_VCOM_Event_Reset+0x2c>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f7ff ffc8 	bl	8002114 <USBD_VCOM_Init>
 8002184:	b918      	cbnz	r0, 800218e <USBD_VCOM_Event_Reset+0x26>
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
      {
      }
    }
  }
}
 8002186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 800218a:	f000 bd47 	b.w	8002c1c <USBD_Connect>
 800218e:	bd08      	pop	{r3, pc}
 8002190:	1fff0698 	.word	0x1fff0698
 8002194:	1ffed034 	.word	0x1ffed034

08002198 <USBD_VCOM_Connect>:
 8002198:	f000 bd40 	b.w	8002c1c <USBD_Connect>

0800219c <Endpoint_Write_Stream_LE>:
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 800219c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <Endpoint_Write_Stream_LE+0xa0>)
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 80021a2:	4682      	mov	sl, r0
 80021a4:	460d      	mov	r5, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80021a6:	f893 913c 	ldrb.w	r9, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 80021aa:	4617      	mov	r7, r2
 80021ac:	4698      	mov	r8, r3
 80021ae:	b112      	cbz	r2, 80021b6 <Endpoint_Write_Stream_LE+0x1a>
	{
		Length -= *BytesProcessed;
 80021b0:	8816      	ldrh	r6, [r2, #0]
 80021b2:	1b8c      	subs	r4, r1, r6
 80021b4:	e036      	b.n	8002224 <Endpoint_Write_Stream_LE+0x88>
uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
 80021b6:	4616      	mov	r6, r2
 80021b8:	e00a      	b.n	80021d0 <Endpoint_Write_Stream_LE+0x34>
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else 
		{
			Endpoint_ClearIN();
 80021ba:	f000 f8f7 	bl	80023ac <Endpoint_ClearIN>
			if(Length < ep->MaxPacketSize)
 80021be:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 80021c2:	f3c3 1386 	ubfx	r3, r3, #6, #7
 80021c6:	429d      	cmp	r5, r3
 80021c8:	db2e      	blt.n	8002228 <Endpoint_Write_Stream_LE+0x8c>
					*BytesProcessed = BytesTransfered;
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
				}
			}

			ErrorCode = Endpoint_WaitUntilReady();
 80021ca:	f000 f883 	bl	80022d4 <Endpoint_WaitUntilReady>
			if (ErrorCode) 
 80021ce:	bb90      	cbnz	r0, 8002236 <Endpoint_Write_Stream_LE+0x9a>
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 80021d0:	b385      	cbz	r5, 8002234 <Endpoint_Write_Stream_LE+0x98>
	{
		if (ep->InInUse)
 80021d2:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80021d6:	fb0b 8b09 	mla	fp, fp, r9, r8
 80021da:	f8db 3008 	ldr.w	r3, [fp, #8]
 80021de:	06db      	lsls	r3, r3, #27
 80021e0:	d4f6      	bmi.n	80021d0 <Endpoint_Write_Stream_LE+0x34>
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
 80021e2:	f000 f91b 	bl	800241c <Endpoint_IsReadWriteAllowed>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d0e7      	beq.n	80021ba <Endpoint_Write_Stream_LE+0x1e>
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 80021ea:	f8db 301c 	ldr.w	r3, [fp, #28]
 80021ee:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 80021f2:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80021f6:	fb0b 8b09 	mla	fp, fp, r9, r8
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 80021fa:	1ae4      	subs	r4, r4, r3
 80021fc:	42ac      	cmp	r4, r5
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 80021fe:	f8db 0020 	ldr.w	r0, [fp, #32]
			{
				Bytes = Length;
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
 8002202:	bf94      	ite	ls
 8002204:	b2a4      	uxthls	r4, r4
 8002206:	462c      	movhi	r4, r5
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 8002208:	4418      	add	r0, r3
 800220a:	eb0a 0106 	add.w	r1, sl, r6
 800220e:	4622      	mov	r2, r4
 8002210:	f009 fac2 	bl	800b798 <memcpy>
			ep->InBytesAvailable += Bytes;
 8002214:	f8db 301c 	ldr.w	r3, [fp, #28]
			BytesTransfered += Bytes;
 8002218:	4426      	add	r6, r4
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
			ep->InBytesAvailable += Bytes;
 800221a:	4423      	add	r3, r4
 800221c:	f8cb 301c 	str.w	r3, [fp, #28]
			BytesTransfered += Bytes;
 8002220:	b2b6      	uxth	r6, r6
			Length -= Bytes;
 8002222:	1b2c      	subs	r4, r5, r4
 8002224:	b2a5      	uxth	r5, r4
 8002226:	e7d3      	b.n	80021d0 <Endpoint_Write_Stream_LE+0x34>
		else 
		{
			Endpoint_ClearIN();
			if(Length < ep->MaxPacketSize)
			{
				if (BytesProcessed!=NULL) 
 8002228:	2f00      	cmp	r7, #0
 800222a:	d0ce      	beq.n	80021ca <Endpoint_Write_Stream_LE+0x2e>
				{
					*BytesProcessed = BytesTransfered;
 800222c:	803e      	strh	r6, [r7, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800222e:	2005      	movs	r0, #5
 8002230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return ErrorCode;
			}
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
 8002234:	4628      	mov	r0, r5
}
 8002236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800223a:	bf00      	nop
 800223c:	1fff0698 	.word	0x1fff0698

08002240 <Endpoint_Read_Stream_LE>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
 8002240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <Endpoint_Read_Stream_LE+0x90>)
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
 8002246:	4682      	mov	sl, r0
 8002248:	460d      	mov	r5, r1
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800224a:	f893 913c 	ldrb.w	r9, [r3, #316]	; 0x13c
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 800224e:	4617      	mov	r7, r2
 8002250:	4698      	mov	r8, r3
 8002252:	b112      	cbz	r2, 800225a <Endpoint_Read_Stream_LE+0x1a>
	{
		Length -= *BytesProcessed;
 8002254:	8816      	ldrh	r6, [r2, #0]
 8002256:	1b8c      	subs	r4, r1, r6
 8002258:	e02d      	b.n	80022b6 <Endpoint_Read_Stream_LE+0x76>
uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length,
									uint16_t *const BytesProcessed)
{
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
 800225a:	4616      	mov	r6, r2
 800225c:	e002      	b.n	8002264 <Endpoint_Read_Stream_LE+0x24>
			{
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			ErrorCode = Endpoint_WaitUntilReady();
 800225e:	f000 f839 	bl	80022d4 <Endpoint_WaitUntilReady>
			if (ErrorCode) 
 8002262:	bb98      	cbnz	r0, 80022cc <Endpoint_Read_Stream_LE+0x8c>
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 8002264:	b38d      	cbz	r5, 80022ca <Endpoint_Read_Stream_LE+0x8a>
	{
		if (ep->OutInUse)
 8002266:	242c      	movs	r4, #44	; 0x2c
 8002268:	fb04 8409 	mla	r4, r4, r9, r8
 800226c:	68a3      	ldr	r3, [r4, #8]
 800226e:	071b      	lsls	r3, r3, #28
 8002270:	d4f8      	bmi.n	8002264 <Endpoint_Read_Stream_LE+0x24>
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
 8002272:	f000 f8d3 	bl	800241c <Endpoint_IsReadWriteAllowed>
 8002276:	b300      	cbz	r0, 80022ba <Endpoint_Read_Stream_LE+0x7a>
			{
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
 8002278:	232c      	movs	r3, #44	; 0x2c
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
		{
			if(ep->OutBytesAvailable  > Length)
 800227a:	68e4      	ldr	r4, [r4, #12]
			{
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
 800227c:	fb03 8309 	mla	r3, r3, r9, r8
 8002280:	f103 0b08 	add.w	fp, r3, #8
		{
			continue;
		}
		if (Endpoint_IsReadWriteAllowed()) 
		{
			if(ep->OutBytesAvailable  > Length)
 8002284:	42ac      	cmp	r4, r5
			{
				Bytes = (uint16_t)ep->OutBytesAvailable;
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
 8002286:	6959      	ldr	r1, [r3, #20]
 8002288:	691b      	ldr	r3, [r3, #16]
			{
				Bytes = Length;
			}
			else
			{
				Bytes = (uint16_t)ep->OutBytesAvailable;
 800228a:	bf94      	ite	ls
 800228c:	b2a4      	uxthls	r4, r4
 800228e:	462c      	movhi	r4, r5
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
 8002290:	eb0a 0006 	add.w	r0, sl, r6
 8002294:	4419      	add	r1, r3
 8002296:	4622      	mov	r2, r4
 8002298:	f009 fa7e 	bl	800b798 <memcpy>
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
 800229c:	f8db 3004 	ldr.w	r3, [fp, #4]
 80022a0:	1b1b      	subs	r3, r3, r4
 80022a2:	f8cb 3004 	str.w	r3, [fp, #4]
			ep->OutOffset += Bytes;
 80022a6:	f8db 3008 	ldr.w	r3, [fp, #8]
			BytesTransfered += Bytes;
 80022aa:	4426      	add	r6, r4
			}

			memcpy((uint8_t*)Buffer + BytesTransfered,
									ep->OutBuffer + ep->OutOffset,Bytes);
			ep->OutBytesAvailable -= Bytes;
			ep->OutOffset += Bytes;
 80022ac:	4423      	add	r3, r4
 80022ae:	f8cb 3008 	str.w	r3, [fp, #8]
			BytesTransfered += Bytes;
 80022b2:	b2b6      	uxth	r6, r6
			Length -= Bytes;
 80022b4:	1b2c      	subs	r4, r5, r4
 80022b6:	b2a5      	uxth	r5, r4
 80022b8:	e7d4      	b.n	8002264 <Endpoint_Read_Stream_LE+0x24>
		}
		else 
		{
			Endpoint_ClearOUT();
 80022ba:	f000 f84d 	bl	8002358 <Endpoint_ClearOUT>
			if (BytesProcessed != NULL) 
 80022be:	2f00      	cmp	r7, #0
 80022c0:	d0cd      	beq.n	800225e <Endpoint_Read_Stream_LE+0x1e>
			{
				*BytesProcessed = BytesTransfered;
 80022c2:	803e      	strh	r6, [r7, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80022c4:	2005      	movs	r0, #5
 80022c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{
				return ErrorCode;
			}
		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80022ca:	4628      	mov	r0, r5
}
 80022cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d0:	1fff0698 	.word	0x1fff0698

080022d4 <Endpoint_WaitUntilReady>:

#define USB_STREAM_TIMEOUT_MS 100


uint8_t Endpoint_WaitUntilReady(void)
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
 *
 *  \return Current USB frame number from the USB controller.
 */
static inline uint16_t USB_Device_GetFrameNumber(void);
static inline uint16_t USB_Device_GetFrameNumber() {
	return device.Driver->GetFrameNumber();
 80022d6:	4c1e      	ldr	r4, [pc, #120]	; (8002350 <Endpoint_WaitUntilReady+0x7c>)
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	4798      	blx	r3
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 80022de:	2564      	movs	r5, #100	; 0x64
 80022e0:	4606      	mov	r6, r0
	 *  \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80022e2:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 80022e6:	232c      	movs	r3, #44	; 0x2c
 80022e8:	fb03 4302 	mla	r3, r3, r2, r4
 80022ec:	7919      	ldrb	r1, [r3, #4]

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 80022ee:	0608      	lsls	r0, r1, #24
 80022f0:	d507      	bpl.n	8002302 <Endpoint_WaitUntilReady+0x2e>
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->InInUse == 0 && ep->IsEnabled;
 80022f2:	6898      	ldr	r0, [r3, #8]
 80022f4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80022f8:	b930      	cbnz	r0, 8002308 <Endpoint_WaitUntilReady+0x34>
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	0799      	lsls	r1, r3, #30
 80022fe:	d503      	bpl.n	8002308 <Endpoint_WaitUntilReady+0x34>
 8002300:	bd70      	pop	{r4, r5, r6, pc}
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		return ep->IsOutRecieved;
 8002302:	689b      	ldr	r3, [r3, #8]
			  return ENDPOINT_READYWAIT_NoError;
			}
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8002304:	069b      	lsls	r3, r3, #26
 8002306:	d40e      	bmi.n	8002326 <Endpoint_WaitUntilReady+0x52>
			{
			  return ENDPOINT_READYWAIT_NoError;
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <Endpoint_WaitUntilReady+0x80>)
 800230a:	781b      	ldrb	r3, [r3, #0]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 800230c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002310:	b15b      	cbz	r3, 800232a <Endpoint_WaitUntilReady+0x56>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8002312:	2905      	cmp	r1, #5
 8002314:	d00b      	beq.n	800232e <Endpoint_WaitUntilReady+0x5a>
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
		bool status = false;
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 8002316:	232c      	movs	r3, #44	; 0x2c
 8002318:	fb03 4202 	mla	r2, r3, r2, r4
 800231c:	6890      	ldr	r0, [r2, #8]
 800231e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002322:	b130      	cbz	r0, 8002332 <Endpoint_WaitUntilReady+0x5e>
 8002324:	bd70      	pop	{r4, r5, r6, pc}
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			{
			  return ENDPOINT_READYWAIT_NoError;
 8002326:	2000      	movs	r0, #0
 8002328:	bd70      	pop	{r4, r5, r6, pc}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 800232a:	2002      	movs	r0, #2
 800232c:	bd70      	pop	{r4, r5, r6, pc}
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		{
		  return ENDPOINT_READYWAIT_BusSuspended;
 800232e:	2003      	movs	r0, #3
 8002330:	bd70      	pop	{r4, r5, r6, pc}
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <Endpoint_WaitUntilReady+0x7c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	4798      	blx	r3
		  return ENDPOINT_READYWAIT_EndpointStalled;
		}

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 800233a:	42b0      	cmp	r0, r6
 800233c:	d0d1      	beq.n	80022e2 <Endpoint_WaitUntilReady+0xe>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 800233e:	1e6b      	subs	r3, r5, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	b115      	cbz	r5, 800234a <Endpoint_WaitUntilReady+0x76>
 8002344:	4606      	mov	r6, r0
 8002346:	461d      	mov	r5, r3
 8002348:	e7cb      	b.n	80022e2 <Endpoint_WaitUntilReady+0xe>
			{
			  return ENDPOINT_READYWAIT_Timeout;
 800234a:	2004      	movs	r0, #4
 800234c:	bd70      	pop	{r4, r5, r6, pc}
 800234e:	bf00      	nop
 8002350:	1fff0698 	.word	0x1fff0698
 8002354:	1fff048d 	.word	0x1fff048d

08002358 <Endpoint_ClearOUT>:
		}
	}
}

void Endpoint_ClearOUT(void) 
{
 8002358:	b570      	push	{r4, r5, r6, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800235a:	4d13      	ldr	r5, [pc, #76]	; (80023a8 <Endpoint_ClearOUT+0x50>)
 800235c:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
	/* if we have data left which isn't read yet, we leave this routine to
	 * not override it */
	if (ep->IsEnabled == 0)
 8002360:	242c      	movs	r4, #44	; 0x2c
 8002362:	fb04 5403 	mla	r4, r4, r3, r5
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	079a      	lsls	r2, r3, #30
 800236a:	d51b      	bpl.n	80023a4 <Endpoint_ClearOUT+0x4c>
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	69a2      	ldr	r2, [r4, #24]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	7920      	ldrb	r0, [r4, #4]
 8002374:	6961      	ldr	r1, [r4, #20]
 8002376:	4798      	blx	r3
	ep->OutOffset = 0;
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8002378:	68a3      	ldr	r3, [r4, #8]
	if (ep->IsEnabled == 0)
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 800237a:	60e0      	str	r0, [r4, #12]
	ep->OutOffset = 0;
 800237c:	2200      	movs	r2, #0
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 800237e:	071b      	lsls	r3, r3, #28
	{
		return;
	}
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
	ep->OutOffset = 0;
 8002380:	6122      	str	r2, [r4, #16]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
 8002382:	d40f      	bmi.n	80023a4 <Endpoint_ClearOUT+0x4c>
 8002384:	b970      	cbnz	r0, 80023a4 <Endpoint_ClearOUT+0x4c>
	{
		ep->OutInUse = true;
 8002386:	8923      	ldrh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8002388:	69a1      	ldr	r1, [r4, #24]
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
	ep->OutOffset = 0;
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
	{
		ep->OutInUse = true;
 800238a:	f043 0308 	orr.w	r3, r3, #8
 800238e:	8123      	strh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
 8002390:	8923      	ldrh	r3, [r4, #8]
 8002392:	f360 1345 	bfi	r3, r0, #5, #1
 8002396:	8123      	strh	r3, [r4, #8]
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	7920      	ldrb	r0, [r4, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	}
}
 800239e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) 
	{
		ep->OutInUse = true;
		ep->IsOutRecieved = 0;
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
 80023a2:	4718      	bx	r3
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 80023a6:	bf00      	nop
 80023a8:	1fff0698 	.word	0x1fff0698

080023ac <Endpoint_ClearIN>:
	}
}

void Endpoint_ClearIN(void)
{
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80023ae:	4a19      	ldr	r2, [pc, #100]	; (8002414 <Endpoint_ClearIN+0x68>)
 80023b0:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 2303 	mla	r3, r1, r3, r2
 80023ba:	6899      	ldr	r1, [r3, #8]
 80023bc:	06c8      	lsls	r0, r1, #27
 80023be:	d427      	bmi.n	8002410 <Endpoint_ClearIN+0x64>
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	0789      	lsls	r1, r1, #30
 80023c4:	d524      	bpl.n	8002410 <Endpoint_ClearIN+0x64>
		return;
	ep->InInUse = true;
 80023c6:	8919      	ldrh	r1, [r3, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 80023c8:	6a18      	ldr	r0, [r3, #32]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	4e13      	ldr	r6, [pc, #76]	; (8002418 <Endpoint_ClearIN+0x6c>)
 80023cc:	f103 0528 	add.w	r5, r3, #40	; 0x28
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
		return;
	ep->InInUse = true;
 80023d0:	f041 0110 	orr.w	r1, r1, #16
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
 80023d4:	f103 0420 	add.w	r4, r3, #32
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
		return;
	ep->InInUse = true;
 80023d8:	8119      	strh	r1, [r3, #8]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 80023da:	6068      	str	r0, [r5, #4]
	ep->InDataLeft = ep->InBytesAvailable;
 80023dc:	69d8      	ldr	r0, [r3, #28]
 80023de:	60a0      	str	r0, [r4, #8]
 80023e0:	f44f 6700 	mov.w	r7, #2048	; 0x800
	ep->InBytesAvailable = 0;
 80023e4:	2000      	movs	r0, #0
 80023e6:	61d8      	str	r0, [r3, #28]
 80023e8:	f8c6 708c 	str.w	r7, [r6, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023ec:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80023f0:	f3bf 8f6f 	isb	sy
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	7918      	ldrb	r0, [r3, #4]
 80023f8:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 80023fc:	6869      	ldr	r1, [r5, #4]
 80023fe:	68a2      	ldr	r2, [r4, #8]
 8002400:	47e0      	blx	ip
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002402:	686a      	ldr	r2, [r5, #4]
	ep->InDataLeft -= data_count;
 8002404:	68a3      	ldr	r3, [r4, #8]
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 8002406:	4402      	add	r2, r0
	ep->InDataLeft -= data_count;
 8002408:	1a1b      	subs	r3, r3, r0
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 800240a:	606a      	str	r2, [r5, #4]
	ep->InDataLeft -= data_count;
 800240c:	60a3      	str	r3, [r4, #8]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	60f7      	str	r7, [r6, #12]
 8002410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002412:	bf00      	nop
 8002414:	1fff0698 	.word	0x1fff0698
 8002418:	e000e100 	.word	0xe000e100

0800241c <Endpoint_IsReadWriteAllowed>:
	NVIC_EnableIRQ(USB0_0_IRQn);

}

bool Endpoint_IsReadWriteAllowed() {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <Endpoint_IsReadWriteAllowed+0x2c>)
 800241e:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
	bool Retval = false;

	if(EndPoint->Direction)
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 2203 	mla	r2, r1, r3, r2
 8002428:	7913      	ldrb	r3, [r2, #4]
 800242a:	061b      	lsls	r3, r3, #24
 800242c:	d506      	bpl.n	800243c <Endpoint_IsReadWriteAllowed+0x20>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 800242e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8002430:	69d3      	ldr	r3, [r2, #28]
 8002432:	4283      	cmp	r3, r0
 8002434:	bf2c      	ite	cs
 8002436:	2000      	movcs	r0, #0
 8002438:	2001      	movcc	r0, #1
 800243a:	4770      	bx	lr
														? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 800243c:	68d0      	ldr	r0, [r2, #12]
 800243e:	3000      	adds	r0, #0
 8002440:	bf18      	it	ne
 8002442:	2001      	movne	r0, #1
	}
	return Retval;
}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	1fff0698 	.word	0x1fff0698

0800244c <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 800244c:	b530      	push	{r4, r5, lr}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <Endpoint_Write_8+0x28>)
 8002450:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
	bool Success = false;

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 3502 	mla	r5, r1, r2, r3
 800245a:	69ec      	ldr	r4, [r5, #28]
 800245c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800245e:	42ac      	cmp	r4, r5
 8002460:	d2fd      	bcs.n	800245e <Endpoint_Write_8+0x12>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002462:	fb01 3302 	mla	r3, r1, r2, r3
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	5510      	strb	r0, [r2, r4]
	      EndPoint->InBytesAvailable++;
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	3201      	adds	r2, #1
 800246e:	61da      	str	r2, [r3, #28]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8002470:	bd30      	pop	{r4, r5, pc}
 8002472:	bf00      	nop
 8002474:	1fff0698 	.word	0x1fff0698

08002478 <Endpoint_Read_8>:
	    }
	  }while(!Success);
}

uint8_t Endpoint_Read_8() {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002478:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <Endpoint_Read_8+0x28>)
 800247a:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
	bool Success = false;
	uint8_t data = 0;

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 800247e:	202c      	movs	r0, #44	; 0x2c
 8002480:	fb00 2003 	mla	r0, r0, r3, r2
 8002484:	f100 0308 	add.w	r3, r0, #8
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	b902      	cbnz	r2, 800248e <Endpoint_Read_8+0x16>
 800248c:	e7fe      	b.n	800248c <Endpoint_Read_8+0x14>
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 800248e:	6899      	ldr	r1, [r3, #8]
 8002490:	6940      	ldr	r0, [r0, #20]
		  EndPoint->OutOffset++;
		  EndPoint->OutBytesAvailable--;
 8002492:	3a01      	subs	r2, #1

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002494:	5c40      	ldrb	r0, [r0, r1]
		  EndPoint->OutOffset++;
		  EndPoint->OutBytesAvailable--;
 8002496:	605a      	str	r2, [r3, #4]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
		  EndPoint->OutOffset++;
 8002498:	3101      	adds	r1, #1
 800249a:	6099      	str	r1, [r3, #8]

		  Success = true;
		}
	  }while(!Success);
	 return data;
}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	1fff0698 	.word	0x1fff0698

080024a4 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 80024a4:	b530      	push	{r4, r5, lr}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <Endpoint_Write_32_LE+0x28>)
 80024a8:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 3402 	mla	r4, r1, r2, r3
 80024b2:	69e5      	ldr	r5, [r4, #28]
 80024b4:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80024b6:	3c03      	subs	r4, #3
 80024b8:	42a5      	cmp	r5, r4
 80024ba:	d2fd      	bcs.n	80024b8 <Endpoint_Write_32_LE+0x14>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 80024bc:	fb01 3302 	mla	r3, r1, r2, r3
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	5150      	str	r0, [r2, r5]
																		Data;
			EndPoint->InBytesAvailable+=4;
 80024c4:	69da      	ldr	r2, [r3, #28]
 80024c6:	3204      	adds	r2, #4
 80024c8:	61da      	str	r2, [r3, #28]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 80024ca:	bd30      	pop	{r4, r5, pc}
 80024cc:	1fff0698 	.word	0x1fff0698

080024d0 <Endpoint_Read_32_LE>:
			Success = true;
		}
	}while(!Success);
}

uint32_t Endpoint_Read_32_LE() {
 80024d0:	b510      	push	{r4, lr}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <Endpoint_Read_32_LE+0x2c>)
 80024d4:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 80024d8:	202c      	movs	r0, #44	; 0x2c
 80024da:	fb00 3102 	mla	r1, r0, r2, r3
 80024de:	68c9      	ldr	r1, [r1, #12]
 80024e0:	2903      	cmp	r1, #3
 80024e2:	d9fd      	bls.n	80024e0 <Endpoint_Read_32_LE+0x10>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80024e4:	fb00 3302 	mla	r3, r0, r2, r3
 80024e8:	f103 0408 	add.w	r4, r3, #8
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	695b      	ldr	r3, [r3, #20]
			EndPoint->OutOffset+=4;
			EndPoint->OutBytesAvailable-=4;
 80024f0:	3904      	subs	r1, #4
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 80024f2:	5898      	ldr	r0, [r3, r2]
			EndPoint->OutOffset+=4;
			EndPoint->OutBytesAvailable-=4;
 80024f4:	6061      	str	r1, [r4, #4]
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
			EndPoint->OutOffset+=4;
 80024f6:	3204      	adds	r2, #4
 80024f8:	60a2      	str	r2, [r4, #8]

			Success = true;
		}
	} while(!Success);
	return data;
}
 80024fa:	bd10      	pop	{r4, pc}
 80024fc:	1fff0698 	.word	0x1fff0698

08002500 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	2306      	movs	r3, #6
 8002504:	fb03 0101 	mla	r1, r3, r1, r0
 8002508:	1d04      	adds	r4, r0, #4
 800250a:	1d0d      	adds	r5, r1, #4
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 800250c:	42ac      	cmp	r4, r5
 800250e:	d029      	beq.n	8002564 <Endpoint_ConfigureEndpointTable+0x64>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002510:	4e16      	ldr	r6, [pc, #88]	; (800256c <Endpoint_ConfigureEndpointTable+0x6c>)
bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002512:	f814 0c04 	ldrb.w	r0, [r4, #-4]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002516:	6833      	ldr	r3, [r6, #0]
 8002518:	7821      	ldrb	r1, [r4, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f834 2c02 	ldrh.w	r2, [r4, #-2]
bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8002520:	f000 070f 	and.w	r7, r0, #15
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8002524:	4798      	blx	r3
 8002526:	b9f8      	cbnz	r0, 8002568 <Endpoint_ConfigureEndpointTable+0x68>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8002528:	232c      	movs	r3, #44	; 0x2c
 800252a:	fb03 6307 	mla	r3, r3, r7, r6
 800252e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 8002532:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8002534:	f834 1c02 	ldrh.w	r1, [r4, #-2]
 8002538:	891a      	ldrh	r2, [r3, #8]
 800253a:	f361 128c 	bfi	r2, r1, #6, #7
 800253e:	811a      	strh	r2, [r3, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	721a      	strb	r2, [r3, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8002548:	891a      	ldrh	r2, [r3, #8]
 800254a:	f042 0202 	orr.w	r2, r2, #2
 800254e:	811a      	strh	r2, [r3, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8002550:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8002554:	0602      	lsls	r2, r0, #24
 8002556:	d403      	bmi.n	8002560 <Endpoint_ConfigureEndpointTable+0x60>
			device.Driver->EndpointReadStart(Table[i].Address,
 8002558:	6832      	ldr	r2, [r6, #0]
 800255a:	6999      	ldr	r1, [r3, #24]
 800255c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800255e:	4790      	blx	r2
 8002560:	3406      	adds	r4, #6
 8002562:	e7d3      	b.n	800250c <Endpoint_ConfigureEndpointTable+0xc>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8002564:	2001      	movs	r0, #1
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8002568:	2000      	movs	r0, #0
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
}
 800256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800256c:	1fff0698 	.word	0x1fff0698

08002570 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 8002570:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  switch (event)
 8002572:	2809      	cmp	r0, #9
 8002574:	d877      	bhi.n	8002666 <USBD_SignalDeviceEventHandler+0xf6>
 8002576:	e8df f000 	tbb	[pc, r0]
 800257a:	535b      	.short	0x535b
 800257c:	7605514c 	.word	0x7605514c
 8002580:	47765f68 	.word	0x47765f68
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8002584:	4b38      	ldr	r3, [pc, #224]	; (8002668 <USBD_SignalDeviceEventHandler+0xf8>)
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
 800258a:	4b38      	ldr	r3, [pc, #224]	; (800266c <USBD_SignalDeviceEventHandler+0xfc>)
 800258c:	2201      	movs	r2, #1
 800258e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      device.remote_wakeup = (uint8_t)0;
 8002592:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8002596:	f36f 0282 	bfc	r2, #2, #1
 800259a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 800259e:	2607      	movs	r6, #7
 80025a0:	461d      	mov	r5, r3
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 80025a2:	232c      	movs	r3, #44	; 0x2c
 80025a4:	f1c6 0407 	rsb	r4, r6, #7
 80025a8:	fb03 5404 	mla	r4, r3, r4, r5
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 80025ac:	2e07      	cmp	r6, #7
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 80025ae:	8923      	ldrh	r3, [r4, #8]
 80025b0:	f36f 1304 	bfc	r3, #4, #1
 80025b4:	8123      	strh	r3, [r4, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 80025b6:	8923      	ldrh	r3, [r4, #8]
 80025b8:	f36f 03c3 	bfc	r3, #3, #1
 80025bc:	8123      	strh	r3, [r4, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 80025be:	8923      	ldrh	r3, [r4, #8]
 80025c0:	f36f 0382 	bfc	r3, #2, #1
 80025c4:	8123      	strh	r3, [r4, #8]
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 80025c6:	d010      	beq.n	80025ea <USBD_SignalDeviceEventHandler+0x7a>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 80025c8:	7a23      	ldrb	r3, [r4, #8]
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 80025ca:	07db      	lsls	r3, r3, #31
 80025cc:	d50d      	bpl.n	80025ea <USBD_SignalDeviceEventHandler+0x7a>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 80025ce:	4b27      	ldr	r3, [pc, #156]	; (800266c <USBD_SignalDeviceEventHandler+0xfc>)
 80025d0:	7920      	ldrb	r0, [r4, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4798      	blx	r3
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 80025d8:	b938      	cbnz	r0, 80025ea <USBD_SignalDeviceEventHandler+0x7a>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 80025da:	7a23      	ldrb	r3, [r4, #8]
 80025dc:	f360 0300 	bfi	r3, r0, #0, #1
 80025e0:	7223      	strb	r3, [r4, #8]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 80025e2:	8923      	ldrh	r3, [r4, #8]
 80025e4:	f360 0341 	bfi	r3, r0, #1, #1
 80025e8:	8123      	strh	r3, [r4, #8]
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 80025ea:	3e01      	subs	r6, #1
 80025ec:	d1d9      	bne.n	80025a2 <USBD_SignalDeviceEventHandler+0x32>
      device.configuration = (uint8_t)0;
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 80025ee:	682b      	ldr	r3, [r5, #0]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 80025f0:	f885 6139 	strb.w	r6, [r5, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 80025f4:	f885 6138 	strb.w	r6, [r5, #312]	; 0x138
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	7928      	ldrb	r0, [r5, #4]
 80025fc:	2118      	movs	r1, #24
 80025fe:	4798      	blx	r3
      if (NULL != device.events->reset)
 8002600:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	e02a      	b.n	800265e <USBD_SignalDeviceEventHandler+0xee>
      {
        device.events->reset();
      }
      break;
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <USBD_SignalDeviceEventHandler+0xfc>)
 800260a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	e025      	b.n	800265e <USBD_SignalDeviceEventHandler+0xee>
      {
        device.events->start_of_frame();
      }
      break;
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <USBD_SignalDeviceEventHandler+0xfc>)
 8002614:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e020      	b.n	800265e <USBD_SignalDeviceEventHandler+0xee>
      {
        device.events->connect();
      }
      break;
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 800261c:	2201      	movs	r2, #1
 800261e:	e000      	b.n	8002622 <USBD_SignalDeviceEventHandler+0xb2>
      {
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8002620:	2200      	movs	r2, #0
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <USBD_SignalDeviceEventHandler+0xf8>)
 8002624:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <USBD_SignalDeviceEventHandler+0xfc>)
 8002628:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	e016      	b.n	800265e <USBD_SignalDeviceEventHandler+0xee>
      {
        device.events->disconnect();
      }
      break;
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <USBD_SignalDeviceEventHandler+0xf8>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
      break;
 8002636:	bd70      	pop	{r4, r5, r6, pc}
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <USBD_SignalDeviceEventHandler+0xfc>)
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <USBD_SignalDeviceEventHandler+0xf8>)
 800263c:	f893 113a 	ldrb.w	r1, [r3, #314]	; 0x13a
      if (NULL != device.events->wakeup)
 8002640:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
      break;
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 8002644:	7011      	strb	r1, [r2, #0]
      if (NULL != device.events->wakeup)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	e009      	b.n	800265e <USBD_SignalDeviceEventHandler+0xee>
      {
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 800264a:	4a07      	ldr	r2, [pc, #28]	; (8002668 <USBD_SignalDeviceEventHandler+0xf8>)
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <USBD_SignalDeviceEventHandler+0xfc>)
 800264e:	7811      	ldrb	r1, [r2, #0]
 8002650:	f883 113a 	strb.w	r1, [r3, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
      if (NULL != device.events->suspend)
 8002654:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 8002658:	2105      	movs	r1, #5
      if (NULL != device.events->suspend)
 800265a:	69db      	ldr	r3, [r3, #28]
        device.events->wakeup();
      }
      break;
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 800265c:	7011      	strb	r1, [r2, #0]
      if (NULL != device.events->suspend)
 800265e:	b113      	cbz	r3, 8002666 <USBD_SignalDeviceEventHandler+0xf6>
      }
      break;
    default:
      break;
  }
}
 8002660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
      if (NULL != device.events->suspend)
      {
        device.events->suspend();
 8002664:	4718      	bx	r3
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	1fff048d 	.word	0x1fff048d
 800266c:	1fff0698 	.word	0x1fff0698

08002670 <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 8002670:	b510      	push	{r4, lr}
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8002672:	4c08      	ldr	r4, [pc, #32]	; (8002694 <USBD_HandleEP0_Stall+0x24>)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	2080      	movs	r0, #128	; 0x80
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	2101      	movs	r1, #1
 800267c:	4798      	blx	r3
 800267e:	b940      	cbnz	r0, 8002692 <USBD_HandleEP0_Stall+0x22>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8002680:	2301      	movs	r3, #1
 8002682:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	2118      	movs	r1, #24
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8002690:	4718      	bx	r3
 8002692:	bd10      	pop	{r4, pc}
 8002694:	1fff0698 	.word	0x1fff0698

08002698 <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 8002698:	b573      	push	{r0, r1, r4, r5, r6, lr}
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 800269a:	4c9a      	ldr	r4, [pc, #616]	; (8002904 <USBD_Handle_DeviceRequest+0x26c>)
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 800269c:	4d9a      	ldr	r5, [pc, #616]	; (8002908 <USBD_Handle_DeviceRequest+0x270>)
 */
static void USBD_Handle_DeviceRequest(void)
{
  uint32_t length = 0U;
  uint32_t ret;
  void *buffer = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	9300      	str	r3, [sp, #0]
  uint32_t status = 0U;
 80026a2:	9301      	str	r3, [sp, #4]
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 80026a4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 80026a8:	886e      	ldrh	r6, [r5, #2]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 80026aa:	68db      	ldr	r3, [r3, #12]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 80026ac:	b2b6      	uxth	r6, r6

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 80026ae:	b103      	cbz	r3, 80026b2 <USBD_Handle_DeviceRequest+0x1a>
  {
    device.events->control_request();
 80026b0:	4798      	blx	r3
  }

  if (1U == device.IsSetupRecieved)
 80026b2:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80026b6:	079b      	lsls	r3, r3, #30
 80026b8:	f140 8140 	bpl.w	800293c <USBD_Handle_DeviceRequest+0x2a4>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 80026bc:	786b      	ldrb	r3, [r5, #1]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 80026be:	b2f6      	uxtb	r6, r6
  }

  if (1U == device.IsSetupRecieved)
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	f200 8139 	bhi.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
 80026c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80026ca:	0076      	.short	0x0076
 80026cc:	0137000d 	.word	0x0137000d
 80026d0:	013700f6 	.word	0x013700f6
 80026d4:	004300c0 	.word	0x004300c0
 80026d8:	003e0137 	.word	0x003e0137
 80026dc:	006700d5 	.word	0x006700d5
 80026e0:	013700e7 	.word	0x013700e7
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 80026e4:	782b      	ldrb	r3, [r5, #0]
 80026e6:	4a88      	ldr	r2, [pc, #544]	; (8002908 <USBD_Handle_DeviceRequest+0x270>)
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d11e      	bne.n	800272e <USBD_Handle_DeviceRequest+0x96>
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80026f0:	4986      	ldr	r1, [pc, #536]	; (800290c <USBD_Handle_DeviceRequest+0x274>)
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 80026f2:	8893      	ldrh	r3, [r2, #4]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80026f4:	7809      	ldrb	r1, [r1, #0]
 80026f6:	2904      	cmp	r1, #4
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 80026f8:	b29b      	uxth	r3, r3
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80026fa:	d004      	beq.n	8002706 <USBD_Handle_DeviceRequest+0x6e>
 80026fc:	8892      	ldrh	r2, [r2, #4]
 80026fe:	b292      	uxth	r2, r2
 8002700:	2a00      	cmp	r2, #0
 8002702:	f040 8119 	bne.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
                  (1U == device.Endpoints[index].IsConfigured))
 8002706:	222c      	movs	r2, #44	; 0x2c
    switch (USB_ControlRequest.bRequest)
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 8002708:	f003 030f 	and.w	r3, r3, #15
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
 800270c:	fb02 4303 	mla	r3, r2, r3, r4
 8002710:	7a1a      	ldrb	r2, [r3, #8]
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 8002712:	07d6      	lsls	r6, r2, #31
 8002714:	f140 8110 	bpl.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 8002718:	891a      	ldrh	r2, [r3, #8]
 800271a:	f36f 0282 	bfc	r2, #2, #1
 800271e:	811a      	strh	r2, [r3, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 8002720:	4b78      	ldr	r3, [pc, #480]	; (8002904 <USBD_Handle_DeviceRequest+0x26c>)
 8002722:	88a8      	ldrh	r0, [r5, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b2c0      	uxtb	r0, r0
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2100      	movs	r1, #0
 800272c:	e0e7      	b.n	80028fe <USBD_Handle_DeviceRequest+0x266>
          {
            USBD_HandleEP0_Stall();
          }
          break;
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 800272e:	7813      	ldrb	r3, [r2, #0]
 8002730:	f013 0303 	ands.w	r3, r3, #3
 8002734:	f040 8100 	bne.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
        {
          device.remote_wakeup = 0U;
 8002738:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
 800273c:	f363 0282 	bfi	r2, r3, #2, #1
 8002740:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
          break;
 8002744:	e0fa      	b.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
        }
        USBD_HandleEP0_Stall();
        break;

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	4971      	ldr	r1, [pc, #452]	; (8002910 <USBD_Handle_DeviceRequest+0x278>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	2000      	movs	r0, #0
 800274e:	e030      	b.n	80027b2 <USBD_Handle_DeviceRequest+0x11a>
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 8002750:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80ee 	beq.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 800275c:	8868      	ldrh	r0, [r5, #2]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 800275e:	88a9      	ldrh	r1, [r5, #4]
        break;

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8002760:	4e69      	ldr	r6, [pc, #420]	; (8002908 <USBD_Handle_DeviceRequest+0x270>)
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 8002762:	b280      	uxth	r0, r0
 8002764:	b289      	uxth	r1, r1
 8002766:	466a      	mov	r2, sp
 8002768:	4798      	blx	r3
        }

        if (0U == length)
 800276a:	4605      	mov	r5, r0
 800276c:	2800      	cmp	r0, #0
 800276e:	f000 80e3 	beq.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 8002772:	88f3      	ldrh	r3, [r6, #6]
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 8002774:	9900      	ldr	r1, [sp, #0]
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 8002776:	b29b      	uxth	r3, r3
 8002778:	4298      	cmp	r0, r3
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 800277a:	bf28      	it	cs
 800277c:	88f5      	ldrhcs	r5, [r6, #6]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 800277e:	6823      	ldr	r3, [r4, #0]
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 8002780:	bf28      	it	cs
 8002782:	b2ad      	uxthcs	r5, r5
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	462a      	mov	r2, r5
 8002788:	2000      	movs	r0, #0
 800278a:	4798      	blx	r3
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 800278c:	9b00      	ldr	r3, [sp, #0]
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
 800278e:	1a2d      	subs	r5, r5, r0
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 8002790:	4418      	add	r0, r3
          {
            length = (uint32_t)USB_ControlRequest.wLength;
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
 8002792:	62a5      	str	r5, [r4, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 8002794:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002796:	e0d1      	b.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
        }
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8002798:	4b5c      	ldr	r3, [pc, #368]	; (800290c <USBD_Handle_DeviceRequest+0x274>)
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	2a04      	cmp	r2, #4
 800279e:	f040 8086 	bne.w	80028ae <USBD_Handle_DeviceRequest+0x216>
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 80027a2:	88a9      	ldrh	r1, [r5, #4]
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 80027a4:	6823      	ldr	r3, [r4, #0]
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 80027a6:	b289      	uxth	r1, r1
 80027a8:	f501 719c 	add.w	r1, r1, #312	; 0x138
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	2000      	movs	r0, #0
 80027b0:	4421      	add	r1, r4
 80027b2:	2201      	movs	r2, #1
 80027b4:	e047      	b.n	8002846 <USBD_Handle_DeviceRequest+0x1ae>
          break;
        }
        break;

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80027b6:	7828      	ldrb	r0, [r5, #0]
 80027b8:	f010 0003 	ands.w	r0, r0, #3
 80027bc:	d10c      	bne.n	80027d8 <USBD_Handle_DeviceRequest+0x140>
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 80027be:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80027c2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80027c6:	0052      	lsls	r2, r2, #1
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80027ce:	a902      	add	r1, sp, #8
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f841 3d04 	str.w	r3, [r1, #-4]!
 80027d6:	e00d      	b.n	80027f4 <USBD_Handle_DeviceRequest+0x15c>
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80027d8:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <USBD_Handle_DeviceRequest+0x270>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10a      	bne.n	80027fa <USBD_Handle_DeviceRequest+0x162>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 80027e4:	4b49      	ldr	r3, [pc, #292]	; (800290c <USBD_Handle_DeviceRequest+0x274>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d106      	bne.n	80027fa <USBD_Handle_DeviceRequest+0x162>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 80027ec:	a902      	add	r1, sp, #8
 80027ee:	2000      	movs	r0, #0
 80027f0:	f841 0d04 	str.w	r0, [r1, #-4]!
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	e024      	b.n	8002844 <USBD_Handle_DeviceRequest+0x1ac>
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80027fa:	782b      	ldrb	r3, [r5, #0]
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <USBD_Handle_DeviceRequest+0x270>)
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b02      	cmp	r3, #2
 8002804:	f040 8098 	bne.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8002808:	4940      	ldr	r1, [pc, #256]	; (800290c <USBD_Handle_DeviceRequest+0x274>)
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 800280a:	8893      	ldrh	r3, [r2, #4]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800280c:	7809      	ldrb	r1, [r1, #0]
 800280e:	2904      	cmp	r1, #4
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 8002810:	b29b      	uxth	r3, r3
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8002812:	d004      	beq.n	800281e <USBD_Handle_DeviceRequest+0x186>
 8002814:	8892      	ldrh	r2, [r2, #4]
 8002816:	b292      	uxth	r2, r2
 8002818:	2a00      	cmp	r2, #0
 800281a:	f040 808d 	bne.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
              (1U == device.Endpoints[index].IsConfigured))
 800281e:	222c      	movs	r2, #44	; 0x2c
          break;
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 8002820:	f003 030f 	and.w	r3, r3, #15
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
              (1U == device.Endpoints[index].IsConfigured))
 8002824:	fb02 4303 	mla	r3, r2, r3, r4
 8002828:	7a1a      	ldrb	r2, [r3, #8]
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800282a:	07d0      	lsls	r0, r2, #31
 800282c:	f140 8084 	bpl.w	8002938 <USBD_Handle_DeviceRequest+0x2a0>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	a902      	add	r1, sp, #8
 8002834:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002838:	f841 3d04 	str.w	r3, [r1, #-4]!
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <USBD_Handle_DeviceRequest+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	2000      	movs	r0, #0
 8002844:	2202      	movs	r2, #2
 8002846:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 8002848:	e078      	b.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
 800284a:	4b30      	ldr	r3, [pc, #192]	; (800290c <USBD_Handle_DeviceRequest+0x274>)
        /* default stall */
        USBD_HandleEP0_Stall();
        break;

      case REQ_SetAddress:
        if (0U == value)
 800284c:	b90e      	cbnz	r6, 8002852 <USBD_Handle_DeviceRequest+0x1ba>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 800284e:	2202      	movs	r2, #2
 8002850:	e000      	b.n	8002854 <USBD_Handle_DeviceRequest+0x1bc>
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8002852:	2203      	movs	r2, #3
 8002854:	701a      	strb	r2, [r3, #0]
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	4630      	mov	r0, r6
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2100      	movs	r1, #0
 800285e:	4798      	blx	r3
 8002860:	2800      	cmp	r0, #0
 8002862:	d16b      	bne.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <USBD_Handle_DeviceRequest+0x26c>)
 8002866:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d065      	beq.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
          {
            device.events->set_address();
 8002870:	4798      	blx	r3
 8002872:	e063      	b.n	800293c <USBD_Handle_DeviceRequest+0x2a4>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
        if (NULL != device.events->config_changed)
 8002874:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
        break;

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 8002878:	f884 6139 	strb.w	r6, [r4, #313]	; 0x139
        if (NULL != device.events->config_changed)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	b103      	cbz	r3, 8002882 <USBD_Handle_DeviceRequest+0x1ea>
        {
          device.events->config_changed();
 8002880:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 8002882:	b90e      	cbnz	r6, 8002888 <USBD_Handle_DeviceRequest+0x1f0>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8002884:	2203      	movs	r2, #3
 8002886:	e004      	b.n	8002892 <USBD_Handle_DeviceRequest+0x1fa>
          break;
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 8002888:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 800288c:	07d9      	lsls	r1, r3, #31
 800288e:	d553      	bpl.n	8002938 <USBD_Handle_DeviceRequest+0x2a0>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8002890:	2204      	movs	r2, #4
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <USBD_Handle_DeviceRequest+0x274>)
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e051      	b.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
        break;

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8002898:	4b1c      	ldr	r3, [pc, #112]	; (800290c <USBD_Handle_DeviceRequest+0x274>)
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	2a04      	cmp	r2, #4
 800289e:	d106      	bne.n	80028ae <USBD_Handle_DeviceRequest+0x216>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 80028a0:	886a      	ldrh	r2, [r5, #2]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 80028a2:	88ab      	ldrh	r3, [r5, #4]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 80028a4:	fa14 f383 	uxtah	r3, r4, r3
 80028a8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
          break;
 80028ac:	e046      	b.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d143      	bne.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
 80028b4:	e040      	b.n	8002938 <USBD_Handle_DeviceRequest+0x2a0>
        }
        break;

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 80028b6:	2e02      	cmp	r6, #2
 80028b8:	d03e      	beq.n	8002938 <USBD_Handle_DeviceRequest+0x2a0>
        {
          USBD_HandleEP0_Stall();
          break;
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <USBD_Handle_DeviceRequest+0x274>)
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	2a04      	cmp	r2, #4
 80028c0:	d128      	bne.n	8002914 <USBD_Handle_DeviceRequest+0x27c>
        {
          switch (value)
 80028c2:	b146      	cbz	r6, 80028d6 <USBD_Handle_DeviceRequest+0x23e>
 80028c4:	2e01      	cmp	r6, #1
 80028c6:	d139      	bne.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 80028c8:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
              break;
 80028d4:	e032      	b.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 80028d6:	88ab      	ldrh	r3, [r5, #4]
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 80028d8:	222c      	movs	r2, #44	; 0x2c
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
              break;
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 80028da:	f003 030f 	and.w	r3, r3, #15
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 80028de:	fb02 4303 	mla	r3, r2, r3, r4
 80028e2:	7a1a      	ldrb	r2, [r3, #8]
 80028e4:	07d2      	lsls	r2, r2, #31
 80028e6:	d527      	bpl.n	8002938 <USBD_Handle_DeviceRequest+0x2a0>
              {
                USBD_HandleEP0_Stall();
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 80028e8:	891a      	ldrh	r2, [r3, #8]
 80028ea:	f042 0204 	orr.w	r2, r2, #4
 80028ee:	811a      	strh	r2, [r3, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <USBD_Handle_DeviceRequest+0x270>)
 80028f2:	8898      	ldrh	r0, [r3, #4]
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <USBD_Handle_DeviceRequest+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	b2c0      	uxtb	r0, r0
 80028fc:	2101      	movs	r1, #1
 80028fe:	4798      	blx	r3
 8002900:	e01c      	b.n	800293c <USBD_Handle_DeviceRequest+0x2a4>
 8002902:	bf00      	nop
 8002904:	1fff0698 	.word	0x1fff0698
 8002908:	1fff048e 	.word	0x1fff048e
 800290c:	1fff048d 	.word	0x1fff048d
 8002910:	1fff07d1 	.word	0x1fff07d1
              break;
          }
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d10e      	bne.n	8002938 <USBD_Handle_DeviceRequest+0x2a0>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 800291a:	b96e      	cbnz	r6, 8002938 <USBD_Handle_DeviceRequest+0x2a0>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800291c:	782b      	ldrb	r3, [r5, #0]
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d108      	bne.n	8002938 <USBD_Handle_DeviceRequest+0x2a0>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <USBD_Handle_DeviceRequest+0x2b4>)
 8002928:	889b      	ldrh	r3, [r3, #4]
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800292a:	f013 0fff 	tst.w	r3, #255	; 0xff
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 800292e:	bf02      	ittt	eq
 8002930:	8923      	ldrheq	r3, [r4, #8]
 8002932:	f043 0304 	orreq.w	r3, r3, #4
 8002936:	8123      	strheq	r3, [r4, #8]
        /* Not yet supported */
        USBD_HandleEP0_Stall();
        break;

      default:
        USBD_HandleEP0_Stall();
 8002938:	f7ff fe9a 	bl	8002670 <USBD_HandleEP0_Stall>
        break;
    }
  }
  device.IsSetupRecieved = 0U;
 800293c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8002940:	f023 0302 	bic.w	r3, r3, #2
 8002944:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
}
 8002948:	b002      	add	sp, #8
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	1fff048e 	.word	0x1fff048e

08002950 <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 8002950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8002954:	4c6a      	ldr	r4, [pc, #424]	; (8002b00 <USBD_SignalEndpointEvent_Handler+0x1b0>)
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 8002956:	f000 050f 	and.w	r5, r0, #15
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
 800295a:	2901      	cmp	r1, #1
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
  temp_dir = (uint32_t)device.CurrentDirection;
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 800295c:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8002960:	f894 813c 	ldrb.w	r8, [r4, #316]	; 0x13c
  temp_dir = (uint32_t)device.CurrentDirection;
 8002964:	f894 713d 	ldrb.w	r7, [r4, #317]	; 0x13d
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8002968:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 800296c:	f884 013d 	strb.w	r0, [r4, #317]	; 0x13d
  /* choose what to do based on the event */
  switch (ep_event)
 8002970:	d043      	beq.n	80029fa <USBD_SignalEndpointEvent_Handler+0xaa>
 8002972:	d302      	bcc.n	800297a <USBD_SignalEndpointEvent_Handler+0x2a>
 8002974:	2902      	cmp	r1, #2
 8002976:	d070      	beq.n	8002a5a <USBD_SignalEndpointEvent_Handler+0x10a>
 8002978:	e0bc      	b.n	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 800297a:	232c      	movs	r3, #44	; 0x2c
 800297c:	fb03 4305 	mla	r3, r3, r5, r4
 8002980:	891a      	ldrh	r2, [r3, #8]
 8002982:	f36f 02c3 	bfc	r2, #3, #1
 8002986:	811a      	strh	r2, [r3, #8]
      switch (device.CurrentEndpoint)
 8002988:	2d00      	cmp	r5, #0
 800298a:	f040 80b3 	bne.w	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
static void USBD_HandleEP0_SETUP()
{
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	4e5c      	ldr	r6, [pc, #368]	; (8002b04 <USBD_SignalEndpointEvent_Handler+0x1b4>)
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	4628      	mov	r0, r5
 8002996:	4631      	mov	r1, r6
 8002998:	2208      	movs	r2, #8
 800299a:	4798      	blx	r3
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 800299c:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 80029a0:	2808      	cmp	r0, #8
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 80029aa:	f040 80a3 	bne.w	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 80029ae:	f8b6 9006 	ldrh.w	r9, [r6, #6]
 80029b2:	fa1f f989 	uxth.w	r9, r9
 80029b6:	f1b9 0f00 	cmp.w	r9, #0
 80029ba:	d10b      	bne.n	80029d4 <USBD_SignalEndpointEvent_Handler+0x84>
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 80029bc:	2303      	movs	r3, #3
 80029be:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 80029c2:	f7ff fe69 	bl	8002698 <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	4648      	mov	r0, r9
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4649      	mov	r1, r9
 80029ce:	464a      	mov	r2, r9
 80029d0:	4798      	blx	r3
 80029d2:	e08f      	b.n	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 80029d4:	7833      	ldrb	r3, [r6, #0]
 80029d6:	0619      	lsls	r1, r3, #24
 80029d8:	d505      	bpl.n	80029e6 <USBD_SignalEndpointEvent_Handler+0x96>
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 80029da:	2302      	movs	r3, #2
 80029dc:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 80029e0:	f7ff fe5a 	bl	8002698 <USBD_Handle_DeviceRequest>
 80029e4:	e086      	b.n	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 80029e6:	2304      	movs	r3, #4
 80029e8:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 80029ec:	88f1      	ldrh	r1, [r6, #6]
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	4628      	mov	r0, r5
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	b289      	uxth	r1, r1
 80029f6:	4798      	blx	r3
 80029f8:	e07c      	b.n	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
        default:
          break;
      }
      break;
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 80029fa:	232c      	movs	r3, #44	; 0x2c
 80029fc:	fb03 4305 	mla	r3, r3, r5, r4
 8002a00:	461e      	mov	r6, r3
 8002a02:	891a      	ldrh	r2, [r3, #8]
 8002a04:	f042 0220 	orr.w	r2, r2, #32
 8002a08:	f826 2f08 	strh.w	r2, [r6, #8]!
      if (ep->OutBytesAvailable == 0U)
 8002a0c:	6872      	ldr	r2, [r6, #4]
 8002a0e:	b942      	cbnz	r2, 8002a22 <USBD_SignalEndpointEvent_Handler+0xd2>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 8002a10:	6821      	ldr	r1, [r4, #0]
      break;
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
      if (ep->OutBytesAvailable == 0U)
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 8002a12:	60b2      	str	r2, [r6, #8]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 8002a14:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 8002a18:	7918      	ldrb	r0, [r3, #4]
 8002a1a:	6959      	ldr	r1, [r3, #20]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	47e0      	blx	ip
 8002a20:	6070      	str	r0, [r6, #4]
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 8002a22:	232c      	movs	r3, #44	; 0x2c
 8002a24:	fb03 4505 	mla	r5, r3, r5, r4
 8002a28:	4e35      	ldr	r6, [pc, #212]	; (8002b00 <USBD_SignalEndpointEvent_Handler+0x1b0>)
 8002a2a:	892b      	ldrh	r3, [r5, #8]
 8002a2c:	f36f 03c3 	bfc	r3, #3, #1
 8002a30:	812b      	strh	r3, [r5, #8]
      switch (device.CurrentEndpoint)
 8002a32:	f894 513c 	ldrb.w	r5, [r4, #316]	; 0x13c
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	d15c      	bne.n	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 8002a3a:	f896 313b 	ldrb.w	r3, [r6, #315]	; 0x13b
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d109      	bne.n	8002a56 <USBD_SignalEndpointEvent_Handler+0x106>
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 8002a42:	f7ff fe29 	bl	8002698 <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 8002a46:	6833      	ldr	r3, [r6, #0]
 8002a48:	4628      	mov	r0, r5
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	462a      	mov	r2, r5
 8002a50:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e04c      	b.n	8002af0 <USBD_SignalEndpointEvent_Handler+0x1a0>
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	e043      	b.n	8002ae2 <USBD_SignalEndpointEvent_Handler+0x192>
          break;
      }
      break;
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 8002a5a:	232c      	movs	r3, #44	; 0x2c
 8002a5c:	fb03 4305 	mla	r3, r3, r5, r4
 8002a60:	f103 0620 	add.w	r6, r3, #32
 8002a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a66:	b172      	cbz	r2, 8002a86 <USBD_SignalEndpointEvent_Handler+0x136>
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8002a68:	6821      	ldr	r1, [r4, #0]
 8002a6a:	7918      	ldrb	r0, [r3, #4]
 8002a6c:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
 8002a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a72:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8002a76:	47e0      	blx	ip
        ep->InDataLeft -= (uint32_t)data_count;
 8002a78:	68b3      	ldr	r3, [r6, #8]
 8002a7a:	1a1b      	subs	r3, r3, r0
 8002a7c:	60b3      	str	r3, [r6, #8]
        ep->InDataBuffer += (uint32_t)data_count;
 8002a7e:	686b      	ldr	r3, [r5, #4]
 8002a80:	4418      	add	r0, r3
 8002a82:	6068      	str	r0, [r5, #4]
        break;
 8002a84:	e036      	b.n	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8002a86:	7918      	ldrb	r0, [r3, #4]
 8002a88:	0702      	lsls	r2, r0, #28
 8002a8a:	d112      	bne.n	8002ab2 <USBD_SignalEndpointEvent_Handler+0x162>
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	b182      	cbz	r2, 8002ab2 <USBD_SignalEndpointEvent_Handler+0x162>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8002a90:	491c      	ldr	r1, [pc, #112]	; (8002b04 <USBD_SignalEndpointEvent_Handler+0x1b4>)
 8002a92:	88c9      	ldrh	r1, [r1, #6]
 8002a94:	b289      	uxth	r1, r1
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d00b      	beq.n	8002ab2 <USBD_SignalEndpointEvent_Handler+0x162>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 8002a9a:	8919      	ldrh	r1, [r3, #8]
 8002a9c:	f3c1 1186 	ubfx	r1, r1, #6, #7
 8002aa0:	fbb2 f3f1 	udiv	r3, r2, r1
 8002aa4:	fb01 2113 	mls	r1, r1, r3, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8002aa8:	b919      	cbnz	r1, 8002ab2 <USBD_SignalEndpointEvent_Handler+0x162>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	460a      	mov	r2, r1
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	4798      	blx	r3
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 8002ab2:	232c      	movs	r3, #44	; 0x2c
 8002ab4:	fb03 4505 	mla	r5, r3, r5, r4
 8002ab8:	2200      	movs	r2, #0
      ep->InInUse = (uint8_t)0;
 8002aba:	892b      	ldrh	r3, [r5, #8]
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 8002abc:	4e10      	ldr	r6, [pc, #64]	; (8002b00 <USBD_SignalEndpointEvent_Handler+0x1b0>)
 8002abe:	61ea      	str	r2, [r5, #28]
      ep->InInUse = (uint8_t)0;
 8002ac0:	f362 1304 	bfi	r3, r2, #4, #1
 8002ac4:	812b      	strh	r3, [r5, #8]
      switch (device.CurrentEndpoint)
 8002ac6:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
 8002aca:	b998      	cbnz	r0, 8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 8002acc:	f896 313b 	ldrb.w	r3, [r6, #315]	; 0x13b
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d105      	bne.n	8002ae0 <USBD_SignalEndpointEvent_Handler+0x190>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 8002ad4:	6833      	ldr	r3, [r6, #0]
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 8002adc:	2305      	movs	r3, #5
 8002ade:	e007      	b.n	8002af0 <USBD_SignalEndpointEvent_Handler+0x1a0>
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d107      	bne.n	8002af4 <USBD_SignalEndpointEvent_Handler+0x1a4>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8002ae4:	6833      	ldr	r3, [r6, #0]
 8002ae6:	7930      	ldrb	r0, [r6, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	2118      	movs	r1, #24
 8002aec:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f886 313b 	strb.w	r3, [r6, #315]	; 0x13b
      }
      break;
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 8002af4:	f884 813c 	strb.w	r8, [r4, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 8002af8:	f884 713d 	strb.w	r7, [r4, #317]	; 0x13d
 8002afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b00:	1fff0698 	.word	0x1fff0698
 8002b04:	1fff048e 	.word	0x1fff048e

08002b08 <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 8002b08:	b538      	push	{r3, r4, r5, lr}
	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
 8002b0a:	4c3b      	ldr	r4, [pc, #236]	; (8002bf8 <USBD_Init+0xf0>)
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 8002b0c:	4605      	mov	r5, r0


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 8002b0e:	f7fe fcdb 	bl	80014c8 <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 8002b12:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8002b16:	4620      	mov	r0, r4
 8002b18:	2100      	movs	r1, #0
 8002b1a:	f008 fe48 	bl	800b7ae <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <USBD_Init+0xf4>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <USBD_Init+0xf8>)
 8002b26:	6023      	str	r3, [r4, #0]
	device.ep0_state = USBD_EP0_STATE_IDLE;
 8002b28:	2001      	movs	r0, #1
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <USBD_Init+0xfc>)
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 8002b2c:	7220      	strb	r0, [r4, #8]

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8002b2e:	6223      	str	r3, [r4, #32]
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 8002b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b34:	6263      	str	r3, [r4, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 8002b36:	61a3      	str	r3, [r4, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8002b38:	8923      	ldrh	r3, [r4, #8]
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8002b3a:	4a33      	ldr	r2, [pc, #204]	; (8002c08 <USBD_Init+0x100>)
 8002b3c:	6162      	str	r2, [r4, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	8123      	strh	r3, [r4, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 8002b44:	8923      	ldrh	r3, [r4, #8]
	XMC_USBD_Disable();

	memset(&device,0x0,sizeof(USB_Device_t));
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
	device.Driver = &Driver_USBD0;
	device.ep0_state = USBD_EP0_STATE_IDLE;
 8002b46:	f884 013b 	strb.w	r0, [r4, #315]	; 0x13b
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	f362 138c 	bfi	r3, r2, #6, #7
 8002b50:	8123      	strh	r3, [r4, #8]

	if ((handle->event_cb->control_request == 0) ||
 8002b52:	692b      	ldr	r3, [r5, #16]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d04a      	beq.n	8002bf0 <USBD_Init+0xe8>
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d047      	beq.n	8002bf0 <USBD_Init+0xe8>
	    (handle->event_cb->get_descriptor == 0) ||
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	2a00      	cmp	r2, #0
 8002b64:	d044      	beq.n	8002bf0 <USBD_Init+0xe8>
	{
	  status = USBD_STATUS_FAILURE;
	}
	else
	{
	  device.events = handle->event_cb;
 8002b66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8002b6a:	f7fd fca5 	bl	80004b8 <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <USBD_Init+0x104>)
 8002b70:	606b      	str	r3, [r5, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 8002b72:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <USBD_Init+0x108>)
 8002b74:	60ab      	str	r3, [r5, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	4628      	mov	r0, r5
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4798      	blx	r3
	  if (USBD_STATUS_SUCCESS == status)
 8002b7e:	4605      	mov	r5, r0
 8002b80:	bb20      	cbnz	r0, 8002bcc <USBD_Init+0xc4>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <USBD_Init+0x10c>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8a:	f1c3 0107 	rsb	r1, r3, #7
 8002b8e:	2906      	cmp	r1, #6
 8002b90:	bf28      	it	cs
 8002b92:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b94:	b10b      	cbz	r3, 8002b9a <USBD_Init+0x92>
 8002b96:	1e5a      	subs	r2, r3, #1
 8002b98:	e000      	b.n	8002b9c <USBD_Init+0x94>
 8002b9a:	461a      	mov	r2, r3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	408b      	lsls	r3, r1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	f003 033b 	and.w	r3, r3, #59	; 0x3b
 8002ba6:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <USBD_Init+0x110>)
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f882 336b 	strb.w	r3, [r2, #875]	; 0x36b
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bb6:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	60d3      	str	r3, [r2, #12]
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	4798      	blx	r3
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 8002bc8:	4605      	mov	r5, r0
 8002bca:	b190      	cbz	r0, 8002bf2 <USBD_Init+0xea>
	  {
	  XMC_USBD_Disable();
 8002bcc:	f7fe fc7c 	bl	80014c8 <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4798      	blx	r3
 8002bd6:	b960      	cbnz	r0, 8002bf2 <USBD_Init+0xea>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <USBD_Init+0x110>)
 8002bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bde:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002be6:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	e000      	b.n	8002bf2 <USBD_Init+0xea>

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 8002bf0:	4605      	mov	r5, r0
	  }
	}


	return status;
}
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
 8002bf6:	bf00      	nop
 8002bf8:	1fff0698 	.word	0x1fff0698
 8002bfc:	1fff048d 	.word	0x1fff048d
 8002c00:	0800c088 	.word	0x0800c088
 8002c04:	1fff0498 	.word	0x1fff0498
 8002c08:	1fff0598 	.word	0x1fff0598
 8002c0c:	08002571 	.word	0x08002571
 8002c10:	08002951 	.word	0x08002951
 8002c14:	e000ed00 	.word	0xe000ed00
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <USBD_Connect>:
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 8002c1c:	4b01      	ldr	r3, [pc, #4]	; (8002c24 <USBD_Connect+0x8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4718      	bx	r3
 8002c24:	1fff0698 	.word	0x1fff0698

08002c28 <USBD_IsEnumDone>:
 * Check with the USB device controller driver if the enumeration is done.
 * Returns 1 on completion of enumeration.
 */
uint32_t USBD_IsEnumDone(void)
{
  return device.Driver->IsEnumDone();
 8002c28:	4b01      	ldr	r3, [pc, #4]	; (8002c30 <USBD_IsEnumDone+0x8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	4718      	bx	r3
 8002c30:	1fff0698 	.word	0x1fff0698

08002c34 <USBD_SetEndpointBuffer>:
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8002c34:	b510      	push	{r4, lr}
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 8002c36:	f010 0f80 	tst.w	r0, #128	; 0x80
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 8002c3a:	f000 040f 	and.w	r4, r0, #15
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <USBD_SetEndpointBuffer+0x20>)
 8002c40:	f04f 032c 	mov.w	r3, #44	; 0x2c
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
  {
    device.Endpoints[number].InBuffer = buf;
 8002c44:	fb03 0404 	mla	r4, r3, r4, r0
 8002c48:	bf19      	ittee	ne
 8002c4a:	6221      	strne	r1, [r4, #32]
    device.Endpoints[number].InBufferLength = len;
 8002c4c:	6262      	strne	r2, [r4, #36]	; 0x24
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 8002c4e:	6161      	streq	r1, [r4, #20]
    device.Endpoints[number].OutBufferLength = len;
 8002c50:	61a2      	streq	r2, [r4, #24]
 8002c52:	bd10      	pop	{r4, pc}
 8002c54:	1fff0698 	.word	0x1fff0698

08002c58 <USB0_0_IRQHandler>:
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 8002c58:	4b01      	ldr	r3, [pc, #4]	; (8002c60 <USB0_0_IRQHandler+0x8>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	f7fe bc80 	b.w	8001560 <XMC_USBD_IRQHandler>
 8002c60:	1ffed038 	.word	0x1ffed038

08002c64 <UART_lReconfigureRxFIFO>:
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8002c64:	6843      	ldr	r3, [r0, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8002c66:	6800      	ldr	r0, [r0, #0]
{
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8002c68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8002c70:	4291      	cmp	r1, r2
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8002c72:	bf34      	ite	cc
 8002c74:	f101 32ff 	addcc.w	r2, r1, #4294967295
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8002c78:	f102 32ff 	addcs.w	r2, r2, #4294967295
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fe bf19 	b.w	8001ab4 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>

08002c82 <UART_Init>:
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8002c82:	6843      	ldr	r3, [r0, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4718      	bx	r3

08002c88 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002c88:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8002c8a:	6844      	ldr	r4, [r0, #4]
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002c8c:	6883      	ldr	r3, [r0, #8]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8002c8e:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8002c92:	bb2d      	cbnz	r5, 8002ce0 <UART_StartTransmitIRQ+0x58>
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->tx_busy == false)
 8002c94:	7e1d      	ldrb	r5, [r3, #24]
 8002c96:	f005 06ff 	and.w	r6, r5, #255	; 0xff
 8002c9a:	bb1d      	cbnz	r5, 8002ce4 <UART_StartTransmitIRQ+0x5c>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8002c9c:	b321      	cbz	r1, 8002ce8 <UART_StartTransmitIRQ+0x60>
 8002c9e:	b31a      	cbz	r2, 8002ce8 <UART_StartTransmitIRQ+0x60>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
        ptr_runtime->tx_data_count = count;
 8002ca0:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
        ptr_runtime->tx_busy = true;
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002ca6:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8002caa:	6019      	str	r1, [r3, #0]
        ptr_runtime->tx_data_count = count;
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8002cac:	60de      	str	r6, [r3, #12]
 8002cae:	6803      	ldr	r3, [r0, #0]
        ptr_runtime->tx_busy = true;

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002cb0:	b152      	cbz	r2, 8002cc8 <UART_StartTransmitIRQ+0x40>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8002cb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cb6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 8002cba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002cbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cc2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8002cc6:	e003      	b.n	8002cd0 <UART_StartTransmitIRQ+0x48>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8002cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8002cd0:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8002cd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cd8:	408a      	lsls	r2, r1
 8002cda:	669a      	str	r2, [r3, #104]	; 0x68
 8002cdc:	2000      	movs	r0, #0
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002ce0:	2004      	movs	r0, #4
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8002ce8:	2003      	movs	r0, #3
      }
    }
  }
  return ret_stat;
}
 8002cea:	bd70      	pop	{r4, r5, r6, pc}

08002cec <UART_Transmit>:
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->transmit_mode)
 8002cec:	6843      	ldr	r3, [r0, #4]
 8002cee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002cf2:	b90b      	cbnz	r3, 8002cf8 <UART_Transmit+0xc>
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 8002cf4:	f7ff bfc8 	b.w	8002c88 <UART_StartTransmitIRQ>
#endif
  default:
    break;
  }
  return ret_stat;
}
 8002cf8:	2004      	movs	r0, #4
 8002cfa:	4770      	bx	lr

08002cfc <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8002cfe:	6845      	ldr	r5, [r0, #4]
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002d00:	6883      	ldr	r3, [r0, #8]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8002d02:	f895 602a 	ldrb.w	r6, [r5, #42]	; 0x2a
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8002d06:	4604      	mov	r4, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8002d08:	bb26      	cbnz	r6, 8002d54 <UART_StartReceiveIRQ+0x58>
  {
    ret_stat = UART_STATUS_BUSY;
    if (ptr_runtime->rx_busy == false)
 8002d0a:	7e5f      	ldrb	r7, [r3, #25]
 8002d0c:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8002d10:	bb17      	cbnz	r7, 8002d58 <UART_StartReceiveIRQ+0x5c>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8002d12:	b319      	cbz	r1, 8002d5c <UART_StartReceiveIRQ+0x60>
 8002d14:	b312      	cbz	r2, 8002d5c <UART_StartReceiveIRQ+0x60>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 8002d16:	6059      	str	r1, [r3, #4]
        ptr_runtime->rx_data_count = count;
        ptr_runtime->rx_busy = true;
 8002d18:	2101      	movs	r1, #1
      if ((data_ptr != NULL) && (count > 0U))
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
        ptr_runtime->rx_data_count = count;
 8002d1a:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8002d1c:	7659      	strb	r1, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8002d1e:	615e      	str	r6, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002d20:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8002d24:	6805      	ldr	r5, [r0, #0]
 8002d26:	b17b      	cbz	r3, 8002d48 <UART_StartReceiveIRQ+0x4c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002d28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d2c:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8002d30:	4611      	mov	r1, r2
 8002d32:	f7ff ff97 	bl	8002c64 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8002d36:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 8002d38:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8002d3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8002d40:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8002d44:	4630      	mov	r0, r6
 8002d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8002d48:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002d4a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002d4e:	642a      	str	r2, [r5, #64]	; 0x40
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8002d50:	4618      	mov	r0, r3
 8002d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8002d54:	2004      	movs	r0, #4
 8002d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
  {
    ret_stat = UART_STATUS_BUSY;
 8002d58:	2002      	movs	r0, #2
 8002d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
        ret_stat = UART_STATUS_SUCCESS;
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8002d5c:	2003      	movs	r0, #3
      }
    }
  }
  return ret_stat;
}
 8002d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d60 <UART_Receive>:
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;

  switch(handle->config->receive_mode)
 8002d60:	6843      	ldr	r3, [r0, #4]
 8002d62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002d66:	b90b      	cbnz	r3, 8002d6c <UART_Receive+0xc>
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 8002d68:	f7ff bfc8 	b.w	8002cfc <UART_StartReceiveIRQ>
#endif
  default:
    break;
  }
  return ret_stat;
}
 8002d6c:	2004      	movs	r0, #4
 8002d6e:	4770      	bx	lr

08002d70 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8002d70:	b570      	push	{r4, r5, r6, lr}
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002d72:	6884      	ldr	r4, [r0, #8]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002d74:	68e3      	ldr	r3, [r4, #12]
 8002d76:	68a2      	ldr	r2, [r4, #8]
 8002d78:	4293      	cmp	r3, r2
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8002d7a:	4605      	mov	r5, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002d7c:	d21e      	bcs.n	8002dbc <UART_lTransmitHandler+0x4c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002d7e:	6842      	ldr	r2, [r0, #4]
 8002d80:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8002d84:	b18a      	cbz	r2, 8002daa <UART_lTransmitHandler+0x3a>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002d86:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8002d88:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8002d8c:	04de      	lsls	r6, r3, #19
 8002d8e:	d40b      	bmi.n	8002da8 <UART_lTransmitHandler+0x38>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8002d90:	68e3      	ldr	r3, [r4, #12]
 8002d92:	68a2      	ldr	r2, [r4, #8]
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d230      	bcs.n	8002dfa <UART_lTransmitHandler+0x8a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002d98:	6822      	ldr	r2, [r4, #0]
 8002d9a:	5cd1      	ldrb	r1, [r2, r3]
 8002d9c:	f7fd ff0d 	bl	8000bba <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8002da0:	68e3      	ldr	r3, [r4, #12]
 8002da2:	3301      	adds	r3, #1
 8002da4:	60e3      	str	r3, [r4, #12]
 8002da6:	e7ee      	b.n	8002d86 <UART_lTransmitHandler+0x16>
 8002da8:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	6800      	ldr	r0, [r0, #0]
 8002dae:	5cd1      	ldrb	r1, [r2, r3]
 8002db0:	f7fd ff03 	bl	8000bba <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8002db4:	68e3      	ldr	r3, [r4, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60e3      	str	r3, [r4, #12]
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8002dbc:	6803      	ldr	r3, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8002dbe:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8002dc2:	0511      	lsls	r1, r2, #20
 8002dc4:	d519      	bpl.n	8002dfa <UART_lTransmitHandler+0x8a>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002dc6:	6841      	ldr	r1, [r0, #4]
 8002dc8:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 8002dcc:	b132      	cbz	r2, 8002ddc <UART_lTransmitHandler+0x6c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8002dce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002dd2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002dd6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8002dda:	e003      	b.n	8002de4 <UART_lTransmitHandler+0x74>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8002ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002de6:	0612      	lsls	r2, r2, #24
 8002de8:	d4fc      	bmi.n	8002de4 <UART_lTransmitHandler+0x74>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8002dea:	2300      	movs	r3, #0
 8002dec:	7623      	strb	r3, [r4, #24]
      ptr_runtime->tx_data = NULL;
 8002dee:	6023      	str	r3, [r4, #0]

      if (handle->config->tx_cbhandler != NULL)
 8002df0:	688b      	ldr	r3, [r1, #8]
 8002df2:	b113      	cbz	r3, 8002dfa <UART_lTransmitHandler+0x8a>
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
      }
    }
  }
}
 8002df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ptr_runtime->tx_data = NULL;

      if (handle->config->tx_cbhandler != NULL)
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8002df8:	4718      	bx	r3
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}

08002dfc <UART_lReceiveHandler>:
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002dfc:	6843      	ldr	r3, [r0, #4]
 8002dfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8002e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e06:	4605      	mov	r5, r0
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8002e08:	6884      	ldr	r4, [r0, #8]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8002e0a:	b353      	cbz	r3, 8002e62 <UART_lReceiveHandler+0x66>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002e0c:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8002e0e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8002e12:	071b      	lsls	r3, r3, #28
 8002e14:	d41b      	bmi.n	8002e4e <UART_lReceiveHandler+0x52>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002e16:	6966      	ldr	r6, [r4, #20]
 8002e18:	6923      	ldr	r3, [r4, #16]
 8002e1a:	429e      	cmp	r6, r3
 8002e1c:	d206      	bcs.n	8002e2c <UART_lReceiveHandler+0x30>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002e1e:	6867      	ldr	r7, [r4, #4]
 8002e20:	f7fd fedc 	bl	8000bdc <XMC_UART_CH_GetReceivedData>
 8002e24:	55b8      	strb	r0, [r7, r6]
        (ptr_runtime->rx_data_index)++;
 8002e26:	6963      	ldr	r3, [r4, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	6163      	str	r3, [r4, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002e2c:	6962      	ldr	r2, [r4, #20]
 8002e2e:	6923      	ldr	r3, [r4, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1eb      	bne.n	8002e0c <UART_lReceiveHandler+0x10>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8002e34:	2300      	movs	r3, #0
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8002e36:	682a      	ldr	r2, [r5, #0]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8002e38:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8002e3a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8002e3e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002e42:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8002e46:	686b      	ldr	r3, [r5, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	b103      	cbz	r3, 8002e4e <UART_lReceiveHandler+0x52>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8002e4c:	4798      	blx	r3
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002e4e:	6963      	ldr	r3, [r4, #20]
 8002e50:	6921      	ldr	r1, [r4, #16]
 8002e52:	428b      	cmp	r3, r1
 8002e54:	d222      	bcs.n	8002e9c <UART_lReceiveHandler+0xa0>
    {
      UART_lReconfigureRxFIFO(handle,
 8002e56:	4628      	mov	r0, r5
 8002e58:	1ac9      	subs	r1, r1, r3
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 8002e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8002e5e:	f7ff bf01 	b.w	8002c64 <UART_lReconfigureRxFIFO>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8002e62:	6966      	ldr	r6, [r4, #20]
 8002e64:	6923      	ldr	r3, [r4, #16]
 8002e66:	429e      	cmp	r6, r3
 8002e68:	d207      	bcs.n	8002e7a <UART_lReceiveHandler+0x7e>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8002e6a:	6800      	ldr	r0, [r0, #0]
 8002e6c:	6867      	ldr	r7, [r4, #4]
 8002e6e:	f7fd feb5 	bl	8000bdc <XMC_UART_CH_GetReceivedData>
 8002e72:	55b8      	strb	r0, [r7, r6]
      (ptr_runtime->rx_data_index)++;
 8002e74:	6963      	ldr	r3, [r4, #20]
 8002e76:	3301      	adds	r3, #1
 8002e78:	6163      	str	r3, [r4, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8002e7a:	6962      	ldr	r2, [r4, #20]
 8002e7c:	6923      	ldr	r3, [r4, #16]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10c      	bne.n	8002e9c <UART_lReceiveHandler+0xa0>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8002e82:	2300      	movs	r3, #0
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8002e84:	682a      	ldr	r2, [r5, #0]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8002e86:	7663      	strb	r3, [r4, #25]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8002e88:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e8e:	6413      	str	r3, [r2, #64]	; 0x40
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8002e90:	686b      	ldr	r3, [r5, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	b113      	cbz	r3, 8002e9c <UART_lReceiveHandler+0xa0>
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
      }
    }
  }
}
 8002e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8002e9a:	4718      	bx	r3
 8002e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002ea0 <NVIC_EncodePriority.constprop.1>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea0:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	f1c0 0207 	rsb	r2, r0, #7
 8002ea8:	2a06      	cmp	r2, #6
 8002eaa:	bf28      	it	cs
 8002eac:	2206      	movcs	r2, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eae:	b100      	cbz	r0, 8002eb2 <NVIC_EncodePriority.constprop.1+0x12>
 8002eb0:	3801      	subs	r0, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	4093      	lsls	r3, r2
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8002ec0:	4770      	bx	lr
	...

08002ec4 <cunit_logger_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
 8002ec4:	b538      	push	{r3, r4, r5, lr}
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 0U, &cunit_logger_rx_pin_config);
 8002ec6:	4d2c      	ldr	r5, [pc, #176]	; (8002f78 <cunit_logger_init+0xb4>)
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &cunit_logger_channel_config);
 8002ec8:	4c2c      	ldr	r4, [pc, #176]	; (8002f7c <cunit_logger_init+0xb8>)
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
  UART_STATUS_t status = UART_STATUS_SUCCESS;
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 0U, &cunit_logger_rx_pin_config);
 8002eca:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <cunit_logger_init+0xbc>)
 8002ecc:	4628      	mov	r0, r5
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f7fd f9e4 	bl	800029c <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &cunit_logger_channel_config);
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	492b      	ldr	r1, [pc, #172]	; (8002f84 <cunit_logger_init+0xc0>)
 8002ed8:	f7fd fe3e 	bl	8000b58 <XMC_UART_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002edc:	69e3      	ldr	r3, [r4, #28]
 8002ede:	f023 0307 	bic.w	r3, r3, #7
 8002ee2:	f043 0303 	orr.w	r3, r3, #3
 8002ee6:	61e3      	str	r3, [r4, #28]
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 3U);
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
 8002ee8:	4620      	mov	r0, r4
 8002eea:	2110      	movs	r1, #16
 8002eec:	2204      	movs	r2, #4
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f7fe fdb2 	bl	8001a58 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	460b      	mov	r3, r1
 8002efa:	2204      	movs	r2, #4
 8002efc:	f7fe fdc2 	bl	8001a84 <XMC_USIC_CH_RXFIFO_Configure>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8002f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 1U, &cunit_logger_tx_pin_config);
 8002f02:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <cunit_logger_init+0xc4>)
 8002f04:	f023 030f 	bic.w	r3, r3, #15
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6423      	str	r3, [r4, #64]	; 0x40
 8002f0e:	4628      	mov	r0, r5
 8002f10:	2101      	movs	r1, #1
 8002f12:	f7fd f9c3 	bl	800029c <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8002f16:	4620      	mov	r0, r4
 8002f18:	2110      	movs	r1, #16
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f7fe fddb 	bl	8001ad6 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8002f20:	4620      	mov	r0, r4
 8002f22:	2110      	movs	r1, #16
 8002f24:	2203      	movs	r2, #3
 8002f26:	f7fe fde0 	bl	8001aea <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2a:	4d18      	ldr	r5, [pc, #96]	; (8002f8c <cunit_logger_init+0xc8>)
      3U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	2110      	movs	r1, #16
 8002f30:	2205      	movs	r2, #5
 8002f32:	f7fe fde6 	bl	8001b02 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8002f36:	2113      	movs	r1, #19
 8002f38:	2205      	movs	r2, #5
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f7fe fde1 	bl	8001b02 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
 8002f40:	68e8      	ldr	r0, [r5, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	4c13      	ldr	r4, [pc, #76]	; (8002f90 <cunit_logger_init+0xcc>)
       0x5U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002f44:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002f48:	f7ff ffaa 	bl	8002ea0 <NVIC_EncodePriority.constprop.1>
 8002f4c:	0080      	lsls	r0, r0, #2
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	b2c0      	uxtb	r0, r0
 8002f54:	f884 0357 	strb.w	r0, [r4, #855]	; 0x357
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f58:	60a3      	str	r3, [r4, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f5a:	68e8      	ldr	r0, [r5, #12]
                        62U, 0U));
  NVIC_EnableIRQ((IRQn_Type)87);
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002f5c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002f60:	f7ff ff9e 	bl	8002ea0 <NVIC_EncodePriority.constprop.1>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	0080      	lsls	r0, r0, #2
 8002f66:	b2c0      	uxtb	r0, r0
 8002f68:	f884 0359 	strb.w	r0, [r4, #857]	; 0x359
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f70:	60a3      	str	r3, [r4, #8]
                      62U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
  return status;
}
 8002f72:	2000      	movs	r0, #0
 8002f74:	bd38      	pop	{r3, r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	48028500 	.word	0x48028500
 8002f7c:	40030000 	.word	0x40030000
 8002f80:	0800c2b0 	.word	0x0800c2b0
 8002f84:	0800c28c 	.word	0x0800c28c
 8002f88:	0800c2a4 	.word	0x0800c2a4
 8002f8c:	e000ed00 	.word	0xe000ed00
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <USIC0_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void cunit_logger_TX_HANDLER()
{
  UART_lTransmitHandler(&cunit_logger);
 8002f94:	4801      	ldr	r0, [pc, #4]	; (8002f9c <USIC0_3_IRQHandler+0x8>)
 8002f96:	f7ff beeb 	b.w	8002d70 <UART_lTransmitHandler>
 8002f9a:	bf00      	nop
 8002f9c:	1ffed050 	.word	0x1ffed050

08002fa0 <USIC0_5_IRQHandler>:
}

/*Receive ISR*/
void cunit_logger_RX_HANDLER()
{
  UART_lReceiveHandler(&cunit_logger);
 8002fa0:	4801      	ldr	r0, [pc, #4]	; (8002fa8 <USIC0_5_IRQHandler+0x8>)
 8002fa2:	f7ff bf2b 	b.w	8002dfc <UART_lReceiveHandler>
 8002fa6:	bf00      	nop
 8002fa8:	1ffed050 	.word	0x1ffed050

08002fac <TIMER_Start>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8002fac:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8002fb0:	b133      	cbz	r3, 8002fc0 <TIMER_Start+0x14>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002fb2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002fb6:	b92b      	cbnz	r3, 8002fc4 <TIMER_Start+0x18>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002fb8:	6942      	ldr	r2, [r0, #20]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002fba:	2101      	movs	r1, #1
 8002fbc:	60d1      	str	r1, [r2, #12]
 8002fbe:	e001      	b.n	8002fc4 <TIMER_Start+0x18>
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	4770      	bx	lr
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002fc4:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8002fc6:	4770      	bx	lr

08002fc8 <TIMER_GetTimerStatus>:
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002fc8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002fcc:	b923      	cbnz	r3, 8002fd8 <TIMER_GetTimerStatus+0x10>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 8002fce:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8002fd0:	6898      	ldr	r0, [r3, #8]
 8002fd2:	f000 0001 	and.w	r0, r0, #1
 8002fd6:	4770      	bx	lr
{
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 8002fd8:	2000      	movs	r0, #0
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
}
 8002fda:	4770      	bx	lr

08002fdc <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	4604      	mov	r4, r0
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8002fe0:	f7ff fff2 	bl	8002fc8 <TIMER_GetTimerStatus>
 8002fe4:	b148      	cbz	r0, 8002ffa <TIMER_Stop+0x1e>
 8002fe6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8002fea:	b133      	cbz	r3, 8002ffa <TIMER_Stop+0x1e>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002fec:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8002ff0:	b928      	cbnz	r0, 8002ffe <TIMER_Stop+0x22>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8002ff2:	6963      	ldr	r3, [r4, #20]
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	611a      	str	r2, [r3, #16]
 8002ff8:	bd10      	pop	{r4, pc}
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	bd10      	pop	{r4, pc}
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002ffe:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8003000:	bd10      	pop	{r4, pc}

08003002 <TIMER_ClearEvent>:
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003002:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003006:	b933      	cbnz	r3, 8003016 <TIMER_ClearEvent+0x14>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8003008:	6942      	ldr	r2, [r0, #20]
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 800300a:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8003016:	4770      	bx	lr

08003018 <TIMER_Clear>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8003018:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800301c:	b133      	cbz	r3, 800302c <TIMER_Clear+0x14>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800301e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003022:	b92b      	cbnz	r3, 8003030 <TIMER_Clear+0x18>
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8003024:	6942      	ldr	r2, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8003026:	2102      	movs	r1, #2
 8003028:	6111      	str	r1, [r2, #16]
 800302a:	e001      	b.n	8003030 <TIMER_Clear+0x18>
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 800302c:	2001      	movs	r0, #1
 800302e:	4770      	bx	lr
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 8003030:	2000      	movs	r0, #0
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
 8003032:	4770      	bx	lr

08003034 <TIMER_CCU4_lShadowTransfer>:
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8003034:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003036:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8003038:	635a      	str	r2, [r3, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 800303a:	2200      	movs	r2, #0
 800303c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 800303e:	6903      	ldr	r3, [r0, #16]
 8003040:	68c2      	ldr	r2, [r0, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8003044:	611a      	str	r2, [r3, #16]
 8003046:	4770      	bx	lr

08003048 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	4605      	mov	r5, r0
 800304c:	460e      	mov	r6, r1

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
 800304e:	f7ff ffbb 	bl	8002fc8 <TIMER_GetTimerStatus>
 8003052:	bb90      	cbnz	r0, 80030ba <TIMER_SetTimeInterval+0x72>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8003054:	68ab      	ldr	r3, [r5, #8]
 8003056:	429e      	cmp	r6, r3
 8003058:	d32f      	bcc.n	80030ba <TIMER_SetTimeInterval+0x72>
 800305a:	686b      	ldr	r3, [r5, #4]
 800305c:	429e      	cmp	r6, r3
 800305e:	d82c      	bhi.n	80030ba <TIMER_SetTimeInterval+0x72>
 8003060:	f1c0 020f 	rsb	r2, r0, #15
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8003064:	fa23 f202 	lsr.w	r2, r3, r2
 8003068:	4296      	cmp	r6, r2
 800306a:	d901      	bls.n	8003070 <TIMER_SetTimeInterval+0x28>
      {
        lprescaler++;
 800306c:	3001      	adds	r0, #1
 800306e:	e7f7      	b.n	8003060 <TIMER_SetTimeInterval+0x18>
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003070:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8003074:	bb0b      	cbnz	r3, 80030ba <TIMER_SetTimeInterval+0x72>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8003076:	692b      	ldr	r3, [r5, #16]
 8003078:	681f      	ldr	r7, [r3, #0]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 800307a:	69eb      	ldr	r3, [r5, #28]
 800307c:	f000 040f 	and.w	r4, r0, #15
 8003080:	7919      	ldrb	r1, [r3, #4]
 8003082:	b2e2      	uxtb	r2, r4
 8003084:	f362 0103 	bfi	r1, r2, #0, #4
 8003088:	7119      	strb	r1, [r3, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 800308a:	fba6 0107 	umull	r0, r1, r6, r7
 800308e:	f008 f85d 	bl	800b14c <__aeabi_llsr>
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8003092:	a30b      	add	r3, pc, #44	; (adr r3, 80030c0 <TIMER_SetTimeInterval+0x78>)
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f008 f864 	bl	800b164 <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 800309c:	b280      	uxth	r0, r0
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 800309e:	2801      	cmp	r0, #1
        {
          (handle_ptr->period_value)--;
 80030a0:	bf88      	it	hi
 80030a2:	f100 30ff 	addhi.w	r0, r0, #4294967295
 80030a6:	8468      	strh	r0, [r5, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, (XMC_CCU4_SLICE_PRESCALER_t)handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 80030a8:	4621      	mov	r1, r4
 80030aa:	6968      	ldr	r0, [r5, #20]
 80030ac:	f7fd fc1f 	bl	80008ee <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 80030b0:	4628      	mov	r0, r5
 80030b2:	f7ff ffbf 	bl	8003034 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 80030b6:	2000      	movs	r0, #0
 80030b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 80030ba:	2001      	movs	r0, #1
      }
#endif
    }
  }
  return (status);
}
 80030bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030be:	bf00      	nop
 80030c0:	05f5e100 	.word	0x05f5e100
 80030c4:	00000000 	.word	0x00000000

080030c8 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4604      	mov	r4, r0
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80030cc:	6900      	ldr	r0, [r0, #16]
 80030ce:	f000 fd3d 	bl	8003b4c <GLOBAL_CCU4_Init>

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80030d2:	6923      	ldr	r3, [r4, #16]
 80030d4:	6899      	ldr	r1, [r3, #8]
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80030d6:	4605      	mov	r5, r0
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80030d8:	7e20      	ldrb	r0, [r4, #24]
 80030da:	68ca      	ldr	r2, [r1, #12]
 80030dc:	2301      	movs	r3, #1
 80030de:	4083      	lsls	r3, r0
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60cb      	str	r3, [r1, #12]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80030e4:	6960      	ldr	r0, [r4, #20]
 80030e6:	69e1      	ldr	r1, [r4, #28]
 80030e8:	f7fd fbea 	bl	80008c0 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7ff ffa1 	bl	8003034 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80030f2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80030f6:	b163      	cbz	r3, 8003112 <TIMER_CCU4_lInit+0x4a>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80030f8:	f894 2020 	ldrb.w	r2, [r4, #32]
 80030fc:	6960      	ldr	r0, [r4, #20]
 80030fe:	2100      	movs	r1, #0
 8003100:	f7fd fbfe 	bl	8000900 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8003104:	6962      	ldr	r2, [r4, #20]
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003106:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8003112:	6963      	ldr	r3, [r4, #20]

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003114:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8003118:	2202      	movs	r2, #2
 800311a:	611a      	str	r2, [r3, #16]
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 800311c:	2201      	movs	r2, #1
 800311e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8003122:	b101      	cbz	r1, 8003126 <TIMER_CCU4_lInit+0x5e>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8003124:	60da      	str	r2, [r3, #12]
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
  }

  return (status);
}
 8003126:	4628      	mov	r0, r5
 8003128:	bd38      	pop	{r3, r4, r5, pc}

0800312a <TIMER_Init>:

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 800312a:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800312e:	b922      	cbnz	r2, 800313a <TIMER_Init+0x10>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8003130:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003134:	b90b      	cbnz	r3, 800313a <TIMER_Init+0x10>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8003136:	f7ff bfc7 	b.w	80030c8 <TIMER_CCU4_lInit>
    }
#endif
  }

  return (status);
}
 800313a:	2000      	movs	r0, #0
 800313c:	4770      	bx	lr
	...

08003140 <INTERRUPT_Init>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003140:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <INTERRUPT_Init+0x84>)

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	68d9      	ldr	r1, [r3, #12]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003146:	7805      	ldrb	r5, [r0, #0]
 8003148:	7842      	ldrb	r2, [r0, #1]
 800314a:	7887      	ldrb	r7, [r0, #2]
 800314c:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	f1c1 0e07 	rsb	lr, r1, #7
 8003154:	f1be 0f06 	cmp.w	lr, #6
 8003158:	bf28      	it	cs
 800315a:	f04f 0e06 	movcs.w	lr, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	b101      	cbz	r1, 8003162 <INTERRUPT_Init+0x22>
 8003160:	3901      	subs	r1, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003162:	2401      	movs	r4, #1
 8003164:	fa04 f301 	lsl.w	r3, r4, r1
 8003168:	3b01      	subs	r3, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316a:	fa04 f40e 	lsl.w	r4, r4, lr
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800316e:	ea03 0607 	and.w	r6, r3, r7

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003172:	1e63      	subs	r3, r4, #1
 8003174:	4013      	ands	r3, r2
 8003176:	408b      	lsls	r3, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003178:	b26a      	sxtb	r2, r5
 800317a:	2a00      	cmp	r2, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800317c:	ea43 0306 	orr.w	r3, r3, r6
 8003180:	ea4f 0383 	mov.w	r3, r3, lsl #2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	bfaf      	iteee	ge
 8003186:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318a:	f005 050f 	andlt.w	r5, r5, #15
 800318e:	4a0e      	ldrlt	r2, [pc, #56]	; (80031c8 <INTERRUPT_Init+0x88>)
 8003190:	b2db      	uxtblt	r3, r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003192:	bfa5      	ittet	ge
 8003194:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
 8003198:	b2db      	uxtbge	r3, r3
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	5553      	strblt	r3, [r2, r5]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319c:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80031a0:	78c3      	ldrb	r3, [r0, #3]
 80031a2:	b16b      	cbz	r3, 80031c0 <INTERRUPT_Init+0x80>
 80031a4:	7802      	ldrb	r2, [r0, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80031a6:	b253      	sxtb	r3, r2
 80031a8:	2b00      	cmp	r3, #0
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031aa:	bfa1      	itttt	ge
 80031ac:	2101      	movge	r1, #1
 80031ae:	f002 021f 	andge.w	r2, r2, #31
 80031b2:	fa01 f202 	lslge.w	r2, r1, r2
 80031b6:	095b      	lsrge	r3, r3, #5
 80031b8:	bfa4      	itt	ge
 80031ba:	4904      	ldrge	r1, [pc, #16]	; (80031cc <INTERRUPT_Init+0x8c>)
 80031bc:	f841 2023 	strge.w	r2, [r1, r3, lsl #2]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
 80031c0:	2000      	movs	r0, #0
 80031c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c4:	e000ed00 	.word	0xe000ed00
 80031c8:	e000ed14 	.word	0xe000ed14
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 80031d0:	b530      	push	{r4, r5, lr}
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 80031d2:	6845      	ldr	r5, [r0, #4]
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 80031d4:	460c      	mov	r4, r1
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 80031d6:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27

  if ((handle->config->txFIFO_size > 0))
 80031da:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 80031de:	2301      	movs	r3, #1
 80031e0:	fa03 f201 	lsl.w	r2, r3, r1

  if ((handle->config->txFIFO_size > 0))
 80031e4:	b10d      	cbz	r5, 80031ea <I2C_MASTER_lReconfigureRxFIFO+0x1a>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 80031e6:	40ab      	lsls	r3, r5
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	42a2      	cmp	r2, r4
 80031ee:	bf28      	it	cs
 80031f0:	4622      	movcs	r2, r4
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf28      	it	cs
 80031f6:	461a      	movcs	r2, r3
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 80031f8:	6800      	ldr	r0, [r0, #0]
 80031fa:	3a01      	subs	r2, #1

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
}
 80031fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003200:	f7fe bc58 	b.w	8001ab4 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>

08003204 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:
 } /* end of else */
}

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 8003204:	b570      	push	{r4, r5, r6, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8003206:	6885      	ldr	r5, [r0, #8]
 } /* end of else */
}

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 8003208:	4604      	mov	r4, r0
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 800320a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800320e:	6800      	ldr	r0, [r0, #0]
 8003210:	f7fd fc92 	bl	8000b38 <XMC_I2C_CH_DisableEvent>

  ptr_runtime = handle->runtime;

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));

  if (ptr_runtime->send_stop == true)
 8003214:	69eb      	ldr	r3, [r5, #28]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d109      	bne.n	800322e <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2a>
  {
    ptr_runtime->bus_acquired = false;
 800321a:	2300      	movs	r3, #0
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8003222:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003224:	f043 0310 	orr.w	r3, r3, #16
 8003228:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
 800322a:	f7fd fc19 	bl	8000a60 <XMC_I2C_CH_MasterStop>
    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 800322e:	6822      	ldr	r2, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8003230:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	d4fc      	bmi.n	8003230 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2c>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 8003236:	2300      	movs	r3, #0
 8003238:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	b113      	cbz	r3, 8003248 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x44>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
  }
}
 8003242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ptr_runtime->tx_busy = false;

  if (handle->config->tx_cbhandler != NULL)
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 8003246:	4718      	bx	r3
 8003248:	bd70      	pop	{r4, r5, r6, pc}

0800324a <I2C_MASTER_lSendStart_Or_RepeatedStart>:
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
  if (handle->runtime->bus_acquired == true)
 800324a:	6883      	ldr	r3, [r0, #8]
 800324c:	6800      	ldr	r0, [r0, #0]
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 800324e:	b510      	push	{r4, lr}
  if (handle->runtime->bus_acquired == true)
 8003250:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
 8003254:	b289      	uxth	r1, r1
 8003256:	b13c      	cbz	r4, 8003268 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x1e>
 8003258:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800325a:	f043 0308 	orr.w	r3, r3, #8
 800325e:	64c3      	str	r3, [r0, #76]	; 0x4c
  else
  {
    handle->runtime->bus_acquired = true;
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
  }
}
 8003260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8003264:	f7fd bbe4 	b.w	8000a30 <XMC_I2C_CH_MasterRepeatedStart>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8003268:	2401      	movs	r4, #1
 800326a:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
 800326e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	64c3      	str	r3, [r0, #76]	; 0x4c
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
  }
}
 8003276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 800327a:	f7fd bbc1 	b.w	8000a00 <XMC_I2C_CH_MasterStart>

0800327e <I2C_MASTER_lSendStop_JumpTo_RxCallback>:
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 800327e:	b570      	push	{r4, r5, r6, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8003280:	6885      	ldr	r5, [r0, #8]

  if (ptr_runtime->send_stop == true)
 8003282:	69eb      	ldr	r3, [r5, #28]
 8003284:	2b01      	cmp	r3, #1
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 8003286:	4604      	mov	r4, r0
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;

  if (ptr_runtime->send_stop == true)
 8003288:	d10c      	bne.n	80032a4 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x26>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800328e:	061a      	lsls	r2, r3, #24
 8003290:	d4fc      	bmi.n	800328c <I2C_MASTER_lSendStop_JumpTo_RxCallback+0xe>

    ptr_runtime->bus_acquired = false;
 8003292:	2300      	movs	r3, #0
 8003294:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8003298:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800329a:	f043 0310 	orr.w	r3, r3, #16
 800329e:	64c3      	str	r3, [r0, #76]	; 0x4c
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
  XMC_I2C_CH_MasterStop(handle->channel);
 80032a0:	f7fd fbde 	bl	8000a60 <XMC_I2C_CH_MasterStop>

    I2C_MASTER_SendStop(handle);
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	d4fc      	bmi.n	80032a6 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x28>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 80032b2:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 80032b6:	6863      	ldr	r3, [r4, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	b113      	cbz	r3, 80032c2 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x44>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
  }
}
 80032bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ptr_runtime->tx_busy = false;

  if (handle->config->rx_cbhandler != NULL)
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 80032c0:	4718      	bx	r3
 80032c2:	bd70      	pop	{r4, r5, r6, pc}

080032c4 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 80032c4:	b508      	push	{r3, lr}
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 80032c6:	b120      	cbz	r0, 80032d2 <I2C_MASTER_Init+0xe>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 80032c8:	6843      	ldr	r3, [r0, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 80032ce:	2000      	movs	r0, #0
 80032d0:	bd08      	pop	{r3, pc}
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80032d2:	2001      	movs	r0, #1
  }
  return (status);
}
 80032d4:	bd08      	pop	{r3, pc}

080032d6 <I2C_MASTER_ClearFlag>:
}

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 80032d6:	6802      	ldr	r2, [r0, #0]
 80032d8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80032da:	4319      	orrs	r1, r3
 80032dc:	64d1      	str	r1, [r2, #76]	; 0x4c
 80032de:	4770      	bx	lr

080032e0 <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
 80032e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e4:	4690      	mov	r8, r2
 80032e6:	4606      	mov	r6, r0
 80032e8:	9a06      	ldr	r2, [sp, #24]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
 80032ea:	6885      	ldr	r5, [r0, #8]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
 80032ec:	460c      	mov	r4, r1
 80032ee:	b911      	cbnz	r1, 80032f6 <I2C_MASTER_StartTransmitIRQ+0x16>
 80032f0:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80032f4:	b379      	cbz	r1, 8003356 <I2C_MASTER_StartTransmitIRQ+0x76>
 80032f6:	b373      	cbz	r3, 8003356 <I2C_MASTER_StartTransmitIRQ+0x76>
 80032f8:	b36a      	cbz	r2, 8003356 <I2C_MASTER_StartTransmitIRQ+0x76>
  {
  status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 80032fa:	2100      	movs	r1, #0
 80032fc:	61a9      	str	r1, [r5, #24]

    if (ptr_runtime->tx_busy == false)
 80032fe:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
 8003302:	f001 07ff 	and.w	r7, r1, #255	; 0xff
 8003306:	bb49      	cbnz	r1, 800335c <I2C_MASTER_StartTransmitIRQ+0x7c>
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
 8003308:	602b      	str	r3, [r5, #0]
    ptr_runtime->tx_data_count = size;

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
    ptr_runtime->tx_busy = true;
 800330a:	2301      	movs	r3, #1
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = size;

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
 800330c:	60ef      	str	r7, [r5, #12]
    ptr_runtime->tx_busy = true;
 800330e:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
    ptr_runtime->send_stop = send_stop;
 8003312:	f89d 301c 	ldrb.w	r3, [sp, #28]

    if (ptr_runtime->tx_busy == false)
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = size;
 8003316:	60aa      	str	r2, [r5, #8]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 8003318:	6830      	ldr	r0, [r6, #0]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
    ptr_runtime->tx_busy = true;
    ptr_runtime->send_stop = send_stop;
 800331a:	61eb      	str	r3, [r5, #28]
 800331c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003320:	f7fd fbfc 	bl	8000b1c <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 8003324:	6830      	ldr	r0, [r6, #0]
 8003326:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800332a:	2110      	movs	r1, #16
 800332c:	f7fe fbd3 	bl	8001ad6 <XMC_USIC_CH_SetInterruptNodePointer>

    /* Enable ACK event */
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);

    if (send_start == true)
 8003330:	b13c      	cbz	r4, 8003342 <I2C_MASTER_StartTransmitIRQ+0x62>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
 8003332:	4630      	mov	r0, r6
 8003334:	4641      	mov	r1, r8
 8003336:	463a      	mov	r2, r7
 8003338:	f7ff ff87 	bl	800324a <I2C_MASTER_lSendStart_Or_RepeatedStart>
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 800333c:	4638      	mov	r0, r7
 800333e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8003342:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
    }
    else
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 8003346:	6832      	ldr	r2, [r6, #0]
 8003348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334c:	408b      	lsls	r3, r1
 800334e:	6693      	str	r3, [r2, #104]	; 0x68
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8003350:	4620      	mov	r0, r4
 8003352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
  {
  status = I2C_MASTER_STATUS_FAILURE;
 8003356:	2001      	movs	r0, #1
 8003358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
 800335c:	2002      	movs	r0, #2

    status = I2C_MASTER_STATUS_SUCCESS;
  }
  }
  return (status);
}
 800335e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003362 <I2C_MASTER_Transmit>:
}

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8003362:	b570      	push	{r4, r5, r6, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003364:	6846      	ldr	r6, [r0, #4]
}

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8003366:	f89d 4014 	ldrb.w	r4, [sp, #20]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800336a:	f896 6024 	ldrb.w	r6, [r6, #36]	; 0x24
 800336e:	b926      	cbnz	r6, 800337a <I2C_MASTER_Transmit+0x18>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
 8003370:	9405      	str	r4, [sp, #20]
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
} /* end of function */
 8003372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  status = I2C_MASTER_STATUS_BUSY;

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
 8003376:	f7ff bfb3 	b.w	80032e0 <I2C_MASTER_StartTransmitIRQ>
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
} /* end of function */
 800337a:	2002      	movs	r0, #2
 800337c:	bd70      	pop	{r4, r5, r6, pc}

0800337e <I2C_MASTER_StartReceiveIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
 800337e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003380:	4616      	mov	r6, r2
 8003382:	4605      	mov	r5, r0
 8003384:	9a06      	ldr	r2, [sp, #24]
 8003386:	f89d e020 	ldrb.w	lr, [sp, #32]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
  ptr_runtime = handle->runtime;
 800338a:	6884      	ldr	r4, [r0, #8]

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
 800338c:	460f      	mov	r7, r1
 800338e:	b921      	cbnz	r1, 800339a <I2C_MASTER_StartReceiveIRQ+0x1c>
 8003390:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8003394:	2900      	cmp	r1, #0
 8003396:	f000 80fe 	beq.w	8003596 <I2C_MASTER_StartReceiveIRQ+0x218>
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80fb 	beq.w	8003596 <I2C_MASTER_StartReceiveIRQ+0x218>
 80033a0:	2a00      	cmp	r2, #0
 80033a2:	f000 80f8 	beq.w	8003596 <I2C_MASTER_StartReceiveIRQ+0x218>
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
 80033a6:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 80033aa:	f001 00ff 	and.w	r0, r1, #255	; 0xff
 80033ae:	2900      	cmp	r1, #0
 80033b0:	f040 80f3 	bne.w	800359a <I2C_MASTER_StartReceiveIRQ+0x21c>
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
 80033b4:	6063      	str	r3, [r4, #4]
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
 80033b6:	6023      	str	r3, [r4, #0]
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
 80033b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80033bc:	61e3      	str	r3, [r4, #28]
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
 80033be:	686b      	ldr	r3, [r5, #4]
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
 80033c0:	6122      	str	r2, [r4, #16]
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 80033c2:	2101      	movs	r1, #1
 80033c4:	61a1      	str	r1, [r4, #24]
      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
 80033c6:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
    ptr_runtime->rx_busy = true;
 80033ca:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
 80033ce:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
 80033d2:	6160      	str	r0, [r4, #20]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
    ptr_runtime->rx_data_count = count;
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
 80033d4:	60a2      	str	r2, [r4, #8]
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;
 80033d6:	60e0      	str	r0, [r4, #12]
    ptr_runtime->tx_data = data;
    ptr_runtime->tx_data_count = count;
    ptr_runtime->tx_busy = true;
    ptr_runtime->rx_busy = true;
    ptr_runtime->send_stop = send_stop;
    ptr_runtime->send_nack = send_nack;
 80033d8:	f8c4 e020 	str.w	lr, [r4, #32]
 80033dc:	6828      	ldr	r0, [r5, #0]
    ptr_runtime->rx_data_index = 0U;
    ptr_runtime->tx_data_index = 0U;

    if (handle->config->rxFIFO_size > 0)
 80033de:	2900      	cmp	r1, #0
 80033e0:	d07b      	beq.n	80034da <I2C_MASTER_StartReceiveIRQ+0x15c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80033e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033e6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);
 80033ea:	4611      	mov	r1, r2
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7ff feef 	bl	80031d0 <I2C_MASTER_lReconfigureRxFIFO>

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 80033f2:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 80033f4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80033f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80033fc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8003400:	686b      	ldr	r3, [r5, #4]
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
 8003402:	2f00      	cmp	r7, #0
 8003404:	d037      	beq.n	8003476 <I2C_MASTER_StartReceiveIRQ+0xf8>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8003406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800340a:	3b01      	subs	r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d909      	bls.n	8003424 <I2C_MASTER_StartReceiveIRQ+0xa6>
 8003410:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003414:	f7fd fb82 	bl	8000b1c <XMC_I2C_CH_EnableEvent>
 8003418:	6828      	ldr	r0, [r5, #0]
 800341a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800341e:	2110      	movs	r1, #16
 8003420:	f7fe fb59 	bl	8001ad6 <XMC_USIC_CH_SetInterruptNodePointer>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 8003424:	2201      	movs	r2, #1
 8003426:	4628      	mov	r0, r5
 8003428:	4631      	mov	r1, r6
 800342a:	f7ff ff0e 	bl	800324a <I2C_MASTER_lSendStart_Or_RepeatedStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 800342e:	686b      	ldr	r3, [r5, #4]
 8003430:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003434:	2a02      	cmp	r2, #2
 8003436:	f040 808d 	bne.w	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 800343a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06a      	beq.n	8003518 <I2C_MASTER_StartReceiveIRQ+0x19a>
 8003442:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003444:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8003448:	04d9      	lsls	r1, r3, #19
 800344a:	f100 8083 	bmi.w	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800344e:	68e3      	ldr	r3, [r4, #12]
 8003450:	68a2      	ldr	r2, [r4, #8]
 8003452:	4293      	cmp	r3, r2
 8003454:	d27e      	bcs.n	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003456:	68e3      	ldr	r3, [r4, #12]
 8003458:	3301      	adds	r3, #1
 800345a:	4293      	cmp	r3, r2
 800345c:	d105      	bne.n	800346a <I2C_MASTER_StartReceiveIRQ+0xec>
 800345e:	6a23      	ldr	r3, [r4, #32]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <I2C_MASTER_StartReceiveIRQ+0xec>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003464:	f7fd fb3a 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
 8003468:	e001      	b.n	800346e <I2C_MASTER_StartReceiveIRQ+0xf0>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800346a:	f7fd fb21 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
        }
      ptr_runtime->tx_data_index++;
 800346e:	68e3      	ldr	r3, [r4, #12]
 8003470:	3301      	adds	r3, #1
 8003472:	60e3      	str	r3, [r4, #12]
 8003474:	e7e5      	b.n	8003442 <I2C_MASTER_StartReceiveIRQ+0xc4>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
 8003476:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800347a:	b1f3      	cbz	r3, 80034ba <I2C_MASTER_StartReceiveIRQ+0x13c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 800347c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003480:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003484:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8003488:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800348a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800348e:	04da      	lsls	r2, r3, #19
 8003490:	d460      	bmi.n	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003492:	68e3      	ldr	r3, [r4, #12]
 8003494:	68a2      	ldr	r2, [r4, #8]
 8003496:	4293      	cmp	r3, r2
 8003498:	d25c      	bcs.n	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 800349a:	68e3      	ldr	r3, [r4, #12]
 800349c:	3301      	adds	r3, #1
 800349e:	4293      	cmp	r3, r2
 80034a0:	d105      	bne.n	80034ae <I2C_MASTER_StartReceiveIRQ+0x130>
 80034a2:	6a23      	ldr	r3, [r4, #32]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <I2C_MASTER_StartReceiveIRQ+0x130>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80034a8:	f7fd fb18 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
 80034ac:	e001      	b.n	80034b2 <I2C_MASTER_StartReceiveIRQ+0x134>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80034ae:	f7fd faff 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 80034b2:	68e3      	ldr	r3, [r4, #12]
 80034b4:	3301      	adds	r3, #1
 80034b6:	60e3      	str	r3, [r4, #12]
 80034b8:	e7e6      	b.n	8003488 <I2C_MASTER_StartReceiveIRQ+0x10a>
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	68a2      	ldr	r2, [r4, #8]
 80034be:	4293      	cmp	r3, r2
 80034c0:	d248      	bcs.n	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	3301      	adds	r3, #1
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d102      	bne.n	80034d0 <I2C_MASTER_StartReceiveIRQ+0x152>
 80034ca:	6a23      	ldr	r3, [r4, #32]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d039      	beq.n	8003544 <I2C_MASTER_StartReceiveIRQ+0x1c6>
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
  channel->PSCR |= flag;
 80034d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80034d2:	f443 4372 	orr.w	r3, r3, #61952	; 0xf200
 80034d6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80034d8:	e037      	b.n	800354a <I2C_MASTER_StartReceiveIRQ+0x1cc>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 80034da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80034dc:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80034e0:	6401      	str	r1, [r0, #64]	; 0x40
  ptr_runtime = handle->runtime;

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
 80034e2:	b32f      	cbz	r7, 8003530 <I2C_MASTER_StartReceiveIRQ+0x1b2>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 80034e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e8:	3b01      	subs	r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d909      	bls.n	8003502 <I2C_MASTER_StartReceiveIRQ+0x184>
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 80034ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80034f2:	f7fd fb13 	bl	8000b1c <XMC_I2C_CH_EnableEvent>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 80034f6:	6828      	ldr	r0, [r5, #0]
 80034f8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80034fc:	2110      	movs	r1, #16
 80034fe:	f7fe faea 	bl	8001ad6 <XMC_USIC_CH_SetInterruptNodePointer>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 8003502:	4628      	mov	r0, r5
 8003504:	4631      	mov	r1, r6
 8003506:	2201      	movs	r2, #1
 8003508:	f7ff fe9f 	bl	800324a <I2C_MASTER_lSendStart_Or_RepeatedStart>

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 800350c:	686b      	ldr	r3, [r5, #4]
 800350e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003512:	3b01      	subs	r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d81d      	bhi.n	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003518:	68e3      	ldr	r3, [r4, #12]
 800351a:	68a2      	ldr	r2, [r4, #8]
 800351c:	3301      	adds	r3, #1
 800351e:	4293      	cmp	r3, r2
 8003520:	d104      	bne.n	800352c <I2C_MASTER_StartReceiveIRQ+0x1ae>
 8003522:	6a23      	ldr	r3, [r4, #32]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <I2C_MASTER_StartReceiveIRQ+0x1ae>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003528:	6828      	ldr	r0, [r5, #0]
 800352a:	e00b      	b.n	8003544 <I2C_MASTER_StartReceiveIRQ+0x1c6>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800352c:	6828      	ldr	r0, [r5, #0]
 800352e:	e00c      	b.n	800354a <I2C_MASTER_StartReceiveIRQ+0x1cc>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
 8003530:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003534:	b983      	cbnz	r3, 8003558 <I2C_MASTER_StartReceiveIRQ+0x1da>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003536:	68e3      	ldr	r3, [r4, #12]
 8003538:	3301      	adds	r3, #1
 800353a:	4293      	cmp	r3, r2
 800353c:	d105      	bne.n	800354a <I2C_MASTER_StartReceiveIRQ+0x1cc>
 800353e:	f1be 0f01 	cmp.w	lr, #1
 8003542:	d102      	bne.n	800354a <I2C_MASTER_StartReceiveIRQ+0x1cc>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003544:	f7fd faca 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
 8003548:	e001      	b.n	800354e <I2C_MASTER_StartReceiveIRQ+0x1d0>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800354a:	f7fd fab1 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }

      ptr_runtime->tx_data_index++;
 800354e:	68e3      	ldr	r3, [r4, #12]
 8003550:	3301      	adds	r3, #1
 8003552:	60e3      	str	r3, [r4, #12]
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
    }
    status = I2C_MASTER_STATUS_SUCCESS;
 8003554:	2000      	movs	r0, #0
 8003556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003558:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800355c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003560:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8003564:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003566:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800356a:	04db      	lsls	r3, r3, #19
 800356c:	d4f2      	bmi.n	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	68a2      	ldr	r2, [r4, #8]
 8003572:	4293      	cmp	r3, r2
 8003574:	d2ee      	bcs.n	8003554 <I2C_MASTER_StartReceiveIRQ+0x1d6>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003576:	68e3      	ldr	r3, [r4, #12]
 8003578:	3301      	adds	r3, #1
 800357a:	4293      	cmp	r3, r2
 800357c:	d105      	bne.n	800358a <I2C_MASTER_StartReceiveIRQ+0x20c>
 800357e:	6a23      	ldr	r3, [r4, #32]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d102      	bne.n	800358a <I2C_MASTER_StartReceiveIRQ+0x20c>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003584:	f7fd faaa 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
 8003588:	e001      	b.n	800358e <I2C_MASTER_StartReceiveIRQ+0x210>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800358a:	f7fd fa91 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 800358e:	68e3      	ldr	r3, [r4, #12]
 8003590:	3301      	adds	r3, #1
 8003592:	60e3      	str	r3, [r4, #12]
 8003594:	e7e6      	b.n	8003564 <I2C_MASTER_StartReceiveIRQ+0x1e6>
  ptr_runtime = handle->runtime;

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8003596:	2001      	movs	r0, #1
 8003598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
 800359a:	2002      	movs	r0, #2
    }
    status = I2C_MASTER_STATUS_SUCCESS;
  }
  }
  return (status);
}
 800359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800359e <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 800359e:	b5f0      	push	{r4, r5, r6, r7, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80035a0:	6847      	ldr	r7, [r0, #4]
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 80035a2:	f89d 5018 	ldrb.w	r5, [sp, #24]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80035a6:	f897 7025 	ldrb.w	r7, [r7, #37]	; 0x25
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 80035aa:	f89d 401c 	ldrb.w	r4, [sp, #28]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80035ae:	b92f      	cbnz	r7, 80035bc <I2C_MASTER_Receive+0x1e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
 80035b0:	9506      	str	r5, [sp, #24]
 80035b2:	9407      	str	r4, [sp, #28]
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
}
 80035b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  status = I2C_MASTER_STATUS_BUSY;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
 80035b8:	f7ff bee1 	b.w	800337e <I2C_MASTER_StartReceiveIRQ>
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
}
 80035bc:	2002      	movs	r0, #2
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035c0 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 80035c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80035c4:	6884      	ldr	r4, [r0, #8]
  fifo_lindex = 0U;

  if (ptr_runtime->rx_busy == true)
 80035c6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 80035ca:	4605      	mov	r5, r0
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
  fifo_lindex = 0U;

  if (ptr_runtime->rx_busy == true)
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80ab 	beq.w	8003728 <I2C_MASTER_ReceiveHandler+0x168>
  {
    if (handle->config->rxFIFO_size > 0)
 80035d2:	6843      	ldr	r3, [r0, #4]
 80035d4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d077      	beq.n	80036cc <I2C_MASTER_ReceiveHandler+0x10c>
 80035dc:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80035de:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 80035e2:	f013 0608 	ands.w	r6, r3, #8
 80035e6:	d116      	bne.n	8003616 <I2C_MASTER_ReceiveHandler+0x56>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 80035e8:	6967      	ldr	r7, [r4, #20]
 80035ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 80035ee:	f7fd fa8b 	bl	8000b08 <XMC_I2C_CH_GetReceivedData>
 80035f2:	f808 0007 	strb.w	r0, [r8, r7]
        ptr_runtime->rx_data_index++;
 80035f6:	6963      	ldr	r3, [r4, #20]
 80035f8:	3301      	adds	r3, #1
 80035fa:	6163      	str	r3, [r4, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 80035fc:	6962      	ldr	r2, [r4, #20]
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <I2C_MASTER_ReceiveHandler+0x1c>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8003604:	682a      	ldr	r2, [r5, #0]
        ptr_runtime->rx_data_index++;

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 8003606:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 800360a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 800360e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003612:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8003616:	6962      	ldr	r2, [r4, #20]
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	429a      	cmp	r2, r3
 800361c:	d23e      	bcs.n	800369c <I2C_MASTER_ReceiveHandler+0xdc>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 800361e:	6961      	ldr	r1, [r4, #20]
 8003620:	4628      	mov	r0, r5
 8003622:	1a59      	subs	r1, r3, r1
 8003624:	f7ff fdd4 	bl	80031d0 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
 8003628:	686a      	ldr	r2, [r5, #4]
 800362a:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 800362e:	b339      	cbz	r1, 8003680 <I2C_MASTER_ReceiveHandler+0xc0>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8003630:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8003634:	2301      	movs	r3, #1
 8003636:	fa03 f601 	lsl.w	r6, r3, r1
 800363a:	4093      	lsls	r3, r2
 800363c:	42b3      	cmp	r3, r6
 800363e:	bf28      	it	cs
 8003640:	4633      	movcs	r3, r6
 8003642:	b2de      	uxtb	r6, r3
 8003644:	2700      	movs	r7, #0
 8003646:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003648:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800364c:	04db      	lsls	r3, r3, #19
 800364e:	d425      	bmi.n	800369c <I2C_MASTER_ReceiveHandler+0xdc>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003650:	68e3      	ldr	r3, [r4, #12]
 8003652:	68a2      	ldr	r2, [r4, #8]
 8003654:	4293      	cmp	r3, r2
 8003656:	d221      	bcs.n	800369c <I2C_MASTER_ReceiveHandler+0xdc>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003658:	68e3      	ldr	r3, [r4, #12]
 800365a:	3301      	adds	r3, #1
 800365c:	4293      	cmp	r3, r2
 800365e:	d105      	bne.n	800366c <I2C_MASTER_ReceiveHandler+0xac>
 8003660:	6a23      	ldr	r3, [r4, #32]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d102      	bne.n	800366c <I2C_MASTER_ReceiveHandler+0xac>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003666:	f7fd fa39 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
 800366a:	e001      	b.n	8003670 <I2C_MASTER_ReceiveHandler+0xb0>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800366c:	f7fd fa20 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
              }
              ptr_runtime->tx_data_index++;
 8003670:	68e3      	ldr	r3, [r4, #12]
 8003672:	3701      	adds	r7, #1
 8003674:	3301      	adds	r3, #1
 8003676:	60e3      	str	r3, [r4, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 8003678:	b2fb      	uxtb	r3, r7
 800367a:	42b3      	cmp	r3, r6
 800367c:	d3e3      	bcc.n	8003646 <I2C_MASTER_ReceiveHandler+0x86>
 800367e:	e00d      	b.n	800369c <I2C_MASTER_ReceiveHandler+0xdc>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003680:	68e3      	ldr	r3, [r4, #12]
 8003682:	68a2      	ldr	r2, [r4, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	4293      	cmp	r3, r2
 8003688:	d14a      	bne.n	8003720 <I2C_MASTER_ReceiveHandler+0x160>
 800368a:	6a23      	ldr	r3, [r4, #32]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d147      	bne.n	8003720 <I2C_MASTER_ReceiveHandler+0x160>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003690:	6828      	ldr	r0, [r5, #0]
 8003692:	f7fd fa23 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
         else
         {
           I2C_MASTER_ReceiveACK(handle);
         }

         ptr_runtime->tx_data_index++;
 8003696:	68e3      	ldr	r3, [r4, #12]
 8003698:	3301      	adds	r3, #1
 800369a:	60e3      	str	r3, [r4, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 800369c:	6962      	ldr	r2, [r4, #20]
 800369e:	6923      	ldr	r3, [r4, #16]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d141      	bne.n	8003728 <I2C_MASTER_ReceiveHandler+0x168>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 80036a4:	682b      	ldr	r3, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 80036a6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80036aa:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 80036ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 80036b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 80036ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d032      	beq.n	8003728 <I2C_MASTER_ReceiveHandler+0x168>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 80036c2:	4628      	mov	r0, r5
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 80036c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 80036c8:	f7ff bdd9 	b.w	800327e <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 80036cc:	6800      	ldr	r0, [r0, #0]
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 80036ce:	6966      	ldr	r6, [r4, #20]
 80036d0:	6867      	ldr	r7, [r4, #4]
 80036d2:	f7fd fa19 	bl	8000b08 <XMC_I2C_CH_GetReceivedData>
 80036d6:	55b8      	strb	r0, [r7, r6]
      ptr_runtime->rx_data_index++;
 80036d8:	6963      	ldr	r3, [r4, #20]
 80036da:	3301      	adds	r3, #1
 80036dc:	6163      	str	r3, [r4, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 80036de:	6962      	ldr	r2, [r4, #20]
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d216      	bcs.n	8003714 <I2C_MASTER_ReceiveHandler+0x154>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80036e6:	68e2      	ldr	r2, [r4, #12]
 80036e8:	68a3      	ldr	r3, [r4, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d21c      	bcs.n	8003728 <I2C_MASTER_ReceiveHandler+0x168>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 80036ee:	68e2      	ldr	r2, [r4, #12]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d106      	bne.n	8003704 <I2C_MASTER_ReceiveHandler+0x144>
 80036f6:	6a23      	ldr	r3, [r4, #32]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d103      	bne.n	8003704 <I2C_MASTER_ReceiveHandler+0x144>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80036fc:	6828      	ldr	r0, [r5, #0]
 80036fe:	f7fd f9ed 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
 8003702:	e002      	b.n	800370a <I2C_MASTER_ReceiveHandler+0x14a>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003704:	6828      	ldr	r0, [r5, #0]
 8003706:	f7fd f9d3 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 800370a:	68e3      	ldr	r3, [r4, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60e3      	str	r3, [r4, #12]
 8003710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 8003714:	682a      	ldr	r2, [r5, #0]
 8003716:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	e7cc      	b.n	80036ba <I2C_MASTER_ReceiveHandler+0xfa>
 8003720:	6828      	ldr	r0, [r5, #0]
 8003722:	f7fd f9c5 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
 8003726:	e7b6      	b.n	8003696 <I2C_MASTER_ReceiveHandler+0xd6>
 8003728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800372c <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 800372c:	b570      	push	{r4, r5, r6, lr}
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 800372e:	6803      	ldr	r3, [r0, #0]
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return (channel->PSR_IICMode);
 8003730:	6c9d      	ldr	r5, [r3, #72]	; 0x48

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8003732:	6843      	ldr	r3, [r0, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 8003736:	4604      	mov	r4, r0
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8003738:	b13b      	cbz	r3, 800374a <I2C_MASTER_ProtocolHandler+0x1e>
 800373a:	06aa      	lsls	r2, r5, #26
 800373c:	d505      	bpl.n	800374a <I2C_MASTER_ProtocolHandler+0x1e>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 800373e:	2120      	movs	r1, #32
 8003740:	f7ff fdc9 	bl	80032d6 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8003744:	6863      	ldr	r3, [r4, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	b143      	cbz	r3, 8003762 <I2C_MASTER_ProtocolHandler+0x36>
 8003750:	066b      	lsls	r3, r5, #25
 8003752:	d506      	bpl.n	8003762 <I2C_MASTER_ProtocolHandler+0x36>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8003754:	4620      	mov	r0, r4
 8003756:	2140      	movs	r1, #64	; 0x40
 8003758:	f7ff fdbd 	bl	80032d6 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 800375c:	6863      	ldr	r3, [r4, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8003762:	6863      	ldr	r3, [r4, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	b163      	cbz	r3, 8003782 <I2C_MASTER_ProtocolHandler+0x56>
 8003768:	f415 7f81 	tst.w	r5, #258	; 0x102
 800376c:	d009      	beq.n	8003782 <I2C_MASTER_ProtocolHandler+0x56>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 800376e:	4620      	mov	r0, r4
 8003770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003774:	f7ff fdaf 	bl	80032d6 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 8003778:	6863      	ldr	r3, [r4, #4]
  }
}
 800377a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
    handle->config->error_cbhandler();
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4718      	bx	r3
 8003782:	bd70      	pop	{r4, r5, r6, pc}

08003784 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 8003784:	b570      	push	{r4, r5, r6, lr}
/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8003786:	6803      	ldr	r3, [r0, #0]
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8003788:	6884      	ldr	r4, [r0, #8]
 800378a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  fifo_min = 0U;

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 800378c:	f412 7fb1 	tst.w	r2, #354	; 0x162
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 8003790:	4605      	mov	r5, r0

  ptr_runtime = handle->runtime;
  fifo_min = 0U;

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 8003792:	d00d      	beq.n	80037b0 <I2C_MASTER_TransmitHandler+0x2c>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003794:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003798:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800379c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 80037a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 80037a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);

    I2C_MASTER_ProtocolHandler(handle);
 80037ac:	f7ff bfbe 	b.w	800372c <I2C_MASTER_ProtocolHandler>
 80037b0:	6842      	ldr	r2, [r0, #4]
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 80037b2:	69a1      	ldr	r1, [r4, #24]
  {
    if (handle->config->txFIFO_size > 0)
 80037b4:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 80037b8:	2900      	cmp	r1, #0
 80037ba:	d154      	bne.n	8003866 <I2C_MASTER_TransmitHandler+0xe2>
 80037bc:	68a1      	ldr	r1, [r4, #8]
  {
    if (handle->config->txFIFO_size > 0)
 80037be:	2800      	cmp	r0, #0
 80037c0:	d044      	beq.n	800384c <I2C_MASTER_TransmitHandler+0xc8>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80037c2:	68e0      	ldr	r0, [r4, #12]
 80037c4:	4288      	cmp	r0, r1
 80037c6:	d21f      	bcs.n	8003808 <I2C_MASTER_TransmitHandler+0x84>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80037c8:	4618      	mov	r0, r3
 80037ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037ce:	f7fd f9b3 	bl	8000b38 <XMC_I2C_CH_DisableEvent>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80037d2:	682a      	ldr	r2, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 80037d4:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80037d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037dc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 80037e0:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80037e2:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80037e6:	04d9      	lsls	r1, r3, #19
 80037e8:	d40d      	bmi.n	8003806 <I2C_MASTER_TransmitHandler+0x82>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80037ea:	68e2      	ldr	r2, [r4, #12]
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	f080 8086 	bcs.w	8003900 <I2C_MASTER_TransmitHandler+0x17c>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 80037f4:	68e3      	ldr	r3, [r4, #12]
 80037f6:	6822      	ldr	r2, [r4, #0]
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 80037f8:	5cd1      	ldrb	r1, [r2, r3]
 80037fa:	f7fd f947 	bl	8000a8c <XMC_I2C_CH_MasterTransmit>
            ptr_runtime->tx_data_index++;
 80037fe:	68e3      	ldr	r3, [r4, #12]
 8003800:	3301      	adds	r3, #1
 8003802:	60e3      	str	r3, [r4, #12]
 8003804:	e7ec      	b.n	80037e0 <I2C_MASTER_TransmitHandler+0x5c>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003808:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800380c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8003810:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 8003814:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003818:	b24a      	sxtb	r2, r1
 800381a:	2a00      	cmp	r2, #0
 800381c:	db09      	blt.n	8003832 <I2C_MASTER_TransmitHandler+0xae>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	2001      	movs	r0, #1
 8003820:	0952      	lsrs	r2, r2, #5
 8003822:	f001 011f 	and.w	r1, r1, #31
 8003826:	fa00 f101 	lsl.w	r1, r0, r1
 800382a:	3260      	adds	r2, #96	; 0x60
 800382c:	4835      	ldr	r0, [pc, #212]	; (8003904 <I2C_MASTER_TransmitHandler+0x180>)
 800382e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8003832:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8003836:	0512      	lsls	r2, r2, #20
 8003838:	d5fb      	bpl.n	8003832 <I2C_MASTER_TransmitHandler+0xae>

          if (ptr_runtime->bus_acquired == true)
 800383a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	d05e      	beq.n	8003900 <I2C_MASTER_TransmitHandler+0x17c>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8003842:	4628      	mov	r0, r5
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 8003844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}

          if (ptr_runtime->bus_acquired == true)
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8003848:	f7ff bcdc 	b.w	8003204 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800384c:	68e2      	ldr	r2, [r4, #12]
 800384e:	428a      	cmp	r2, r1
 8003850:	d2f3      	bcs.n	800383a <I2C_MASTER_TransmitHandler+0xb6>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8003852:	68e2      	ldr	r2, [r4, #12]
 8003854:	6821      	ldr	r1, [r4, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	5c89      	ldrb	r1, [r1, r2]
 800385a:	f7fd f917 	bl	8000a8c <XMC_I2C_CH_MasterTransmit>
        ptr_runtime->tx_data_index++;
 800385e:	68e3      	ldr	r3, [r4, #12]
 8003860:	3301      	adds	r3, #1
 8003862:	60e3      	str	r3, [r4, #12]
 8003864:	bd70      	pop	{r4, r5, r6, pc}
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 8003866:	b370      	cbz	r0, 80038c6 <I2C_MASTER_TransmitHandler+0x142>
    {
      if ((handle->config->rxFIFO_size > 0))
 8003868:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 800386c:	b141      	cbz	r1, 8003880 <I2C_MASTER_TransmitHandler+0xfc>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 800386e:	2201      	movs	r2, #1
 8003870:	fa02 f600 	lsl.w	r6, r2, r0
 8003874:	408a      	lsls	r2, r1
 8003876:	42b2      	cmp	r2, r6
 8003878:	bf28      	it	cs
 800387a:	4632      	movcs	r2, r6
 800387c:	b2d6      	uxtb	r6, r2
 800387e:	e000      	b.n	8003882 <I2C_MASTER_TransmitHandler+0xfe>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 8003880:	2602      	movs	r6, #2
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003882:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003886:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800388a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800388e:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003890:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8003894:	04db      	lsls	r3, r3, #19
 8003896:	d427      	bmi.n	80038e8 <I2C_MASTER_TransmitHandler+0x164>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003898:	68e3      	ldr	r3, [r4, #12]
 800389a:	68a2      	ldr	r2, [r4, #8]
 800389c:	4293      	cmp	r3, r2
 800389e:	d223      	bcs.n	80038e8 <I2C_MASTER_TransmitHandler+0x164>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80038a0:	68e3      	ldr	r3, [r4, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d105      	bne.n	80038b4 <I2C_MASTER_TransmitHandler+0x130>
 80038a8:	6a23      	ldr	r3, [r4, #32]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d102      	bne.n	80038b4 <I2C_MASTER_TransmitHandler+0x130>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80038ae:	f7fd f915 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
 80038b2:	e001      	b.n	80038b8 <I2C_MASTER_TransmitHandler+0x134>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80038b4:	f7fd f8fc 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
          }
          ptr_runtime->tx_data_index++;
 80038b8:	68e3      	ldr	r3, [r4, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60e3      	str	r3, [r4, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 80038be:	68e3      	ldr	r3, [r4, #12]
 80038c0:	42b3      	cmp	r3, r6
 80038c2:	d3e4      	bcc.n	800388e <I2C_MASTER_TransmitHandler+0x10a>
 80038c4:	e010      	b.n	80038e8 <I2C_MASTER_TransmitHandler+0x164>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80038c6:	68e2      	ldr	r2, [r4, #12]
 80038c8:	68a1      	ldr	r1, [r4, #8]
 80038ca:	3201      	adds	r2, #1
 80038cc:	428a      	cmp	r2, r1
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80038ce:	4618      	mov	r0, r3
 80038d0:	d105      	bne.n	80038de <I2C_MASTER_TransmitHandler+0x15a>
 80038d2:	6a22      	ldr	r2, [r4, #32]
 80038d4:	2a01      	cmp	r2, #1
 80038d6:	d102      	bne.n	80038de <I2C_MASTER_TransmitHandler+0x15a>
 80038d8:	f7fd f900 	bl	8000adc <XMC_I2C_CH_MasterReceiveNack>
 80038dc:	e001      	b.n	80038e2 <I2C_MASTER_TransmitHandler+0x15e>
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80038de:	f7fd f8e7 	bl	8000ab0 <XMC_I2C_CH_MasterReceiveAck>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
      }
      ptr_runtime->tx_data_index++;
 80038e2:	68e3      	ldr	r3, [r4, #12]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60e3      	str	r3, [r4, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 80038e8:	68ab      	ldr	r3, [r5, #8]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d106      	bne.n	8003900 <I2C_MASTER_TransmitHandler+0x17c>
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 80038f2:	6828      	ldr	r0, [r5, #0]
 80038f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
     }
  } /* end of else */
 } /* end of else */
}
 80038f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80038fc:	f7fd b91c 	b.w	8000b38 <XMC_I2C_CH_DisableEvent>
 8003900:	bd70      	pop	{r4, r5, r6, pc}
 8003902:	bf00      	nop
 8003904:	e000e100 	.word	0xe000e100

08003908 <I2C_MASTER_AbortTransmit>:
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003908:	6842      	ldr	r2, [r0, #4]
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 800390a:	b510      	push	{r4, lr}
 800390c:	4604      	mov	r4, r0
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800390e:	f892 0024 	ldrb.w	r0, [r2, #36]	; 0x24
 8003912:	b9d0      	cbnz	r0, 800394a <I2C_MASTER_AbortTransmit+0x42>
  return (status);
}

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
  handle->runtime->tx_busy = false;
 8003914:	68a3      	ldr	r3, [r4, #8]
 8003916:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
  handle->runtime->tx_data = NULL;
 800391a:	6018      	str	r0, [r3, #0]
  handle->runtime->bus_acquired = false;
 800391c:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 8003920:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8003924:	b153      	cbz	r3, 800393c <I2C_MASTER_AbortTransmit+0x34>
  {
    /*Disable the transmit FIFO event*/
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8003926:	6823      	ldr	r3, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 8003928:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800392c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003930:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8003934:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003938:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800393c:	6820      	ldr	r0, [r4, #0]
 800393e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003942:	f7fd f8f9 	bl	8000b38 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8003946:	2000      	movs	r0, #0
 8003948:	e003      	b.n	8003952 <I2C_MASTER_AbortTransmit+0x4a>
 800394a:	f110 30ff 	adds.w	r0, r0, #4294967295
 800394e:	bf18      	it	ne
 8003950:	2001      	movne	r0, #1
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003956:	f042 0202 	orr.w	r2, r2, #2
 800395a:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 800395c:	2202      	movs	r2, #2
 800395e:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
}
 8003960:	bd10      	pop	{r4, pc}

08003962 <I2C_MASTER_AbortReceive>:
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003962:	6841      	ldr	r1, [r0, #4]
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
 8003964:	b508      	push	{r3, lr}
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8003966:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 800396a:	b9eb      	cbnz	r3, 80039a8 <I2C_MASTER_AbortReceive+0x46>


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
 800396c:	6882      	ldr	r2, [r0, #8]
 800396e:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
  handle->runtime->tx_busy = false;
  handle->runtime->rx_data = NULL;
 8003972:	6053      	str	r3, [r2, #4]

static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
  handle->runtime->tx_busy = false;
 8003974:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
  handle->runtime->rx_data = NULL;

  handle->runtime->bus_acquired = false;
 8003978:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 800397c:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 8003980:	6803      	ldr	r3, [r0, #0]
 8003982:	b132      	cbz	r2, 8003992 <I2C_MASTER_AbortReceive+0x30>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8003984:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003988:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 800398c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8003990:	e003      	b.n	800399a <I2C_MASTER_AbortReceive+0x38>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 8003992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003994:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
 800399a:	6800      	ldr	r0, [r0, #0]
 800399c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80039a0:	f7fd f8ca 	bl	8000b38 <XMC_I2C_CH_DisableEvent>
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 80039a4:	2000      	movs	r0, #0
 80039a6:	bd08      	pop	{r3, pc}
 80039a8:	f113 30ff 	adds.w	r0, r3, #4294967295
 80039ac:	bf18      	it	ne
 80039ae:	2001      	movne	r0, #1
  {
    status = I2C_MASTER_STATUS_FAILURE;
  }

  return (status);
}
 80039b0:	bd08      	pop	{r3, pc}
	...

080039b4 <i2c_master_0_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void i2c_master_0_disable_io(void)
{
 80039b4:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)15, XMC_GPIO_MODE_INPUT_TRISTATE);
 80039b6:	4806      	ldr	r0, [pc, #24]	; (80039d0 <i2c_master_0_disable_io+0x1c>)
 80039b8:	210f      	movs	r1, #15
 80039ba:	2200      	movs	r2, #0
 80039bc:	f7fc ffba 	bl	8000934 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)13, XMC_GPIO_MODE_INPUT_TRISTATE);
 80039c0:	4804      	ldr	r0, [pc, #16]	; (80039d4 <i2c_master_0_disable_io+0x20>)
 80039c2:	210d      	movs	r1, #13
 80039c4:	2200      	movs	r2, #0
}
 80039c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
};

static void i2c_master_0_disable_io(void)
{
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)15, XMC_GPIO_MODE_INPUT_TRISTATE);
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)13, XMC_GPIO_MODE_INPUT_TRISTATE);
 80039ca:	f7fc bfb3 	b.w	8000934 <XMC_GPIO_SetMode>
 80039ce:	bf00      	nop
 80039d0:	48028300 	.word	0x48028300
 80039d4:	48028000 	.word	0x48028000

080039d8 <i2c_master_0_enable_io>:
}

static void i2c_master_0_enable_io(void)
{
 80039d8:	b508      	push	{r3, lr}
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)15, i2c_master_0_sda_pin_config.mode);
 80039da:	4806      	ldr	r0, [pc, #24]	; (80039f4 <i2c_master_0_enable_io+0x1c>)
 80039dc:	210f      	movs	r1, #15
 80039de:	22d0      	movs	r2, #208	; 0xd0
 80039e0:	f7fc ffa8 	bl	8000934 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)13, i2c_master_0_scl_pin_config.mode);
 80039e4:	4804      	ldr	r0, [pc, #16]	; (80039f8 <i2c_master_0_enable_io+0x20>)
 80039e6:	210d      	movs	r1, #13
 80039e8:	22d0      	movs	r2, #208	; 0xd0
}
 80039ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

static void i2c_master_0_enable_io(void)
{
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)15, i2c_master_0_sda_pin_config.mode);
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)13, i2c_master_0_scl_pin_config.mode);
 80039ee:	f7fc bfa1 	b.w	8000934 <XMC_GPIO_SetMode>
 80039f2:	bf00      	nop
 80039f4:	48028300 	.word	0x48028300
 80039f8:	48028000 	.word	0x48028000

080039fc <NVIC_EncodePriority.constprop.1>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a00:	f1c0 0207 	rsb	r2, r0, #7
 8003a04:	2a06      	cmp	r2, #6
 8003a06:	bf28      	it	cs
 8003a08:	2206      	movcs	r2, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0a:	b100      	cbz	r0, 8003a0e <NVIC_EncodePriority.constprop.1+0x12>
 8003a0c:	3801      	subs	r0, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4093      	lsls	r3, r2
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f003 033c 	and.w	r3, r3, #60	; 0x3c
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003a18:	fa03 f000 	lsl.w	r0, r3, r0
 8003a1c:	4770      	bx	lr
	...

08003a20 <i2c_master_0_init>:
  .config = &i2c_master_0_config,
  .runtime = &i2c_master_0_runtime,
};

void i2c_master_0_init(void)
{
 8003a20:	b538      	push	{r3, r4, r5, lr}
                               XMC_I2C_CH_EVENT_ARBITRATION_LOST | 
                               XMC_I2C_CH_EVENT_ERROR); 

  const uint32_t tx_fifo_events = (uint32_t)(0);
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
  XMC_I2C_CH_Init(XMC_I2C1_CH1, &i2c_master_0_channel_config);
 8003a22:	4c3c      	ldr	r4, [pc, #240]	; (8003b14 <i2c_master_0_init+0xf4>)
 8003a24:	493c      	ldr	r1, [pc, #240]	; (8003b18 <i2c_master_0_init+0xf8>)
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a26:	4d3d      	ldr	r5, [pc, #244]	; (8003b1c <i2c_master_0_init+0xfc>)
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f7fc ffcf 	bl	80009cc <XMC_I2C_CH_Init>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003a2e:	69e3      	ldr	r3, [r4, #28]
 8003a30:	f023 0307 	bic.w	r3, r3, #7
 8003a34:	61e3      	str	r3, [r4, #28]
 8003a36:	6a23      	ldr	r3, [r4, #32]
 8003a38:	f023 0307 	bic.w	r3, r3, #7
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6223      	str	r3, [r4, #32]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 8003a42:	69e3      	ldr	r3, [r4, #28]
 8003a44:	f043 0320 	orr.w	r3, r3, #32
 8003a48:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 8003a4a:	69e3      	ldr	r3, [r4, #28]
 8003a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a50:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 8003a52:	6a23      	ldr	r3, [r4, #32]
 8003a54:	f043 0320 	orr.w	r3, r3, #32
 8003a58:	6223      	str	r3, [r4, #32]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
  channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 8003a5a:	6a23      	ldr	r3, [r4, #32]
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a60:	6223      	str	r3, [r4, #32]
  XMC_USIC_CH_EnableInputSync(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX0);
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX1);
  XMC_USIC_CH_EnableInputSync(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX1);
    
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C1_CH1,
 8003a62:	4620      	mov	r0, r4
 8003a64:	2301      	movs	r3, #1
 8003a66:	2120      	movs	r1, #32
 8003a68:	2205      	movs	r2, #5
 8003a6a:	f7fd fff5 	bl	8001a58 <XMC_USIC_CH_TXFIFO_Configure>
                               32,
                               XMC_USIC_CH_FIFO_SIZE_32WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
 8003a6e:	4620      	mov	r0, r4
 8003a70:	2110      	movs	r1, #16
 8003a72:	2201      	movs	r2, #1
 8003a74:	f7fe f839 	bl	8001aea <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 8003a78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a7c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)1));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C1_CH1, tx_fifo_events);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C1_CH1,
 8003a80:	4620      	mov	r0, r4
 8003a82:	231f      	movs	r3, #31
 8003a84:	2100      	movs	r1, #0
 8003a86:	2205      	movs	r2, #5
 8003a88:	f7fd fffc 	bl	8001a84 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_32WORDS,
                                (uint32_t)(31));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	2110      	movs	r1, #16
 8003a90:	2200      	movs	r2, #0
 8003a92:	f7fe f836 	bl	8001b02 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
 8003a96:	4620      	mov	r0, r4
 8003a98:	2113      	movs	r1, #19
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f7fe f831 	bl	8001b02 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 8003aa0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003aa4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003aa8:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C1_CH1, rx_fifo_events);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C1_CH1,
 8003aac:	4620      	mov	r0, r4
 8003aae:	2202      	movs	r2, #2
 8003ab0:	2110      	movs	r1, #16
 8003ab2:	f7fe f810 	bl	8001ad6 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)2));
  XMC_I2C_CH_EnableEvent(XMC_I2C1_CH1, enabled_protocol_events);
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f04f 71b0 	mov.w	r1, #23068672	; 0x1600000
 8003abc:	f7fd f82e 	bl	8000b1c <XMC_I2C_CH_EnableEvent>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8003ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  XMC_I2C_CH_Start(XMC_I2C1_CH1);

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)15, &i2c_master_0_sda_pin_config);
 8003ac2:	4817      	ldr	r0, [pc, #92]	; (8003b20 <i2c_master_0_init+0x100>)
 8003ac4:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <i2c_master_0_init+0x104>)
 8003ac6:	f023 030f 	bic.w	r3, r3, #15
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6423      	str	r3, [r4, #64]	; 0x40
 8003ad0:	210f      	movs	r1, #15
 8003ad2:	f7fc fbe3 	bl	800029c <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)13, &i2c_master_0_scl_pin_config);
 8003ad6:	210d      	movs	r1, #13
 8003ad8:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <i2c_master_0_init+0x108>)
 8003ada:	4814      	ldr	r0, [pc, #80]	; (8003b2c <i2c_master_0_init+0x10c>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003adc:	4c14      	ldr	r4, [pc, #80]	; (8003b30 <i2c_master_0_init+0x110>)
 8003ade:	f7fc fbdd 	bl	800029c <XMC_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae2:	68e8      	ldr	r0, [r5, #12]
/* Tx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),60,0));
 8003ae4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003ae8:	f7ff ff88 	bl	80039fc <NVIC_EncodePriority.constprop.1>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aec:	0080      	lsls	r0, r0, #2
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af2:	b2c0      	uxtb	r0, r0
 8003af4:	f884 035b 	strb.w	r0, [r4, #859]	; 0x35b
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af8:	60a3      	str	r3, [r4, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003afa:	68e8      	ldr	r0, [r5, #12]
  NVIC_EnableIRQ((IRQn_Type)91);/* Rx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),60,0));
 8003afc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003b00:	f7ff ff7c 	bl	80039fc <NVIC_EncodePriority.constprop.1>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b04:	0080      	lsls	r0, r0, #2
 8003b06:	b2c0      	uxtb	r0, r0
 8003b08:	f884 035a 	strb.w	r0, [r4, #858]	; 0x35a
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b10:	60a3      	str	r3, [r4, #8]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	48020200 	.word	0x48020200
 8003b18:	0800c308 	.word	0x0800c308
 8003b1c:	e000ed00 	.word	0xe000ed00
 8003b20:	48028300 	.word	0x48028300
 8003b24:	0800c2c4 	.word	0x0800c2c4
 8003b28:	0800c2d0 	.word	0x0800c2d0
 8003b2c:	48028000 	.word	0x48028000
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <USIC1_1_IRQHandler>:
  NVIC_EnableIRQ((IRQn_Type)90);}
/*Transmit ISR*/
void i2c_master_0_TX_HANDLER()
{
  I2C_MASTER_TransmitHandler(&i2c_master_0);
 8003b34:	4801      	ldr	r0, [pc, #4]	; (8003b3c <USIC1_1_IRQHandler+0x8>)
 8003b36:	f7ff be25 	b.w	8003784 <I2C_MASTER_TransmitHandler>
 8003b3a:	bf00      	nop
 8003b3c:	1ffed0e8 	.word	0x1ffed0e8

08003b40 <USIC1_0_IRQHandler>:
}
/*Receive ISR*/
void i2c_master_0_RX_HANDLER()
{
  I2C_MASTER_ReceiveHandler(&i2c_master_0);
 8003b40:	4801      	ldr	r0, [pc, #4]	; (8003b48 <USIC1_0_IRQHandler+0x8>)
 8003b42:	f7ff bd3d 	b.w	80035c0 <I2C_MASTER_ReceiveHandler>
 8003b46:	bf00      	nop
 8003b48:	1ffed0e8 	.word	0x1ffed0e8

08003b4c <GLOBAL_CCU4_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003b4c:	7b43      	ldrb	r3, [r0, #13]
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003b52:	b953      	cbnz	r3, 8003b6a <GLOBAL_CCU4_Init+0x1e>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8003b54:	6880      	ldr	r0, [r0, #8]
 8003b56:	7b21      	ldrb	r1, [r4, #12]
 8003b58:	f7fc fea2 	bl	80008a0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8003b5c:	68a2      	ldr	r2, [r4, #8]
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003b5e:	68d3      	ldr	r3, [r2, #12]
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	60d3      	str	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8003b66:	2301      	movs	r3, #1
 8003b68:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	bd10      	pop	{r4, pc}

08003b6e <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8003b6e:	b510      	push	{r4, lr}
 8003b70:	4604      	mov	r4, r0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8003b72:	1d22      	adds	r2, r4, #4
 8003b74:	7c21      	ldrb	r1, [r4, #16]
 8003b76:	6800      	ldr	r0, [r0, #0]
 8003b78:	f7fc fb90 	bl	800029c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	7c21      	ldrb	r1, [r4, #16]
 8003b80:	7c62      	ldrb	r2, [r4, #17]
 8003b82:	f7fc fee9 	bl	8000958 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
 8003b86:	2000      	movs	r0, #0
 8003b88:	bd10      	pop	{r4, pc}
	...

08003b8c <SystemCoreSetup>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <SystemCoreSetup+0x68>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	; (8003bf8 <SystemCoreSetup+0x6c>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b90:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b92:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003b96:	0409      	lsls	r1, r1, #16
 8003b98:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 8003b9a:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8003b9c:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b9e:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003ba0:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <SystemCoreSetup+0x70>)
 8003ba2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ba4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003baa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8003bae:	4814      	ldr	r0, [pc, #80]	; (8003c00 <SystemCoreSetup+0x74>)

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003bb0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8003bb4:	f241 0114 	movw	r1, #4116	; 0x1014

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8003bbc:	5842      	ldr	r2, [r0, r1]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8003bbe:	f022 020f 	bic.w	r2, r2, #15
  temp |= PMU_FLASH_WS;
 8003bc2:	f042 0204 	orr.w	r2, r2, #4
  FLASH0->FCON = temp;
 8003bc6:	5042      	str	r2, [r0, r1]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	f022 0210 	bic.w	r2, r2, #16
 8003bce:	615a      	str	r2, [r3, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	f022 0208 	bic.w	r2, r2, #8
 8003bd6:	615a      	str	r2, [r3, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8003be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000ed00 	.word	0xe000ed00
 8003bf8:	05fa0100 	.word	0x05fa0100
 8003bfc:	08000000 	.word	0x08000000
 8003c00:	58001000 	.word	0x58001000

08003c04 <CLOCK_XMC4_Init>:
{
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003c04:	2301      	movs	r3, #1
 8003c06:	7003      	strb	r3, [r0, #0]

  return (status);
}
 8003c08:	2000      	movs	r0, #0
 8003c0a:	4770      	bx	lr

08003c0c <OSCHP_GetFrequency>:
#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
}
 8003c0c:	4800      	ldr	r0, [pc, #0]	; (8003c10 <OSCHP_GetFrequency+0x4>)
 8003c0e:	4770      	bx	lr
 8003c10:	00b71b00 	.word	0x00b71b00

08003c14 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003c14:	b530      	push	{r4, r5, lr}
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003c16:	4d11      	ldr	r5, [pc, #68]	; (8003c5c <SystemCoreClockSetup+0x48>)
 8003c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003c1a:	b087      	sub	sp, #28
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003c1c:	ac01      	add	r4, sp, #4
 8003c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8003c24:	a801      	add	r0, sp, #4
 8003c26:	f7fc fdb9 	bl	800079c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	f7fc fbde 	bl	80003ec <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8003c30:	2000      	movs	r0, #0
 8003c32:	f7fc fbb7 	bl	80003a4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8003c36:	2004      	movs	r0, #4
 8003c38:	f7fc fc20 	bl	800047c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8003c3c:	2120      	movs	r1, #32
 8003c3e:	2001      	movs	r0, #1
 8003c40:	f7fc fc54 	bl	80004ec <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8003c44:	2000      	movs	r0, #0
 8003c46:	f7fc fbb7 	bl	80003b8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f7fc fc2a 	bl	80004a4 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fc fc1d 	bl	8000490 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8003c56:	b007      	add	sp, #28
 8003c58:	bd30      	pop	{r4, r5, pc}
 8003c5a:	bf00      	nop
 8003c5c:	0800c338 	.word	0x0800c338

08003c60 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8003c60:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003c62:	4815      	ldr	r0, [pc, #84]	; (8003cb8 <DAVE_Init+0x58>)
 8003c64:	f7ff ffce 	bl	8003c04 <CLOCK_XMC4_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
 8003c68:	bb20      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of I2C_MASTER APP instance i2c_master_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_master_0); 
 8003c6a:	4814      	ldr	r0, [pc, #80]	; (8003cbc <DAVE_Init+0x5c>)
 8003c6c:	f7ff fb2a 	bl	80032c4 <I2C_MASTER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003c70:	bb00      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance reset_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&reset_pin); 
 8003c72:	4813      	ldr	r0, [pc, #76]	; (8003cc0 <DAVE_Init+0x60>)
 8003c74:	f7ff ff7b 	bl	8003b6e <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003c78:	b9e0      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance vdd_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&vdd_pin); 
 8003c7a:	4812      	ldr	r0, [pc, #72]	; (8003cc4 <DAVE_Init+0x64>)
 8003c7c:	f7ff ff77 	bl	8003b6e <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003c80:	b9c0      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of USBD_VCOM APP instance console_logger */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&console_logger); 
 8003c82:	4811      	ldr	r0, [pc, #68]	; (8003cc8 <DAVE_Init+0x68>)
 8003c84:	f7fe fa46 	bl	8002114 <USBD_VCOM_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003c88:	b9a0      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of UART APP instance cunit_logger */
	 init_status = (DAVE_STATUS_t)UART_Init(&cunit_logger); 
 8003c8a:	4810      	ldr	r0, [pc, #64]	; (8003ccc <DAVE_Init+0x6c>)
 8003c8c:	f7fe fff9 	bl	8002c82 <UART_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003c90:	b980      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of TIMER APP instance tick_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&tick_timer); 
 8003c92:	480f      	ldr	r0, [pc, #60]	; (8003cd0 <DAVE_Init+0x70>)
 8003c94:	f7ff fa49 	bl	800312a <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003c98:	b960      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance tick_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&tick_timer_intr); 
 8003c9a:	480e      	ldr	r0, [pc, #56]	; (8003cd4 <DAVE_Init+0x74>)
 8003c9c:	f7ff fa50 	bl	8003140 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ca0:	b940      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance scheduler_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&scheduler_timer_intr); 
 8003ca2:	480d      	ldr	r0, [pc, #52]	; (8003cd8 <DAVE_Init+0x78>)
 8003ca4:	f7ff fa4c 	bl	8003140 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ca8:	b920      	cbnz	r0, 8003cb4 <DAVE_Init+0x54>
  {
	 /**  Initialization of TIMER APP instance scheduler_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&scheduler_timer); 
 8003caa:	480c      	ldr	r0, [pc, #48]	; (8003cdc <DAVE_Init+0x7c>)
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8003cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&scheduler_timer_intr); 
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of TIMER APP instance scheduler_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&scheduler_timer); 
 8003cb0:	f7ff ba3b 	b.w	800312a <TIMER_Init>
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8003cb4:	bd08      	pop	{r3, pc}
 8003cb6:	bf00      	nop
 8003cb8:	1ffed850 	.word	0x1ffed850
 8003cbc:	1ffed0e8 	.word	0x1ffed0e8
 8003cc0:	0800c310 	.word	0x0800c310
 8003cc4:	0800c324 	.word	0x0800c324
 8003cc8:	1ffed808 	.word	0x1ffed808
 8003ccc:	1ffed050 	.word	0x1ffed050
 8003cd0:	1ffed05c 	.word	0x1ffed05c
 8003cd4:	0800c2c0 	.word	0x0800c2c0
 8003cd8:	0800c2bc 	.word	0x0800c2bc
 8003cdc:	1ffed084 	.word	0x1ffed084

08003ce0 <pal_init>:


pal_status_t pal_init(void)
{
    return PAL_STATUS_SUCCESS;
}
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	4770      	bx	lr

08003ce4 <pal_crypt_tls_prf_sha256>:
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	b0ad      	sub	sp, #180	; 0xb4
 8003cea:	4688      	mov	r8, r1
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
 8003cec:	a801      	add	r0, sp, #4
                                      uint16_t label_length,
                                      const uint8_t * p_seed,
                                      uint16_t seed_length,
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
 8003cee:	4693      	mov	fp, r2
 8003cf0:	469a      	mov	sl, r3
 8003cf2:	f8bd 70d8 	ldrh.w	r7, [sp, #216]	; 0xd8
 8003cf6:	f8bd 40e0 	ldrh.w	r4, [sp, #224]	; 0xe0
 8003cfa:	f8bd 50e8 	ldrh.w	r5, [sp, #232]	; 0xe8
    uint8_t hmac_checksum_result[PAL_CRYPT_DIGEST_MAX_SIZE];
    const mbedtls_md_info_t *message_digest_info;
    mbedtls_md_context_t message_digest_context;
    uint16_t final_seed_length = 0;
       
    mbedtls_md_init(&message_digest_context);
 8003cfe:	f005 f86b 	bl	8008dd8 <mbedtls_md_init>
    
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_secret) || (NULL == p_label) || (NULL == p_seed) || (NULL == p_derived_key))
 8003d02:	f1b8 0f00 	cmp.w	r8, #0
 8003d06:	d101      	bne.n	8003d0c <pal_crypt_tls_prf_sha256+0x28>
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
 8003d08:	2401      	movs	r4, #1
 8003d0a:	e07b      	b.n	8003e04 <pal_crypt_tls_prf_sha256+0x120>
    mbedtls_md_init(&message_digest_context);
    
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_secret) || (NULL == p_label) || (NULL == p_seed) || (NULL == p_derived_key))
 8003d0c:	f1ba 0f00 	cmp.w	sl, #0
 8003d10:	d0fa      	beq.n	8003d08 <pal_crypt_tls_prf_sha256+0x24>
 8003d12:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f7      	beq.n	8003d08 <pal_crypt_tls_prf_sha256+0x24>
 8003d18:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f4      	beq.n	8003d08 <pal_crypt_tls_prf_sha256+0x24>
        {
            break;
        }
#endif  //OPTIGA_LIB_DEBUG_NULL_CHECK

        if (sizeof(md_hmac_temp_array ) < (uint32_t)(message_digest_length + label_length + seed_length))
 8003d1e:	f107 0620 	add.w	r6, r7, #32
 8003d22:	1932      	adds	r2, r6, r4
 8003d24:	2a80      	cmp	r2, #128	; 0x80
 8003d26:	dd01      	ble.n	8003d2c <pal_crypt_tls_prf_sha256+0x48>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
 8003d28:	2404      	movs	r4, #4
 8003d2a:	e06b      	b.n	8003e04 <pal_crypt_tls_prf_sha256+0x120>
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
 8003d2c:	2006      	movs	r0, #6
 8003d2e:	f005 f845 	bl	8008dbc <mbedtls_md_info_from_type>

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
 8003d32:	4651      	mov	r1, sl
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
 8003d34:	4681      	mov	r9, r0

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
 8003d36:	463a      	mov	r2, r7
 8003d38:	a814      	add	r0, sp, #80	; 0x50
 8003d3a:	f007 fd2d 	bl	800b798 <memcpy>
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
 8003d3e:	ab0c      	add	r3, sp, #48	; 0x30
 8003d40:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8003d42:	4622      	mov	r2, r4
 8003d44:	1998      	adds	r0, r3, r6
 8003d46:	f007 fd27 	bl	800b798 <memcpy>
        final_seed_length = label_length + seed_length;

        if (0 != (mbedtls_md_setup(&message_digest_context,message_digest_info,1)))
 8003d4a:	a801      	add	r0, sp, #4
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f005 f860 	bl	8008e14 <mbedtls_md_setup>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d1e7      	bne.n	8003d28 <pal_crypt_tls_prf_sha256+0x44>
        {
            return_value = PAL_STATUS_INVALID_INPUT;
            break;
        }

        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
 8003d58:	a801      	add	r0, sp, #4
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	465a      	mov	r2, fp
 8003d5e:	f005 f87b 	bl	8008e58 <mbedtls_md_hmac_starts>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d1d0      	bne.n	8003d08 <pal_crypt_tls_prf_sha256+0x24>

        message_digest_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);

        memcpy(md_hmac_temp_array + message_digest_length, p_label, label_length);
        memcpy(md_hmac_temp_array + message_digest_length + label_length, p_seed, seed_length);
        final_seed_length = label_length + seed_length;
 8003d66:	193a      	adds	r2, r7, r4
 8003d68:	b297      	uxth	r7, r2
        if (0 != mbedtls_md_hmac_starts(&message_digest_context, p_secret, secret_length))
        {
            break;
        }
       
        if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array + message_digest_length, final_seed_length))
 8003d6a:	a801      	add	r0, sp, #4
 8003d6c:	a914      	add	r1, sp, #80	; 0x50
 8003d6e:	463a      	mov	r2, r7
 8003d70:	f005 f8d2 	bl	8008f18 <mbedtls_md_hmac_update>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d1c7      	bne.n	8003d08 <pal_crypt_tls_prf_sha256+0x24>
        {
            break;
        }
        
        if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
 8003d78:	a801      	add	r0, sp, #4
 8003d7a:	a90c      	add	r1, sp, #48	; 0x30
 8003d7c:	f005 f8dc 	bl	8008f38 <mbedtls_md_hmac_finish>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d1c1      	bne.n	8003d08 <pal_crypt_tls_prf_sha256+0x24>
 8003d84:	4604      	mov	r4, r0
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
 8003d86:	42ac      	cmp	r4, r5
 8003d88:	d236      	bcs.n	8003df8 <pal_crypt_tls_prf_sha256+0x114>
             derive_key_len_index += message_digest_length)
        {
            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
 8003d8a:	a801      	add	r0, sp, #4
 8003d8c:	f005 f902 	bl	8008f94 <mbedtls_md_hmac_reset>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d133      	bne.n	8003dfc <pal_crypt_tls_prf_sha256+0x118>
            {
                break;
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, 
 8003d94:	a801      	add	r0, sp, #4
 8003d96:	a90c      	add	r1, sp, #48	; 0x30
 8003d98:	f107 0220 	add.w	r2, r7, #32
 8003d9c:	f005 f8bc 	bl	8008f18 <mbedtls_md_hmac_update>
 8003da0:	bb60      	cbnz	r0, 8003dfc <pal_crypt_tls_prf_sha256+0x118>
                            message_digest_length + final_seed_length))
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, hmac_checksum_result))
 8003da2:	f10d 0810 	add.w	r8, sp, #16
 8003da6:	a801      	add	r0, sp, #4
 8003da8:	4641      	mov	r1, r8
 8003daa:	f005 f8c5 	bl	8008f38 <mbedtls_md_hmac_finish>
 8003dae:	bb28      	cbnz	r0, 8003dfc <pal_crypt_tls_prf_sha256+0x118>
            {
                break;                                
            }

            if (0 != mbedtls_md_hmac_reset(&message_digest_context))
 8003db0:	a801      	add	r0, sp, #4
 8003db2:	f005 f8ef 	bl	8008f94 <mbedtls_md_hmac_reset>
 8003db6:	bb08      	cbnz	r0, 8003dfc <pal_crypt_tls_prf_sha256+0x118>
            {
                break;                
            }
            if (0 != mbedtls_md_hmac_update(&message_digest_context, md_hmac_temp_array, message_digest_length))
 8003db8:	a801      	add	r0, sp, #4
 8003dba:	a90c      	add	r1, sp, #48	; 0x30
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f005 f8ab 	bl	8008f18 <mbedtls_md_hmac_update>
 8003dc2:	b9d8      	cbnz	r0, 8003dfc <pal_crypt_tls_prf_sha256+0x118>
            {
                break;                                
            }
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
 8003dc4:	a801      	add	r0, sp, #4
 8003dc6:	a90c      	add	r1, sp, #48	; 0x30
 8003dc8:	f005 f8b6 	bl	8008f38 <mbedtls_md_hmac_finish>
 8003dcc:	b9b0      	cbnz	r0, 8003dfc <pal_crypt_tls_prf_sha256+0x118>
            {
                break;                                
            }

            hmac_result_length = ((derive_key_len_index + message_digest_length) > derived_key_length) ? 
 8003dce:	f104 0220 	add.w	r2, r4, #32
 8003dd2:	42aa      	cmp	r2, r5
                                  (derived_key_length % message_digest_length) : (message_digest_length);
 8003dd4:	bfcc      	ite	gt
 8003dd6:	f005 011f 	andgt.w	r1, r5, #31
            if (0 != mbedtls_md_hmac_finish(&message_digest_context, md_hmac_temp_array))
            {
                break;                                
            }

            hmac_result_length = ((derive_key_len_index + message_digest_length) > derived_key_length) ? 
 8003dda:	2120      	movle	r1, #32
                                  (derived_key_length % message_digest_length) : (message_digest_length);

            for (hmac_checksum_result_index = 0; hmac_checksum_result_index < hmac_result_length; 
 8003ddc:	2300      	movs	r3, #0
 8003dde:	b298      	uxth	r0, r3
 8003de0:	4288      	cmp	r0, r1
 8003de2:	d207      	bcs.n	8003df4 <pal_crypt_tls_prf_sha256+0x110>
 8003de4:	9839      	ldr	r0, [sp, #228]	; 0xe4
                 hmac_checksum_result_index++)
            {
                p_derived_key[derive_key_len_index + hmac_checksum_result_index] = 
 8003de6:	f818 e003 	ldrb.w	lr, [r8, r3]
 8003dea:	4420      	add	r0, r4
 8003dec:	f800 e003 	strb.w	lr, [r0, r3]
 8003df0:	3301      	adds	r3, #1
 8003df2:	e7f4      	b.n	8003dde <pal_crypt_tls_prf_sha256+0xfa>
        {
            break;
        }

        for (derive_key_len_index = 0; derive_key_len_index < derived_key_length; 
             derive_key_len_index += message_digest_length)
 8003df4:	b294      	uxth	r4, r2
 8003df6:	e7c6      	b.n	8003d86 <pal_crypt_tls_prf_sha256+0xa2>
                                                                    hmac_checksum_result[hmac_checksum_result_index];
            }
        }
        if (derive_key_len_index >= derived_key_length)
        {
            return_value = PAL_STATUS_SUCCESS;
 8003df8:	2400      	movs	r4, #0
 8003dfa:	e003      	b.n	8003e04 <pal_crypt_tls_prf_sha256+0x120>
                                      uint8_t * p_derived_key,
                                      uint16_t derived_key_length)
{
    #define PAL_CRYPT_DIGEST_MAX_SIZE    (32U)

    pal_status_t return_value = PAL_STATUS_FAILURE;
 8003dfc:	42ac      	cmp	r4, r5
 8003dfe:	bf2c      	ite	cs
 8003e00:	2400      	movcs	r4, #0
 8003e02:	2401      	movcc	r4, #1
        {
            return_value = PAL_STATUS_SUCCESS;
        }
    } while (FALSE);
    
    mbedtls_md_free(&message_digest_context);
 8003e04:	a801      	add	r0, sp, #4
 8003e06:	f004 ffeb 	bl	8008de0 <mbedtls_md_free>

    memset(md_hmac_temp_array, 0x00, sizeof(md_hmac_temp_array));
 8003e0a:	a80c      	add	r0, sp, #48	; 0x30
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	f007 fccd 	bl	800b7ae <memset>
    memset(hmac_checksum_result, 0x00, sizeof(hmac_checksum_result));    
 8003e14:	a804      	add	r0, sp, #16
 8003e16:	2100      	movs	r1, #0
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f007 fcc8 	bl	800b7ae <memset>
    #undef PAL_CRYPT_DIGEST_MAX_SIZE
    return return_value;
}
 8003e1e:	4620      	mov	r0, r4
 8003e20:	b02d      	add	sp, #180	; 0xb4
 8003e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003e26 <pal_crypt_encrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
 8003e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2a:	b098      	sub	sp, #96	; 0x60
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
 8003e2c:	a80a      	add	r0, sp, #40	; 0x28
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_cipher_text)
{
 8003e2e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8003e30:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8003e32:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 8003e36:	f89d 6090 	ldrb.w	r6, [sp, #144]	; 0x90
 8003e3a:	460f      	mov	r7, r1
 8003e3c:	4690      	mov	r8, r2
 8003e3e:	469a      	mov	sl, r3
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t mac_output[MAC_TAG_BUFFER_SIZE];
    mbedtls_ccm_context sEncrypt;

    mbedtls_ccm_init(&sEncrypt);
 8003e40:	f004 fe5b 	bl	8008afa <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_cipher_text) || (NULL == p_plain_text) ||
 8003e44:	b90d      	cbnz	r5, 8003e4a <pal_crypt_encrypt_aes128_ccm+0x24>
                                          uint8_t * p_cipher_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    #define MAC_TAG_BUFFER_SIZE     (16U)
    
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8003e46:	2401      	movs	r4, #1
 8003e48:	e02b      	b.n	8003ea2 <pal_crypt_encrypt_aes128_ccm+0x7c>
    mbedtls_ccm_init(&sEncrypt);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_cipher_text) || (NULL == p_plain_text) ||
 8003e4a:	2f00      	cmp	r7, #0
 8003e4c:	d0fb      	beq.n	8003e46 <pal_crypt_encrypt_aes128_ccm+0x20>
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	d0f9      	beq.n	8003e46 <pal_crypt_encrypt_aes128_ccm+0x20>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_encrypt_key))
 8003e52:	f1b9 0f00 	cmp.w	r9, #0
 8003e56:	d0f6      	beq.n	8003e46 <pal_crypt_encrypt_aes128_ccm+0x20>
 8003e58:	f1ba 0f00 	cmp.w	sl, #0
 8003e5c:	d0f3      	beq.n	8003e46 <pal_crypt_encrypt_aes128_ccm+0x20>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sEncrypt, MBEDTLS_CIPHER_ID_AES, p_encrypt_key, 8 * AES128_KEY_BITS_SIZE))
 8003e5e:	a80a      	add	r0, sp, #40	; 0x28
 8003e60:	2102      	movs	r1, #2
 8003e62:	4652      	mov	r2, sl
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	f004 fe4c 	bl	8008b02 <mbedtls_ccm_setkey>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d1eb      	bne.n	8003e46 <pal_crypt_encrypt_aes128_ccm+0x20>
        {
            break;
        }
        
        if (0 != mbedtls_ccm_encrypt_and_tag(&sEncrypt,
 8003e6e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8003e72:	9702      	str	r7, [sp, #8]
 8003e74:	af06      	add	r7, sp, #24
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	4622      	mov	r2, r4
 8003e7a:	f8cd 9000 	str.w	r9, [sp]
 8003e7e:	9503      	str	r5, [sp, #12]
 8003e80:	9704      	str	r7, [sp, #16]
 8003e82:	9605      	str	r6, [sp, #20]
 8003e84:	a80a      	add	r0, sp, #40	; 0x28
 8003e86:	4641      	mov	r1, r8
 8003e88:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8003e8c:	f004 fe80 	bl	8008b90 <mbedtls_ccm_encrypt_and_tag>
 8003e90:	4604      	mov	r4, r0
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d1d7      	bne.n	8003e46 <pal_crypt_encrypt_aes128_ccm+0x20>
        
        {
            break;
        }

        memcpy((p_cipher_text + plain_text_length), mac_output, mac_size);
 8003e96:	eb05 0008 	add.w	r0, r5, r8
 8003e9a:	4639      	mov	r1, r7
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	f007 fc7b 	bl	800b798 <memcpy>
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sEncrypt);
 8003ea2:	a80a      	add	r0, sp, #40	; 0x28
 8003ea4:	f004 fe50 	bl	8008b48 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    #undef MAC_TAG_BUFFER_SIZE    
    return return_status;
}
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	b018      	add	sp, #96	; 0x60
 8003eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003eb0 <pal_crypt_decrypt_aes128_ccm>:
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	b094      	sub	sp, #80	; 0x50
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
 8003eb6:	a806      	add	r0, sp, #24
                                          uint16_t nonce_length,
                                          const uint8_t * p_associated_data,
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
 8003eb8:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003ebc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8003ebe:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8003ec2:	f89d 7080 	ldrb.w	r7, [sp, #128]	; 0x80
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	4615      	mov	r5, r2
 8003eca:	469a      	mov	sl, r3
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
    mbedtls_ccm_context sDecrypt;

    mbedtls_ccm_init(&sDecrypt);
 8003ecc:	f004 fe15 	bl	8008afa <mbedtls_ccm_init>

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_plain_text) || (NULL == p_cipher_text) ||
 8003ed0:	f1b8 0f00 	cmp.w	r8, #0
 8003ed4:	d101      	bne.n	8003eda <pal_crypt_decrypt_aes128_ccm+0x2a>
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8003ed6:	2401      	movs	r4, #1
 8003ed8:	e026      	b.n	8003f28 <pal_crypt_decrypt_aes128_ccm+0x78>
    mbedtls_ccm_init(&sDecrypt);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == p_plain_text) || (NULL == p_cipher_text) ||
 8003eda:	2c00      	cmp	r4, #0
 8003edc:	d0fb      	beq.n	8003ed6 <pal_crypt_decrypt_aes128_ccm+0x26>
 8003ede:	2e00      	cmp	r6, #0
 8003ee0:	d0f9      	beq.n	8003ed6 <pal_crypt_decrypt_aes128_ccm+0x26>
            (NULL == p_nonce) || (NULL == p_associated_data) || (NULL == p_decrypt_key))
 8003ee2:	f1b9 0f00 	cmp.w	r9, #0
 8003ee6:	d0f6      	beq.n	8003ed6 <pal_crypt_decrypt_aes128_ccm+0x26>
 8003ee8:	f1ba 0f00 	cmp.w	sl, #0
 8003eec:	d0f3      	beq.n	8003ed6 <pal_crypt_decrypt_aes128_ccm+0x26>
        {
            break;
        }
#endif

        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
 8003eee:	a806      	add	r0, sp, #24
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	4652      	mov	r2, sl
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	f004 fe04 	bl	8008b02 <mbedtls_ccm_setkey>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d1eb      	bne.n	8003ed6 <pal_crypt_decrypt_aes128_ccm+0x26>
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
                                          (cipher_text_length - mac_size),
 8003efe:	1be9      	subs	r1, r5, r7
        if (0 != mbedtls_ccm_setkey(&sDecrypt, MBEDTLS_CIPHER_ID_AES, p_decrypt_key, 8 * AES128_KEY_BITS_SIZE))
        {
            break;
        }

        if (0 != mbedtls_ccm_auth_decrypt(&sDecrypt,
 8003f00:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8003f04:	9402      	str	r4, [sp, #8]
 8003f06:	440c      	add	r4, r1
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	9404      	str	r4, [sp, #16]
 8003f0c:	f8cd 9000 	str.w	r9, [sp]
 8003f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f14:	9705      	str	r7, [sp, #20]
 8003f16:	a806      	add	r0, sp, #24
 8003f18:	4632      	mov	r2, r6
 8003f1a:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8003f1e:	f004 fe75 	bl	8008c0c <mbedtls_ccm_auth_decrypt>
                                          uint16_t associated_data_length,
                                          uint8_t mac_size,
                                          uint8_t * p_plain_text)
{
    #define AES128_KEY_BITS_SIZE    (16U)
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8003f22:	1c04      	adds	r4, r0, #0
 8003f24:	bf18      	it	ne
 8003f26:	2401      	movne	r4, #1
        {
            break;
        }
        return_status = PAL_STATUS_SUCCESS;
    } while (FALSE);
    mbedtls_ccm_free(&sDecrypt);
 8003f28:	a806      	add	r0, sp, #24
 8003f2a:	f004 fe0d 	bl	8008b48 <mbedtls_ccm_free>
    #undef AES128_KEY_BITS_SIZE
    return return_status;
}
 8003f2e:	4620      	mov	r0, r4
 8003f30:	b014      	add	sp, #80	; 0x50
 8003f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f36 <pal_gpio_set_high>:
    return PAL_STATUS_SUCCESS;
}

void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 8003f36:	b130      	cbz	r0, 8003f46 <pal_gpio_set_high+0x10>
 8003f38:	6803      	ldr	r3, [r0, #0]
 8003f3a:	b123      	cbz	r3, 8003f46 <pal_gpio_set_high+0x10>

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8003f3c:	7c19      	ldrb	r1, [r3, #16]
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2301      	movs	r3, #1
 8003f42:	408b      	lsls	r3, r1
 8003f44:	6053      	str	r3, [r2, #4]
 8003f46:	4770      	bx	lr

08003f48 <pal_gpio_set_low>:
    }
}

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 8003f48:	b138      	cbz	r0, 8003f5a <pal_gpio_set_low+0x12>
 8003f4a:	6803      	ldr	r3, [r0, #0]
 8003f4c:	b12b      	cbz	r3, 8003f5a <pal_gpio_set_low+0x12>

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8003f4e:	7c19      	ldrb	r1, [r3, #16]
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f56:	408b      	lsls	r3, r1
 8003f58:	6053      	str	r3, [r2, #4]
 8003f5a:	4770      	bx	lr

08003f5c <pal_i2c_acquire.isra.2>:
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
    if (0 == g_entry_count)
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <pal_i2c_acquire.isra.2+0x1c>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	b942      	cbnz	r2, 8003f74 <pal_i2c_acquire.isra.2+0x18>
    {
        g_entry_count++;
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	3201      	adds	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
        if (1 == g_entry_count)
 8003f68:	6818      	ldr	r0, [r3, #0]
        {
            return PAL_STATUS_SUCCESS;
        }
    }
    return PAL_STATUS_FAILURE;
 8003f6a:	f110 30ff 	adds.w	r0, r0, #4294967295
 8003f6e:	bf18      	it	ne
 8003f70:	2001      	movne	r0, #1
 8003f72:	4770      	bx	lr
 8003f74:	2001      	movs	r0, #1
}
 8003f76:	4770      	bx	lr
 8003f78:	1ffed858 	.word	0x1ffed858

08003f7c <invoke_upper_layer_callback>:
    g_entry_count = 0;
}
/// @endcond

void invoke_upper_layer_callback (const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8003f7c:	b508      	push	{r3, lr}
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8003f7e:	68c3      	ldr	r3, [r0, #12]
 8003f80:	6880      	ldr	r0, [r0, #8]
 8003f82:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8003f84:	4b01      	ldr	r3, [pc, #4]	; (8003f8c <invoke_upper_layer_callback+0x10>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	bd08      	pop	{r3, pc}
 8003f8c:	1ffed858 	.word	0x1ffed858

08003f90 <i2c_master_end_of_transmit_callback>:
}

/// @cond hidden
void i2c_master_end_of_transmit_callback(void)
{
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 8003f90:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <i2c_master_end_of_transmit_callback+0xc>)
 8003f92:	2100      	movs	r1, #0
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	f7ff bff1 	b.w	8003f7c <invoke_upper_layer_callback>
 8003f9a:	bf00      	nop
 8003f9c:	1ffed854 	.word	0x1ffed854

08003fa0 <i2c_master_end_of_receive_callback>:
}

void i2c_master_end_of_receive_callback(void)
{
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <i2c_master_end_of_receive_callback+0xc>)
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f7ff bfe9 	b.w	8003f7c <invoke_upper_layer_callback>
 8003faa:	bf00      	nop
 8003fac:	1ffed854 	.word	0x1ffed854

08003fb0 <i2c_master_error_detected_callback>:
}

void i2c_master_error_detected_callback(void)
{
 8003fb0:	b538      	push	{r3, r4, r5, lr}
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <i2c_master_error_detected_callback+0x4c>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	6814      	ldr	r4, [r2, #0]
 8003fb8:	68a2      	ldr	r2, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 8003fba:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8003fbe:	461d      	mov	r5, r3
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 8003fc0:	b922      	cbnz	r2, 8003fcc <i2c_master_error_detected_callback+0x1c>
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 8003fc4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 8003fc8:	b18b      	cbz	r3, 8003fee <i2c_master_error_detected_callback+0x3e>
 8003fca:	e008      	b.n	8003fde <i2c_master_error_detected_callback+0x2e>

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff fc9b 	bl	8003908 <I2C_MASTER_AbortTransmit>
 8003fd2:	68a2      	ldr	r2, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 8003fd4:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1fb      	bne.n	8003fd4 <i2c_master_error_detected_callback+0x24>
 8003fdc:	e7f1      	b.n	8003fc2 <i2c_master_error_detected_callback+0x12>
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f7ff fcbf 	bl	8003962 <I2C_MASTER_AbortReceive>
 8003fe4:	68a2      	ldr	r2, [r4, #8]
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 8003fe6:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1fb      	bne.n	8003fe6 <i2c_master_error_detected_callback+0x36>
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 8003fee:	6828      	ldr	r0, [r5, #0]
 8003ff0:	2101      	movs	r1, #1
}
 8003ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 8003ff6:	f7ff bfc1 	b.w	8003f7c <invoke_upper_layer_callback>
 8003ffa:	bf00      	nop
 8003ffc:	1ffed854 	.word	0x1ffed854

08004000 <i2c_master_nack_received_callback>:
}

void i2c_master_nack_received_callback(void)
{
    i2c_master_error_detected_callback();
 8004000:	f7ff bfd6 	b.w	8003fb0 <i2c_master_error_detected_callback>

08004004 <i2c_master_arbitration_lost_callback>:
}

void i2c_master_arbitration_lost_callback(void)
{
    i2c_master_error_detected_callback();
 8004004:	f7ff bfd4 	b.w	8003fb0 <i2c_master_error_detected_callback>

08004008 <pal_i2c_init>:
/// @endcond

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
    return PAL_STATUS_SUCCESS;
}
 8004008:	2000      	movs	r0, #0
 800400a:	4770      	bx	lr

0800400c <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
    return PAL_STATUS_SUCCESS;
}
 800400c:	2000      	movs	r0, #0
 800400e:	4770      	bx	lr

08004010 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8004010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004012:	4604      	mov	r4, r0
 8004014:	460f      	mov	r7, r1
 8004016:	4615      	mov	r5, r2
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8004018:	f7ff ffa0 	bl	8003f5c <pal_i2c_acquire.isra.2>
 800401c:	4606      	mov	r6, r0
 800401e:	b9a0      	cbnz	r0, 800404a <pal_i2c_write+0x3a>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <pal_i2c_write+0x48>)
        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
                                                             (bool)TRUE,
                                                             (p_i2c_context->slave_address << 1),
 8004022:	7922      	ldrb	r2, [r4, #4]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8004024:	601c      	str	r4, [r3, #0]
        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
 8004026:	9500      	str	r5, [sp, #0]
 8004028:	2501      	movs	r5, #1
 800402a:	9501      	str	r5, [sp, #4]
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	4629      	mov	r1, r5
 8004030:	40aa      	lsls	r2, r5
 8004032:	463b      	mov	r3, r7
 8004034:	f7ff f995 	bl	8003362 <I2C_MASTER_Transmit>
 8004038:	b160      	cbz	r0, 8004054 <pal_i2c_write+0x44>
                                                             (bool)TRUE))
        {
            //If I2C Master fails to invoke the write operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 800403a:	68e3      	ldr	r3, [r4, #12]
 800403c:	68a0      	ldr	r0, [r4, #8]
 800403e:	4629      	mov	r1, r5
 8004040:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <pal_i2c_write+0x4c>)
    return PAL_STATUS_SUCCESS;
}

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
 8004044:	4628      	mov	r0, r5
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004046:	601e      	str	r6, [r3, #0]
 8004048:	e004      	b.n	8004054 <pal_i2c_write+0x44>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 800404a:	68a0      	ldr	r0, [r4, #8]
 800404c:	68e3      	ldr	r3, [r4, #12]
 800404e:	2102      	movs	r1, #2
 8004050:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8004052:	2002      	movs	r0, #2
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    
    return status;
}
 8004054:	b003      	add	sp, #12
 8004056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004058:	1ffed854 	.word	0x1ffed854
 800405c:	1ffed858 	.word	0x1ffed858

08004060 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8004060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004062:	b085      	sub	sp, #20
 8004064:	4604      	mov	r4, r0
 8004066:	460f      	mov	r7, r1
 8004068:	4615      	mov	r5, r2
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 800406a:	f7ff ff77 	bl	8003f5c <pal_i2c_acquire.isra.2>
 800406e:	4606      	mov	r6, r0
 8004070:	b9a8      	cbnz	r0, 800409e <pal_i2c_read+0x3e>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <pal_i2c_read+0x4c>)

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
                                                            (bool)TRUE,
                                                            (p_i2c_context->slave_address << 1),
 8004074:	7922      	ldrb	r2, [r4, #4]
    pal_status_t status = PAL_STATUS_FAILURE;

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8004076:	601c      	str	r4, [r3, #0]

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
 8004078:	9500      	str	r5, [sp, #0]
 800407a:	2501      	movs	r5, #1
 800407c:	9501      	str	r5, [sp, #4]
 800407e:	9502      	str	r5, [sp, #8]
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	4629      	mov	r1, r5
 8004084:	40aa      	lsls	r2, r5
 8004086:	463b      	mov	r3, r7
 8004088:	f7ff fa89 	bl	800359e <I2C_MASTER_Receive>
 800408c:	b160      	cbz	r0, 80040a8 <pal_i2c_read+0x48>
                                                            (bool)TRUE))
        {
            //If I2C Master fails to invoke the read operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 800408e:	68e3      	ldr	r3, [r4, #12]
 8004090:	68a0      	ldr	r0, [r4, #8]
 8004092:	4629      	mov	r1, r5
 8004094:	4798      	blx	r3
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <pal_i2c_read+0x50>)
    return status;
}

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
    pal_status_t status = PAL_STATUS_FAILURE;
 8004098:	4628      	mov	r0, r5
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 800409a:	601e      	str	r6, [r3, #0]
 800409c:	e004      	b.n	80040a8 <pal_i2c_read+0x48>
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 800409e:	68a0      	ldr	r0, [r4, #8]
 80040a0:	68e3      	ldr	r3, [r4, #12]
 80040a2:	2102      	movs	r1, #2
 80040a4:	4798      	blx	r3
            status = PAL_STATUS_SUCCESS;
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 80040a6:	2002      	movs	r0, #2
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    
    return status;
}
 80040a8:	b005      	add	sp, #20
 80040aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ac:	1ffed854 	.word	0x1ffed854
 80040b0:	1ffed858 	.word	0x1ffed858

080040b4 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4605      	mov	r5, r0
    pal_status_t return_status = PAL_STATUS_FAILURE;
    optiga_lib_status_t event = PAL_I2C_EVENT_ERROR;

    //Acquire the I2C bus before setting the bitrate
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 80040b8:	f7ff ff50 	bl	8003f5c <pal_i2c_acquire.isra.2>
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 80040bc:	68eb      	ldr	r3, [r5, #12]
            event = PAL_I2C_EVENT_SUCCESS;
//        }
    }
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
 80040be:	2800      	cmp	r0, #0
 80040c0:	bf0c      	ite	eq
 80040c2:	2400      	moveq	r4, #0
 80040c4:	2402      	movne	r4, #2
        event = PAL_I2C_EVENT_BUSY;
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 80040c6:	b113      	cbz	r3, 80040ce <pal_i2c_set_bitrate+0x1a>
    {
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
 80040c8:	68a8      	ldr	r0, [r5, #8]
 80040ca:	4621      	mov	r1, r4
 80040cc:	4798      	blx	r3
    }
    //Release I2C Bus if its acquired 
    if (PAL_STATUS_I2C_BUSY != return_status)
 80040ce:	b914      	cbnz	r4, 80040d6 <pal_i2c_set_bitrate+0x22>
}

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
    g_entry_count = 0;
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <pal_i2c_set_bitrate+0x28>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
    if (PAL_STATUS_I2C_BUSY != return_status)
    {
        pal_i2c_release((void * )p_i2c_context);
    }
    return return_status;
}
 80040d6:	4620      	mov	r0, r4
 80040d8:	bd38      	pop	{r3, r4, r5, pc}
 80040da:	bf00      	nop
 80040dc:	1ffed858 	.word	0x1ffed858

080040e0 <cunit_console_uart_end_of_transmit_callback>:
        .logger_tx_flag = 1
};

void cunit_console_uart_end_of_transmit_callback(void)
{
    cunit_console.logger_tx_flag = 0;
 80040e0:	4b01      	ldr	r3, [pc, #4]	; (80040e8 <cunit_console_uart_end_of_transmit_callback+0x8>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	715a      	strb	r2, [r3, #5]
 80040e6:	4770      	bx	lr
 80040e8:	1ffed12c 	.word	0x1ffed12c

080040ec <cunit_console_uart_end_of_receive_callback>:
}

void cunit_console_uart_end_of_receive_callback(void)
{
    cunit_console.logger_rx_flag = 0;
 80040ec:	4b01      	ldr	r3, [pc, #4]	; (80040f4 <cunit_console_uart_end_of_receive_callback+0x8>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	711a      	strb	r2, [r3, #4]
 80040f2:	4770      	bx	lr
 80040f4:	1ffed12c 	.word	0x1ffed12c

080040f8 <pal_logger_init>:

/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
 80040f8:	b508      	push	{r3, lr}
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 80040fa:	6803      	ldr	r3, [r0, #0]
 80040fc:	b10b      	cbz	r3, 8004102 <pal_logger_init+0xa>
            while(!USBD_VCOM_IsEnumDone()){};
            return_status = PAL_STATUS_SUCCESS;
        }
        else
        {
            return_status = PAL_STATUS_SUCCESS;
 80040fe:	2000      	movs	r0, #0
 8004100:	bd08      	pop	{r3, pc}
    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
        {
            if(USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 8004102:	f7fe f849 	bl	8002198 <USBD_VCOM_Connect>
 8004106:	b920      	cbnz	r0, 8004112 <pal_logger_init+0x1a>
            {
                break;
            }

            while(!USBD_VCOM_IsEnumDone()){};
 8004108:	f7fd ff8c 	bl	8002024 <USBD_VCOM_IsEnumDone>
 800410c:	2800      	cmp	r0, #0
 800410e:	d0fb      	beq.n	8004108 <pal_logger_init+0x10>
 8004110:	e7f5      	b.n	80040fe <pal_logger_init+0x6>
/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004112:	2001      	movs	r0, #1
        {
            return_status = PAL_STATUS_SUCCESS;
        }
    }while(FALSE);
    return return_status;
}
 8004114:	bd08      	pop	{r3, pc}
	...

08004118 <pal_logger_write>:
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4604      	mov	r4, r0
 800411c:	4608      	mov	r0, r1
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	b94b      	cbnz	r3, 8004136 <pal_logger_write+0x1e>
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_SendData((int8_t *)p_log_data,(uint16_t)log_data_length))
 8004122:	b291      	uxth	r1, r2
 8004124:	f7fd ff8a 	bl	800203c <USBD_VCOM_SendData>
 8004128:	4604      	mov	r4, r0
 800412a:	b970      	cbnz	r0, 800414a <pal_logger_write+0x32>
            {
                break;
            }
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 800412c:	4808      	ldr	r0, [pc, #32]	; (8004150 <pal_logger_write+0x38>)
 800412e:	f7fd fef1 	bl	8001f14 <CDC_Device_USBTask>
            return_status = PAL_STATUS_SUCCESS;
 8004132:	4620      	mov	r0, r4
 8004134:	e00a      	b.n	800414c <pal_logger_write+0x34>
        }
        else
        {
            p_log_context->logger_tx_flag = 1U;
 8004136:	2001      	movs	r0, #1
 8004138:	7160      	strb	r0, [r4, #5]

            return_status = (int32_t)UART_Transmit(p_log_context->logger_config_ptr, (uint8_t *)p_log_data, log_data_length);
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fdd6 	bl	8002cec <UART_Transmit>
            if (return_status != PAL_STATUS_SUCCESS)
 8004140:	b920      	cbnz	r0, 800414c <pal_logger_write+0x34>
            {
                break;
            }
            while (p_log_context->logger_tx_flag)
 8004142:	7963      	ldrb	r3, [r4, #5]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1fc      	bne.n	8004142 <pal_logger_write+0x2a>
 8004148:	e000      	b.n	800414c <pal_logger_write+0x34>


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{

    int32_t return_status = PAL_STATUS_FAILURE;
 800414a:	2001      	movs	r0, #1
            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
}
 800414c:	b280      	uxth	r0, r0
 800414e:	bd38      	pop	{r3, r4, r5, pc}
 8004150:	1fff046c 	.word	0x1fff046c

08004154 <pal_logger_read>:

pal_status_t pal_logger_read(void * p_logger_context, uint8_t * p_log_data, uint32_t log_data_length)
{
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
    pal_logger_t * p_log_context = p_logger_context;

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	b94b      	cbnz	r3, 8004172 <pal_logger_read+0x1e>
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_ReceiveData((int8_t * )p_log_data,(uint16_t)log_data_length))
 800415e:	b291      	uxth	r1, r2
 8004160:	f7fd ff86 	bl	8002070 <USBD_VCOM_ReceiveData>
 8004164:	4604      	mov	r4, r0
 8004166:	b970      	cbnz	r0, 8004186 <pal_logger_read+0x32>
            {
                break;
            }
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 8004168:	4808      	ldr	r0, [pc, #32]	; (800418c <pal_logger_read+0x38>)
 800416a:	f7fd fed3 	bl	8001f14 <CDC_Device_USBTask>
            return_status = PAL_STATUS_SUCCESS;
 800416e:	4620      	mov	r0, r4
 8004170:	e00a      	b.n	8004188 <pal_logger_read+0x34>
        }
        else
        {
            p_log_context->logger_rx_flag = 1U;
 8004172:	2001      	movs	r0, #1
 8004174:	7120      	strb	r0, [r4, #4]
            return_status = (int32_t)UART_Receive(p_log_context->logger_config_ptr, p_log_data, log_data_length);
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fdf2 	bl	8002d60 <UART_Receive>
            if (return_status != PAL_STATUS_SUCCESS)
 800417c:	b920      	cbnz	r0, 8004188 <pal_logger_read+0x34>
            {
                break;
            }
            while (p_log_context->logger_rx_flag)
 800417e:	7923      	ldrb	r3, [r4, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1fc      	bne.n	800417e <pal_logger_read+0x2a>
 8004184:	e000      	b.n	8004188 <pal_logger_read+0x34>
}

pal_status_t pal_logger_read(void * p_logger_context, uint8_t * p_log_data, uint32_t log_data_length)
{

    int32_t return_status = PAL_STATUS_FAILURE;
 8004186:	2001      	movs	r0, #1
            }
            return_status = PAL_STATUS_SUCCESS;
        }
    } while(0);
    return ((pal_status_t)return_status);
}
 8004188:	b280      	uxth	r0, r0
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	1fff046c 	.word	0x1fff046c

08004190 <pal_os_datastore_write>:
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t offset = 0;

    switch(datastore_id)
 8004190:	2822      	cmp	r0, #34	; 0x22


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8004192:	b510      	push	{r4, lr}
 8004194:	4613      	mov	r3, r2
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint8_t offset = 0;

    switch(datastore_id)
 8004196:	d008      	beq.n	80041aa <pal_os_datastore_write+0x1a>
 8004198:	2833      	cmp	r0, #51	; 0x33
 800419a:	d008      	beq.n	80041ae <pal_os_datastore_write+0x1e>
 800419c:	2811      	cmp	r0, #17
 800419e:	d10f      	bne.n	80041c0 <pal_os_datastore_write+0x30>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of updating
            // the platform binding shared secret during the runtime into NVM.
            // In current implementation, platform binding shared secret is 
            // stored in RAM.
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 80041a0:	2a40      	cmp	r2, #64	; 0x40
 80041a2:	d80d      	bhi.n	80041c0 <pal_os_datastore_write+0x30>
            {
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 80041a4:	4807      	ldr	r0, [pc, #28]	; (80041c4 <pal_os_datastore_write+0x34>)
 80041a6:	2400      	movs	r4, #0
 80041a8:	e003      	b.n	80041b2 <pal_os_datastore_write+0x22>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the manage context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 80041aa:	4807      	ldr	r0, [pc, #28]	; (80041c8 <pal_os_datastore_write+0x38>)
 80041ac:	e000      	b.n	80041b0 <pal_os_datastore_write+0x20>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 80041ae:	4807      	ldr	r0, [pc, #28]	; (80041cc <pal_os_datastore_write+0x3c>)
 80041b0:	0a1c      	lsrs	r4, r3, #8
 80041b2:	7004      	strb	r4, [r0, #0]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 80041b4:	7043      	strb	r3, [r0, #1]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 80041b6:	3002      	adds	r0, #2
 80041b8:	f007 faee 	bl	800b798 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80041bc:	2000      	movs	r0, #0
            break;
 80041be:	bd10      	pop	{r4, pc}

pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 80041c0:	2001      	movs	r0, #1
        {
            break;
        }
    }
    return return_status;
}
 80041c2:	bd10      	pop	{r4, pc}
 80041c4:	1ffed13c 	.word	0x1ffed13c
 80041c8:	1fff07dc 	.word	0x1fff07dc
 80041cc:	1fff0820 	.word	0x1fff0820

080041d0 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4603      	mov	r3, r0
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint16_t data_length;
    uint8_t offset = 0;

    switch(datastore_id)
 80041d4:	2b22      	cmp	r3, #34	; 0x22


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 80041d6:	4608      	mov	r0, r1
 80041d8:	4615      	mov	r5, r2
    pal_status_t return_status = PAL_STATUS_FAILURE;
    uint16_t data_length;
    uint8_t offset = 0;

    switch(datastore_id)
 80041da:	d00b      	beq.n	80041f4 <pal_os_datastore_read+0x24>
 80041dc:	2b33      	cmp	r3, #51	; 0x33
 80041de:	d00b      	beq.n	80041f8 <pal_os_datastore_read+0x28>
 80041e0:	2b11      	cmp	r3, #17
 80041e2:	d115      	bne.n	8004210 <pal_os_datastore_read+0x40>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 80041e4:	490c      	ldr	r1, [pc, #48]	; (8004218 <pal_os_datastore_read+0x48>)
 80041e6:	780c      	ldrb	r4, [r1, #0]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 80041e8:	784b      	ldrb	r3, [r1, #1]
 80041ea:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 80041ee:	2c40      	cmp	r4, #64	; 0x40
 80041f0:	d810      	bhi.n	8004214 <pal_os_datastore_read+0x44>
 80041f2:	e006      	b.n	8004202 <pal_os_datastore_read+0x32>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 80041f4:	4909      	ldr	r1, [pc, #36]	; (800421c <pal_os_datastore_read+0x4c>)
 80041f6:	e000      	b.n	80041fa <pal_os_datastore_read+0x2a>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 80041f8:	4909      	ldr	r1, [pc, #36]	; (8004220 <pal_os_datastore_read+0x50>)
 80041fa:	780c      	ldrb	r4, [r1, #0]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 80041fc:	784b      	ldrb	r3, [r1, #1]
 80041fe:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 8004202:	3102      	adds	r1, #2
 8004204:	4622      	mov	r2, r4
 8004206:	f007 fac7 	bl	800b798 <memcpy>
            *p_buffer_length = data_length;
 800420a:	802c      	strh	r4, [r5, #0]
            return_status = PAL_STATUS_SUCCESS;
 800420c:	2000      	movs	r0, #0
            break;
 800420e:	bd38      	pop	{r3, r4, r5, pc}
        }
        default:
        {
            *p_buffer_length = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	8013      	strh	r3, [r2, #0]

pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8004214:	2001      	movs	r0, #1
            break;
        }
    }

    return return_status;
}
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	1ffed13c 	.word	0x1ffed13c
 800421c:	1fff07dc 	.word	0x1fff07dc
 8004220:	1fff0820 	.word	0x1fff0820

08004224 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
    //lint --e{714} suppress "The API pal_os_event_stop is not exposed in header file but used as extern in 
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	7003      	strb	r3, [r0, #0]
 8004228:	4770      	bx	lr
	...

0800422c <CCU43_1_IRQHandler>:
    }
    return (&pal_os_event_0);
}

void pal_os_event_trigger_registered_callback(void)
{
 800422c:	b510      	push	{r4, lr}
    register_callback callback;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    TIMER_ClearEvent(&scheduler_timer);
 800422e:	4808      	ldr	r0, [pc, #32]	; (8004250 <CCU43_1_IRQHandler+0x24>)
 8004230:	f7fe fee7 	bl	8003002 <TIMER_ClearEvent>
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_Stop(&scheduler_timer);
 8004234:	4806      	ldr	r0, [pc, #24]	; (8004250 <CCU43_1_IRQHandler+0x24>)
 8004236:	f7fe fed1 	bl	8002fdc <TIMER_Stop>
    TIMER_Clear(&scheduler_timer);
 800423a:	4805      	ldr	r0, [pc, #20]	; (8004250 <CCU43_1_IRQHandler+0x24>)
 800423c:	f7fe feec 	bl	8003018 <TIMER_Clear>

    if (pal_os_event_0.callback_registered)
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <CCU43_1_IRQHandler+0x28>)
 8004242:	6853      	ldr	r3, [r2, #4]
 8004244:	b11b      	cbz	r3, 800424e <CCU43_1_IRQHandler+0x22>
    {
        callback = pal_os_event_0.callback_registered;
        callback((void * )pal_os_event_0.callback_ctx);
 8004246:	6890      	ldr	r0, [r2, #8]
    }
}
 8004248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TIMER_Clear(&scheduler_timer);

    if (pal_os_event_0.callback_registered)
    {
        callback = pal_os_event_0.callback_registered;
        callback((void * )pal_os_event_0.callback_ctx);
 800424c:	4718      	bx	r3
 800424e:	bd10      	pop	{r4, pc}
 8004250:	1ffed084 	.word	0x1ffed084
 8004254:	1ffed85c 	.word	0x1ffed85c

08004258 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
 8004258:	b510      	push	{r4, lr}
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 800425a:	4c06      	ldr	r4, [pc, #24]	; (8004274 <pal_os_event_register_callback_oneshot+0x1c>)
void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
 800425c:	6041      	str	r1, [r0, #4]
    p_pal_os_event->callback_ctx = callback_args;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 800425e:	2164      	movs	r1, #100	; 0x64
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
    p_pal_os_event->callback_registered = callback;
    p_pal_os_event->callback_ctx = callback_args;
 8004260:	6082      	str	r2, [r0, #8]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 8004262:	4359      	muls	r1, r3
 8004264:	4620      	mov	r0, r4
 8004266:	f7fe feef 	bl	8003048 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
 800426a:	4620      	mov	r0, r4
}
 800426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
    TIMER_Start(&scheduler_timer);
 8004270:	f7fe be9c 	b.w	8002fac <TIMER_Start>
 8004274:	1ffed084 	.word	0x1ffed084

08004278 <pal_os_event_start>:
/// @cond hidden

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8004278:	b510      	push	{r4, lr}
    if (FALSE == p_pal_os_event->is_event_triggered)
 800427a:	7804      	ldrb	r4, [r0, #0]
 800427c:	b93c      	cbnz	r4, 800428e <pal_os_event_start+0x16>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 800427e:	2401      	movs	r4, #1
 8004280:	7004      	strb	r4, [r0, #0]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 8004282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    }
}
 8004286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
    if (FALSE == p_pal_os_event->is_event_triggered)
    {
        p_pal_os_event->is_event_triggered = TRUE;
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 800428a:	f7ff bfe5 	b.w	8004258 <pal_os_event_register_callback_oneshot>
 800428e:	bd10      	pop	{r4, pc}

08004290 <pal_os_event_create>:
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
}

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8004290:	460a      	mov	r2, r1
 8004292:	b508      	push	{r3, lr}
    if (( NULL != callback )&&( NULL != callback_args ))
 8004294:	4601      	mov	r1, r0
 8004296:	b118      	cbz	r0, 80042a0 <pal_os_event_create+0x10>
 8004298:	b112      	cbz	r2, 80042a0 <pal_os_event_create+0x10>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 800429a:	4802      	ldr	r0, [pc, #8]	; (80042a4 <pal_os_event_create+0x14>)
 800429c:	f7ff ffec 	bl	8004278 <pal_os_event_start>
    }
    return (&pal_os_event_0);
}
 80042a0:	4800      	ldr	r0, [pc, #0]	; (80042a4 <pal_os_event_create+0x14>)
 80042a2:	bd08      	pop	{r3, pc}
 80042a4:	1ffed85c 	.word	0x1ffed85c

080042a8 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 80042a8:	4770      	bx	lr

080042aa <pal_os_lock_exit_critical_section>:
}

void pal_os_lock_exit_critical_section()
{
 80042aa:	4770      	bx	lr

080042ac <pal_os_calloc>:
    return (malloc(block_size));
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
    return (calloc(number_of_blocks, block_size));
 80042ac:	f007 ba26 	b.w	800b6fc <calloc>

080042b0 <pal_os_free>:
}

void pal_os_free(void * p_block)
{
    free(p_block);
 80042b0:	f007 ba5a 	b.w	800b768 <free>

080042b4 <pal_os_memcpy>:
}

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
    memcpy(p_destination, p_source, size);
 80042b4:	f007 ba70 	b.w	800b798 <memcpy>

080042b8 <pal_os_memset>:
}

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
    memset(p_buffer, (int32_t)value, size);
 80042b8:	f007 ba79 	b.w	800b7ae <memset>

080042bc <CCU41_1_IRQHandler>:

/// @cond hidden
static volatile uint32_t g_tick_count = 0;

void delay_timer_isr(void)
{
 80042bc:	b510      	push	{r4, lr}
    TIMER_ClearEvent(&tick_timer);
 80042be:	4c06      	ldr	r4, [pc, #24]	; (80042d8 <CCU41_1_IRQHandler+0x1c>)
 80042c0:	4620      	mov	r0, r4
 80042c2:	f7fe fe9e 	bl	8003002 <TIMER_ClearEvent>
    (void)TIMER_Clear(&tick_timer);
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7fe fea6 	bl	8003018 <TIMER_Clear>
    g_tick_count += 1U;
 80042cc:	4a03      	ldr	r2, [pc, #12]	; (80042dc <CCU41_1_IRQHandler+0x20>)
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	bf00      	nop
 80042d8:	1ffed05c 	.word	0x1ffed05c
 80042dc:	1ffed86c 	.word	0x1ffed86c

080042e0 <pal_os_timer_get_time_in_microseconds>:
{
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // This API is needed to support optiga cmd scheduler. 
    static uint32_t count = 0;
    // The implementation must ensure that every invocation of this API returns a unique value.
    return (count++);
 80042e0:	4b02      	ldr	r3, [pc, #8]	; (80042ec <pal_os_timer_get_time_in_microseconds+0xc>)
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	1c42      	adds	r2, r0, #1
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	1ffed870 	.word	0x1ffed870

080042f0 <pal_os_timer_get_time_in_milliseconds>:

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
 80042f0:	4b01      	ldr	r3, [pc, #4]	; (80042f8 <pal_os_timer_get_time_in_milliseconds+0x8>)
 80042f2:	6818      	ldr	r0, [r3, #0]
}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	1ffed86c 	.word	0x1ffed86c

080042fc <pal_os_timer_delay_in_milliseconds>:
    return (count++);
}

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
 80042fc:	4a04      	ldr	r2, [pc, #16]	; (8004310 <pal_os_timer_delay_in_milliseconds+0x14>)
 80042fe:	6811      	ldr	r1, [r2, #0]
    uint32_t current_time;
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
 8004300:	2300      	movs	r3, #0
    while (time_stamp_diff <= (uint32_t)milliseconds)
 8004302:	4283      	cmp	r3, r0
 8004304:	d802      	bhi.n	800430c <pal_os_timer_delay_in_milliseconds+0x10>
    return (count++);
}

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
    return (g_tick_count);
 8004306:	6813      	ldr	r3, [r2, #0]
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
    {
        current_time = pal_os_timer_get_time_in_milliseconds();
        time_stamp_diff = current_time - start_time;
 8004308:	1a5b      	subs	r3, r3, r1
 800430a:	e7fa      	b.n	8004302 <pal_os_timer_delay_in_milliseconds+0x6>
        if (start_time > current_time)
        {
            time_stamp_diff = (0xFFFFFFFF + (current_time - start_time)) + 0x01;
        }        
    }
}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	1ffed86c 	.word	0x1ffed86c

08004314 <optiga_util_generic_event_handler>:
_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004314:	2300      	movs	r3, #0
 8004316:	8403      	strh	r3, [r0, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8004318:	69c3      	ldr	r3, [r0, #28]
 800431a:	6980      	ldr	r0, [r0, #24]
 800431c:	4718      	bx	r3

0800431e <optiga_util_reset_protection_level>:
}

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 800431e:	b110      	cbz	r0, 8004326 <optiga_util_reset_protection_level+0x8>
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8004320:	2300      	movs	r3, #0
 8004322:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8004326:	4770      	bx	lr

08004328 <optiga_util_write_data_wrapper>:
                                                             uint16_t optiga_oid,
                                                             uint8_t write_type,
                                                             uint16_t offset,
                                                             const uint8_t * p_buffer,
                                                             uint16_t length)
{
 8004328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800432c:	9e06      	ldr	r6, [sp, #24]
 800432e:	4688      	mov	r8, r1
 8004330:	4615      	mov	r5, r2
 8004332:	461f      	mov	r7, r3
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 8004334:	4604      	mov	r4, r0
 8004336:	2800      	cmp	r0, #0
 8004338:	d037      	beq.n	80043aa <optiga_util_write_data_wrapper+0x82>
 800433a:	6943      	ldr	r3, [r0, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d034      	beq.n	80043aa <optiga_util_write_data_wrapper+0x82>
 8004340:	2e00      	cmp	r6, #0
 8004342:	d032      	beq.n	80043aa <optiga_util_write_data_wrapper+0x82>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8004344:	8c03      	ldrh	r3, [r0, #32]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d032      	beq.n	80043b0 <optiga_util_write_data_wrapper+0x88>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800434a:	2301      	movs	r3, #1
 800434c:	8403      	strh	r3, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 800434e:	2100      	movs	r1, #0
 8004350:	2214      	movs	r2, #20
 8004352:	f7ff ffb1 	bl	80042b8 <pal_os_memset>

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
 8004356:	2d02      	cmp	r5, #2
        {
            p_params->count = p_buffer[0];
 8004358:	bf06      	itte	eq
 800435a:	7833      	ldrbeq	r3, [r6, #0]
 800435c:	73a3      	strbeq	r3, [r4, #14]
            p_params->buffer = NULL;
        }
        else
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
 800435e:	60a6      	strne	r6, [r4, #8]
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
 8004360:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8004364:	80a3      	strh	r3, [r4, #4]
 8004366:	f04f 0200 	mov.w	r2, #0
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
 800436a:	f04f 0600 	mov.w	r6, #0
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
        {
            p_params->count = p_buffer[0];
            p_params->buffer = NULL;
 800436e:	bf0c      	ite	eq
 8004370:	60a2      	streq	r2, [r4, #8]
        }
        else
        {
            p_params->count = 0;
 8004372:	73a2      	strbne	r2, [r4, #14]
        p_params->oid = optiga_oid;
        p_params->offset = offset;
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;
 8004374:	7365      	strb	r5, [r4, #13]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004376:	6960      	ldr	r0, [r4, #20]
 8004378:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        else
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
 800437c:	f8a4 8000 	strh.w	r8, [r4]
        p_params->data_or_metadata = 0;//for Data
        p_params->size = length;
        p_params->written_size = 0;
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004380:	4632      	mov	r2, r6
        {
            p_params->count = 0;
            p_params->buffer = p_buffer;
        }
        p_params->oid = optiga_oid;
        p_params->offset = offset;
 8004382:	8067      	strh	r7, [r4, #2]
        p_params->data_or_metadata = 0;//for Data
 8004384:	7326      	strb	r6, [r4, #12]
        p_params->size = length;
        p_params->written_size = 0;
 8004386:	80e6      	strh	r6, [r4, #6]
        p_params->write_type = write_type;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004388:	f003 fa92 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800438c:	6960      	ldr	r0, [r4, #20]
 800438e:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8004392:	2201      	movs	r2, #1
 8004394:	f003 fa8c 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
 8004398:	4629      	mov	r1, r5
 800439a:	6960      	ldr	r0, [r4, #20]
 800439c:	4622      	mov	r2, r4
 800439e:	f003 fb47 	bl	8007a30 <optiga_cmd_set_data_object>
        if (OPTIGA_LIB_SUCCESS != return_value)
 80043a2:	4605      	mov	r5, r0
 80043a4:	b130      	cbz	r0, 80043b4 <optiga_util_write_data_wrapper+0x8c>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80043a6:	8426      	strh	r6, [r4, #32]
 80043a8:	e004      	b.n	80043b4 <optiga_util_write_data_wrapper+0x8c>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80043aa:	f240 3503 	movw	r5, #771	; 0x303
 80043ae:	e001      	b.n	80043b4 <optiga_util_write_data_wrapper+0x8c>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80043b0:	f240 3505 	movw	r5, #773	; 0x305
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7ff ffb2 	bl	800431e <optiga_util_reset_protection_level>

    return (return_value);
}
 80043ba:	4628      	mov	r0, r5
 80043bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043c0 <optiga_util_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
    switch (parameter_type)
 80043c0:	2901      	cmp	r1, #1
 80043c2:	d002      	beq.n	80043ca <optiga_util_set_comms_params+0xa>
 80043c4:	2902      	cmp	r1, #2
 80043c6:	d003      	beq.n	80043d0 <optiga_util_set_comms_params+0x10>
 80043c8:	4770      	bx	lr
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80043ca:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
            break;
 80043ce:	4770      	bx	lr
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
 80043d0:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
 80043d4:	4770      	bx	lr
	...

080043d8 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	4606      	mov	r6, r0
 80043dc:	4617      	mov	r7, r2
    optiga_util_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80043de:	460d      	mov	r5, r1
 80043e0:	b909      	cbnz	r1, 80043e6 <optiga_util_create+0xe>

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
    optiga_util_t * me = NULL;
 80043e2:	2400      	movs	r4, #0
 80043e4:	e01b      	b.n	800441e <optiga_util_create+0x46>
        if (NULL == handler)
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 80043e6:	2001      	movs	r0, #1
 80043e8:	2124      	movs	r1, #36	; 0x24
 80043ea:	f7ff ff5f 	bl	80042ac <pal_os_calloc>
        if (NULL == me)
 80043ee:	4604      	mov	r4, r0
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d0f6      	beq.n	80043e2 <optiga_util_create+0xa>
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80043f4:	2300      	movs	r3, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80043f6:	2201      	movs	r2, #1
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 80043f8:	61c5      	str	r5, [r0, #28]
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80043fa:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
        {
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
 80043fe:	6187      	str	r7, [r0, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8004400:	8403      	strh	r3, [r0, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8004402:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8004406:	4907      	ldr	r1, [pc, #28]	; (8004424 <optiga_util_create+0x4c>)
 8004408:	4630      	mov	r0, r6
 800440a:	4622      	mov	r2, r4
 800440c:	f003 fa5c 	bl	80078c8 <optiga_cmd_create>
 8004410:	4605      	mov	r5, r0
 8004412:	6160      	str	r0, [r4, #20]
        if (NULL == me->my_cmd)
 8004414:	b918      	cbnz	r0, 800441e <optiga_util_create+0x46>
        {
            pal_os_free(me);
 8004416:	4620      	mov	r0, r4
 8004418:	f7ff ff4a 	bl	80042b0 <pal_os_free>
            me = NULL;
 800441c:	462c      	mov	r4, r5
        }
    } while (FALSE);

    return (me);
}
 800441e:	4620      	mov	r0, r4
 8004420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004422:	bf00      	nop
 8004424:	08004315 	.word	0x08004315

08004428 <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 8004428:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 800442a:	4604      	mov	r4, r0
 800442c:	b150      	cbz	r0, 8004444 <optiga_util_destroy+0x1c>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800442e:	8c03      	ldrh	r3, [r0, #32]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d00a      	beq.n	800444a <optiga_util_destroy+0x22>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8004434:	6940      	ldr	r0, [r0, #20]
 8004436:	f003 fa9f 	bl	8007978 <optiga_cmd_destroy>
 800443a:	4605      	mov	r5, r0
        pal_os_free(me);
 800443c:	4620      	mov	r0, r4
 800443e:	f7ff ff37 	bl	80042b0 <pal_os_free>
 8004442:	e004      	b.n	800444e <optiga_util_destroy+0x26>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8004444:	f240 3503 	movw	r5, #771	; 0x303
 8004448:	e001      	b.n	800444e <optiga_util_destroy+0x26>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800444a:	f240 3505 	movw	r5, #773	; 0x305
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);
    } while (FALSE);
    return (return_value);
}
 800444e:	4628      	mov	r0, r5
 8004450:	bd38      	pop	{r3, r4, r5, pc}

08004452 <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8004452:	b570      	push	{r4, r5, r6, lr}
 8004454:	460d      	mov	r5, r1

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8004456:	4604      	mov	r4, r0
 8004458:	b318      	cbz	r0, 80044a2 <optiga_util_open_application+0x50>
 800445a:	6940      	ldr	r0, [r0, #20]
 800445c:	b308      	cbz	r0, 80044a2 <optiga_util_open_application+0x50>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800445e:	8c23      	ldrh	r3, [r4, #32]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d021      	beq.n	80044a8 <optiga_util_open_application+0x56>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8004464:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004466:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800446a:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800446c:	2200      	movs	r2, #0
 800446e:	f003 fa1f 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8004472:	6960      	ldr	r0, [r4, #20]
 8004474:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8004478:	4632      	mov	r2, r6
 800447a:	f003 fa19 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 800447e:	6960      	ldr	r0, [r4, #20]

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 8004480:	b90d      	cbnz	r5, 8004486 <optiga_util_open_application+0x34>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 8004482:	2133      	movs	r1, #51	; 0x33
 8004484:	e000      	b.n	8004488 <optiga_util_open_application+0x36>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8004486:	2111      	movs	r1, #17
 8004488:	2202      	movs	r2, #2
 800448a:	f003 fa11 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 800448e:	4629      	mov	r1, r5
 8004490:	6960      	ldr	r0, [r4, #20]
 8004492:	2200      	movs	r2, #0
 8004494:	f003 fa92 	bl	80079bc <optiga_cmd_open_application>
        if (OPTIGA_LIB_SUCCESS != return_value)
 8004498:	4605      	mov	r5, r0
 800449a:	b138      	cbz	r0, 80044ac <optiga_util_open_application+0x5a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800449c:	2300      	movs	r3, #0
 800449e:	8423      	strh	r3, [r4, #32]
 80044a0:	e004      	b.n	80044ac <optiga_util_open_application+0x5a>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80044a2:	f240 3503 	movw	r5, #771	; 0x303
 80044a6:	e001      	b.n	80044ac <optiga_util_open_application+0x5a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80044a8:	f240 3505 	movw	r5, #773	; 0x305
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff ff36 	bl	800431e <optiga_util_reset_protection_level>

    return (return_value);
}
 80044b2:	4628      	mov	r0, r5
 80044b4:	bd70      	pop	{r4, r5, r6, pc}

080044b6 <optiga_util_close_application>:

optiga_lib_status_t optiga_util_close_application(optiga_util_t * me,
                                                  bool_t perform_hibernate)
{
 80044b6:	b570      	push	{r4, r5, r6, lr}
 80044b8:	460d      	mov	r5, r1
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 80044ba:	4604      	mov	r4, r0
 80044bc:	b318      	cbz	r0, 8004506 <optiga_util_close_application+0x50>
 80044be:	6940      	ldr	r0, [r0, #20]
 80044c0:	b308      	cbz	r0, 8004506 <optiga_util_close_application+0x50>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80044c2:	8c23      	ldrh	r3, [r4, #32]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d021      	beq.n	800450c <optiga_util_close_application+0x56>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80044c8:	2601      	movs	r6, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80044ca:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80044ce:	8426      	strh	r6, [r4, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80044d0:	2200      	movs	r2, #0
 80044d2:	f003 f9ed 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80044d6:	6960      	ldr	r0, [r4, #20]
 80044d8:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80044dc:	4632      	mov	r2, r6
 80044de:	f003 f9e7 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_hibernate)
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80044e2:	6960      	ldr	r0, [r4, #20]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_hibernate)
 80044e4:	b90d      	cbnz	r5, 80044ea <optiga_util_close_application+0x34>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80044e6:	2133      	movs	r1, #51	; 0x33
 80044e8:	e000      	b.n	80044ec <optiga_util_close_application+0x36>
        }
        else
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_SAVE);
 80044ea:	2122      	movs	r1, #34	; 0x22
 80044ec:	2202      	movs	r2, #2
 80044ee:	f003 f9df 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_close_application(me->my_cmd, perform_hibernate, NULL);
 80044f2:	4629      	mov	r1, r5
 80044f4:	6960      	ldr	r0, [r4, #20]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f003 fa72 	bl	80079e0 <optiga_cmd_close_application>
        if (OPTIGA_LIB_SUCCESS != return_value)
 80044fc:	4605      	mov	r5, r0
 80044fe:	b138      	cbz	r0, 8004510 <optiga_util_close_application+0x5a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004500:	2300      	movs	r3, #0
 8004502:	8423      	strh	r3, [r4, #32]
 8004504:	e004      	b.n	8004510 <optiga_util_close_application+0x5a>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8004506:	f240 3503 	movw	r5, #771	; 0x303
 800450a:	e001      	b.n	8004510 <optiga_util_close_application+0x5a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800450c:	f240 3505 	movw	r5, #773	; 0x305
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff ff04 	bl	800431e <optiga_util_reset_protection_level>

    return (return_value);
}
 8004516:	4628      	mov	r0, r5
 8004518:	bd70      	pop	{r4, r5, r6, pc}

0800451a <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 800451a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800451e:	9d08      	ldr	r5, [sp, #32]
 8004520:	4689      	mov	r9, r1
 8004522:	4616      	mov	r6, r2
 8004524:	4698      	mov	r8, r3
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8004526:	4604      	mov	r4, r0
 8004528:	b378      	cbz	r0, 800458a <optiga_util_read_data+0x70>
 800452a:	6943      	ldr	r3, [r0, #20]
 800452c:	b36b      	cbz	r3, 800458a <optiga_util_read_data+0x70>
 800452e:	f1b8 0f00 	cmp.w	r8, #0
 8004532:	d02a      	beq.n	800458a <optiga_util_read_data+0x70>
            (NULL == buffer) || (NULL == length))
 8004534:	b34d      	cbz	r5, 800458a <optiga_util_read_data+0x70>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8004536:	8c03      	ldrh	r3, [r0, #32]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d029      	beq.n	8004590 <optiga_util_read_data+0x76>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800453c:	2701      	movs	r7, #1
 800453e:	8407      	strh	r7, [r0, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8004540:	2100      	movs	r1, #0
 8004542:	2214      	movs	r2, #20
 8004544:	f7ff feb8 	bl	80042b8 <pal_os_memset>

        p_params->oid = optiga_oid;
        p_params->offset = offset;
 8004548:	8066      	strh	r6, [r4, #2]
        // set option to read data
        p_params->data_or_metadata = 0;
 800454a:	2600      	movs	r6, #0

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
 800454c:	f8a4 9000 	strh.w	r9, [r4]
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
 8004550:	72a6      	strb	r6, [r4, #10]
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 8004552:	882b      	ldrh	r3, [r5, #0]
 8004554:	80a3      	strh	r3, [r4, #4]
        p_params->ref_bytes_to_read = length;
 8004556:	60e5      	str	r5, [r4, #12]
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004558:	6960      	ldr	r0, [r4, #20]
 800455a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22

        p_params->oid = optiga_oid;
        p_params->offset = offset;
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
 800455e:	f8c4 8010 	str.w	r8, [r4, #16]
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004562:	4632      	mov	r2, r6
        // set option to read data
        p_params->data_or_metadata = 0;
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
 8004564:	80e6      	strh	r6, [r4, #6]
        p_params->last_read_size = 0;
 8004566:	8126      	strh	r6, [r4, #8]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004568:	f003 f9a2 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800456c:	6960      	ldr	r0, [r4, #20]
 800456e:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8004572:	463a      	mov	r2, r7
 8004574:	f003 f99c 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 8004578:	6960      	ldr	r0, [r4, #20]
 800457a:	7aa1      	ldrb	r1, [r4, #10]
 800457c:	4622      	mov	r2, r4
 800457e:	f003 fa43 	bl	8007a08 <optiga_cmd_get_data_object>
        if (OPTIGA_LIB_SUCCESS != return_value)
 8004582:	4605      	mov	r5, r0
 8004584:	b130      	cbz	r0, 8004594 <optiga_util_read_data+0x7a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004586:	8426      	strh	r6, [r4, #32]
 8004588:	e004      	b.n	8004594 <optiga_util_read_data+0x7a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800458a:	f240 3503 	movw	r5, #771	; 0x303
 800458e:	e001      	b.n	8004594 <optiga_util_read_data+0x7a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8004590:	f240 3505 	movw	r5, #773	; 0x305
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8004594:	4620      	mov	r0, r4
 8004596:	f7ff fec2 	bl	800431e <optiga_util_reset_protection_level>

    return (return_value);
}
 800459a:	4628      	mov	r0, r5
 800459c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080045a0 <optiga_util_read_metadata>:

optiga_lib_status_t optiga_util_read_metadata(optiga_util_t * me,
                                              uint16_t optiga_oid,
                                              uint8_t * buffer,
                                              uint16_t * length)
{
 80045a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	460e      	mov	r6, r1
 80045a6:	4690      	mov	r8, r2
 80045a8:	461f      	mov	r7, r3
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80045aa:	4604      	mov	r4, r0
 80045ac:	b360      	cbz	r0, 8004608 <optiga_util_read_metadata+0x68>
 80045ae:	6943      	ldr	r3, [r0, #20]
 80045b0:	b353      	cbz	r3, 8004608 <optiga_util_read_metadata+0x68>
 80045b2:	b34a      	cbz	r2, 8004608 <optiga_util_read_metadata+0x68>
            (NULL == buffer) || (NULL == length))
 80045b4:	b347      	cbz	r7, 8004608 <optiga_util_read_metadata+0x68>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80045b6:	8c03      	ldrh	r3, [r0, #32]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d028      	beq.n	800460e <optiga_util_read_metadata+0x6e>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80045bc:	2501      	movs	r5, #1
 80045be:	8405      	strh	r5, [r0, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80045c0:	2100      	movs	r1, #0
 80045c2:	2214      	movs	r2, #20
 80045c4:	f7ff fe78 	bl	80042b8 <pal_os_memset>

        p_params->oid = optiga_oid;
 80045c8:	8026      	strh	r6, [r4, #0]
        p_params->offset = 0;
 80045ca:	2600      	movs	r6, #0
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
 80045cc:	72a5      	strb	r5, [r4, #10]
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
 80045ce:	8066      	strh	r6, [r4, #2]
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
 80045d0:	883b      	ldrh	r3, [r7, #0]
 80045d2:	80a3      	strh	r3, [r4, #4]
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80045d4:	6960      	ldr	r0, [r4, #20]
 80045d6:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
 80045da:	f8c4 8010 	str.w	r8, [r4, #16]
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
        p_params->accumulated_size = 0;
        p_params->last_read_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80045de:	4632      	mov	r2, r6
        p_params->offset = 0;
        // set option to read metadata
        p_params->data_or_metadata = 1;//for metadata
        p_params->buffer = buffer;
        p_params->bytes_to_read = *length;
        p_params->ref_bytes_to_read = length;
 80045e0:	60e7      	str	r7, [r4, #12]
        p_params->accumulated_size = 0;
 80045e2:	80e6      	strh	r6, [r4, #6]
        p_params->last_read_size = 0;
 80045e4:	8126      	strh	r6, [r4, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80045e6:	f003 f963 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80045ea:	462a      	mov	r2, r5
 80045ec:	6960      	ldr	r0, [r4, #20]
 80045ee:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80045f2:	f003 f95d 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata,
 80045f6:	6960      	ldr	r0, [r4, #20]
 80045f8:	7aa1      	ldrb	r1, [r4, #10]
 80045fa:	4622      	mov	r2, r4
 80045fc:	f003 fa04 	bl	8007a08 <optiga_cmd_get_data_object>
                                                  (optiga_get_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8004600:	4605      	mov	r5, r0
 8004602:	b130      	cbz	r0, 8004612 <optiga_util_read_metadata+0x72>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004604:	8426      	strh	r6, [r4, #32]
 8004606:	e004      	b.n	8004612 <optiga_util_read_metadata+0x72>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == buffer) || (NULL == length))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8004608:	f240 3503 	movw	r5, #771	; 0x303
 800460c:	e001      	b.n	8004612 <optiga_util_read_metadata+0x72>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800460e:	f240 3505 	movw	r5, #773	; 0x305
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff fe83 	bl	800431e <optiga_util_reset_protection_level>

    return (return_value);
}
 8004618:	4628      	mov	r0, r5
 800461a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800461e <optiga_util_write_data>:
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
 800461e:	b530      	push	{r4, r5, lr}
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
 8004620:	f012 0fbf 	tst.w	r2, #191	; 0xbf
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
 8004624:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
 8004628:	d104      	bne.n	8004634 <optiga_util_write_data+0x16>
        {
            break;
        }
        return_value =  optiga_util_write_data_wrapper(me,
 800462a:	9404      	str	r4, [sp, #16]
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
}
 800462c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
        {
            break;
        }
        return_value =  optiga_util_write_data_wrapper(me,
 8004630:	f7ff be7a 	b.w	8004328 <optiga_util_write_data_wrapper>
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
}
 8004634:	f240 3003 	movw	r0, #771	; 0x303
 8004638:	bd30      	pop	{r4, r5, pc}

0800463a <optiga_util_write_metadata>:

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
 800463a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463e:	460e      	mov	r6, r1
 8004640:	4617      	mov	r7, r2
 8004642:	4698      	mov	r8, r3
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
 8004644:	4604      	mov	r4, r0
 8004646:	b348      	cbz	r0, 800469c <optiga_util_write_metadata+0x62>
 8004648:	6943      	ldr	r3, [r0, #20]
 800464a:	b33b      	cbz	r3, 800469c <optiga_util_write_metadata+0x62>
 800464c:	b332      	cbz	r2, 800469c <optiga_util_write_metadata+0x62>
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800464e:	8c03      	ldrh	r3, [r0, #32]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d026      	beq.n	80046a2 <optiga_util_write_metadata+0x68>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8004654:	2501      	movs	r5, #1
 8004656:	8405      	strh	r5, [r0, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8004658:	2100      	movs	r1, #0
 800465a:	2214      	movs	r2, #20
 800465c:	f7ff fe2c 	bl	80042b8 <pal_os_memset>

        p_params->oid = optiga_oid;
 8004660:	8026      	strh	r6, [r4, #0]
        p_params->offset = 0;
 8004662:	2600      	movs	r6, #0
        //for Metadata
        p_params->data_or_metadata = 1;
 8004664:	7325      	strb	r5, [r4, #12]
        p_params->buffer = buffer;
        p_params->size = length;
        p_params->write_type = 1;
 8004666:	7365      	strb	r5, [r4, #13]
        p_params->written_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004668:	6960      	ldr	r0, [r4, #20]
 800466a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));

        p_params->oid = optiga_oid;
        p_params->offset = 0;
 800466e:	8066      	strh	r6, [r4, #2]
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
        p_params->size = length;
        p_params->write_type = 1;
        p_params->written_size = 0;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004670:	4632      	mov	r2, r6

        p_params->oid = optiga_oid;
        p_params->offset = 0;
        //for Metadata
        p_params->data_or_metadata = 1;
        p_params->buffer = buffer;
 8004672:	60a7      	str	r7, [r4, #8]
        p_params->size = length;
 8004674:	f8a4 8004 	strh.w	r8, [r4, #4]
        p_params->write_type = 1;
        p_params->written_size = 0;
 8004678:	80e6      	strh	r6, [r4, #6]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800467a:	f003 f919 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800467e:	462a      	mov	r2, r5
 8004680:	6960      	ldr	r0, [r4, #20]
 8004682:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8004686:	f003 f913 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, p_params->write_type,
 800468a:	6960      	ldr	r0, [r4, #20]
 800468c:	7b61      	ldrb	r1, [r4, #13]
 800468e:	4622      	mov	r2, r4
 8004690:	f003 f9ce 	bl	8007a30 <optiga_cmd_set_data_object>
                                                  (optiga_set_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8004694:	4605      	mov	r5, r0
 8004696:	b130      	cbz	r0, 80046a6 <optiga_util_write_metadata+0x6c>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004698:	8426      	strh	r6, [r4, #32]
 800469a:	e004      	b.n	80046a6 <optiga_util_write_metadata+0x6c>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800469c:	f240 3503 	movw	r5, #771	; 0x303
 80046a0:	e001      	b.n	80046a6 <optiga_util_write_metadata+0x6c>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80046a2:	f240 3505 	movw	r5, #773	; 0x305
        if (OPTIGA_LIB_SUCCESS != return_value)
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7ff fe39 	bl	800431e <optiga_util_reset_protection_level>

    return (return_value);
}
 80046ac:	4628      	mov	r0, r5
 80046ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046b2 <optiga_util_protected_update_start>:

optiga_lib_status_t optiga_util_protected_update_start(optiga_util_t * me,
                                                       uint8_t manifest_version,
                                                       const uint8_t * manifest,
                                                       uint16_t manifest_length)
{
 80046b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b6:	4688      	mov	r8, r1
 80046b8:	4615      	mov	r5, r2
 80046ba:	461f      	mov	r7, r3
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == manifest))
 80046bc:	4604      	mov	r4, r0
 80046be:	b330      	cbz	r0, 800470e <optiga_util_protected_update_start+0x5c>
 80046c0:	6943      	ldr	r3, [r0, #20]
 80046c2:	b323      	cbz	r3, 800470e <optiga_util_protected_update_start+0x5c>
 80046c4:	b31a      	cbz	r2, 800470e <optiga_util_protected_update_start+0x5c>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80046c6:	8c03      	ldrh	r3, [r0, #32]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d023      	beq.n	8004714 <optiga_util_protected_update_start+0x62>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80046cc:	2601      	movs	r6, #1
 80046ce:	8406      	strh	r6, [r0, #32]
        p_params = (optiga_set_object_protected_params_t *)&(me->params.optiga_set_object_protected_params);

        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80046d0:	2100      	movs	r1, #0
 80046d2:	2214      	movs	r2, #20
 80046d4:	f7ff fdf0 	bl	80042b8 <pal_os_memset>
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80046d8:	6960      	ldr	r0, [r4, #20]
 80046da:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
        p_params = (optiga_set_object_protected_params_t *)&(me->params.optiga_set_object_protected_params);

        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
            p_params->manifest_version = manifest_version;
 80046de:	f884 8007 	strb.w	r8, [r4, #7]
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80046e2:	2200      	movs	r2, #0
 80046e4:	f003 f8e4 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80046e8:	4632      	mov	r2, r6
 80046ea:	6960      	ldr	r0, [r4, #20]
 80046ec:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
        p_params->set_obj_protected_tag = set_obj_tag;
 80046f0:	2600      	movs	r6, #0
        if(OPTIGA_SET_PROTECTED_UPDATE_START == set_obj_tag)
        {
            pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80046f2:	f003 f8dd 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        }

        p_params->p_protected_update_buffer = p_buffer;
 80046f6:	6025      	str	r5, [r4, #0]
        p_params->p_protected_update_buffer_length = buffer_length;
 80046f8:	80a7      	strh	r7, [r4, #4]
        p_params->set_obj_protected_tag = set_obj_tag;
 80046fa:	71a6      	strb	r6, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
 80046fc:	6960      	ldr	r0, [r4, #20]
 80046fe:	79e1      	ldrb	r1, [r4, #7]
 8004700:	4622      	mov	r2, r4
 8004702:	f003 fa27 	bl	8007b54 <optiga_cmd_set_object_protected>
        if (OPTIGA_LIB_SUCCESS != return_value)
 8004706:	4605      	mov	r5, r0
 8004708:	b130      	cbz	r0, 8004718 <optiga_util_protected_update_start+0x66>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800470a:	8426      	strh	r6, [r4, #32]
 800470c:	e004      	b.n	8004718 <optiga_util_protected_update_start+0x66>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == manifest))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800470e:	f240 3503 	movw	r5, #771	; 0x303
 8004712:	e001      	b.n	8004718 <optiga_util_protected_update_start+0x66>

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8004714:	f240 3505 	movw	r5, #773	; 0x305
                                                    manifest_version,
                                                    manifest,
                                                    manifest_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_START);
    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff fe00 	bl	800431e <optiga_util_reset_protection_level>
    return (return_value);
}
 800471e:	4628      	mov	r0, r5
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004724 <optiga_util_protected_update_continue>:

optiga_lib_status_t optiga_util_protected_update_continue(optiga_util_t * me,
                                                          const uint8_t * fragment,
                                                          uint16_t fragment_length)
{
 8004724:	b510      	push	{r4, lr}
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == fragment))
 8004726:	4604      	mov	r4, r0
 8004728:	b198      	cbz	r0, 8004752 <optiga_util_protected_update_continue+0x2e>
 800472a:	6940      	ldr	r0, [r0, #20]
 800472c:	b188      	cbz	r0, 8004752 <optiga_util_protected_update_continue+0x2e>
 800472e:	b181      	cbz	r1, 8004752 <optiga_util_protected_update_continue+0x2e>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8004730:	8c23      	ldrh	r3, [r4, #32]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d010      	beq.n	8004758 <optiga_util_protected_update_continue+0x34>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8004736:	2301      	movs	r3, #1
 8004738:	8423      	strh	r3, [r4, #32]
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
        p_params->set_obj_protected_tag = set_obj_tag;
 800473a:	2302      	movs	r3, #2
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
 800473c:	6021      	str	r1, [r4, #0]
        p_params->p_protected_update_buffer_length = buffer_length;
 800473e:	80a2      	strh	r2, [r4, #4]
        p_params->set_obj_protected_tag = set_obj_tag;
 8004740:	71a3      	strb	r3, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
 8004742:	79e1      	ldrb	r1, [r4, #7]
 8004744:	4622      	mov	r2, r4
 8004746:	f003 fa05 	bl	8007b54 <optiga_cmd_set_object_protected>
        if (OPTIGA_LIB_SUCCESS != return_value)
 800474a:	b138      	cbz	r0, 800475c <optiga_util_protected_update_continue+0x38>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800474c:	2300      	movs	r3, #0
 800474e:	8423      	strh	r3, [r4, #32]
 8004750:	bd10      	pop	{r4, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == fragment))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8004752:	f240 3003 	movw	r0, #771	; 0x303
 8004756:	bd10      	pop	{r4, pc}

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8004758:	f240 3005 	movw	r0, #773	; 0x305
                                                    fragment,
                                                    fragment_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_CONTINUE);
    } while (FALSE);
    return (return_value);
}
 800475c:	bd10      	pop	{r4, pc}

0800475e <optiga_util_protected_update_final>:

optiga_lib_status_t optiga_util_protected_update_final(optiga_util_t * me,
                                                       const uint8_t * fragment,
                                                       uint16_t fragment_length)
{
 800475e:	b510      	push	{r4, lr}
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8004760:	4604      	mov	r4, r0
 8004762:	b188      	cbz	r0, 8004788 <optiga_util_protected_update_final+0x2a>
 8004764:	6940      	ldr	r0, [r0, #20]
 8004766:	b178      	cbz	r0, 8004788 <optiga_util_protected_update_final+0x2a>
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
    optiga_set_object_protected_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8004768:	8c23      	ldrh	r3, [r4, #32]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d00f      	beq.n	800478e <optiga_util_protected_update_final+0x30>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800476e:	2301      	movs	r3, #1
            p_params->manifest_version = manifest_version;
            OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
 8004770:	6021      	str	r1, [r4, #0]
        p_params->p_protected_update_buffer_length = buffer_length;
 8004772:	80a2      	strh	r2, [r4, #4]
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8004774:	8423      	strh	r3, [r4, #32]
            OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        }

        p_params->p_protected_update_buffer = p_buffer;
        p_params->p_protected_update_buffer_length = buffer_length;
        p_params->set_obj_protected_tag = set_obj_tag;
 8004776:	71a3      	strb	r3, [r4, #6]

        return_value = optiga_cmd_set_object_protected(me->my_cmd, p_params->manifest_version,p_params);
 8004778:	79e1      	ldrb	r1, [r4, #7]
 800477a:	4622      	mov	r2, r4
 800477c:	f003 f9ea 	bl	8007b54 <optiga_cmd_set_object_protected>
        if (OPTIGA_LIB_SUCCESS != return_value)
 8004780:	b138      	cbz	r0, 8004792 <optiga_util_protected_update_final+0x34>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004782:	2300      	movs	r3, #0
 8004784:	8423      	strh	r3, [r4, #32]
 8004786:	bd10      	pop	{r4, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8004788:	f240 3003 	movw	r0, #771	; 0x303
 800478c:	bd10      	pop	{r4, pc}

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800478e:	f240 3005 	movw	r0, #773	; 0x305
                                                    fragment,
                                                    fragment_length,
                                                    OPTIGA_SET_PROTECTED_UPDATE_FINAL);
    } while (FALSE);
    return (return_value);
}
 8004792:	bd10      	pop	{r4, pc}

08004794 <optiga_util_update_count>:

optiga_lib_status_t optiga_util_update_count(optiga_util_t * me,
                                             uint16_t optiga_counter_oid,
                                             uint8_t count)
{
 8004794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const uint8_t count_value[] = {count};
 8004796:	ab04      	add	r3, sp, #16
 8004798:	f803 2d04 	strb.w	r2, [r3, #-4]!
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    return (optiga_util_write_data_wrapper(me,
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2301      	movs	r3, #1
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	2300      	movs	r3, #0
 80047a6:	f7ff fdbf 	bl	8004328 <optiga_util_write_data_wrapper>
                                           optiga_counter_oid,
                                           OPTIGA_UTIL_COUNT_DATA_OBJECT,
                                           0x0000,
                                           count_value,
                                           sizeof(count_value)));
}
 80047aa:	b005      	add	sp, #20
 80047ac:	f85d fb04 	ldr.w	pc, [sp], #4

080047b0 <optiga_crypt_generic_event_handler>:
_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	8583      	strh	r3, [r0, #44]	; 0x2c
    me->handler(me->caller_context, event);
 80047b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80047b8:	4718      	bx	r3

080047ba <optiga_crypt_hash_generic>:
                                                        optiga_hash_context_t * hash_ctx,
                                                        uint32_t context_length,                                                        
                                                        const void * data_to_hash,
                                                        bool_t export_intermediate_ctx,
                                                        uint8_t * hash_output)
{
 80047ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047be:	4699      	mov	r9, r3
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80047c0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
                                                        optiga_hash_context_t * hash_ctx,
                                                        uint32_t context_length,                                                        
                                                        const void * data_to_hash,
                                                        bool_t export_intermediate_ctx,
                                                        uint8_t * hash_output)
{
 80047c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80047c4:	2b01      	cmp	r3, #1
                                                        optiga_hash_context_t * hash_ctx,
                                                        uint32_t context_length,                                                        
                                                        const void * data_to_hash,
                                                        bool_t export_intermediate_ctx,
                                                        uint8_t * hash_output)
{
 80047c6:	4604      	mov	r4, r0
 80047c8:	4688      	mov	r8, r1
 80047ca:	4615      	mov	r5, r2
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_calc_hash_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80047cc:	d033      	beq.n	8004836 <optiga_crypt_hash_generic+0x7c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80047ce:	2701      	movs	r7, #1
 80047d0:	8587      	strh	r7, [r0, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80047d2:	2100      	movs	r1, #0
 80047d4:	2220      	movs	r2, #32
 80047d6:	f7ff fd6f 	bl	80042b8 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80047da:	6a20      	ldr	r0, [r4, #32]
 80047dc:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80047e0:	2200      	movs	r2, #0
 80047e2:	f003 f865 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80047e6:	463a      	mov	r2, r7
 80047e8:	6a20      	ldr	r0, [r4, #32]
 80047ea:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80047ee:	f003 f85f 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        p_params->hash_sequence = hash_sequence;
        p_params->p_hash_context = hash_ctx;
 80047f2:	9b08      	ldr	r3, [sp, #32]
 80047f4:	60a3      	str	r3, [r4, #8]
        p_params->apparent_context_size = context_length;
 80047f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f8:	61e3      	str	r3, [r4, #28]
        p_params->p_hash_data = NULL;
        p_params->p_hash_oid = NULL;
        p_params->p_out_digest = hash_output;
 80047fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047fc:	6163      	str	r3, [r4, #20]
        p_params->export_hash_ctx = export_intermediate_ctx;
 80047fe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8004802:	7623      	strb	r3, [r4, #24]
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
 8004804:	1e6b      	subs	r3, r5, #1
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = hash_sequence;
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = context_length;
        p_params->p_hash_data = NULL;
 8004806:	2200      	movs	r2, #0
        p_params->p_hash_oid = NULL;
        p_params->p_out_digest = hash_output;
        p_params->export_hash_ctx = export_intermediate_ctx;
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
 8004808:	42bb      	cmp	r3, r7
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = hash_sequence;
 800480a:	7325      	strb	r5, [r4, #12]
        p_params->p_hash_context = hash_ctx;
        p_params->apparent_context_size = context_length;
        p_params->p_hash_data = NULL;
 800480c:	6062      	str	r2, [r4, #4]
        p_params->p_hash_oid = NULL;
 800480e:	6022      	str	r2, [r4, #0]
        p_params->p_out_digest = hash_output;
        p_params->export_hash_ctx = export_intermediate_ctx;
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
 8004810:	d808      	bhi.n	8004824 <optiga_crypt_hash_generic+0x6a>
        {
            if (source_of_data_to_hash)
 8004812:	f1b9 0f00 	cmp.w	r9, #0
 8004816:	d001      	beq.n	800481c <optiga_crypt_hash_generic+0x62>
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
 8004818:	6066      	str	r6, [r4, #4]
 800481a:	e003      	b.n	8004824 <optiga_crypt_hash_generic+0x6a>
            }
            else
            {
                p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
 800481c:	f045 0510 	orr.w	r5, r5, #16
 8004820:	7325      	strb	r5, [r4, #12]
                p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
 8004822:	6026      	str	r6, [r4, #0]
            }
        }

        return_value = optiga_cmd_calc_hash(me->my_cmd,
 8004824:	6a20      	ldr	r0, [r4, #32]
 8004826:	4641      	mov	r1, r8
 8004828:	4622      	mov	r2, r4
 800482a:	f003 f97d 	bl	8007b28 <optiga_cmd_calc_hash>
                                            hash_algorithm,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 800482e:	b120      	cbz	r0, 800483a <optiga_crypt_hash_generic+0x80>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004830:	2300      	movs	r3, #0
 8004832:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8004834:	e001      	b.n	800483a <optiga_crypt_hash_generic+0x80>
    optiga_calc_hash_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8004836:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800483a:	2300      	movs	r3, #0
 800483c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);

    return (return_value);
}
 8004840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004844 <optiga_crypt_set_comms_params>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
    switch (parameter_type)
 8004844:	2901      	cmp	r1, #1
 8004846:	d002      	beq.n	800484e <optiga_crypt_set_comms_params+0xa>
 8004848:	2902      	cmp	r1, #2
 800484a:	d003      	beq.n	8004854 <optiga_crypt_set_comms_params+0x10>
 800484c:	4770      	bx	lr
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 800484e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
            break;
 8004852:	4770      	bx	lr
        }
        case OPTIGA_COMMS_PROTOCOL_VERSION:
        {
            me->protocol_version = value;
 8004854:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
 8004858:	4770      	bx	lr
	...

0800485c <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	4606      	mov	r6, r0
 8004860:	4617      	mov	r7, r2
    optiga_crypt_t * me = NULL;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8004862:	460d      	mov	r5, r1
 8004864:	b909      	cbnz	r1, 800486a <optiga_crypt_create+0xe>

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
    optiga_crypt_t * me = NULL;
 8004866:	2400      	movs	r4, #0
 8004868:	e01b      	b.n	80048a2 <optiga_crypt_create+0x46>
        if (NULL == handler)
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 800486a:	2001      	movs	r0, #1
 800486c:	2130      	movs	r1, #48	; 0x30
 800486e:	f7ff fd1d 	bl	80042ac <pal_os_calloc>
        if (NULL == me)
 8004872:	4604      	mov	r4, r0
 8004874:	2800      	cmp	r0, #0
 8004876:	d0f6      	beq.n	8004866 <optiga_crypt_create+0xa>
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8004878:	2300      	movs	r3, #0
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 800487a:	2201      	movs	r2, #1
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 800487c:	6285      	str	r5, [r0, #40]	; 0x28
        me->caller_context = caller_context;
        me->instance_state = OPTIGA_LIB_SUCCESS;
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 800487e:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
        {
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
 8004882:	6247      	str	r7, [r0, #36]	; 0x24
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8004884:	8583      	strh	r3, [r0, #44]	; 0x2c
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8004886:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 800488a:	4907      	ldr	r1, [pc, #28]	; (80048a8 <optiga_crypt_create+0x4c>)
 800488c:	4630      	mov	r0, r6
 800488e:	4622      	mov	r2, r4
 8004890:	f003 f81a 	bl	80078c8 <optiga_cmd_create>
 8004894:	4605      	mov	r5, r0
 8004896:	6220      	str	r0, [r4, #32]
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 8004898:	b918      	cbnz	r0, 80048a2 <optiga_crypt_create+0x46>
        {
            pal_os_free(me);
 800489a:	4620      	mov	r0, r4
 800489c:	f7ff fd08 	bl	80042b0 <pal_os_free>
            me = NULL;
 80048a0:	462c      	mov	r4, r5
        }

    } while (FALSE);

    return (me);
}
 80048a2:	4620      	mov	r0, r4
 80048a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a6:	bf00      	nop
 80048a8:	080047b1 	.word	0x080047b1

080048ac <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 80048ac:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 80048ae:	4604      	mov	r4, r0
 80048b0:	b150      	cbz	r0, 80048c8 <optiga_crypt_destroy+0x1c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80048b2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d00a      	beq.n	80048ce <optiga_crypt_destroy+0x22>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 80048b8:	6a00      	ldr	r0, [r0, #32]
 80048ba:	f003 f85d 	bl	8007978 <optiga_cmd_destroy>
 80048be:	4605      	mov	r5, r0
        pal_os_free(me);
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7ff fcf5 	bl	80042b0 <pal_os_free>
 80048c6:	e004      	b.n	80048d2 <optiga_crypt_destroy+0x26>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80048c8:	f240 4503 	movw	r5, #1027	; 0x403
 80048cc:	e001      	b.n	80048d2 <optiga_crypt_destroy+0x26>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 80048ce:	f240 4505 	movw	r5, #1029	; 0x405
        return_value = optiga_cmd_destroy(me->my_cmd);
        pal_os_free(me);

    } while (FALSE);
    return (return_value);
}
 80048d2:	4628      	mov	r0, r5
 80048d4:	bd38      	pop	{r3, r4, r5, pc}

080048d6 <optiga_crypt_random>:
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
 80048d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048da:	4688      	mov	r8, r1
 80048dc:	4617      	mov	r7, r2
 80048de:	4699      	mov	r9, r3
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 80048e0:	4604      	mov	r4, r0
 80048e2:	b360      	cbz	r0, 800493e <optiga_crypt_random+0x68>
 80048e4:	6a03      	ldr	r3, [r0, #32]
 80048e6:	b353      	cbz	r3, 800493e <optiga_crypt_random+0x68>
 80048e8:	b34a      	cbz	r2, 800493e <optiga_crypt_random+0x68>
{
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80048ea:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d01f      	beq.n	8004930 <optiga_crypt_random+0x5a>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80048f0:	2601      	movs	r6, #1
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
 80048f2:	2500      	movs	r5, #0
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80048f4:	8586      	strh	r6, [r0, #44]	; 0x2c
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80048f6:	2100      	movs	r1, #0
 80048f8:	2220      	movs	r2, #32
 80048fa:	f7ff fcdd 	bl	80042b8 <pal_os_memset>

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80048fe:	6a20      	ldr	r0, [r4, #32]
 8004900:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
 8004904:	60a5      	str	r5, [r4, #8]
        p_params->optional_data_length = optional_data_length;
        p_params->random_data = p_random_data;
        p_params->random_data_length = random_data_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004906:	462a      	mov	r2, r5
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->optional_data = p_optional_data;
        p_params->optional_data_length = optional_data_length;
 8004908:	8065      	strh	r5, [r4, #2]
        p_params->random_data = p_random_data;
 800490a:	6067      	str	r7, [r4, #4]
        p_params->random_data_length = random_data_length;
 800490c:	f8a4 9000 	strh.w	r9, [r4]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004910:	f002 ffce 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8004914:	6a20      	ldr	r0, [r4, #32]
 8004916:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800491a:	4632      	mov	r2, r6
 800491c:	f002 ffc8 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_random(me->my_cmd,
 8004920:	6a20      	ldr	r0, [r4, #32]
 8004922:	4641      	mov	r1, r8
 8004924:	4622      	mov	r2, r4
 8004926:	f003 f897 	bl	8007a58 <optiga_cmd_get_random>
                                             cmd_param,
                                             (optiga_get_random_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 800492a:	b118      	cbz	r0, 8004934 <optiga_crypt_random+0x5e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800492c:	85a5      	strh	r5, [r4, #44]	; 0x2c
 800492e:	e001      	b.n	8004934 <optiga_crypt_random+0x5e>
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8004930:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8004934:	2300      	movs	r3, #0
 8004936:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 800493a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800493e:	f240 4003 	movw	r0, #1027	; 0x403
                                               NULL,
                                               0x00);
    } while (FALSE);

    return (return_value);
}
 8004942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004946 <optiga_crypt_hash_start>:
#endif //OPTIGA_CRYPT_RANDOM_ENABLED

#ifdef OPTIGA_CRYPT_HASH_ENABLED
optiga_lib_status_t optiga_crypt_hash_start(optiga_crypt_t * me,
                                            optiga_hash_context_t * hash_ctx)
{
 8004946:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004948:	460b      	mov	r3, r1
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do  
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == hash_ctx))
 800494a:	b170      	cbz	r0, 800496a <optiga_crypt_hash_start+0x24>
 800494c:	6a02      	ldr	r2, [r0, #32]
 800494e:	b162      	cbz	r2, 800496a <optiga_crypt_hash_start+0x24>
 8004950:	b159      	cbz	r1, 800496a <optiga_crypt_hash_start+0x24>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        return_value = optiga_crypt_hash_generic(me,
 8004952:	7a09      	ldrb	r1, [r1, #8]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	2301      	movs	r3, #1
 800495a:	9303      	str	r3, [sp, #12]
 800495c:	9201      	str	r2, [sp, #4]
 800495e:	9202      	str	r2, [sp, #8]
 8004960:	9204      	str	r2, [sp, #16]
 8004962:	4613      	mov	r3, r2
 8004964:	f7ff ff29 	bl	80047ba <optiga_crypt_hash_generic>
 8004968:	e001      	b.n	800496e <optiga_crypt_hash_start+0x28>
    do  
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == hash_ctx))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800496a:	f240 4003 	movw	r0, #1027	; 0x403
                                                 TRUE,
                                                 NULL);
    } while (FALSE);

    return (return_value);
}
 800496e:	b007      	add	sp, #28
 8004970:	f85d fb04 	ldr.w	pc, [sp], #4

08004974 <optiga_crypt_hash_update>:

optiga_lib_status_t optiga_crypt_hash_update(optiga_crypt_t * me,
                                             optiga_hash_context_t * hash_ctx,
                                             uint8_t source_of_data_to_hash,
                                             const void * data_to_hash)
{
 8004974:	b510      	push	{r4, lr}
 8004976:	4614      	mov	r4, r2
 8004978:	b086      	sub	sp, #24
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 800497a:	b190      	cbz	r0, 80049a2 <optiga_crypt_hash_update+0x2e>
 800497c:	6a02      	ldr	r2, [r0, #32]
 800497e:	b182      	cbz	r2, 80049a2 <optiga_crypt_hash_update+0x2e>
 8004980:	b179      	cbz	r1, 80049a2 <optiga_crypt_hash_update+0x2e>
            (NULL == hash_ctx) || (NULL == data_to_hash))
 8004982:	b173      	cbz	r3, 80049a2 <optiga_crypt_hash_update+0x2e>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        return_value = optiga_crypt_hash_generic(me,
 8004984:	7a0a      	ldrb	r2, [r1, #8]
 8004986:	9100      	str	r1, [sp, #0]
 8004988:	6849      	ldr	r1, [r1, #4]
 800498a:	9302      	str	r3, [sp, #8]
 800498c:	2301      	movs	r3, #1
 800498e:	9303      	str	r3, [sp, #12]
 8004990:	2300      	movs	r3, #0
 8004992:	9101      	str	r1, [sp, #4]
 8004994:	9304      	str	r3, [sp, #16]
 8004996:	4611      	mov	r1, r2
 8004998:	4623      	mov	r3, r4
 800499a:	2202      	movs	r2, #2
 800499c:	f7ff ff0d 	bl	80047ba <optiga_crypt_hash_generic>
 80049a0:	e001      	b.n	80049a6 <optiga_crypt_hash_update+0x32>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == hash_ctx) || (NULL == data_to_hash))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80049a2:	f240 4003 	movw	r0, #1027	; 0x403
                                                 TRUE,
                                                 NULL);
    } while (FALSE);

    return (return_value);
}
 80049a6:	b006      	add	sp, #24
 80049a8:	bd10      	pop	{r4, pc}

080049aa <optiga_crypt_hash_finalize>:

optiga_lib_status_t optiga_crypt_hash_finalize(optiga_crypt_t * me,
                                               optiga_hash_context_t * hash_ctx,
                                               uint8_t * hash_output)
{
 80049aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80049ac:	460b      	mov	r3, r1
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80049ae:	b178      	cbz	r0, 80049d0 <optiga_crypt_hash_finalize+0x26>
 80049b0:	6a01      	ldr	r1, [r0, #32]
 80049b2:	b169      	cbz	r1, 80049d0 <optiga_crypt_hash_finalize+0x26>
 80049b4:	b163      	cbz	r3, 80049d0 <optiga_crypt_hash_finalize+0x26>
            (NULL == hash_ctx) || (NULL == hash_output))
 80049b6:	b15a      	cbz	r2, 80049d0 <optiga_crypt_hash_finalize+0x26>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        return_value = optiga_crypt_hash_generic(me,
 80049b8:	7a19      	ldrb	r1, [r3, #8]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	2300      	movs	r3, #0
 80049c2:	9204      	str	r2, [sp, #16]
 80049c4:	9302      	str	r3, [sp, #8]
 80049c6:	9303      	str	r3, [sp, #12]
 80049c8:	2203      	movs	r2, #3
 80049ca:	f7ff fef6 	bl	80047ba <optiga_crypt_hash_generic>
 80049ce:	e001      	b.n	80049d4 <optiga_crypt_hash_finalize+0x2a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == hash_ctx) || (NULL == hash_output))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80049d0:	f240 4003 	movw	r0, #1027	; 0x403
                                                 FALSE,
                                                 hash_output);
    } while (FALSE);

    return (return_value);
}
 80049d4:	b007      	add	sp, #28
 80049d6:	f85d fb04 	ldr.w	pc, [sp], #4

080049da <optiga_crypt_hash>:
optiga_lib_status_t optiga_crypt_hash(optiga_crypt_t * me,
                                      optiga_hash_type_t hash_algorithm,
                                      uint8_t source_of_data_to_hash,
                                      const void * data_to_hash, 
                                      uint8_t * hash_output)
{
 80049da:	b530      	push	{r4, r5, lr}
 80049dc:	b087      	sub	sp, #28
 80049de:	4615      	mov	r5, r2
 80049e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
 80049e2:	b170      	cbz	r0, 8004a02 <optiga_crypt_hash+0x28>
 80049e4:	6a02      	ldr	r2, [r0, #32]
 80049e6:	b162      	cbz	r2, 8004a02 <optiga_crypt_hash+0x28>
 80049e8:	b15b      	cbz	r3, 8004a02 <optiga_crypt_hash+0x28>
 80049ea:	b154      	cbz	r4, 8004a02 <optiga_crypt_hash+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        return_value = optiga_crypt_hash_generic(me,
 80049ec:	2200      	movs	r2, #0
 80049ee:	9200      	str	r2, [sp, #0]
 80049f0:	9201      	str	r2, [sp, #4]
 80049f2:	9302      	str	r3, [sp, #8]
 80049f4:	9203      	str	r2, [sp, #12]
 80049f6:	9404      	str	r4, [sp, #16]
 80049f8:	2201      	movs	r2, #1
 80049fa:	462b      	mov	r3, r5
 80049fc:	f7ff fedd 	bl	80047ba <optiga_crypt_hash_generic>
 8004a00:	e001      	b.n	8004a06 <optiga_crypt_hash+0x2c>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8004a02:	f240 4003 	movw	r0, #1027	; 0x403
                                                 FALSE,
                                                 hash_output);
    } while (FALSE);

    return (return_value);
}
 8004a06:	b007      	add	sp, #28
 8004a08:	bd30      	pop	{r4, r5, pc}

08004a0a <optiga_crypt_ecc_generate_keypair>:
                                                      uint8_t key_usage,
                                                      bool_t export_private_key,
                                                      void * private_key,
                                                      uint8_t * public_key,
                                                      uint16_t * public_key_length)
{
 8004a0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004a10:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a14:	468a      	mov	sl, r1
 8004a16:	4693      	mov	fp, r2
 8004a18:	4698      	mov	r8, r3
    optiga_gen_keypair_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b378      	cbz	r0, 8004a7e <optiga_crypt_ecc_generate_keypair+0x74>
 8004a1e:	6a03      	ldr	r3, [r0, #32]
 8004a20:	b38b      	cbz	r3, 8004a86 <optiga_crypt_ecc_generate_keypair+0x7c>
 8004a22:	b387      	cbz	r7, 8004a86 <optiga_crypt_ecc_generate_keypair+0x7c>
            (NULL == p_public_key) || (NULL == p_private_key) || (NULL == p_public_key_length))
 8004a24:	b37e      	cbz	r6, 8004a86 <optiga_crypt_ecc_generate_keypair+0x7c>
 8004a26:	b375      	cbz	r5, 8004a86 <optiga_crypt_ecc_generate_keypair+0x7c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8004a28:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d02e      	beq.n	8004a8c <optiga_crypt_ecc_generate_keypair+0x82>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8004a2e:	f04f 0901 	mov.w	r9, #1
 8004a32:	f8a0 902c 	strh.w	r9, [r0, #44]	; 0x2c
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8004a36:	2100      	movs	r1, #0
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f7ff fc3d 	bl	80042b8 <pal_os_memset>

        p_params->key_usage = key_usage;
        p_params->export_private_key = export_private_key;
        p_params->public_key_length = p_public_key_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004a3e:	6a20      	ldr	r0, [r4, #32]
 8004a40:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->key_usage = key_usage;
 8004a44:	f884 b000 	strb.w	fp, [r4]
        p_params->export_private_key = export_private_key;
        p_params->public_key_length = p_public_key_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004a48:	2200      	movs	r2, #0
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->key_usage = key_usage;
        p_params->export_private_key = export_private_key;
 8004a4a:	f884 8001 	strb.w	r8, [r4, #1]
        p_params->public_key_length = p_public_key_length;
 8004a4e:	6125      	str	r5, [r4, #16]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004a50:	f002 ff2e 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8004a54:	6a20      	ldr	r0, [r4, #32]
 8004a56:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8004a5a:	464a      	mov	r2, r9
 8004a5c:	f002 ff28 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>

        if (export_private_key)
 8004a60:	f1b8 0f00 	cmp.w	r8, #0
 8004a64:	d001      	beq.n	8004a6a <optiga_crypt_ecc_generate_keypair+0x60>
        {
            p_params->private_key = (uint8_t *)p_private_key;
 8004a66:	6066      	str	r6, [r4, #4]
 8004a68:	e001      	b.n	8004a6e <optiga_crypt_ecc_generate_keypair+0x64>
        }
        else
        {
            p_params->private_key_oid = (optiga_key_id_t)(* ((uint16_t* )p_private_key));
 8004a6a:	8833      	ldrh	r3, [r6, #0]
 8004a6c:	8063      	strh	r3, [r4, #2]
        }

        p_params->public_key = p_public_key;
 8004a6e:	60e7      	str	r7, [r4, #12]
        p_params->public_key_length = p_public_key_length;
 8004a70:	6125      	str	r5, [r4, #16]

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
 8004a72:	6a20      	ldr	r0, [r4, #32]
 8004a74:	4651      	mov	r1, sl
 8004a76:	4622      	mov	r2, r4
 8004a78:	f003 f834 	bl	8007ae4 <optiga_cmd_gen_keypair>
 8004a7c:	e008      	b.n	8004a90 <optiga_crypt_ecc_generate_keypair+0x86>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_public_key) || (NULL == p_private_key) || (NULL == p_public_key_length))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8004a7e:	f240 4003 	movw	r0, #1027	; 0x403
 8004a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a86:	f240 4003 	movw	r0, #1027	; 0x403
 8004a8a:	e001      	b.n	8004a90 <optiga_crypt_ecc_generate_keypair+0x86>
            break;
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8004a8c:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                                         key_usage,
                                         export_private_key,
                                         private_key,
                                         public_key,
                                         public_key_length));
}
 8004a96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a9a <optiga_crypt_ecdsa_sign>:
                                            const uint8_t * digest,
                                            uint8_t digest_length,
                                            optiga_key_id_t private_key,
                                            uint8_t * signature,
                                            uint16_t * signature_length)
{
 8004a9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9e:	9f08      	ldr	r7, [sp, #32]
 8004aa0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004aa2:	4688      	mov	r8, r1
 8004aa4:	4692      	mov	sl, r2
 8004aa6:	4699      	mov	r9, r3
    optiga_calc_sign_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_digest) ||
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	b350      	cbz	r0, 8004b02 <optiga_crypt_ecdsa_sign+0x68>
 8004aac:	6a03      	ldr	r3, [r0, #32]
 8004aae:	b363      	cbz	r3, 8004b0a <optiga_crypt_ecdsa_sign+0x70>
 8004ab0:	b359      	cbz	r1, 8004b0a <optiga_crypt_ecdsa_sign+0x70>
 8004ab2:	b357      	cbz	r7, 8004b0a <optiga_crypt_ecdsa_sign+0x70>
            (NULL == p_signature) || (NULL == p_signature_length))
 8004ab4:	b34e      	cbz	r6, 8004b0a <optiga_crypt_ecdsa_sign+0x70>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8004ab6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d029      	beq.n	8004b10 <optiga_crypt_ecdsa_sign+0x76>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8004abc:	2501      	movs	r5, #1
 8004abe:	8585      	strh	r5, [r0, #44]	; 0x2c

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f7ff fbf8 	bl	80042b8 <pal_os_memset>
        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
        p_params->private_key_oid = private_key;
        p_params->p_signature = p_signature;
        p_params->p_signature_length = p_signature_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004ac8:	6a20      	ldr	r0, [r4, #32]
 8004aca:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->p_digest = p_digest;
 8004ace:	f8c4 8000 	str.w	r8, [r4]
        p_params->digest_length = digest_length;
        p_params->private_key_oid = private_key;
        p_params->p_signature = p_signature;
        p_params->p_signature_length = p_signature_length;
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004ad2:	2200      	movs	r2, #0

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
 8004ad4:	f884 a00e 	strb.w	sl, [r4, #14]
        p_params->private_key_oid = private_key;
 8004ad8:	f8a4 900c 	strh.w	r9, [r4, #12]
        p_params->p_signature = p_signature;
 8004adc:	6067      	str	r7, [r4, #4]
        p_params->p_signature_length = p_signature_length;
 8004ade:	60a6      	str	r6, [r4, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004ae0:	f002 fee6 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8004ae4:	6a20      	ldr	r0, [r4, #32]
 8004ae6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8004aea:	462a      	mov	r2, r5
 8004aec:	f002 fee0 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_calc_sign(me->my_cmd,
 8004af0:	6a20      	ldr	r0, [r4, #32]
 8004af2:	2111      	movs	r1, #17
 8004af4:	4622      	mov	r2, r4
 8004af6:	f002 ffc3 	bl	8007a80 <optiga_cmd_calc_sign>
                                            signature_scheme,
                                            (optiga_calc_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8004afa:	b158      	cbz	r0, 8004b14 <optiga_crypt_ecdsa_sign+0x7a>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8004b00:	e008      	b.n	8004b14 <optiga_crypt_ecdsa_sign+0x7a>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_digest) ||
            (NULL == p_signature) || (NULL == p_signature_length))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8004b02:	f240 4003 	movw	r0, #1027	; 0x403
 8004b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0a:	f240 4003 	movw	r0, #1027	; 0x403
 8004b0e:	e001      	b.n	8004b14 <optiga_crypt_ecdsa_sign+0x7a>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8004b10:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                              digest_length,
                              private_key,
                              signature,
                              signature_length,
                              0x0000));
}
 8004b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004b1e <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
 8004b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004b24:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 8004b28:	4688      	mov	r8, r1
 8004b2a:	4692      	mov	sl, r2
 8004b2c:	461f      	mov	r7, r3
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8004b2e:	4604      	mov	r4, r0
 8004b30:	b390      	cbz	r0, 8004b98 <optiga_crypt_ecdsa_verify+0x7a>
 8004b32:	6a03      	ldr	r3, [r0, #32]
 8004b34:	b3a3      	cbz	r3, 8004ba0 <optiga_crypt_ecdsa_verify+0x82>
 8004b36:	b399      	cbz	r1, 8004ba0 <optiga_crypt_ecdsa_verify+0x82>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 8004b38:	b397      	cbz	r7, 8004ba0 <optiga_crypt_ecdsa_verify+0x82>
 8004b3a:	b38d      	cbz	r5, 8004ba0 <optiga_crypt_ecdsa_verify+0x82>
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
            break;
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8004b3c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d031      	beq.n	8004ba6 <optiga_crypt_ecdsa_verify+0x88>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
            break;
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8004b42:	f04f 0901 	mov.w	r9, #1
 8004b46:	f8a0 902c 	strh.w	r9, [r0, #44]	; 0x2c
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f7ff fbb3 	bl	80042b8 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8004b52:	6a20      	ldr	r0, [r4, #32]
 8004b54:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f002 fea9 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8004b5e:	6a20      	ldr	r0, [r4, #32]
 8004b60:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8004b64:	464a      	mov	r2, r9
 8004b66:	f002 fea3 	bl	80078b0 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
        p_params->digest_length = digest_length;
        p_params->p_signature = p_signature;
        p_params->signature_length = signature_length;
 8004b6a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_digest = p_digest;
 8004b6e:	f8c4 8000 	str.w	r8, [r4]
        p_params->digest_length = digest_length;
 8004b72:	f884 a004 	strb.w	sl, [r4, #4]
        p_params->p_signature = p_signature;
 8004b76:	60a7      	str	r7, [r4, #8]
        p_params->signature_length = signature_length;
 8004b78:	81a3      	strh	r3, [r4, #12]
        p_params->public_key_source_type = public_key_source_type;
 8004b7a:	73a6      	strb	r6, [r4, #14]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8004b7c:	b916      	cbnz	r6, 8004b84 <optiga_crypt_ecdsa_verify+0x66>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8004b7e:	882b      	ldrh	r3, [r5, #0]
 8004b80:	82a3      	strh	r3, [r4, #20]
 8004b82:	e000      	b.n	8004b86 <optiga_crypt_ecdsa_verify+0x68>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8004b84:	6125      	str	r5, [r4, #16]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 8004b86:	6a20      	ldr	r0, [r4, #32]
 8004b88:	2111      	movs	r1, #17
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	f002 ff96 	bl	8007abc <optiga_cmd_verify_sign>
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8004b90:	b158      	cbz	r0, 8004baa <optiga_crypt_ecdsa_verify+0x8c>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8004b96:	e008      	b.n	8004baa <optiga_crypt_ecdsa_verify+0x8c>
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8004b98:	f240 4003 	movw	r0, #1027	; 0x403
 8004b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba0:	f240 4003 	movw	r0, #1027	; 0x403
 8004ba4:	e001      	b.n	8004baa <optiga_crypt_ecdsa_verify+0x8c>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8004ba6:	f240 4005 	movw	r0, #1029	; 0x405
{
    switch (parameter_type)
    {
        case OPTIGA_COMMS_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004bb4 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8004bb4:	b538      	push	{r3, r4, r5, lr}
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8004bb6:	6983      	ldr	r3, [r0, #24]
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8004bbc:	b10b      	cbz	r3, 8004bc2 <ifx_i2c_tl_event_handler+0xe>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8004bbe:	69c0      	ldr	r0, [r0, #28]
 8004bc0:	4798      	blx	r3
    }
    p_ctx->close_state = event;
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    switch (p_ctx->state)
 8004bc8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
    p_ctx->close_state = event;
 8004bcc:	85a5      	strh	r5, [r4, #44]	; 0x2c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d103      	bne.n	8004bda <ifx_i2c_tl_event_handler+0x26>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8004bd2:	b915      	cbnz	r5, 8004bda <ifx_i2c_tl_event_handler+0x26>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8004bda:	bd38      	pop	{r3, r4, r5, pc}

08004bdc <ifx_i2c_init>:
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8004bdc:	b510      	push	{r4, lr}
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8004bde:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8004be2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8004be6:	4604      	mov	r4, r0
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8004be8:	d12c      	bne.n	8004c44 <ifx_i2c_init+0x68>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
    {
        switch (p_ifx_i2c_context->reset_state)
 8004bea:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 8004bee:	2ab2      	cmp	r2, #178	; 0xb2
 8004bf0:	d014      	beq.n	8004c1c <ifx_i2c_init+0x40>
 8004bf2:	2ab3      	cmp	r2, #179	; 0xb3
 8004bf4:	d029      	beq.n	8004c4a <ifx_i2c_init+0x6e>
 8004bf6:	2ab1      	cmp	r2, #177	; 0xb1
 8004bf8:	d12c      	bne.n	8004c54 <ifx_i2c_init+0x78>
        {
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8004bfa:	b913      	cbnz	r3, 8004c02 <ifx_i2c_init+0x26>
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8004bfc:	6880      	ldr	r0, [r0, #8]
 8004bfe:	f7ff f9a3 	bl	8003f48 <pal_gpio_set_low>
                }
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8004c02:	68e0      	ldr	r0, [r4, #12]
 8004c04:	f7ff f9a0 	bl	8003f48 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8004c08:	23b2      	movs	r3, #178	; 0xb2
 8004c0a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8004c0e:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8004c12:	4912      	ldr	r1, [pc, #72]	; (8004c5c <ifx_i2c_init+0x80>)
 8004c14:	4622      	mov	r2, r4
 8004c16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004c1a:	e00f      	b.n	8004c3c <ifx_i2c_init+0x60>
                break;
            }
            case IFX_I2C_STATE_RESET_PIN_HIGH:
            {
                // Setting the Vdd & Reset pin to high
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8004c1c:	b913      	cbnz	r3, 8004c24 <ifx_i2c_init+0x48>
                {
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8004c1e:	6880      	ldr	r0, [r0, #8]
 8004c20:	f7ff f989 	bl	8003f36 <pal_gpio_set_high>
                }
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8004c24:	68e0      	ldr	r0, [r4, #12]
 8004c26:	f7ff f986 	bl	8003f36 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8004c2a:	23b3      	movs	r3, #179	; 0xb3
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8004c2c:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8004c30:	490a      	ldr	r1, [pc, #40]	; (8004c5c <ifx_i2c_init+0x80>)
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
                {
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
                }
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8004c32:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8004c36:	4622      	mov	r2, r4
 8004c38:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8004c3c:	f7ff fb0c 	bl	8004258 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       STARTUP_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
 8004c40:	2000      	movs	r0, #0
                break;
 8004c42:	bd10      	pop	{r4, pc}
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8004c44:	2301      	movs	r3, #1
 8004c46:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8004c4a:	4905      	ldr	r1, [pc, #20]	; (8004c60 <ifx_i2c_init+0x84>)
#endif
    }

    return (api_status);
}
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8004c50:	f001 ba66 	b.w	8006120 <ifx_i2c_prl_init>
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 8004c54:	f44f 7081 	mov.w	r0, #258	; 0x102
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
    }

    return (api_status);
}
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08004bdd 	.word	0x08004bdd
 8004c60:	08004bb5 	.word	0x08004bb5

08004c64 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8004c64:	b570      	push	{r4, r5, r6, lr}
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8004c66:	2304      	movs	r3, #4
 8004c68:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    switch (p_ctx->state)
 8004c6c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8004c70:	2b01      	cmp	r3, #1
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8004c72:	4604      	mov	r4, r0
 8004c74:	460d      	mov	r5, r1
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
 8004c76:	d108      	bne.n	8004c8a <ifx_i2c_prl_close_event_handler+0x26>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8004c78:	6900      	ldr	r0, [r0, #16]
 8004c7a:	f7ff f9c7 	bl	800400c <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8004c7e:	68a0      	ldr	r0, [r4, #8]
 8004c80:	f7ff f962 	bl	8003f48 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8004c84:	68e0      	ldr	r0, [r4, #12]
 8004c86:	f7ff f95f 	bl	8003f48 <pal_gpio_set_low>
        }
        default:
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8004c8a:	69a3      	ldr	r3, [r4, #24]
 8004c8c:	b123      	cbz	r3, 8004c98 <ifx_i2c_prl_close_event_handler+0x34>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8004c8e:	69e0      	ldr	r0, [r4, #28]
 8004c90:	4629      	mov	r1, r5
    }
}
 8004c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8004c96:	4718      	bx	r3
 8004c98:	bd70      	pop	{r4, r5, r6, pc}

08004c9a <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8004c9a:	b510      	push	{r4, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8004c9c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004ca0:	2b03      	cmp	r3, #3
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8004ca2:	4604      	mov	r4, r0
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8004ca4:	d013      	beq.n	8004cce <ifx_i2c_open+0x34>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8004ca6:	6903      	ldr	r3, [r0, #16]
 8004ca8:	6098      	str	r0, [r3, #8]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8004cb0:	23b1      	movs	r3, #177	; 0xb1
 8004cb2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
            p_ctx->do_pal_init = TRUE;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8004cbc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

            api_status = ifx_i2c_init(p_ctx);
 8004cc0:	f7ff ff8c 	bl	8004bdc <ifx_i2c_init>
            if (IFX_I2C_STACK_SUCCESS == api_status)
 8004cc4:	b928      	cbnz	r0, 8004cd2 <ifx_i2c_open+0x38>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8004ccc:	bd10      	pop	{r4, pc}
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8004cce:	f44f 7081 	mov.w	r0, #258	; 0x102
                p_ctx->status = IFX_I2C_STATUS_BUSY;
            }
        }while(FALSE);
    }
    return (api_status);
}
 8004cd2:	bd10      	pop	{r4, pc}

08004cd4 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8004cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8004cd6:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8004cda:	9d08      	ldr	r5, [sp, #32]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8004cdc:	2f02      	cmp	r7, #2
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8004cde:	4604      	mov	r4, r0
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8004ce0:	d10f      	bne.n	8004d02 <ifx_i2c_transceive+0x2e>
 8004ce2:	f890 7029 	ldrb.w	r7, [r0, #41]	; 0x29
 8004ce6:	2f03      	cmp	r7, #3
 8004ce8:	d00b      	beq.n	8004d02 <ifx_i2c_transceive+0x2e>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8004cea:	6223      	str	r3, [r4, #32]
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8004cec:	6245      	str	r5, [r0, #36]	; 0x24
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8004cee:	9500      	str	r5, [sp, #0]
 8004cf0:	f001 fa65 	bl	80061be <ifx_i2c_prl_transceive>
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8004cf4:	b938      	cbnz	r0, 8004d06 <ifx_i2c_transceive+0x32>
 8004cf6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004cf8:	b92b      	cbnz	r3, 8004d06 <ifx_i2c_transceive+0x32>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8004d00:	e001      	b.n	8004d06 <ifx_i2c_transceive+0x32>
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8004d02:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
    }
    return (api_status);
}
 8004d06:	b003      	add	sp, #12
 8004d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004d0c <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8004d0c:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8004d0e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004d12:	2b03      	cmp	r3, #3
    return (api_status);
}


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8004d14:	4604      	mov	r4, r0
 8004d16:	f44f 7581 	mov.w	r5, #258	; 0x102
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8004d1a:	d016      	beq.n	8004d4a <ifx_i2c_close+0x3e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8004d1c:	2301      	movs	r3, #1
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
    {
        api_status = IFX_I2C_STACK_SUCCESS;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8004d1e:	8585      	strh	r5, [r0, #44]	; 0x2c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8004d20:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8004d24:	490a      	ldr	r1, [pc, #40]	; (8004d50 <ifx_i2c_close+0x44>)
 8004d26:	f001 fa23 	bl	8006170 <ifx_i2c_prl_close>
        if (IFX_I2C_STACK_ERROR == api_status)
 8004d2a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8004d2e:	4605      	mov	r5, r0
        if (IFX_I2C_STACK_ERROR == api_status)
 8004d30:	d10b      	bne.n	8004d4a <ifx_i2c_close+0x3e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8004d32:	6920      	ldr	r0, [r4, #16]
 8004d34:	f7ff f96a 	bl	800400c <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8004d38:	68a0      	ldr	r0, [r4, #8]
 8004d3a:	f7ff f905 	bl	8003f48 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8004d3e:	68e0      	ldr	r0, [r4, #12]
 8004d40:	f7ff f902 	bl	8003f48 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8004d44:	2304      	movs	r3, #4
 8004d46:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
}
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	bd38      	pop	{r3, r4, r5, pc}
 8004d4e:	bf00      	nop
 8004d50:	08004c65 	.word	0x08004c65

08004d54 <ifx_i2c_dl_calc_crc>:

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
}

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8004d54:	b570      	push	{r4, r5, r6, lr}
    uint16_t i;
    uint16_t crc = 0;
 8004d56:	2200      	movs	r2, #0

    for (i = 0; i < data_len; i++)
 8004d58:	4606      	mov	r6, r0
 8004d5a:	1a33      	subs	r3, r6, r0
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	428b      	cmp	r3, r1
 8004d60:	d211      	bcs.n	8004d86 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8004d62:	f816 3b01 	ldrb.w	r3, [r6], #1
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8004d66:	4053      	eors	r3, r2
    h2 = h1 & 0x0F;
 8004d68:	f003 040f 	and.w	r4, r3, #15
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8004d6c:	b2db      	uxtb	r3, r3
    h2 = h1 & 0x0F;
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8004d6e:	ea83 1304 	eor.w	r3, r3, r4, lsl #4
    h4 = h3 >> 4;
 8004d72:	091d      	lsrs	r5, r3, #4

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8004d74:	ea85 0343 	eor.w	r3, r5, r3, lsl #1
 8004d78:	ea85 2212 	eor.w	r2, r5, r2, lsr #8
 8004d7c:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8004d80:	ea82 02c4 	eor.w	r2, r2, r4, lsl #3
 8004d84:	e7e9      	b.n	8004d5a <ifx_i2c_dl_calc_crc+0x6>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
    }

    return (crc);
}
 8004d86:	4610      	mov	r0, r2
 8004d88:	bd70      	pop	{r4, r5, r6, pc}

08004d8a <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8004d8a:	b570      	push	{r4, r5, r6, lr}
 8004d8c:	460e      	mov	r6, r1
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8004d8e:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8004d92:	2a01      	cmp	r2, #1

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8004d94:	4605      	mov	r5, r0

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8004d96:	bf04      	itt	eq
 8004d98:	1c48      	addeq	r0, r1, #1
 8004d9a:	f000 0103 	andeq.w	r1, r0, #3
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8004d9e:	2a02      	cmp	r2, #2
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8004da0:	6f2c      	ldr	r4, [r5, #112]	; 0x70
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8004da2:	d102      	bne.n	8004daa <ifx_i2c_dl_send_frame_internal+0x20>
    {
        ack_nr = 0;
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8004da4:	6f6c      	ldr	r4, [r5, #116]	; 0x74
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
    {
        ack_nr = 0;
 8004da6:	2100      	movs	r1, #0
 8004da8:	e005      	b.n	8004db6 <ifx_i2c_dl_send_frame_internal+0x2c>
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8004daa:	b922      	cbnz	r2, 8004db6 <ifx_i2c_dl_send_frame_internal+0x2c>
 8004dac:	f895 0060 	ldrb.w	r0, [r5, #96]	; 0x60
 8004db0:	2809      	cmp	r0, #9
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8004db2:	bf08      	it	eq
 8004db4:	6f6c      	ldreq	r4, [r5, #116]	; 0x74
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 8004db6:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 8004dba:	b2c9      	uxtb	r1, r1
 8004dbc:	7021      	strb	r1, [r4, #0]

    if (0 != frame_len) // Data frame
 8004dbe:	b1a6      	cbz	r6, 8004dea <ifx_i2c_dl_send_frame_internal+0x60>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8004dc0:	b113      	cbz	r3, 8004dc8 <ifx_i2c_dl_send_frame_internal+0x3e>
 8004dc2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
 8004dc6:	b133      	cbz	r3, 8004dd6 <ifx_i2c_dl_send_frame_internal+0x4c>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8004dc8:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
 8004dcc:	3301      	adds	r3, #1
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8004dd6:	7823      	ldrb	r3, [r4, #0]
 8004dd8:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
 8004ddc:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8004de0:	7023      	strb	r3, [r4, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
 8004de8:	e002      	b.n	8004df0 <ifx_i2c_dl_send_frame_internal+0x66>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8004dea:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8004dee:	7021      	strb	r1, [r4, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8004df0:	0a33      	lsrs	r3, r6, #8
    p_buffer[2] = (uint8_t)frame_len;

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8004df2:	1cf1      	adds	r1, r6, #3
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8004df4:	7063      	strb	r3, [r4, #1]
    p_buffer[2] = (uint8_t)frame_len;
 8004df6:	70a6      	strb	r6, [r4, #2]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8004df8:	4620      	mov	r0, r4
 8004dfa:	b289      	uxth	r1, r1
 8004dfc:	f7ff ffaa 	bl	8004d54 <ifx_i2c_dl_calc_crc>
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8004e00:	19a3      	adds	r3, r4, r6
 8004e02:	0a02      	lsrs	r2, r0, #8
 8004e04:	70da      	strb	r2, [r3, #3]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8004e06:	7118      	strb	r0, [r3, #4]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8004e08:	1d72      	adds	r2, r6, #5
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	b292      	uxth	r2, r2
}
 8004e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
    p_buffer[4 + frame_len] = (uint8_t)crc;

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8004e14:	f000 bc32 	b.w	800567c <ifx_i2c_pl_send_frame>

08004e18 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	b085      	sub	sp, #20
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
 8004e1e:	2500      	movs	r5, #0

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8004e20:	4604      	mov	r4, r0
 8004e22:	468b      	mov	fp, r1
 8004e24:	4691      	mov	r9, r2
 8004e26:	461f      	mov	r7, r3
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
    uint16_t crc_received = 0;
 8004e28:	46a8      	mov	r8, r5
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
    uint8_t current_event;
    uint8_t ftype = 0;
    uint8_t continue_state_machine = TRUE;
    uint16_t packet_len = 0;
 8004e2a:	9501      	str	r5, [sp, #4]
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
    uint8_t seqctr = 0;
 8004e2c:	462e      	mov	r6, r5
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
    uint8_t ack_nr = 0;
 8004e2e:	9502      	str	r5, [sp, #8]
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
    uint8_t fctr = 0;
    uint8_t fr_nr = 0;
 8004e30:	46aa      	mov	sl, r5
    uint16_t crc_received = 0;
    uint16_t crc_calculated = 0;
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8004e32:	f5bb 7f83 	cmp.w	fp, #262	; 0x106
 8004e36:	d106      	bne.n	8004e46 <ifx_i2c_pl_event_handler+0x2e>
 8004e38:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d002      	beq.n	8004e46 <ifx_i2c_pl_event_handler+0x2e>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8004e40:	2308      	movs	r3, #8
 8004e42:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        }
        switch (p_ctx->dl.state)
 8004e46:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	2b0a      	cmp	r3, #10
 8004e4e:	f200 8145 	bhi.w	80050dc <ifx_i2c_pl_event_handler+0x2c4>
 8004e52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e56:	000b      	.short	0x000b
 8004e58:	00220013 	.word	0x00220013
 8004e5c:	00e900ca 	.word	0x00e900ca
 8004e60:	014300e2 	.word	0x014300e2
 8004e64:	00c1011d 	.word	0x00c1011d
 8004e68:	0084004d 	.word	0x0084004d
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8004e6c:	f1bb 0f00 	cmp.w	fp, #0
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8004e70:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8004e72:	4620      	mov	r0, r4
 8004e74:	bf14      	ite	ne
 8004e76:	2101      	movne	r1, #1
 8004e78:	2102      	moveq	r1, #2
 8004e7a:	e134      	b.n	80050e6 <ifx_i2c_pl_event_handler+0x2ce>
            }
            break;
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8004e7c:	f5bb 7f81 	cmp.w	fp, #258	; 0x102
 8004e80:	f000 80b6 	beq.w	8004ff0 <ifx_i2c_pl_event_handler+0x1d8>
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8004e84:	f7ff fa34 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
                p_ctx->dl.state = DL_STATE_RX;
 8004e88:	2303      	movs	r3, #3
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8004e8a:	67a0      	str	r0, [r4, #120]	; 0x78
                p_ctx->dl.state = DL_STATE_RX;
 8004e8c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 fc08 	bl	80056a6 <ifx_i2c_pl_receive_frame>
 8004e96:	bba8      	cbnz	r0, 8004f04 <ifx_i2c_pl_event_handler+0xec>
 8004e98:	e12c      	b.n	80050f4 <ifx_i2c_pl_event_handler+0x2dc>
                }
            }
            break;
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8004e9a:	f5bb 7f81 	cmp.w	fp, #258	; 0x102
 8004e9e:	f000 80a7 	beq.w	8004ff0 <ifx_i2c_pl_event_handler+0x1d8>
                    break;
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8004ea2:	2f04      	cmp	r7, #4
 8004ea4:	d92e      	bls.n	8004f04 <ifx_i2c_pl_event_handler+0xec>
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8004ea6:	f899 3000 	ldrb.w	r3, [r9]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
 8004eaa:	f899 8001 	ldrb.w	r8, [r9, #1]
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8004eae:	9303      	str	r3, [sp, #12]
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8004eb0:	f003 0203 	and.w	r2, r3, #3
 8004eb4:	9202      	str	r2, [sp, #8]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
 8004eb6:	f899 2002 	ldrb.w	r2, [r9, #2]
                    break;
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8004eba:	f3c3 1641 	ubfx	r6, r3, #5, #2
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8004ebe:	f3c3 0a81 	ubfx	sl, r3, #2, #2
                packet_len = (p_data[1] << 8) | p_data[2];
 8004ec2:	ea42 2308 	orr.w	r3, r2, r8, lsl #8

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8004ec6:	eb09 0207 	add.w	r2, r9, r7
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8004eca:	1eb9      	subs	r1, r7, #2
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8004ecc:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8004ed0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];
 8004ed4:	9301      	str	r3, [sp, #4]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8004ed6:	4648      	mov	r0, r9
 8004ed8:	b289      	uxth	r1, r1
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8004eda:	ea42 280c 	orr.w	r8, r2, ip, lsl #8
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8004ede:	f7ff ff39 	bl	8004d54 <ifx_i2c_dl_calc_crc>
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	09db      	lsrs	r3, r3, #7
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
                packet_len = (p_data[1] << 8) | p_data[2];

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8004ee6:	4605      	mov	r5, r0
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8004ee8:	bf14      	ite	ne
 8004eea:	230b      	movne	r3, #11
 8004eec:	230a      	moveq	r3, #10
 8004eee:	e042      	b.n	8004f76 <ifx_i2c_pl_event_handler+0x15e>
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8004ef0:	45a8      	cmp	r8, r5
 8004ef2:	d107      	bne.n	8004f04 <ifx_i2c_pl_event_handler+0xec>
 8004ef4:	9b01      	ldr	r3, [sp, #4]
 8004ef6:	b12b      	cbz	r3, 8004f04 <ifx_i2c_pl_event_handler+0xec>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8004ef8:	3305      	adds	r3, #5
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8004efa:	429f      	cmp	r7, r3
 8004efc:	d102      	bne.n	8004f04 <ifx_i2c_pl_event_handler+0xec>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8004efe:	1eb3      	subs	r3, r6, #2
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d801      	bhi.n	8004f08 <ifx_i2c_pl_event_handler+0xf0>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8004f04:	2306      	movs	r3, #6
 8004f06:	e036      	b.n	8004f76 <ifx_i2c_pl_event_handler+0x15e>
                    break;
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8004f08:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	459a      	cmp	sl, r3
 8004f14:	d005      	beq.n	8004f22 <ifx_i2c_pl_event_handler+0x10a>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8004f16:	2309      	movs	r3, #9
 8004f18:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                    continue_state_machine = FALSE;
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	2100      	movs	r1, #0
 8004f20:	e016      	b.n	8004f50 <ifx_i2c_pl_event_handler+0x138>
                    break;
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8004f22:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8004f26:	9a02      	ldr	r2, [sp, #8]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d144      	bne.n	8004fb6 <ifx_i2c_pl_event_handler+0x19e>
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8004f2c:	2e01      	cmp	r6, #1
 8004f2e:	d046      	beq.n	8004fbe <ifx_i2c_pl_event_handler+0x1a6>
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8004f30:	4649      	mov	r1, r9
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8004f32:	f884 a062 	strb.w	sl, [r4, #98]	; 0x62
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8004f36:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004f38:	463a      	mov	r2, r7
 8004f3a:	f006 fc2d 	bl	800b798 <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8004f3e:	2100      	movs	r1, #0
                p_ctx->dl.state = DL_STATE_ACK;
 8004f40:	2304      	movs	r3, #4
                    p_ctx->dl.state = DL_STATE_RESEND;
                    break;
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
                p_ctx->dl.rx_buffer_size = data_len;
 8004f42:	f8a4 706e 	strh.w	r7, [r4, #110]	; 0x6e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8004f46:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
                p_ctx->dl.state = DL_STATE_ACK;
 8004f4a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                continue_state_machine = FALSE;

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8004f4e:	4620      	mov	r0, r4
 8004f50:	460a      	mov	r2, r1
 8004f52:	460b      	mov	r3, r1
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8004f54:	b005      	add	sp, #20
 8004f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                continue_state_machine = FALSE;

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8004f5a:	f7ff bf16 	b.w	8004d8a <ifx_i2c_dl_send_frame_internal>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8004f5e:	1eb3      	subs	r3, r6, #2
 8004f60:	425a      	negs	r2, r3
 8004f62:	415a      	adcs	r2, r3
 8004f64:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d001      	beq.n	8004f70 <ifx_i2c_pl_event_handler+0x158>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8004f6c:	2309      	movs	r3, #9
 8004f6e:	e002      	b.n	8004f76 <ifx_i2c_pl_event_handler+0x15e>
                    break;
                }
                if (crc_received != crc_calculated)
 8004f70:	45a8      	cmp	r8, r5
 8004f72:	d003      	beq.n	8004f7c <ifx_i2c_pl_event_handler+0x164>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8004f74:	2305      	movs	r3, #5
 8004f76:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                    break;
 8004f7a:	e75a      	b.n	8004e32 <ifx_i2c_pl_event_handler+0x1a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 8004f7c:	2f05      	cmp	r7, #5
 8004f7e:	d81a      	bhi.n	8004fb6 <ifx_i2c_pl_event_handler+0x19e>
 8004f80:	9a01      	ldr	r2, [sp, #4]
 8004f82:	b9c2      	cbnz	r2, 8004fb6 <ifx_i2c_pl_event_handler+0x19e>
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8004f84:	b16b      	cbz	r3, 8004fa2 <ifx_i2c_pl_event_handler+0x18a>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8004f86:	2309      	movs	r3, #9
 8004f88:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                    p_ctx->dl.resynced = 1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8004f92:	2303      	movs	r3, #3
 8004f94:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8004f98:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
                    break;
 8004f9c:	4645      	mov	r5, r8
 8004f9e:	2602      	movs	r6, #2
 8004fa0:	e747      	b.n	8004e32 <ifx_i2c_pl_event_handler+0x1a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 8004fa2:	f1ba 0f00 	cmp.w	sl, #0
 8004fa6:	d106      	bne.n	8004fb6 <ifx_i2c_pl_event_handler+0x19e>
 8004fa8:	2e03      	cmp	r6, #3
 8004faa:	d004      	beq.n	8004fb6 <ifx_i2c_pl_event_handler+0x19e>
 8004fac:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8004fb0:	9a02      	ldr	r2, [sp, #8]
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d001      	beq.n	8004fba <ifx_i2c_pl_event_handler+0x1a2>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8004fb6:	2309      	movs	r3, #9
 8004fb8:	e002      	b.n	8004fc0 <ifx_i2c_pl_event_handler+0x1a8>
                    break;
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8004fba:	2e01      	cmp	r6, #1
 8004fbc:	d104      	bne.n	8004fc8 <ifx_i2c_pl_event_handler+0x1b0>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8004fbe:	2305      	movs	r3, #5
 8004fc0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                    break;
 8004fc4:	4645      	mov	r5, r8
 8004fc6:	e734      	b.n	8004e32 <ifx_i2c_pl_event_handler+0x1a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                continue_state_machine = FALSE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8004fce:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	e087      	b.n	80050e8 <ifx_i2c_pl_event_handler+0x2d0>
            }
            break;
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8004fd8:	2303      	movs	r3, #3
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8004fda:	4620      	mov	r0, r4
            }
            break;
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8004fdc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8004fe0:	b005      	add	sp, #20
 8004fe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8004fe6:	f000 bb5e 	b.w	80056a6 <ifx_i2c_pl_receive_frame>
            }
            break;
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 8004fea:	f5bb 7f81 	cmp.w	fp, #258	; 0x102
 8004fee:	d101      	bne.n	8004ff4 <ifx_i2c_pl_event_handler+0x1dc>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8004ff0:	2305      	movs	r3, #5
 8004ff2:	e726      	b.n	8004e42 <ifx_i2c_pl_event_handler+0x2a>
                    break;
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
 8004ffa:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
 8004ffe:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
 8005002:	f8d4 c07c 	ldr.w	ip, [r4, #124]	; 0x7c
 8005006:	6f62      	ldr	r2, [r4, #116]	; 0x74
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8005008:	3b05      	subs	r3, #5
 800500a:	4620      	mov	r0, r4
                    break;
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
 800500c:	b109      	cbz	r1, 8005012 <ifx_i2c_pl_event_handler+0x1fa>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800500e:	2104      	movs	r1, #4
 8005010:	e000      	b.n	8005014 <ifx_i2c_pl_event_handler+0x1fc>
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
                else
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8005012:	2106      	movs	r1, #6
 8005014:	3203      	adds	r2, #3
 8005016:	b29b      	uxth	r3, r3
 8005018:	e068      	b.n	80050ec <ifx_i2c_pl_event_handler+0x2d4>
            break;
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 800501a:	2302      	movs	r3, #2
 800501c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                continue_state_machine = FALSE;
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8005020:	4620      	mov	r0, r4
 8005022:	2100      	movs	r1, #0
 8005024:	2201      	movs	r2, #1
 8005026:	e794      	b.n	8004f52 <ifx_i2c_pl_event_handler+0x13a>

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8005028:	f7ff f962 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 800502c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800502e:	1ac0      	subs	r0, r0, r3

    if (p_ctx->tl.api_start_time > current_time_stamp)
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8005030:	4b32      	ldr	r3, [pc, #200]	; (80050fc <ifx_i2c_pl_event_handler+0x2e4>)
 8005032:	4298      	cmp	r0, r3
 8005034:	d824      	bhi.n	8005080 <ifx_i2c_pl_event_handler+0x268>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8005036:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800503a:	2b03      	cmp	r3, #3
 800503c:	d110      	bne.n	8005060 <ifx_i2c_pl_event_handler+0x248>

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 800503e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8005042:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    p_ctx->dl.resynced = 1;
 8005046:	2301      	movs	r3, #1
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8005048:	2100      	movs	r1, #0
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
 800504a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 800504e:	2305      	movs	r3, #5
 8005050:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8005054:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8005058:	4620      	mov	r0, r4
 800505a:	2202      	movs	r2, #2
 800505c:	460b      	mov	r3, r1
 800505e:	e00a      	b.n	8005076 <ifx_i2c_pl_event_handler+0x25e>
            status = ifx_i2c_dl_resync(p_ctx);
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8005060:	3301      	adds	r3, #1
 8005062:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            p_ctx->dl.state = DL_STATE_TX;
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8005066:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
            p_ctx->dl.state = DL_STATE_TX;
 800506a:	2302      	movs	r3, #2
 800506c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8005070:	4620      	mov	r0, r4
 8005072:	2200      	movs	r2, #0
 8005074:	2301      	movs	r3, #1
 8005076:	f7ff fe88 	bl	8004d8a <ifx_i2c_dl_send_frame_internal>
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 800507a:	b120      	cbz	r0, 8005086 <ifx_i2c_pl_event_handler+0x26e>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 800507c:	2306      	movs	r3, #6
 800507e:	e000      	b.n	8005082 <ifx_i2c_pl_event_handler+0x26a>
        }
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
 8005080:	2308      	movs	r3, #8
 8005082:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            break;
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
                if (DL_STATE_ERROR != p_ctx->dl.state)
 8005086:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800508a:	2b08      	cmp	r3, #8
 800508c:	d132      	bne.n	80050f4 <ifx_i2c_pl_event_handler+0x2dc>
 800508e:	e6d0      	b.n	8004e32 <ifx_i2c_pl_event_handler+0x1a>
                }
            }
            break;
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 8005090:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8005094:	b913      	cbnz	r3, 800509c <ifx_i2c_pl_event_handler+0x284>
                {
                    p_ctx->dl.error = 1;
 8005096:	2301      	movs	r3, #1
 8005098:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
                }
                if (0 == p_ctx->dl.error)
 800509c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 80050a0:	2101      	movs	r1, #1
 80050a2:	b922      	cbnz	r2, 80050ae <ifx_i2c_pl_event_handler+0x296>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80050a4:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80050a8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80050aa:	4620      	mov	r0, r4
 80050ac:	e01c      	b.n	80050e8 <ifx_i2c_pl_event_handler+0x2d0>

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80050ae:	2303      	movs	r3, #3
 80050b0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80050b4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    p_ctx->dl.resynced = 1;
 80050b8:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 80050bc:	2305      	movs	r3, #5
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 80050be:	2100      	movs	r1, #0
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 1;
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 80050c0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 80050c4:	4620      	mov	r0, r4
 80050c6:	460b      	mov	r3, r1
 80050c8:	2202      	movs	r2, #2
 80050ca:	f7ff fe5e 	bl	8004d8a <ifx_i2c_dl_send_frame_internal>
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
                    p_ctx->dl.state = DL_STATE_ERROR;
 80050ce:	2308      	movs	r3, #8
 80050d0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
                    p_ctx->dl.error = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 80050da:	e00b      	b.n	80050f4 <ifx_i2c_pl_event_handler+0x2dc>
                continue_state_machine = FALSE;
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 80050dc:	2101      	movs	r1, #1
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80050de:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
                continue_state_machine = FALSE;
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 80050e0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80050e4:	4620      	mov	r0, r4
 80050e6:	2200      	movs	r2, #0
 80050e8:	4613      	mov	r3, r2
 80050ea:	46ac      	mov	ip, r5
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 80050ec:	b005      	add	sp, #20
 80050ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            break;
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80050f2:	4760      	bx	ip
                continue_state_machine = FALSE;
                break;
        }
    } while (TRUE == continue_state_machine);
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 80050f4:	b005      	add	sp, #20
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fa:	bf00      	nop
 80050fc:	0002bf1f 	.word	0x0002bf1f

08005100 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8005100:	b538      	push	{r3, r4, r5, lr}
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8005102:	2300      	movs	r3, #0
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8005104:	460d      	mov	r5, r1
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8005106:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 800510a:	490e      	ldr	r1, [pc, #56]	; (8005144 <ifx_i2c_dl_init+0x44>)
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800510c:	4604      	mov	r4, r0
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 800510e:	f000 fa83 	bl	8005618 <ifx_i2c_pl_init>
 8005112:	b998      	cbnz	r0, 800513c <ifx_i2c_dl_init+0x3c>
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
 8005114:	2301      	movs	r3, #1
 8005116:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 800511a:	2303      	movs	r3, #3
 800511c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8005120:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    p_ctx->dl.resynced = 0;
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8005124:	f504 7329 	add.w	r3, r4, #676	; 0x2a4
 8005128:	6723      	str	r3, [r4, #112]	; 0x70
    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
 800512a:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 800512e:	f204 33ba 	addw	r3, r4, #954	; 0x3ba
    p_ctx->dl.upper_layer_event_handler = handler;
    p_ctx->dl.state = DL_STATE_IDLE;
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
    p_ctx->dl.error = 0;
 8005132:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 8005136:	67e5      	str	r5, [r4, #124]	; 0x7c
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
    p_ctx->dl.resynced = 0;
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8005138:	6763      	str	r3, [r4, #116]	; 0x74

    return IFX_I2C_STACK_SUCCESS;
 800513a:	bd38      	pop	{r3, r4, r5, pc}

    p_ctx->dl.state = DL_STATE_UNINIT;
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
 800513c:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->dl.error = 0;
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;

    return IFX_I2C_STACK_SUCCESS;
}
 8005140:	bd38      	pop	{r3, r4, r5, pc}
 8005142:	bf00      	nop
 8005144:	08004e19 	.word	0x08004e19

08005148 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8005148:	b510      	push	{r4, lr}
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 800514a:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 800514e:	2a01      	cmp	r2, #1

    return IFX_I2C_STACK_SUCCESS;
}

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8005150:	4603      	mov	r3, r0
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8005152:	d111      	bne.n	8005178 <ifx_i2c_dl_send_frame+0x30>
 8005154:	b181      	cbz	r1, 8005178 <ifx_i2c_dl_send_frame+0x30>
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->dl.state = DL_STATE_TX;
 8005156:	2202      	movs	r2, #2
 8005158:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    p_ctx->dl.retransmit_counter = 0;
 800515c:	2200      	movs	r2, #0
 800515e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
    p_ctx->dl.action_rx_only = 0;
 8005162:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8005166:	240a      	movs	r4, #10
    }

    p_ctx->dl.state = DL_STATE_TX;
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
 8005168:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 800516c:	6684      	str	r4, [r0, #104]	; 0x68

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 800516e:	4613      	mov	r3, r2
}
 8005170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 0;
    p_ctx->dl.tx_buffer_size = frame_len;
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8005174:	f7ff be09 	b.w	8004d8a <ifx_i2c_dl_send_frame_internal>
}
 8005178:	f44f 7081 	mov.w	r0, #258	; 0x102
 800517c:	bd10      	pop	{r4, pc}
	...

08005180 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8005180:	b510      	push	{r4, lr}
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8005182:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8005186:	2b01      	cmp	r3, #1

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
}

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8005188:	4604      	mov	r4, r0
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 800518a:	d111      	bne.n	80051b0 <ifx_i2c_dl_receive_frame+0x30>
    {
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 800518c:	2203      	movs	r2, #3
 800518e:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    p_ctx->dl.retransmit_counter = 0;
 8005192:	2200      	movs	r2, #0
    p_ctx->dl.action_rx_only = 1;
 8005194:	f880 3063 	strb.w	r3, [r0, #99]	; 0x63
        return (IFX_I2C_STACK_ERROR);
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
    p_ctx->dl.retransmit_counter = 0;
 8005198:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800519c:	f7ff f8a8 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <ifx_i2c_dl_receive_frame+0x38>)

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 80051a2:	67a0      	str	r0, [r4, #120]	; 0x78
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 80051a4:	66a3      	str	r3, [r4, #104]	; 0x68

    return (ifx_i2c_pl_receive_frame(p_ctx));
 80051a6:	4620      	mov	r0, r4
}
 80051a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_ctx->dl.retransmit_counter = 0;
    p_ctx->dl.action_rx_only = 1;
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;

    return (ifx_i2c_pl_receive_frame(p_ctx));
 80051ac:	f000 ba7b 	b.w	80056a6 <ifx_i2c_pl_receive_frame>
}
 80051b0:	f44f 7081 	mov.w	r0, #258	; 0x102
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	bf00      	nop
 80051b8:	0002bf20 	.word	0x0002bf20

080051bc <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 80051bc:	b510      	push	{r4, lr}
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 80051be:	2401      	movs	r4, #1
_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 80051c0:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 80051c4:	4603      	mov	r3, r0
    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 80051c6:	f8a0 2198 	strh.w	r2, [r0, #408]	; 0x198
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 80051ca:	f880 419a 	strb.w	r4, [r0, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80051ce:	22c8      	movs	r2, #200	; 0xc8
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80051d0:	f880 419b 	strb.w	r4, [r0, #411]	; 0x19b
{
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
    p_ctx->pl.buffer_tx_len = 1;
 80051d4:	f8a0 4196 	strh.w	r4, [r0, #406]	; 0x196

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80051d8:	f8a0 219c 	strh.w	r2, [r0, #412]	; 0x19c
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80051dc:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80051e0:	4622      	mov	r2, r4
 80051e2:	6900      	ldr	r0, [r0, #16]
}
 80051e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80051e8:	f7fe bf12 	b.w	8004010 <pal_i2c_write>

080051ec <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 80051ec:	2182      	movs	r1, #130	; 0x82
 80051ee:	2204      	movs	r2, #4
 80051f0:	f7ff bfe4 	b.w	80051bc <ifx_i2c_pl_read_register>

080051f4 <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4604      	mov	r4, r0
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80051f8:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80051fc:	4619      	mov	r1, r3
 80051fe:	3081      	adds	r0, #129	; 0x81

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 8005200:	4615      	mov	r5, r2
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8005202:	f006 fac9 	bl	800b798 <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8005206:	2302      	movs	r3, #2
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8005208:	1c6a      	adds	r2, r5, #1

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 800520a:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800520e:	23c8      	movs	r3, #200	; 0xc8
 8005210:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8005214:	b292      	uxth	r2, r2

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8005216:	2301      	movs	r3, #1
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8005218:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800521c:	f884 319b 	strb.w	r3, [r4, #411]	; 0x19b
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8005220:	6920      	ldr	r0, [r4, #16]
 8005222:	f104 0180 	add.w	r1, r4, #128	; 0x80
}
 8005226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800522a:	f7fe bef1 	b.w	8004010 <pal_i2c_write>

0800522e <ifx_i2c_pal_poll_callback>:
}

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 800522e:	f890 219b 	ldrb.w	r2, [r0, #411]	; 0x19b
 8005232:	2a01      	cmp	r2, #1
        }
    }
}

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8005234:	4603      	mov	r3, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8005236:	d106      	bne.n	8005246 <ifx_i2c_pal_poll_callback+0x18>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8005238:	6900      	ldr	r0, [r0, #16]
 800523a:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 800523e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8005242:	f7fe bee5 	b.w	8004010 <pal_i2c_write>
    }
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8005246:	2a02      	cmp	r2, #2
 8005248:	d106      	bne.n	8005258 <ifx_i2c_pal_poll_callback+0x2a>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 800524a:	6900      	ldr	r0, [r0, #16]
 800524c:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8005250:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8005254:	f7fe bf04 	b.w	8004060 <pal_i2c_read>
 8005258:	4770      	bx	lr
	...

0800525c <ifx_i2c_pl_set_bit_rate>:
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
}

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4604      	mov	r4, r0
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8005260:	6900      	ldr	r0, [r0, #16]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8005262:	2300      	movs	r3, #0
_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8005264:	68c5      	ldr	r5, [r0, #12]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8005266:	60c3      	str	r3, [r0, #12]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8005268:	f7fe ff24 	bl	80040b4 <pal_i2c_set_bitrate>
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 800526c:	6923      	ldr	r3, [r4, #16]
 800526e:	60dd      	str	r5, [r3, #12]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8005270:	b188      	cbz	r0, 8005296 <ifx_i2c_pl_set_bit_rate+0x3a>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8005272:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
 8005276:	1e5a      	subs	r2, r3, #1
 8005278:	f8a4 219c 	strh.w	r2, [r4, #412]	; 0x19c
 800527c:	b14b      	cbz	r3, 8005292 <ifx_i2c_pl_set_bit_rate+0x36>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 800527e:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 8005282:	4905      	ldr	r1, [pc, #20]	; (8005298 <ifx_i2c_pl_set_bit_rate+0x3c>)
 8005284:	4622      	mov	r2, r4
 8005286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800528a:	f7fe ffe5 	bl	8004258 <pal_os_event_register_callback_oneshot>
 800528e:	2001      	movs	r0, #1
 8005290:	bd38      	pop	{r3, r4, r5, pc}
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 8005292:	f44f 7081 	mov.w	r0, #258	; 0x102
        status = IFX_I2C_STACK_SUCCESS;
    }

    return (status);

}
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	0800529d 	.word	0x0800529d

0800529c <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 800529c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 800529e:	8883      	ldrh	r3, [r0, #4]
 80052a0:	f88d 3005 	strb.w	r3, [sp, #5]
 80052a4:	0a1a      	lsrs	r2, r3, #8

    return (status);

}
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80052a6:	4604      	mov	r4, r0
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80052a8:	f88d 2004 	strb.w	r2, [sp, #4]
    return (status);

}
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80052ac:	f44f 7181 	mov.w	r1, #258	; 0x102

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 80052b0:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
 80052b4:	2b55      	cmp	r3, #85	; 0x55
 80052b6:	d05c      	beq.n	8005372 <ifx_i2c_pl_negotiation_event_handler+0xd6>
 80052b8:	d813      	bhi.n	80052e2 <ifx_i2c_pl_negotiation_event_handler+0x46>
 80052ba:	2b22      	cmp	r3, #34	; 0x22
 80052bc:	f000 8082 	beq.w	80053c4 <ifx_i2c_pl_negotiation_event_handler+0x128>
 80052c0:	d80a      	bhi.n	80052d8 <ifx_i2c_pl_negotiation_event_handler+0x3c>
 80052c2:	2b11      	cmp	r3, #17
 80052c4:	f040 80a1 	bne.w	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
            }
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 80052c8:	2322      	movs	r3, #34	; 0x22
 80052ca:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 80052ce:	4620      	mov	r0, r4
 80052d0:	2181      	movs	r1, #129	; 0x81
 80052d2:	2202      	movs	r2, #2
 80052d4:	ab01      	add	r3, sp, #4
 80052d6:	e072      	b.n	80053be <ifx_i2c_pl_negotiation_event_handler+0x122>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 80052d8:	2b33      	cmp	r3, #51	; 0x33
 80052da:	d026      	beq.n	800532a <ifx_i2c_pl_negotiation_event_handler+0x8e>
 80052dc:	2b44      	cmp	r3, #68	; 0x44
 80052de:	d026      	beq.n	800532e <ifx_i2c_pl_negotiation_event_handler+0x92>
 80052e0:	e093      	b.n	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
 80052e2:	2b88      	cmp	r3, #136	; 0x88
 80052e4:	d075      	beq.n	80053d2 <ifx_i2c_pl_negotiation_event_handler+0x136>
 80052e6:	d804      	bhi.n	80052f2 <ifx_i2c_pl_negotiation_event_handler+0x56>
 80052e8:	2b66      	cmp	r3, #102	; 0x66
 80052ea:	d04b      	beq.n	8005384 <ifx_i2c_pl_negotiation_event_handler+0xe8>
 80052ec:	2b77      	cmp	r3, #119	; 0x77
 80052ee:	d055      	beq.n	800539c <ifx_i2c_pl_negotiation_event_handler+0x100>
 80052f0:	e08b      	b.n	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
 80052f2:	2baa      	cmp	r3, #170	; 0xaa
 80052f4:	d07d      	beq.n	80053f2 <ifx_i2c_pl_negotiation_event_handler+0x156>
 80052f6:	2bbb      	cmp	r3, #187	; 0xbb
 80052f8:	f040 8087 	bne.w	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
        {
            // Set initial frequency to PL_DEFAULT_FREQUENCY to be able to negotiate with slave
            case PL_INIT_SET_FREQ_DEFAULT:
            {
                // Default frequency set to master
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 80052fc:	2164      	movs	r1, #100	; 0x64
 80052fe:	4620      	mov	r0, r4
 8005300:	f7ff ffac 	bl	800525c <ifx_i2c_pl_set_bit_rate>
                if (IFX_I2C_STACK_SUCCESS == event)
 8005304:	4601      	mov	r1, r0
 8005306:	b908      	cbnz	r0, 800530c <ifx_i2c_pl_negotiation_event_handler+0x70>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8005308:	2333      	movs	r3, #51	; 0x33
 800530a:	e04e      	b.n	80053aa <ifx_i2c_pl_negotiation_event_handler+0x10e>
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
 800530c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8005310:	d17b      	bne.n	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8005312:	23aa      	movs	r3, #170	; 0xaa
 8005314:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
                    p_buffer = NULL;
                    buffer_len = 0;
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 8005318:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 800531c:	493c      	ldr	r1, [pc, #240]	; (8005410 <ifx_i2c_pl_negotiation_event_handler+0x174>)
 800531e:	4622      	mov	r2, r4
 8005320:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005324:	f7fe ff98 	bl	8004258 <pal_os_event_register_callback_oneshot>
 8005328:	e06f      	b.n	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
            }
            break;
            // Read the current Max frequency supported by slave
            case PL_INIT_GET_FREQ_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 800532a:	2344      	movs	r3, #68	; 0x44
 800532c:	e022      	b.n	8005374 <ifx_i2c_pl_negotiation_event_handler+0xd8>
            }
            break;
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800532e:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
 8005332:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
 8005336:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 800533a:	2280      	movs	r2, #128	; 0x80
 800533c:	f88d 2000 	strb.w	r2, [sp]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8005340:	8862      	ldrh	r2, [r4, #2]
 8005342:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8005346:	d904      	bls.n	8005352 <ifx_i2c_pl_negotiation_event_handler+0xb6>
 8005348:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800534c:	d80f      	bhi.n	800536e <ifx_i2c_pl_negotiation_event_handler+0xd2>
                {
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 800534e:	2304      	movs	r3, #4
 8005350:	e003      	b.n	800535a <ifx_i2c_pl_negotiation_event_handler+0xbe>
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8005352:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005356:	d90a      	bls.n	800536e <ifx_i2c_pl_negotiation_event_handler+0xd2>
                {
                    //Change to SM&FM mode if slave's current supported frequency is above user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8005358:	2303      	movs	r3, #3
 800535a:	f88d 3001 	strb.w	r3, [sp, #1]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800535e:	2355      	movs	r3, #85	; 0x55
 8005360:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8005364:	4620      	mov	r0, r4
 8005366:	2189      	movs	r1, #137	; 0x89
 8005368:	2202      	movs	r2, #2
 800536a:	466b      	mov	r3, sp
 800536c:	e027      	b.n	80053be <ifx_i2c_pl_negotiation_event_handler+0x122>
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 800536e:	2366      	movs	r3, #102	; 0x66
 8005370:	e01b      	b.n	80053aa <ifx_i2c_pl_negotiation_event_handler+0x10e>
            }
            break;
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8005372:	2366      	movs	r3, #102	; 0x66
 8005374:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8005378:	4620      	mov	r0, r4
 800537a:	2184      	movs	r1, #132	; 0x84
 800537c:	2204      	movs	r2, #4
 800537e:	f7ff ff1d 	bl	80051bc <ifx_i2c_pl_read_register>
            }
            break;
 8005382:	e042      	b.n	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
            // Verify the requested frequency and slave's supported frequency
            case PL_INIT_VERIFY_FREQ:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8005384:	f894 0082 	ldrb.w	r0, [r4, #130]	; 0x82
 8005388:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
                if (p_ctx->frequency > slave_frequency)
 800538c:	8862      	ldrh	r2, [r4, #2]
 800538e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005392:	429a      	cmp	r2, r3
                {
                    LOG_PL("[IFX-PL]: Unexpected frequency in MAX_SCL_FREQU\n");
                    p_buffer = NULL;
                    buffer_len = 0;
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8005394:	bf8c      	ite	hi
 8005396:	23aa      	movhi	r3, #170	; 0xaa
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 8005398:	2377      	movls	r3, #119	; 0x77
 800539a:	e006      	b.n	80053aa <ifx_i2c_pl_negotiation_event_handler+0x10e>
            break;
            // Frequency negotiated, Set frequency at master
            case PL_INIT_AGREE_FREQ:
            {
                // Frequency negotiation between master and slave is complete
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 800539c:	8861      	ldrh	r1, [r4, #2]
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff ff5c 	bl	800525c <ifx_i2c_pl_set_bit_rate>
                if (IFX_I2C_STACK_SUCCESS == event)
 80053a4:	4601      	mov	r1, r0
 80053a6:	b918      	cbnz	r0, 80053b0 <ifx_i2c_pl_negotiation_event_handler+0x114>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 80053a8:	2311      	movs	r3, #17
 80053aa:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
 80053ae:	e77f      	b.n	80052b0 <ifx_i2c_pl_negotiation_event_handler+0x14>
                    continue_negotiation = TRUE;
                }
                else if (IFX_I2C_STACK_ERROR == event)
 80053b0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 80053b4:	d129      	bne.n	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80053b6:	23aa      	movs	r3, #170	; 0xaa
 80053b8:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
 80053bc:	e025      	b.n	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
            break;
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 80053be:	f7ff ff19 	bl	80051f4 <ifx_i2c_pl_write_register>
            }
            break;
 80053c2:	e022      	b.n	800540a <ifx_i2c_pl_negotiation_event_handler+0x16e>
            // Read the frame length to verify
            case PL_INIT_GET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 80053c4:	2388      	movs	r3, #136	; 0x88
 80053c6:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 80053ca:	4620      	mov	r0, r4
 80053cc:	2181      	movs	r1, #129	; 0x81
 80053ce:	2202      	movs	r2, #2
 80053d0:	e7d5      	b.n	800537e <ifx_i2c_pl_negotiation_event_handler+0xe2>
            }
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80053d2:	23aa      	movs	r3, #170	; 0xaa
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 80053d4:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
            }
            break;
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80053d8:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 80053dc:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 80053e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
 80053e4:	88a2      	ldrh	r2, [r4, #4]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	f4ff af62 	bcc.w	80052b0 <ifx_i2c_pl_negotiation_event_handler+0x14>
                {
                    p_ctx->frame_size = slave_frame_len;
 80053ec:	80a3      	strh	r3, [r4, #4]
                    event = IFX_I2C_STACK_SUCCESS;
 80053ee:	2100      	movs	r1, #0
 80053f0:	e75e      	b.n	80052b0 <ifx_i2c_pl_negotiation_event_handler+0x14>
                continue_negotiation = TRUE;
            }
            break;
            case PL_INIT_DONE:
            {
                if (IFX_I2C_STACK_SUCCESS == event)
 80053f2:	b909      	cbnz	r1, 80053f8 <ifx_i2c_pl_negotiation_event_handler+0x15c>
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
 80053f4:	2302      	movs	r3, #2
 80053f6:	e000      	b.n	80053fa <ifx_i2c_pl_negotiation_event_handler+0x15e>
                }
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 80053f8:	2300      	movs	r3, #0
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 80053fa:	2200      	movs	r2, #0
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
                }
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 80053fc:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8005400:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
 8005404:	4620      	mov	r0, r4
 8005406:	4613      	mov	r3, r2
 8005408:	47a8      	blx	r5
            break;
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
}
 800540a:	b003      	add	sp, #12
 800540c:	bd30      	pop	{r4, r5, pc}
 800540e:	bf00      	nop
 8005410:	0800529d 	.word	0x0800529d

08005414 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	4604      	mov	r4, r0
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 8005418:	b141      	cbz	r1, 800542c <ifx_i2c_pl_frame_event_handler+0x18>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 800541a:	f8d0 41a8 	ldr.w	r4, [r0, #424]	; 0x1a8
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 800541e:	2302      	movs	r3, #2
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8005420:	2200      	movs	r2, #0
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8005422:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8005426:	46a4      	mov	ip, r4
 8005428:	4613      	mov	r3, r2
 800542a:	e06e      	b.n	800550a <ifx_i2c_pl_frame_event_handler+0xf6>
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 800542c:	f890 319f 	ldrb.w	r3, [r0, #415]	; 0x19f
 8005430:	3b01      	subs	r3, #1
 8005432:	2b04      	cmp	r3, #4
 8005434:	d85e      	bhi.n	80054f4 <ifx_i2c_pl_frame_event_handler+0xe0>
 8005436:	e8df f003 	tbb	[pc, r3]
 800543a:	0b07      	.short	0x0b07
 800543c:	5215      	.short	0x5215
 800543e:	03          	.byte	0x03
 800543f:	00          	.byte	0x00
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8005440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        switch (p_ctx->pl.frame_state)
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 8005444:	f000 b866 	b.w	8005514 <ifx_i2c_pl_soft_reset>
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8005448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            }
            break;
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 800544c:	f7ff bf26 	b.w	800529c <ifx_i2c_pl_negotiation_event_handler>
            break;
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8005450:	2303      	movs	r3, #3
 8005452:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8005456:	f890 319e 	ldrb.w	r3, [r0, #414]	; 0x19e
 800545a:	2b02      	cmp	r3, #2
 800545c:	d102      	bne.n	8005464 <ifx_i2c_pl_frame_event_handler+0x50>
                {
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800545e:	2182      	movs	r1, #130	; 0x82
 8005460:	2204      	movs	r2, #4
 8005462:	e016      	b.n	8005492 <ifx_i2c_pl_frame_event_handler+0x7e>
            //lint -fallthrough "For write frame, polling of i2c status register is skipped"
            // Do read/write frame
            case PL_STATE_DATA_AVAILABLE:
            {
                // Read frame, if response is ready. Ignore busy flag
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8005464:	f894 319e 	ldrb.w	r3, [r4, #414]	; 0x19e
 8005468:	2b02      	cmp	r3, #2
 800546a:	d116      	bne.n	800549a <ifx_i2c_pl_frame_event_handler+0x86>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 800546c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8005470:	065b      	lsls	r3, r3, #25
 8005472:	d521      	bpl.n	80054b8 <ifx_i2c_pl_frame_event_handler+0xa4>
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8005474:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
 8005478:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 800547c:	ea53 2202 	orrs.w	r2, r3, r2, lsl #8
 8005480:	d01a      	beq.n	80054b8 <ifx_i2c_pl_frame_event_handler+0xa4>
 8005482:	88a3      	ldrh	r3, [r4, #4]
 8005484:	4293      	cmp	r3, r2
 8005486:	d317      	bcc.n	80054b8 <ifx_i2c_pl_frame_event_handler+0xa4>
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8005488:	2304      	movs	r3, #4
 800548a:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 800548e:	4620      	mov	r0, r4
 8005490:	2180      	movs	r1, #128	; 0x80
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8005492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8005496:	f7ff be91 	b.w	80051bc <ifx_i2c_pl_read_register>
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
                        }
                    }
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 800549a:	2b01      	cmp	r3, #1
 800549c:	d10c      	bne.n	80054b8 <ifx_i2c_pl_frame_event_handler+0xa4>
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 800549e:	2304      	movs	r3, #4
 80054a0:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                    ifx_i2c_pl_write_register(p_ctx,
 80054a4:	4620      	mov	r0, r4
 80054a6:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
 80054aa:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80054ae:	2180      	movs	r1, #128	; 0x80
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 80054b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
                    ifx_i2c_pl_write_register(p_ctx,
 80054b4:	f7ff be9e 	b.w	80051f4 <ifx_i2c_pl_write_register>
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
                }
                // Continue checking the slave status register
                else
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
 80054b8:	f7fe ff1a 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 80054bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80054be:	1ac0      	subs	r0, r0, r3
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 80054c0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80054c2:	4298      	cmp	r0, r3
 80054c4:	d209      	bcs.n	80054da <ifx_i2c_pl_frame_event_handler+0xc6>
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 80054c6:	f8d4 04d0 	ldr.w	r0, [r4, #1232]	; 0x4d0
 80054ca:	4911      	ldr	r1, [pc, #68]	; (8005510 <ifx_i2c_pl_frame_event_handler+0xfc>)
 80054cc:	4622      	mov	r2, r4
 80054ce:	f241 3388 	movw	r3, #5000	; 0x1388
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 80054d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 80054d6:	f7fe bebf 	b.w	8004258 <pal_os_event_register_callback_oneshot>
                                                               (void * )p_ctx,
                                                               PL_DATA_POLLING_INVERVAL_US);
                    }
                    else
                    {
                        p_ctx->pl.frame_state = PL_STATE_READY;
 80054da:	2302      	movs	r3, #2
 80054dc:	e00b      	b.n	80054f6 <ifx_i2c_pl_frame_event_handler+0xe2>
            break;
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
 80054de:	2302      	movs	r3, #2
 80054e0:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80054e4:	f8d0 51a8 	ldr.w	r5, [r0, #424]	; 0x1a8
 80054e8:	f8b0 3198 	ldrh.w	r3, [r0, #408]	; 0x198
 80054ec:	2100      	movs	r1, #0
 80054ee:	f100 0280 	add.w	r2, r0, #128	; 0x80
 80054f2:	e009      	b.n	8005508 <ifx_i2c_pl_frame_event_handler+0xf4>
            }
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80054f4:	2301      	movs	r3, #1
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
            }
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80054fc:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8005500:	4620      	mov	r0, r4
 8005502:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005506:	4613      	mov	r3, r2
 8005508:	46ac      	mov	ip, r5
            }
            break;
        }
    }
}
 800550a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800550e:	4760      	bx	ip
 8005510:	080051ed 	.word	0x080051ed

08005514 <ifx_i2c_pl_soft_reset>:
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8005514:	b507      	push	{r0, r1, r2, lr}
    uint8_t i2c_mode_value[2] = {0};
 8005516:	2300      	movs	r3, #0
 8005518:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (p_ctx->pl.request_soft_reset)
 800551c:	f890 31ad 	ldrb.w	r3, [r0, #429]	; 0x1ad
 8005520:	3b99      	subs	r3, #153	; 0x99
    }
}


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8005522:	4602      	mov	r2, r0
    uint8_t i2c_mode_value[2] = {0};
    switch (p_ctx->pl.request_soft_reset)
 8005524:	2b0a      	cmp	r3, #10
 8005526:	d837      	bhi.n	8005598 <ifx_i2c_pl_soft_reset+0x84>
 8005528:	e8df f003 	tbb	[pc, r3]
 800552c:	36363606 	.word	0x36363606
 8005530:	36363636 	.word	0x36363636
 8005534:	0e30      	.short	0x0e30
 8005536:	25          	.byte	0x25
 8005537:	00          	.byte	0x00
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8005538:	23a2      	movs	r3, #162	; 0xa2
 800553a:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800553e:	2182      	movs	r1, #130	; 0x82
 8005540:	2204      	movs	r2, #4
 8005542:	f7ff fe3b 	bl	80051bc <ifx_i2c_pl_read_register>
            break;
 8005546:	e027      	b.n	8005598 <ifx_i2c_pl_soft_reset+0x84>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8005548:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8005556:	b143      	cbz	r3, 800556a <ifx_i2c_pl_soft_reset+0x56>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8005558:	23a3      	movs	r3, #163	; 0xa3
 800555a:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 800555e:	2188      	movs	r1, #136	; 0x88
 8005560:	2202      	movs	r2, #2
 8005562:	ab01      	add	r3, sp, #4
 8005564:	f7ff fe46 	bl	80051f4 <ifx_i2c_pl_write_register>
 8005568:	e016      	b.n	8005598 <ifx_i2c_pl_soft_reset+0x84>
            }
            else
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800556a:	2300      	movs	r3, #0
 800556c:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8005570:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005574:	e00e      	b.n	8005594 <ifx_i2c_pl_soft_reset+0x80>
            }
            break;
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8005576:	23a1      	movs	r3, #161	; 0xa1
 8005578:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 800557c:	4908      	ldr	r1, [pc, #32]	; (80055a0 <ifx_i2c_pl_soft_reset+0x8c>)
 800557e:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 8005582:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8005586:	f7fe fe67 	bl	8004258 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 800558a:	e005      	b.n	8005598 <ifx_i2c_pl_soft_reset+0x84>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 800558c:	2301      	movs	r3, #1
 800558e:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8005592:	2100      	movs	r1, #0
 8005594:	f7ff ff3e 	bl	8005414 <ifx_i2c_pl_frame_event_handler>
            break;
        }
        default:
            break;
    }
}
 8005598:	b003      	add	sp, #12
 800559a:	f85d fb04 	ldr.w	pc, [sp], #4
 800559e:	bf00      	nop
 80055a0:	08005515 	.word	0x08005515

080055a4 <ifx_i2c_pl_pal_event_handler>:
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 80055a4:	4602      	mov	r2, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    switch (event)
 80055a6:	b189      	cbz	r1, 80055cc <ifx_i2c_pl_pal_event_handler+0x28>
 80055a8:	2902      	cmp	r1, #2
 80055aa:	d815      	bhi.n	80055d8 <ifx_i2c_pl_pal_event_handler+0x34>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 80055ac:	f8b0 319c 	ldrh.w	r3, [r0, #412]	; 0x19c
 80055b0:	1e59      	subs	r1, r3, #1
 80055b2:	f8a0 119c 	strh.w	r1, [r0, #412]	; 0x19c
 80055b6:	b12b      	cbz	r3, 80055c4 <ifx_i2c_pl_pal_event_handler+0x20>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 80055b8:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80055bc:	4907      	ldr	r1, [pc, #28]	; (80055dc <ifx_i2c_pl_pal_event_handler+0x38>)
 80055be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055c2:	e007      	b.n	80055d4 <ifx_i2c_pl_pal_event_handler+0x30>
                                                        ifx_i2c_pal_poll_callback, p_local_ctx, PL_POLLING_INVERVAL_US);
            }
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 80055c4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80055c8:	f7ff bf24 	b.w	8005414 <ifx_i2c_pl_frame_event_handler>
            }
            break;

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 80055cc:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80055d0:	4903      	ldr	r1, [pc, #12]	; (80055e0 <ifx_i2c_pl_pal_event_handler+0x3c>)
 80055d2:	2332      	movs	r3, #50	; 0x32
 80055d4:	f7fe be40 	b.w	8004258 <pal_os_event_register_callback_oneshot>
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	0800522f 	.word	0x0800522f
 80055e0:	080055e5 	.word	0x080055e5

080055e4 <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 80055e4:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
 80055e8:	2a01      	cmp	r2, #1
    }
}


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 80055ea:	4603      	mov	r3, r0
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 80055ec:	d10d      	bne.n	800560a <ifx_i2c_pl_guard_time_callback+0x26>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80055ee:	f890 219b 	ldrb.w	r2, [r0, #411]	; 0x19b
 80055f2:	2a01      	cmp	r2, #1
 80055f4:	d109      	bne.n	800560a <ifx_i2c_pl_guard_time_callback+0x26>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 80055f6:	2202      	movs	r2, #2
 80055f8:	f880 219b 	strb.w	r2, [r0, #411]	; 0x19b
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80055fc:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8005600:	6900      	ldr	r0, [r0, #16]
 8005602:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8005606:	f7fe bd2b 	b.w	8004060 <pal_i2c_read>
        }
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 800560a:	2a02      	cmp	r2, #2
 800560c:	d103      	bne.n	8005616 <ifx_i2c_pl_guard_time_callback+0x32>
        {
            LOG_PL("[IFX-PL]: GT done -> REG is read\n");
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800560e:	4618      	mov	r0, r3
 8005610:	2100      	movs	r1, #0
 8005612:	f7ff beff 	b.w	8005414 <ifx_i2c_pl_frame_event_handler>
 8005616:	4770      	bx	lr

08005618 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8005618:	b510      	push	{r4, lr}
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800561a:	2300      	movs	r3, #0
 800561c:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8005620:	23bb      	movs	r3, #187	; 0xbb
 8005622:	f880 31ac 	strb.w	r3, [r0, #428]	; 0x1ac
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 8005626:	6903      	ldr	r3, [r0, #16]
 8005628:	7802      	ldrb	r2, [r0, #0]

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 800562a:	f8c0 11a8 	str.w	r1, [r0, #424]	; 0x1a8
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800562e:	711a      	strb	r2, [r3, #4]
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8005630:	4604      	mov	r4, r0

    p_ctx->pl.upper_layer_event_handler = handler;
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
 8005632:	6900      	ldr	r0, [r0, #16]
 8005634:	4b10      	ldr	r3, [pc, #64]	; (8005678 <ifx_i2c_pl_init+0x60>)
 8005636:	60c3      	str	r3, [r0, #12]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8005638:	23c8      	movs	r3, #200	; 0xc8
 800563a:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
    if (TRUE == p_ctx->do_pal_init)
 800563e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005642:	2b01      	cmp	r3, #1
 8005644:	d008      	beq.n	8005658 <ifx_i2c_pl_init+0x40>
        {
            return (IFX_I2C_STACK_ERROR);
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8005646:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10b      	bne.n	8005666 <ifx_i2c_pl_init+0x4e>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 800564e:	2399      	movs	r3, #153	; 0x99
 8005650:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 8005654:	2305      	movs	r3, #5
 8005656:	e007      	b.n	8005668 <ifx_i2c_pl_init+0x50>
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
    if (TRUE == p_ctx->do_pal_init)
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8005658:	f7fe fcd6 	bl	8004008 <pal_i2c_init>
 800565c:	2800      	cmp	r0, #0
 800565e:	d0f2      	beq.n	8005646 <ifx_i2c_pl_init+0x2e>
        {
            return (IFX_I2C_STACK_ERROR);
 8005660:	f44f 7081 	mov.w	r0, #258	; 0x102
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);

    return (IFX_I2C_STACK_SUCCESS);
}
 8005664:	bd10      	pop	{r4, pc}
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 8005666:	2301      	movs	r3, #1
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8005668:	4620      	mov	r0, r4
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 800566a:	f884 319f 	strb.w	r3, [r4, #415]	; 0x19f
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800566e:	2100      	movs	r1, #0
 8005670:	f7ff fed0 	bl	8005414 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 8005674:	2000      	movs	r0, #0
 8005676:	bd10      	pop	{r4, pc}
 8005678:	080055a5 	.word	0x080055a5

0800567c <ifx_i2c_pl_send_frame>:
}

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 800567c:	b510      	push	{r4, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 800567e:	f890 419f 	ldrb.w	r4, [r0, #415]	; 0x19f
 8005682:	3c01      	subs	r4, #1
 8005684:	2c01      	cmp	r4, #1
 8005686:	d80b      	bhi.n	80056a0 <ifx_i2c_pl_send_frame+0x24>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 8005688:	2401      	movs	r4, #1
 800568a:	f880 419e 	strb.w	r4, [r0, #414]	; 0x19e

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 800568e:	f8c0 11a0 	str.w	r1, [r0, #416]	; 0x1a0
    p_ctx->pl.tx_frame_len = frame_len;
 8005692:	f8a0 21a4 	strh.w	r2, [r0, #420]	; 0x1a4

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8005696:	2100      	movs	r1, #0
 8005698:	f7ff febc 	bl	8005414 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 800569c:	2000      	movs	r0, #0
 800569e:	bd10      	pop	{r4, pc}
optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
 80056a0:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->pl.p_tx_frame   = p_frame;
    p_ctx->pl.tx_frame_len = frame_len;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
}
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 80056a6:	b508      	push	{r3, lr}
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80056a8:	f890 319f 	ldrb.w	r3, [r0, #415]	; 0x19f
 80056ac:	3b01      	subs	r3, #1
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d807      	bhi.n	80056c2 <ifx_i2c_pl_receive_frame+0x1c>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 80056b2:	2302      	movs	r3, #2
 80056b4:	f880 319e 	strb.w	r3, [r0, #414]	; 0x19e

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80056b8:	2100      	movs	r1, #0
 80056ba:	f7ff feab 	bl	8005414 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 80056be:	2000      	movs	r0, #0
 80056c0:	bd08      	pop	{r3, pc}
optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
    {
        return (IFX_I2C_STACK_ERROR);
 80056c2:	f44f 7081 	mov.w	r0, #258	; 0x102
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
    return (IFX_I2C_STACK_SUCCESS);
}
 80056c6:	bd08      	pop	{r3, pc}

080056c8 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 80056c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ca:	b089      	sub	sp, #36	; 0x24
 80056cc:	4604      	mov	r4, r0
 80056ce:	461f      	mov	r7, r3
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 80056d0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80056d4:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 80056d8:	460e      	mov	r6, r1
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80056da:	f200 2059 	addw	r0, r0, #601	; 0x259
 80056de:	4639      	mov	r1, r7
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 80056e0:	4615      	mov	r5, r2
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80056e2:	f000 ffdd 	bl	80066a0 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80056e6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80056ea:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80056ee:	f204 205e 	addw	r0, r4, #606	; 0x25e
 80056f2:	4629      	mov	r1, r5
 80056f4:	f000 ffd0 	bl	8006698 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80056f8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80056fc:	4422      	add	r2, r4
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80056fe:	4639      	mov	r1, r7
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8005700:	f8d2 01d4 	ldr.w	r0, [r2, #468]	; 0x1d4
 8005704:	9006      	str	r0, [sp, #24]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8005706:	a807      	add	r0, sp, #28
 8005708:	f000 ffca 	bl	80066a0 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 800570c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8005710:	a906      	add	r1, sp, #24
 8005712:	9100      	str	r1, [sp, #0]
 8005714:	2108      	movs	r1, #8
 8005716:	9101      	str	r1, [sp, #4]
 8005718:	9103      	str	r1, [sp, #12]
 800571a:	9104      	str	r1, [sp, #16]
 800571c:	f105 0208 	add.w	r2, r5, #8
 8005720:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005722:	9105      	str	r1, [sp, #20]
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 8005724:	4423      	add	r3, r4
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8005726:	f504 7416 	add.w	r4, r4, #600	; 0x258
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 800572a:	9402      	str	r4, [sp, #8]
 800572c:	4631      	mov	r1, r6
 800572e:	b292      	uxth	r2, r2
 8005730:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8005734:	2000      	movs	r0, #0
 8005736:	f7fe fbbb 	bl	8003eb0 <pal_crypt_decrypt_aes128_ccm>
 800573a:	2800      	cmp	r0, #0
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    return (return_status);
}
 800573c:	bf14      	ite	ne
 800573e:	f44f 7081 	movne.w	r0, #258	; 0x102
 8005742:	2000      	moveq	r0, #0
 8005744:	b009      	add	sp, #36	; 0x24
 8005746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005748 <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8005748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	4604      	mov	r4, r0
 800574e:	461f      	mov	r7, r3
_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
 8005750:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8005754:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8005758:	460e      	mov	r6, r1
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 800575a:	f200 2059 	addw	r0, r0, #601	; 0x259
 800575e:	4639      	mov	r1, r7
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8005760:	4615      	mov	r5, r2
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
    p_ctx->prl.associate_data[0] = sctr;
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8005762:	f000 ff9d 	bl	80066a0 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8005766:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800576a:	f884 325d 	strb.w	r3, [r4, #605]	; 0x25d
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 800576e:	f204 205e 	addw	r0, r4, #606	; 0x25e
 8005772:	4629      	mov	r1, r5
 8005774:	f000 ff90 	bl	8006698 <optiga_common_set_uint16>
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8005778:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
 800577c:	9006      	str	r0, [sp, #24]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 800577e:	4639      	mov	r1, r7
 8005780:	a807      	add	r0, sp, #28
 8005782:	f000 ff8d 	bl	80066a0 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8005786:	ab06      	add	r3, sp, #24
 8005788:	9300      	str	r3, [sp, #0]
                                                                data_len,
                                                                &p_ctx->prl.
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 800578a:	f504 7216 	add.w	r2, r4, #600	; 0x258
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 800578e:	2308      	movs	r3, #8
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	9202      	str	r2, [sp, #8]
 8005794:	9303      	str	r3, [sp, #12]
 8005796:	9304      	str	r3, [sp, #16]
 8005798:	9605      	str	r6, [sp, #20]
 800579a:	4631      	mov	r1, r6
 800579c:	462a      	mov	r2, r5
 800579e:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 80057a2:	2000      	movs	r0, #0
 80057a4:	f7fe fb3f 	bl	8003e26 <pal_crypt_encrypt_aes128_ccm>
 80057a8:	2800      	cmp	r0, #0
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    return (return_status);
}
 80057aa:	bf14      	ite	ne
 80057ac:	f44f 7081 	movne.w	r0, #258	; 0x102
 80057b0:	2000      	moveq	r0, #0
 80057b2:	b009      	add	sp, #36	; 0x24
 80057b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080057b8 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 80057b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 80057bc:	f411 7f83 	tst.w	r1, #262	; 0x106

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 80057c0:	b0ab      	sub	sp, #172	; 0xac
 80057c2:	4604      	mov	r4, r0
 80057c4:	4616      	mov	r6, r2
 80057c6:	461f      	mov	r7, r3
    uint8_t exit_machine = TRUE;
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 80057c8:	d01f      	beq.n	800580a <ifx_i2c_prl_event_handler+0x52>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80057ca:	23ff      	movs	r3, #255	; 0xff
 80057cc:	f880 31d2 	strb.w	r3, [r0, #466]	; 0x1d2
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 80057d0:	f890 31b0 	ldrb.w	r3, [r0, #432]	; 0x1b0
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d104      	bne.n	80057e2 <ifx_i2c_prl_event_handler+0x2a>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 80057d8:	f240 1307 	movw	r3, #263	; 0x107
 80057dc:	f8a0 3264 	strh.w	r3, [r0, #612]	; 0x264
 80057e0:	e010      	b.n	8005804 <ifx_i2c_prl_event_handler+0x4c>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 80057e2:	f890 31b2 	ldrb.w	r3, [r0, #434]	; 0x1b2
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d10a      	bne.n	8005800 <ifx_i2c_prl_event_handler+0x48>
 80057ea:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80057ee:	d007      	beq.n	8005800 <ifx_i2c_prl_event_handler+0x48>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80057f0:	f44f 7384 	mov.w	r3, #264	; 0x108
 80057f4:	f8a0 3264 	strh.w	r3, [r0, #612]	; 0x264
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	f880 31b2 	strb.w	r3, [r0, #434]	; 0x1b2
 80057fe:	e001      	b.n	8005804 <ifx_i2c_prl_event_handler+0x4c>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8005800:	f8a4 1264 	strh.w	r1, [r4, #612]	; 0x264
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8005804:	2307      	movs	r3, #7
 8005806:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 800580a:	f894 31b0 	ldrb.w	r3, [r4, #432]	; 0x1b0
 800580e:	3b01      	subs	r3, #1
 8005810:	2b07      	cmp	r3, #7
 8005812:	f200 8476 	bhi.w	8006102 <ifx_i2c_prl_event_handler+0x94a>
 8005816:	e8df f013 	tbh	[pc, r3, lsl #1]
 800581a:	0008      	.short	0x0008
 800581c:	0379014c 	.word	0x0379014c
 8005820:	016502c8 	.word	0x016502c8
 8005824:	043f0410 	.word	0x043f0410
 8005828:	000f      	.short	0x000f
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 800582a:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
 800582e:	f8b4 1264 	ldrh.w	r1, [r4, #612]	; 0x264
 8005832:	4620      	mov	r0, r4
 8005834:	f000 bc6d 	b.w	8006112 <ifx_i2c_prl_event_handler+0x95a>
{
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 8005838:	f894 31b3 	ldrb.w	r3, [r4, #435]	; 0x1b3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d002      	beq.n	8005846 <ifx_i2c_prl_event_handler+0x8e>
 8005840:	2b02      	cmp	r3, #2
 8005842:	d07b      	beq.n	800593c <ifx_i2c_prl_event_handler+0x184>
 8005844:	e112      	b.n	8005a6c <ifx_i2c_prl_event_handler+0x2b4>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 8005846:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 800584a:	2a00      	cmp	r2, #0
 800584c:	da01      	bge.n	8005852 <ifx_i2c_prl_event_handler+0x9a>
            {
                p_ctx->prl.state = PRL_STATE_START;
 800584e:	2302      	movs	r3, #2
 8005850:	e7d9      	b.n	8005806 <ifx_i2c_prl_event_handler+0x4e>
                return_status = IFX_I2C_STACK_SUCCESS;
                break;
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8005852:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8005856:	2a22      	cmp	r2, #34	; 0x22
 8005858:	d107      	bne.n	800586a <ifx_i2c_prl_event_handler+0xb2>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 800585a:	2260      	movs	r2, #96	; 0x60
 800585c:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
                p_ctx->prl.prl_receive_length = 1;
 8005860:	f8a4 3260 	strh.w	r3, [r4, #608]	; 0x260
                p_ctx->prl.prl_txrx_receive_length = 1;
 8005864:	f8a4 3256 	strh.w	r3, [r4, #598]	; 0x256
 8005868:	e056      	b.n	8005918 <ifx_i2c_prl_event_handler+0x160>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 800586a:	2a11      	cmp	r2, #17
 800586c:	d149      	bne.n	8005902 <ifx_i2c_prl_event_handler+0x14a>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 800586e:	6963      	ldr	r3, [r4, #20]
 8005870:	8898      	ldrh	r0, [r3, #4]
 8005872:	b1e0      	cbz	r0, 80058ae <ifx_i2c_prl_event_handler+0xf6>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8005874:	2334      	movs	r3, #52	; 0x34
 8005876:	f8a4 3260 	strh.w	r3, [r4, #608]	; 0x260
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800587a:	f504 711a 	add.w	r1, r4, #616	; 0x268
 800587e:	f504 7218 	add.w	r2, r4, #608	; 0x260
 8005882:	f7fe fca5 	bl	80041d0 <pal_os_datastore_read>
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8005886:	2801      	cmp	r0, #1
 8005888:	f000 8103 	beq.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 800588c:	f894 3292 	ldrb.w	r3, [r4, #658]	; 0x292
 8005890:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8005894:	f894 3293 	ldrb.w	r3, [r4, #659]	; 0x293
 8005898:	b98b      	cbnz	r3, 80058be <ifx_i2c_prl_event_handler+0x106>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 800589a:	2302      	movs	r3, #2
 800589c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f884 3266 	strb.w	r3, [r4, #614]	; 0x266
 80058ac:	e7ad      	b.n	800580a <ifx_i2c_prl_event_handler+0x52>
                        break;
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80058ae:	f894 3293 	ldrb.w	r3, [r4, #659]	; 0x293
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f1      	beq.n	800589a <ifx_i2c_prl_event_handler+0xe2>
                        return_status = IFX_I2C_STACK_SUCCESS;
                        break;
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80058b6:	f894 3292 	ldrb.w	r3, [r4, #658]	; 0x292
 80058ba:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 80058be:	2368      	movs	r3, #104	; 0x68
 80058c0:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 80058c4:	f8d4 1298 	ldr.w	r1, [r4, #664]	; 0x298
 80058c8:	f204 201d 	addw	r0, r4, #541	; 0x21d
 80058cc:	f000 fee8 	bl	80066a0 <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
                prl_saved_ctx.stored_context_flag = FALSE;
 80058d0:	2100      	movs	r1, #0
                p_ctx->prl.prl_receive_length = 5;
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80058d2:	6965      	ldr	r5, [r4, #20]
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
                prl_saved_ctx.stored_context_flag = FALSE;
 80058d4:	f88d 1093 	strb.w	r1, [sp, #147]	; 0x93
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 80058d8:	2305      	movs	r3, #5
                prl_saved_ctx.stored_context_flag = FALSE;
                p_ctx->prl.prl_receive_length = 5;
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 80058da:	f884 1293 	strb.w	r1, [r4, #659]	; 0x293
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 80058de:	f8a4 3256 	strh.w	r3, [r4, #598]	; 0x256
                prl_saved_ctx.stored_context_flag = FALSE;
                p_ctx->prl.prl_receive_length = 5;
 80058e2:	f8a4 3260 	strh.w	r3, [r4, #608]	; 0x260
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80058e6:	88ab      	ldrh	r3, [r5, #4]
 80058e8:	b1b3      	cbz	r3, 8005918 <ifx_i2c_prl_event_handler+0x160>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 80058ea:	2234      	movs	r2, #52	; 0x34
 80058ec:	a81a      	add	r0, sp, #104	; 0x68
 80058ee:	f005 ff5e 	bl	800b7ae <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80058f2:	88a8      	ldrh	r0, [r5, #4]
 80058f4:	a91a      	add	r1, sp, #104	; 0x68
 80058f6:	2234      	movs	r2, #52	; 0x34
 80058f8:	f7fe fc4a 	bl	8004190 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 80058fc:	2801      	cmp	r0, #1
 80058fe:	d10b      	bne.n	8005918 <ifx_i2c_prl_event_handler+0x160>
 8005900:	e0c7      	b.n	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8005902:	23ff      	movs	r3, #255	; 0xff
 8005904:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                p_ctx->prl.state = PRL_STATE_ERROR;
 8005908:	2307      	movs	r3, #7
 800590a:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800590e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005912:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
 8005916:	e0bc      	b.n	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                break;
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8005918:	f504 7318 	add.w	r3, r4, #608	; 0x260
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 800591c:	f504 7107 	add.w	r1, r4, #540	; 0x21c
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                p_ctx->prl.state = PRL_STATE_ERROR;
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	f8b4 2256 	ldrh.w	r2, [r4, #598]	; 0x256
 8005926:	4620      	mov	r0, r4
 8005928:	460b      	mov	r3, r1
 800592a:	f000 fe05 	bl	8006538 <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 800592e:	2800      	cmp	r0, #0
 8005930:	f040 80ac 	bne.w	8005a8c <ifx_i2c_prl_event_handler+0x2d4>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 8005934:	2302      	movs	r3, #2
 8005936:	f884 31b3 	strb.w	r3, [r4, #435]	; 0x1b3
 800593a:	e3ed      	b.n	8006118 <ifx_i2c_prl_event_handler+0x960>
        }
        break;
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 800593c:	7833      	ldrb	r3, [r6, #0]
 800593e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8005942:	2b6c      	cmp	r3, #108	; 0x6c
 8005944:	f504 751a 	add.w	r5, r4, #616	; 0x268
 8005948:	d128      	bne.n	800599c <ifx_i2c_prl_event_handler+0x1e4>
 800594a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800594e:	2b11      	cmp	r3, #17
 8005950:	d17f      	bne.n	8005a52 <ifx_i2c_prl_event_handler+0x29a>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8005952:	2f05      	cmp	r7, #5
 8005954:	d17d      	bne.n	8005a52 <ifx_i2c_prl_event_handler+0x29a>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8005956:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 800595a:	f504 7224 	add.w	r2, r4, #656	; 0x290
 800595e:	f855 1b04 	ldr.w	r1, [r5], #4
 8005962:	f843 1b04 	str.w	r1, [r3], #4
 8005966:	4295      	cmp	r5, r2
 8005968:	d1f9      	bne.n	800595e <ifx_i2c_prl_event_handler+0x1a6>
 800596a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800596e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 8005972:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
 8005976:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
 800597a:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 800597e:	f884 3262 	strb.w	r3, [r4, #610]	; 0x262
 8005982:	f894 3291 	ldrb.w	r3, [r4, #657]	; 0x291
 8005986:	f884 3263 	strb.w	r3, [r4, #611]	; 0x263
 800598a:	f894 3292 	ldrb.w	r3, [r4, #658]	; 0x292
 800598e:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8005992:	2301      	movs	r3, #1
 8005994:	f884 3266 	strb.w	r3, [r4, #614]	; 0x266
                p_ctx->prl.state = PRL_STATE_TXRX;
 8005998:	2304      	movs	r3, #4
 800599a:	e056      	b.n	8005a4a <ifx_i2c_prl_event_handler+0x292>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 800599c:	2b64      	cmp	r3, #100	; 0x64
 800599e:	d158      	bne.n	8005a52 <ifx_i2c_prl_event_handler+0x29a>
 80059a0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80059a4:	2b22      	cmp	r3, #34	; 0x22
 80059a6:	d154      	bne.n	8005a52 <ifx_i2c_prl_event_handler+0x29a>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 80059a8:	2f01      	cmp	r7, #1
 80059aa:	d152      	bne.n	8005a52 <ifx_i2c_prl_event_handler+0x29a>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 80059ac:	f504 78ea 	add.w	r8, r4, #468	; 0x1d4
                p_ctx->prl.state = PRL_STATE_TXRX;
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 80059b0:	f884 7293 	strb.w	r7, [r4, #659]	; 0x293
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 80059b4:	4643      	mov	r3, r8
 80059b6:	462a      	mov	r2, r5
 80059b8:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 80059bc:	f853 0b04 	ldr.w	r0, [r3], #4
 80059c0:	f842 0b04 	str.w	r0, [r2], #4
 80059c4:	428b      	cmp	r3, r1
 80059c6:	d1f9      	bne.n	80059bc <ifx_i2c_prl_event_handler+0x204>
 80059c8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 80059cc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
 80059d0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80059d4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 80059d8:	f894 3262 	ldrb.w	r3, [r4, #610]	; 0x262
 80059dc:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
 80059e0:	f894 3263 	ldrb.w	r3, [r4, #611]	; 0x263
 80059e4:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
 80059e8:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 80059ec:	f884 3292 	strb.w	r3, [r4, #658]	; 0x292
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80059f0:	6963      	ldr	r3, [r4, #20]
 80059f2:	8898      	ldrh	r0, [r3, #4]
 80059f4:	b1b0      	cbz	r0, 8005a24 <ifx_i2c_prl_event_handler+0x26c>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80059f6:	2234      	movs	r2, #52	; 0x34
 80059f8:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7fe fbc7 	bl	8004190 <pal_os_datastore_write>
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 8005a02:	b178      	cbz	r0, 8005a24 <ifx_i2c_prl_event_handler+0x26c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8005a04:	23ff      	movs	r3, #255	; 0xff
 8005a06:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
 8005a0a:	2307      	movs	r3, #7
 8005a0c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8005a10:	f44f 7284 	mov.w	r2, #264	; 0x108
 8005a14:	2300      	movs	r3, #0
 8005a16:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8005a1a:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 8005a1e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 8005a22:	e033      	b.n	8005a8c <ifx_i2c_prl_event_handler+0x2d4>
                        break;
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8005a24:	4640      	mov	r0, r8
 8005a26:	2100      	movs	r1, #0
 8005a28:	2228      	movs	r2, #40	; 0x28
 8005a2a:	f005 fec0 	bl	800b7ae <memset>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 8005a34:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
 8005a38:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
 8005a3c:	f884 3262 	strb.w	r3, [r4, #610]	; 0x262
 8005a40:	f884 3263 	strb.w	r3, [r4, #611]	; 0x263
 8005a44:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
                break;
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e2dd      	b.n	800600e <ifx_i2c_prl_event_handler+0x856>
                CLEAR_SESSION_CONTEXT(p_ctx);
                p_ctx->prl.state = PRL_STATE_IDLE;
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8005a52:	4628      	mov	r0, r5
 8005a54:	2100      	movs	r1, #0
 8005a56:	2234      	movs	r2, #52	; 0x34
 8005a58:	f005 fea9 	bl	800b7ae <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8005a5c:	6963      	ldr	r3, [r4, #20]
 8005a5e:	8898      	ldrh	r0, [r3, #4]
 8005a60:	b1b8      	cbz	r0, 8005a92 <ifx_i2c_prl_event_handler+0x2da>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8005a62:	4629      	mov	r1, r5
 8005a64:	2234      	movs	r2, #52	; 0x34
 8005a66:	f7fe fb93 	bl	8004190 <pal_os_datastore_write>
 8005a6a:	e012      	b.n	8005a92 <ifx_i2c_prl_event_handler+0x2da>
            return_status = IFX_I2C_STACK_SUCCESS;
        }
        break;
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8005a6c:	23ff      	movs	r3, #255	; 0xff
 8005a6e:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
 8005a72:	2307      	movs	r3, #7
 8005a74:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8005a78:	f44f 7284 	mov.w	r2, #264	; 0x108
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8005a82:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 8005a86:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 8005a8a:	e002      	b.n	8005a92 <ifx_i2c_prl_event_handler+0x2da>
            break;
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f43f aebc 	beq.w	800580a <ifx_i2c_prl_event_handler+0x52>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8005a92:	23ff      	movs	r3, #255	; 0xff
 8005a94:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
 8005a98:	2307      	movs	r3, #7
 8005a9a:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8005a9e:	f44f 7284 	mov.w	r2, #264	; 0x108
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8005aa8:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 8005aac:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 8005ab0:	e6ab      	b.n	800580a <ifx_i2c_prl_event_handler+0x52>
                }
            }
            break;
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8005ab2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005ab6:	061a      	lsls	r2, r3, #24
 8005ab8:	d403      	bmi.n	8005ac2 <ifx_i2c_prl_event_handler+0x30a>
 8005aba:	b18b      	cbz	r3, 8005ae0 <ifx_i2c_prl_event_handler+0x328>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8005abc:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8005ac0:	b973      	cbnz	r3, 8005ae0 <ifx_i2c_prl_event_handler+0x328>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8005ac2:	2305      	movs	r3, #5
 8005ac4:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8005ac8:	2311      	movs	r3, #17
 8005aca:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8005ad4:	e699      	b.n	800580a <ifx_i2c_prl_event_handler+0x52>
                    p_ctx->prl.return_status = return_status;
                    p_ctx->prl.state = PRL_STATE_ERROR;
                    break;
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8005ad6:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	f040 831c 	bne.w	8006118 <ifx_i2c_prl_event_handler+0x960>
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
                }
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	e690      	b.n	8005806 <ifx_i2c_prl_event_handler+0x4e>
            }
            break;
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8005ae4:	2500      	movs	r5, #0
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	2228      	movs	r2, #40	; 0x28
 8005aea:	f504 701a 	add.w	r0, r4, #616	; 0x268
 8005aee:	f005 fe5e 	bl	800b7ae <memset>
 8005af2:	f8c4 5294 	str.w	r5, [r4, #660]	; 0x294
 8005af6:	f884 5292 	strb.w	r5, [r4, #658]	; 0x292
 8005afa:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8005afe:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
 8005b02:	f884 5291 	strb.w	r5, [r4, #657]	; 0x291
 8005b06:	f884 5293 	strb.w	r5, [r4, #659]	; 0x293
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8005b0a:	a80d      	add	r0, sp, #52	; 0x34
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	2234      	movs	r2, #52	; 0x34
 8005b10:	f005 fe4d 	bl	800b7ae <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8005b14:	6963      	ldr	r3, [r4, #20]
 8005b16:	8898      	ldrh	r0, [r3, #4]
 8005b18:	b188      	cbz	r0, 8005b3e <ifx_i2c_prl_event_handler+0x386>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8005b1a:	a90d      	add	r1, sp, #52	; 0x34
 8005b1c:	2234      	movs	r2, #52	; 0x34
 8005b1e:	f7fe fb37 	bl	8004190 <pal_os_datastore_write>
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8005b22:	b160      	cbz	r0, 8005b3e <ifx_i2c_prl_event_handler+0x386>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8005b24:	23ff      	movs	r3, #255	; 0xff
 8005b26:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
 8005b2a:	2307      	movs	r3, #7
 8005b2c:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8005b30:	f884 51b2 	strb.w	r5, [r4, #434]	; 0x1b2
 8005b34:	f884 52a0 	strb.w	r5, [r4, #672]	; 0x2a0
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8005b38:	f240 1307 	movw	r3, #263	; 0x107
 8005b3c:	e267      	b.n	800600e <ifx_i2c_prl_event_handler+0x856>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	f44f 7581 	mov.w	r5, #258	; 0x102
    uint32_t exit_machine = FALSE;
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8005b46:	f894 31b1 	ldrb.w	r3, [r4, #433]	; 0x1b1
 8005b4a:	2b33      	cmp	r3, #51	; 0x33
 8005b4c:	f000 809d 	beq.w	8005c8a <ifx_i2c_prl_event_handler+0x4d2>
 8005b50:	d804      	bhi.n	8005b5c <ifx_i2c_prl_event_handler+0x3a4>
 8005b52:	2b11      	cmp	r3, #17
 8005b54:	d009      	beq.n	8005b6a <ifx_i2c_prl_event_handler+0x3b2>
 8005b56:	2b22      	cmp	r3, #34	; 0x22
 8005b58:	d02d      	beq.n	8005bb6 <ifx_i2c_prl_event_handler+0x3fe>
 8005b5a:	e11a      	b.n	8005d92 <ifx_i2c_prl_event_handler+0x5da>
 8005b5c:	2b44      	cmp	r3, #68	; 0x44
 8005b5e:	f000 80d3 	beq.w	8005d08 <ifx_i2c_prl_event_handler+0x550>
 8005b62:	2b55      	cmp	r3, #85	; 0x55
 8005b64:	f000 810f 	beq.w	8005d86 <ifx_i2c_prl_event_handler+0x5ce>
 8005b68:	e113      	b.n	8005d92 <ifx_i2c_prl_event_handler+0x5da>
        {
            case PRL_HS_SEND_HELLO:
            {
                //Preparing hello message
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello message"
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8005b70:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8005b74:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005b78:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8005b7c:	2326      	movs	r3, #38	; 0x26
 8005b7e:	f8a4 3260 	strh.w	r3, [r4, #608]	; 0x260
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
 8005b82:	f504 7107 	add.w	r1, r4, #540	; 0x21c
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8005b86:	f504 7318 	add.w	r3, r4, #608	; 0x260
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	2202      	movs	r2, #2
 8005b90:	460b      	mov	r3, r1
 8005b92:	f000 fcd1 	bl	8006538 <ifx_i2c_tl_transceive>
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
 8005b96:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
                //Sending hello message
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8005b9a:	4605      	mov	r5, r0
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      2,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_ERROR == return_status)
 8005b9c:	d107      	bne.n	8005bae <ifx_i2c_prl_event_handler+0x3f6>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8005b9e:	2355      	movs	r3, #85	; 0x55
 8005ba0:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8005ba4:	f44f 7581 	mov.w	r5, #258	; 0x102
 8005ba8:	f04f 0801 	mov.w	r8, #1
 8005bac:	e7cb      	b.n	8005b46 <ifx_i2c_prl_event_handler+0x38e>
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8005bae:	2322      	movs	r3, #34	; 0x22
 8005bb0:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8005bb4:	e0ed      	b.n	8005d92 <ifx_i2c_prl_event_handler+0x5da>
            break;
            case PRL_HS_VERIFY_HELLO:
            {
                exit_machine = TRUE;
                 //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8005bb6:	7833      	ldrb	r3, [r6, #0]
 8005bb8:	f8b4 2260 	ldrh.w	r2, [r4, #608]	; 0x260
 8005bbc:	f013 0f44 	tst.w	r3, #68	; 0x44
 8005bc0:	d002      	beq.n	8005bc8 <ifx_i2c_prl_event_handler+0x410>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8005bc2:	2a01      	cmp	r2, #1
 8005bc4:	f000 80df 	beq.w	8005d86 <ifx_i2c_prl_event_handler+0x5ce>
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                    exit_machine = FALSE;
                    break;
                }
                //Check valid message type and protocol version
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8005bc8:	2a26      	cmp	r2, #38	; 0x26
 8005bca:	f040 80a4 	bne.w	8005d16 <ifx_i2c_prl_event_handler+0x55e>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 80a1 	bne.w	8005d16 <ifx_i2c_prl_event_handler+0x55e>
 8005bd4:	7873      	ldrb	r3, [r6, #1]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f040 809d 	bne.w	8005d16 <ifx_i2c_prl_event_handler+0x55e>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 8005bdc:	f106 0522 	add.w	r5, r6, #34	; 0x22
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 fd65 	bl	80066b0 <optiga_common_get_uint32>
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8005be6:	f504 78fe 	add.w	r8, r4, #508	; 0x1fc
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    break;
                }
                //Store slave sequence number and random number
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 8005bea:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8005bee:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 8005bf2:	1cb3      	adds	r3, r6, #2
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005bfa:	f842 1b04 	str.w	r1, [r2], #4
 8005bfe:	42ab      	cmp	r3, r5
 8005c00:	d1f9      	bne.n	8005bf6 <ifx_i2c_prl_event_handler+0x43e>
}

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
    uint8_t label_input[] = PRL_LABEL;
 8005c02:	4ac1      	ldr	r2, [pc, #772]	; (8005f08 <ifx_i2c_prl_event_handler+0x750>)
 8005c04:	ad08      	add	r5, sp, #32
 8005c06:	f102 0310 	add.w	r3, r2, #16
 8005c0a:	46a9      	mov	r9, r5
 8005c0c:	6810      	ldr	r0, [r2, #0]
 8005c0e:	6851      	ldr	r1, [r2, #4]
 8005c10:	46ae      	mov	lr, r5
 8005c12:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8005c16:	3208      	adds	r2, #8
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	4675      	mov	r5, lr
 8005c1c:	d1f6      	bne.n	8005c0c <ifx_i2c_prl_event_handler+0x454>
 8005c1e:	7813      	ldrb	r3, [r2, #0]
 8005c20:	f88e 3000 	strb.w	r3, [lr]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8005c24:	6963      	ldr	r3, [r4, #20]
 8005c26:	a91a      	add	r1, sp, #104	; 0x68
 8005c28:	8858      	ldrh	r0, [r3, #2]
 8005c2a:	f10d 021a 	add.w	r2, sp, #26
 8005c2e:	f7fe facf 	bl	80041d0 <pal_os_datastore_read>
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8005c32:	4605      	mov	r5, r0
 8005c34:	b9d8      	cbnz	r0, 8005c6e <ifx_i2c_prl_event_handler+0x4b6>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8005c36:	2310      	movs	r3, #16
 8005c38:	e88d 0108 	stmia.w	sp, {r3, r8}
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	9302      	str	r3, [sp, #8]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8005c40:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
            break;
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8005c44:	9303      	str	r3, [sp, #12]
 8005c46:	2328      	movs	r3, #40	; 0x28
 8005c48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	a91a      	add	r1, sp, #104	; 0x68
 8005c50:	464b      	mov	r3, r9
 8005c52:	f7fe f847 	bl	8003ce4 <pal_crypt_tls_prf_sha256>
                                                           p_ctx->prl.random,
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8005c56:	f240 1307 	movw	r3, #263	; 0x107
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	bf18      	it	ne
 8005c5e:	461d      	movne	r5, r3
        }
        memset(secret_input, 0, shared_secret_length);
 8005c60:	2100      	movs	r1, #0
 8005c62:	a81a      	add	r0, sp, #104	; 0x68
 8005c64:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8005c68:	f005 fda1 	bl	800b7ae <memset>
 8005c6c:	e001      	b.n	8005c72 <ifx_i2c_prl_event_handler+0x4ba>
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8005c6e:	f240 1507 	movw	r5, #263	; 0x107
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);

                //Generating session key
                return_status = ifx_i2c_prl_prf(p_ctx);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8005c72:	f240 1307 	movw	r3, #263	; 0x107
 8005c76:	429d      	cmp	r5, r3
 8005c78:	d105      	bne.n	8005c86 <ifx_i2c_prl_event_handler+0x4ce>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8005c7a:	2355      	movs	r3, #85	; 0x55
 8005c7c:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8005c80:	f240 1507 	movw	r5, #263	; 0x107
 8005c84:	e790      	b.n	8005ba8 <ifx_i2c_prl_event_handler+0x3f0>
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 8005c86:	2333      	movs	r3, #51	; 0x33
 8005c88:	e046      	b.n	8005d18 <ifx_i2c_prl_event_handler+0x560>
            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8005c8a:	2308      	movs	r3, #8
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8005c8c:	f204 2821 	addw	r8, r4, #545	; 0x221
            }
            break;
            case PRL_HS_SEND_FINISHED:
            {
                //lint --e{835} suppress "Protection bits in SCTR is set to 0 for hello finished message"
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8005c90:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
                exit_machine = FALSE;
                //Creating payload for encryption
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8005c94:	f504 75fe 	add.w	r5, r4, #508	; 0x1fc
 8005c98:	4643      	mov	r3, r8
 8005c9a:	f504 7207 	add.w	r2, r4, #540	; 0x21c
 8005c9e:	f855 1b04 	ldr.w	r1, [r5], #4
 8005ca2:	f843 1b04 	str.w	r1, [r3], #4
 8005ca6:	4295      	cmp	r5, r2
 8005ca8:	d1f9      	bne.n	8005c9e <ifx_i2c_prl_event_handler+0x4e6>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 8005caa:	f204 2041 	addw	r0, r4, #577	; 0x241
 8005cae:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
 8005cb2:	f000 fcf5 	bl	80066a0 <optiga_common_set_uint32>
                                         p_ctx->prl.slave_sequence_number);

                //Preparing encryption data
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8005cb6:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	2224      	movs	r2, #36	; 0x24
 8005cc2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8005cc6:	f7ff fd3f 	bl	8005748 <ifx_i2c_prl_encrypt_msg>
                                                        &p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.slave_sequence_number,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
 8005cca:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8005cce:	f43f af66 	beq.w	8005b9e <ifx_i2c_prl_event_handler+0x3e6>
                    exit_machine = TRUE;
                    break;
                }

                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8005cd2:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
 8005cd6:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 8005cda:	f204 201d 	addw	r0, r4, #541	; 0x21d
 8005cde:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
 8005ce2:	f000 fcdd 	bl	80066a0 <optiga_common_set_uint32>

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8005ce6:	2231      	movs	r2, #49	; 0x31
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8005ce8:	f504 7318 	add.w	r3, r4, #608	; 0x260
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	4629      	mov	r1, r5
 8005cf0:	462b      	mov	r3, r5

                //Append presentation layer header
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);

                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8005cf2:	f8a4 2260 	strh.w	r2, [r4, #608]	; 0x260
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 fc1e 	bl	8006538 <ifx_i2c_tl_transceive>
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      PRL_FINISHED_DATA_LENGTH + 1,
                                                      p_ctx->prl.prl_txrx_buffer,
                                                      &p_ctx->prl.prl_receive_length);
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	b950      	cbnz	r0, 8005d16 <ifx_i2c_prl_event_handler+0x55e>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 8005d00:	2344      	movs	r3, #68	; 0x44
 8005d02:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8005d06:	e048      	b.n	8005d9a <ifx_i2c_prl_event_handler+0x5e2>
            }
            break;
            case PRL_HS_VERIFY_FINISHED:
            {
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 8005d08:	7833      	ldrb	r3, [r6, #0]
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d103      	bne.n	8005d16 <ifx_i2c_prl_event_handler+0x55e>
 8005d0e:	f8b4 3260 	ldrh.w	r3, [r4, #608]	; 0x260
 8005d12:	2b31      	cmp	r3, #49	; 0x31
 8005d14:	d003      	beq.n	8005d1e <ifx_i2c_prl_event_handler+0x566>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8005d16:	2355      	movs	r3, #85	; 0x55
 8005d18:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
 8005d1c:	e744      	b.n	8005ba8 <ifx_i2c_prl_event_handler+0x3f0>
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8005d1e:	1c70      	adds	r0, r6, #1
 8005d20:	f000 fcc6 	bl	80066b0 <optiga_common_get_uint32>
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8005d24:	2210      	movs	r2, #16
 8005d26:	f894 11d0 	ldrb.w	r1, [r4, #464]	; 0x1d0
 8005d2a:	9201      	str	r2, [sp, #4]
                                                        &p_data[IFX_I2C_PRL_HEADER_SIZE],
                                                        PRL_RANDOM_DATA_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
 8005d2c:	f504 7907 	add.w	r9, r4, #540	; 0x21c
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8005d30:	2224      	movs	r2, #36	; 0x24
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8005d32:	4603      	mov	r3, r0
 8005d34:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8005d38:	9103      	str	r1, [sp, #12]
 8005d3a:	f8cd 9000 	str.w	r9, [sp]
 8005d3e:	9202      	str	r2, [sp, #8]
 8005d40:	4620      	mov	r0, r4
 8005d42:	1d71      	adds	r1, r6, #5
 8005d44:	f7ff fcc0 	bl	80056c8 <ifx_i2c_prl_decrypt_msg>
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
                                                        PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                        PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
 8005d48:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8005d4c:	4605      	mov	r5, r0
                                                        p_ctx->prl.master_sequence_number,
                                                        p_ctx->prl.prl_txrx_buffer,
                                                        PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                        PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                        p_ctx->prl.sctr);
                if (IFX_I2C_STACK_ERROR == return_status)
 8005d4e:	f43f af26 	beq.w	8005b9e <ifx_i2c_prl_event_handler+0x3e6>
                {
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8005d52:	a807      	add	r0, sp, #28
 8005d54:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
 8005d58:	f000 fca2 	bl	80066a0 <optiga_common_set_uint32>
                ///Validating decrpt data
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8005d5c:	f504 70fe 	add.w	r0, r4, #508	; 0x1fc
 8005d60:	4649      	mov	r1, r9
 8005d62:	2220      	movs	r2, #32
 8005d64:	f005 fd08 	bl	800b778 <memcmp>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d186      	bne.n	8005c7a <ifx_i2c_prl_event_handler+0x4c2>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                ///Validating sequence number
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8005d6c:	a807      	add	r0, sp, #28
 8005d6e:	f504 710f 	add.w	r1, r4, #572	; 0x23c
 8005d72:	2204      	movs	r2, #4
 8005d74:	f005 fd00 	bl	800b778 <memcmp>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f47f af7e 	bne.w	8005c7a <ifx_i2c_prl_event_handler+0x4c2>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
                    exit_machine = TRUE;
                    break;
                }
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8005d84:	e005      	b.n	8005d92 <ifx_i2c_prl_event_handler+0x5da>
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8005d86:	23ff      	movs	r3, #255	; 0xff
 8005d88:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
            }
            break;
            case PRL_HS_ERROR:
            {
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 8005d8c:	f240 1507 	movw	r5, #263	; 0x107
 8005d90:	e003      	b.n	8005d9a <ifx_i2c_prl_event_handler+0x5e2>
            break;
            default:
            break;
        }

    } while (TRUE == exit_machine);
 8005d92:	f1b8 0f00 	cmp.w	r8, #0
 8005d96:	f47f af07 	bne.w	8005ba8 <ifx_i2c_prl_event_handler+0x3f0>
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
                        break;
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8005d9a:	f240 1307 	movw	r3, #263	; 0x107
 8005d9e:	429d      	cmp	r5, r3
 8005da0:	f47f ae99 	bne.w	8005ad6 <ifx_i2c_prl_event_handler+0x31e>
                {
                    p_ctx->prl.return_status = return_status;
 8005da4:	f8a4 5264 	strh.w	r5, [r4, #612]	; 0x264
 8005da8:	e52c      	b.n	8005804 <ifx_i2c_prl_event_handler+0x4c>
            }
            break;
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8005daa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	f043 0220 	orr.w	r2, r3, #32
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8005db6:	3b02      	subs	r3, #2
 8005db8:	2b01      	cmp	r3, #1
            }
            break;
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8005dba:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8005dbe:	d816      	bhi.n	8005dee <ifx_i2c_prl_event_handler+0x636>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8005dc0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	3310      	adds	r3, #16
 8005dc8:	d90c      	bls.n	8005de4 <ifx_i2c_prl_event_handler+0x62c>
 8005dca:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005dce:	b94b      	cbnz	r3, 8005de4 <ifx_i2c_prl_event_handler+0x62c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8005dd6:	2305      	movs	r3, #5
 8005dd8:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8005ddc:	2311      	movs	r3, #17
 8005dde:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
                        break;
 8005de2:	e512      	b.n	800580a <ifx_i2c_prl_event_handler+0x52>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8005de4:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 8005de8:	8813      	ldrh	r3, [r2, #0]
 8005dea:	330d      	adds	r3, #13
 8005dec:	8013      	strh	r3, [r2, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8005dee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8005df2:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
 8005df6:	f884 01d1 	strb.w	r0, [r4, #465]	; 0x1d1

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8005dfa:	07db      	lsls	r3, r3, #31
 8005dfc:	d553      	bpl.n	8005ea6 <ifx_i2c_prl_event_handler+0x6ee>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8005dfe:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	3210      	adds	r2, #16
 8005e06:	d903      	bls.n	8005e10 <ifx_i2c_prl_event_handler+0x658>
 8005e08:	f894 22a0 	ldrb.w	r2, [r4, #672]	; 0x2a0
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	d0df      	beq.n	8005dd0 <ifx_i2c_prl_event_handler+0x618>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
                        break;
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8005e10:	f894 21d2 	ldrb.w	r2, [r4, #466]	; 0x1d2
 8005e14:	2a04      	cmp	r2, #4
 8005e16:	d116      	bne.n	8005e46 <ifx_i2c_prl_event_handler+0x68e>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8005e18:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8005e1c:	9003      	str	r0, [sp, #12]
 8005e1e:	2500      	movs	r5, #0
 8005e20:	3105      	adds	r1, #5
 8005e22:	9501      	str	r5, [sp, #4]
 8005e24:	2520      	movs	r5, #32
 8005e26:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
 8005e2a:	9100      	str	r1, [sp, #0]
 8005e2c:	9502      	str	r5, [sp, #8]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff fc4a 	bl	80056c8 <ifx_i2c_prl_decrypt_msg>
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8005e34:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8005e38:	f43f ae2b 	beq.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8005e3c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8005e40:	f8b4 2260 	ldrh.w	r2, [r4, #608]	; 0x260
 8005e44:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8005e46:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8005e4a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8005e4e:	3101      	adds	r1, #1
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8005e50:	2305      	movs	r3, #5
                            break;
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8005e52:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8005e56:	f884 31d3 	strb.w	r3, [r4, #467]	; 0x1d3
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f000 fc20 	bl	80066a0 <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8005e60:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8005e64:	f894 31d1 	ldrb.w	r3, [r4, #465]	; 0x1d1
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
 8005e6e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 8005e72:	4620      	mov	r0, r4
 8005e74:	3105      	adds	r1, #5
 8005e76:	f7ff fc67 	bl	8005748 <ifx_i2c_prl_encrypt_msg>
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8005e7a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8005e7e:	f43f ae08 	beq.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8005e82:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8005e86:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	f8b4 21c4 	ldrh.w	r2, [r4, #452]	; 0x1c4
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8005e90:	f894 31d3 	ldrb.w	r3, [r4, #467]	; 0x1d3
 8005e94:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8005e98:	3208      	adds	r2, #8
 8005e9a:	441a      	add	r2, r3
 8005e9c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	e011      	b.n	8005eca <ifx_i2c_prl_event_handler+0x712>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f884 31d3 	strb.w	r3, [r4, #467]	; 0x1d3
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8005eac:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 8005eb0:	7118      	strb	r0, [r3, #4]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8005eb2:	f8b4 31c4 	ldrh.w	r3, [r4, #452]	; 0x1c4
 8005eb6:	f894 21d3 	ldrb.w	r2, [r4, #467]	; 0x1d3
 8005eba:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
 8005ebe:	441a      	add	r2, r3
 8005ec0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	3104      	adds	r1, #4
 8005eca:	b292      	uxth	r2, r2
 8005ecc:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8005ed0:	f000 fb32 	bl	8006538 <ifx_i2c_tl_transceive>
                                                          p_ctx->prl.actual_payload_length + 
                                                          p_ctx->prl.prl_header_offset,
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8005ed4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8005ed8:	d10d      	bne.n	8005ef6 <ifx_i2c_prl_event_handler+0x73e>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8005eda:	23ff      	movs	r3, #255	; 0xff
 8005edc:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
 8005ee0:	2307      	movs	r3, #7
 8005ee2:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8005eec:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8005ef0:	f8a4 0264 	strh.w	r0, [r4, #612]	; 0x264
                    break;
 8005ef4:	e489      	b.n	800580a <ifx_i2c_prl_event_handler+0x52>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8005ef6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	f8a4 3260 	strh.w	r3, [r4, #608]	; 0x260
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8005f00:	2303      	movs	r3, #3
 8005f02:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                exit_machine = FALSE;
            }
            break;
 8005f06:	e107      	b.n	8006118 <ifx_i2c_prl_event_handler+0x960>
 8005f08:	0800c34c 	.word	0x0800c34c
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8005f0c:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
 8005f10:	3001      	adds	r0, #1
 8005f12:	f000 fbcd 	bl	80066b0 <optiga_common_get_uint32>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
                if (0 == data_len)
 8005f1c:	2f00      	cmp	r7, #0
 8005f1e:	f43f adb8 	beq.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                    break;
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8005f22:	7831      	ldrb	r1, [r6, #0]
 8005f24:	f001 0240 	and.w	r2, r1, #64	; 0x40
 8005f28:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8005f2c:	b362      	cbz	r2, 8005f88 <ifx_i2c_prl_event_handler+0x7d0>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8005f2e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8005f32:	2940      	cmp	r1, #64	; 0x40
 8005f34:	d109      	bne.n	8005f4a <ifx_i2c_prl_event_handler+0x792>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8005f36:	2f01      	cmp	r7, #1
 8005f38:	d003      	beq.n	8005f42 <ifx_i2c_prl_event_handler+0x78a>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8005f3a:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d003      	beq.n	8005f4a <ifx_i2c_prl_event_handler+0x792>
 8005f42:	f894 3263 	ldrb.w	r3, [r4, #611]	; 0x263
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d107      	bne.n	8005f5a <ifx_i2c_prl_event_handler+0x7a2>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8005f4a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005f4e:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 8005f58:	e011      	b.n	8005f7e <ifx_i2c_prl_event_handler+0x7c6>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8005f5a:	f894 3266 	ldrb.w	r3, [r4, #614]	; 0x266
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d109      	bne.n	8005f76 <ifx_i2c_prl_event_handler+0x7be>
 8005f62:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005f66:	2b11      	cmp	r3, #17
 8005f68:	d105      	bne.n	8005f76 <ifx_i2c_prl_event_handler+0x7be>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8005f70:	f44f 7384 	mov.w	r3, #264	; 0x108
 8005f74:	e001      	b.n	8005f7a <ifx_i2c_prl_event_handler+0x7c2>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8005f76:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005f7a:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8005f7e:	2306      	movs	r3, #6
 8005f80:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8005f84:	23ff      	movs	r3, #255	; 0xff
 8005f86:	e032      	b.n	8005fee <ifx_i2c_prl_event_handler+0x836>
                }
                ///Sctr value mismatch
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8005f88:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 8005f8c:	428a      	cmp	r2, r1
 8005f8e:	f47f ad80 	bne.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                {
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    break;
                }
                ///For slave encrypted message
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8005f92:	f002 0203 	and.w	r2, r2, #3
 8005f96:	3a02      	subs	r2, #2
 8005f98:	2a01      	cmp	r2, #1
 8005f9a:	d82b      	bhi.n	8005ff4 <ifx_i2c_prl_event_handler+0x83c>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
                {
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8005f9c:	2f0d      	cmp	r7, #13
 8005f9e:	f67f ad78 	bls.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                    {
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                        break;
                    }
                    //Check invalid sequence number
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 8005fa2:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8005fa6:	1cd1      	adds	r1, r2, #3
 8005fa8:	4288      	cmp	r0, r1
 8005faa:	f63f ad72 	bhi.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 8005fae:	4290      	cmp	r0, r2
 8005fb0:	f67f ad6f 	bls.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8005fb4:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }

                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8005fb8:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8005fbc:	880a      	ldrh	r2, [r1, #0]
 8005fbe:	3a0d      	subs	r2, #13
 8005fc0:	b292      	uxth	r2, r2
 8005fc2:	800a      	strh	r2, [r1, #0]
                                                               (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8005fc4:	2010      	movs	r0, #16
 8005fc6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2024      	movs	r0, #36	; 0x24
 8005fce:	3105      	adds	r1, #5
 8005fd0:	9002      	str	r0, [sp, #8]
 8005fd2:	f894 01d1 	ldrb.w	r0, [r4, #465]	; 0x1d1
 8005fd6:	9003      	str	r0, [sp, #12]
 8005fd8:	9100      	str	r1, [sp, #0]
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff fb74 	bl	80056c8 <ifx_i2c_prl_decrypt_msg>
                                                            p_ctx->prl.slave_sequence_number,
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
                                                            PRL_MASTER_DECRYPTION_KEY_OFFSET,
                                                            PRL_MASTER_DECRYPTION_NONCE_OFFSET,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8005fe0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8005fe4:	d124      	bne.n	8006030 <ifx_i2c_prl_event_handler+0x878>
                    {
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8005fe6:	2306      	movs	r3, #6
 8005fe8:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8005fec:	2304      	movs	r3, #4
 8005fee:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                        break;
 8005ff2:	e40a      	b.n	800580a <ifx_i2c_prl_event_handler+0x52>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                        p_ctx->prl.state = PRL_STATE_IDLE;
                    }
                }
                else if (data_len <= 1)
 8005ff4:	2f01      	cmp	r7, #1
 8005ff6:	d816      	bhi.n	8006026 <ifx_i2c_prl_event_handler+0x86e>
                {
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8005ff8:	2307      	movs	r3, #7
 8005ffa:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8005ffe:	23ff      	movs	r3, #255	; 0xff
 8006000:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8006004:	f894 31b2 	ldrb.w	r3, [r4, #434]	; 0x1b2
 8006008:	b92b      	cbnz	r3, 8006016 <ifx_i2c_prl_event_handler+0x85e>
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800600a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800600e:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
 8006012:	f7ff bbfa 	b.w	800580a <ifx_i2c_prl_event_handler+0x52>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8006016:	f44f 7384 	mov.w	r3, #264	; 0x108
 800601a:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800601e:	f884 51b2 	strb.w	r5, [r4, #434]	; 0x1b2
 8006022:	f7ff bbf2 	b.w	800580a <ifx_i2c_prl_event_handler+0x52>
                    }
                }
                else
                {
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 8006026:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800602a:	8813      	ldrh	r3, [r2, #0]
 800602c:	3b01      	subs	r3, #1
 800602e:	8013      	strh	r3, [r2, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8006030:	f8a4 5264 	strh.w	r5, [r4, #612]	; 0x264
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8006034:	2301      	movs	r3, #1
 8006036:	f7ff bbe6 	b.w	8005806 <ifx_i2c_prl_event_handler+0x4e>
                }
            }
            break;
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 800603a:	7833      	ldrb	r3, [r6, #0]
 800603c:	2b44      	cmp	r3, #68	; 0x44
 800603e:	d118      	bne.n	8006072 <ifx_i2c_prl_event_handler+0x8ba>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8006040:	2f01      	cmp	r7, #1
 8006042:	f47f ad26 	bne.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
 8006046:	f894 3263 	ldrb.w	r3, [r4, #611]	; 0x263
 800604a:	2b02      	cmp	r3, #2
 800604c:	f63f ad21 	bhi.w	8005a92 <ifx_i2c_prl_event_handler+0x2da>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
                        break;
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8006050:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006054:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8006058:	2a01      	cmp	r2, #1
 800605a:	f47f abd3 	bne.w	8005804 <ifx_i2c_prl_event_handler+0x4c>
                             (FULL_PROTECTION == p_ctx->protection_level))
                    {
                        p_ctx->prl.data_retransmit_counter++;
 800605e:	3301      	adds	r3, #1
 8006060:	f884 3263 	strb.w	r3, [r4, #611]	; 0x263
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                            p_ctx->prl.state = PRL_STATE_IDLE;
                            break;
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8006064:	2304      	movs	r3, #4
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
                             (FULL_PROTECTION == p_ctx->protection_level))
                    {
                        p_ctx->prl.data_retransmit_counter++;
                        p_ctx->prl.trans_repeat_status = TRUE;
 8006066:	f884 72a0 	strb.w	r7, [r4, #672]	; 0x2a0
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                            p_ctx->prl.state = PRL_STATE_IDLE;
                            break;
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 800606a:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
 800606e:	f7ff bbca 	b.w	8005806 <ifx_i2c_prl_event_handler+0x4e>
                      p_ctx->prl.state = PRL_STATE_ERROR;
                    }
                }
                else
                {
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 8006072:	f894 3262 	ldrb.w	r3, [r4, #610]	; 0x262
 8006076:	2b03      	cmp	r3, #3
 8006078:	f47f abc4 	bne.w	8005804 <ifx_i2c_prl_event_handler+0x4c>
                    {
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 800607c:	23ff      	movs	r3, #255	; 0xff
 800607e:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
 8006082:	f44f 7284 	mov.w	r2, #264	; 0x108
 8006086:	2300      	movs	r3, #0
 8006088:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
 800608c:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 8006090:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 8006094:	f7ff bbb6 	b.w	8005804 <ifx_i2c_prl_event_handler+0x4c>
                }
            }
            break;
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 8006098:	f894 31d2 	ldrb.w	r3, [r4, #466]	; 0x1d2
 800609c:	2201      	movs	r2, #1
 800609e:	2bff      	cmp	r3, #255	; 0xff
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 80060a0:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
                }
            }
            break;
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 80060a4:	f43f abb1 	beq.w	800580a <ifx_i2c_prl_event_handler+0x52>
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d11f      	bne.n	80060ec <ifx_i2c_prl_event_handler+0x934>
        {
            p_ctx->prl.decryption_failure_counter++;
 80060ac:	f894 3262 	ldrb.w	r3, [r4, #610]	; 0x262
 80060b0:	4413      	add	r3, r2
 80060b2:	f884 3262 	strb.w	r3, [r4, #610]	; 0x262
            p_ctx->prl.state = PRL_STATE_VERIFY;
 80060b6:	2303      	movs	r3, #3
 80060b8:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80060bc:	2300      	movs	r3, #0
 80060be:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 80060c2:	2344      	movs	r3, #68	; 0x44
 80060c4:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 80060c8:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80060cc:	f504 7318 	add.w	r3, r4, #608	; 0x260
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4620      	mov	r0, r4
 80060d4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80060d8:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 80060dc:	f000 fa2c 	bl	8006538 <ifx_i2c_tl_transceive>
                                                  p_ctx->prl.prl_txrx_buffer,
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 80060e0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 80060e4:	f8b4 2260 	ldrh.w	r2, [r4, #608]	; 0x260
 80060e8:	801a      	strh	r2, [r3, #0]
 80060ea:	e006      	b.n	80060fa <ifx_i2c_prl_event_handler+0x942>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80060ec:	f44f 7384 	mov.w	r3, #264	; 0x108
 80060f0:	f8a4 3264 	strh.w	r3, [r4, #612]	; 0x264
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	f884 31b2 	strb.w	r3, [r4, #434]	; 0x1b2
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 80060fa:	23ff      	movs	r3, #255	; 0xff
 80060fc:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
 8006100:	e00a      	b.n	8006118 <ifx_i2c_prl_event_handler+0x960>
                }
            }
            break;
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8006102:	2301      	movs	r3, #1
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8006104:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
                }
            }
            break;
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8006108:	f884 31b0 	strb.w	r3, [r4, #432]	; 0x1b0
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800610c:	4620      	mov	r0, r4
 800610e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006112:	2200      	movs	r2, #0
 8006114:	4613      	mov	r3, r2
 8006116:	47a8      	blx	r5
                exit_machine = FALSE;
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8006118:	b02b      	add	sp, #172	; 0xac
 800611a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800611e:	bf00      	nop

08006120 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8006120:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8006122:	2300      	movs	r3, #0
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8006124:	460d      	mov	r5, r1
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8006126:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 800612a:	4910      	ldr	r1, [pc, #64]	; (800616c <ifx_i2c_prl_init+0x4c>)
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 800612c:	4604      	mov	r4, r0
    p_ctx->tl.state = PRL_STATE_UNINIT;

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 800612e:	f000 f9e9 	bl	8006504 <ifx_i2c_tl_init>
 8006132:	b9b8      	cbnz	r0, 8006164 <ifx_i2c_prl_init+0x44>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8006134:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8006138:	f884 01b2 	strb.w	r0, [r4, #434]	; 0x1b2
        }

        p_ctx->prl.upper_layer_event_handler = handler;
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 800613c:	3b11      	subs	r3, #17
 800613e:	bf18      	it	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2201      	movs	r2, #1
 8006144:	f884 3266 	strb.w	r3, [r4, #614]	; 0x266
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8006148:	2311      	movs	r3, #17
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 800614a:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 800614e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8006152:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8006156:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 800615a:	f8c4 529c 	str.w	r5, [r4, #668]	; 0x29c
        }
        p_ctx->prl.state = PRL_STATE_IDLE;

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800615e:	f8a4 0264 	strh.w	r0, [r4, #612]	; 0x264
 8006162:	bd38      	pop	{r3, r4, r5, pc}
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8006164:	f44f 7081 	mov.w	r0, #258	; 0x102
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
        return_status = IFX_I2C_STACK_SUCCESS;
    } while (FALSE);
    
    return (return_status);
}
 8006168:	bd38      	pop	{r3, r4, r5, pc}
 800616a:	bf00      	nop
 800616c:	080057b9 	.word	0x080057b9

08006170 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006170:	b510      	push	{r4, lr}
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 8006172:	f890 31b0 	ldrb.w	r3, [r0, #432]	; 0x1b0
 8006176:	2b01      	cmp	r3, #1
    
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006178:	4602      	mov	r2, r0
 800617a:	460c      	mov	r4, r1
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 800617c:	d002      	beq.n	8006184 <ifx_i2c_prl_close+0x14>
    return (return_status);
}

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800617e:	f44f 7081 	mov.w	r0, #258	; 0x102
 8006182:	bd10      	pop	{r4, pc}
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 8006184:	f8c2 129c 	str.w	r1, [r2, #668]	; 0x29c
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8006188:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
 800618c:	2933      	cmp	r1, #51	; 0x33
 800618e:	d104      	bne.n	800619a <ifx_i2c_prl_close+0x2a>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8006190:	2100      	movs	r1, #0
 8006192:	460a      	mov	r2, r1
 8006194:	460b      	mov	r3, r1
 8006196:	47a0      	blx	r4
 8006198:	e00f      	b.n	80061ba <ifx_i2c_prl_close+0x4a>
            return_status = IFX_I2C_STACK_SUCCESS;
            break;
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 800619a:	f890 31b2 	ldrb.w	r3, [r0, #434]	; 0x1b2
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d1ed      	bne.n	800617e <ifx_i2c_prl_close+0xe>
 80061a2:	2922      	cmp	r1, #34	; 0x22
 80061a4:	d1eb      	bne.n	800617e <ifx_i2c_prl_close+0xe>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80061a6:	2108      	movs	r1, #8
 80061a8:	f880 11b0 	strb.w	r1, [r0, #432]	; 0x1b0
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80061ac:	f880 31b3 	strb.w	r3, [r0, #435]	; 0x1b3
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 80061b0:	2100      	movs	r1, #0
 80061b2:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 80061b6:	f7ff faff 	bl	80057b8 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 80061ba:	2000      	movs	r0, #0
            break;
        }
    } while (FALSE);
    return (return_status);
}
 80061bc:	bd10      	pop	{r4, pc}

080061be <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 80061be:	b538      	push	{r3, r4, r5, lr}
 80061c0:	4615      	mov	r5, r2
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 80061c2:	460a      	mov	r2, r1
 80061c4:	b3b9      	cbz	r1, 8006236 <ifx_i2c_prl_transceive+0x78>
 80061c6:	b3b5      	cbz	r5, 8006236 <ifx_i2c_prl_transceive+0x78>
 80061c8:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
 80061cc:	2901      	cmp	r1, #1
 80061ce:	d132      	bne.n	8006236 <ifx_i2c_prl_transceive+0x78>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 80061d0:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 80061d4:	2c11      	cmp	r4, #17
 80061d6:	d108      	bne.n	80061ea <ifx_i2c_prl_transceive+0x2c>
 80061d8:	f890 4266 	ldrb.w	r4, [r0, #614]	; 0x266
 80061dc:	b92c      	cbnz	r4, 80061ea <ifx_i2c_prl_transceive+0x2c>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80061de:	2408      	movs	r4, #8
 80061e0:	f880 41b0 	strb.w	r4, [r0, #432]	; 0x1b0
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80061e4:	f880 11b3 	strb.w	r1, [r0, #435]	; 0x1b3
 80061e8:	e002      	b.n	80061f0 <ifx_i2c_prl_transceive+0x32>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 80061ea:	2102      	movs	r1, #2
 80061ec:	f880 11b0 	strb.w	r1, [r0, #432]	; 0x1b0
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
        p_ctx->prl.actual_payload_length = tx_data_len;

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80061f0:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 80061f4:	f8c0 21c0 	str.w	r2, [r0, #448]	; 0x1c0
        p_ctx->prl.actual_payload_length = tx_data_len;

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80061f8:	f001 0103 	and.w	r1, r1, #3
 80061fc:	3902      	subs	r1, #2
 80061fe:	2901      	cmp	r1, #1
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 8006200:	bf88      	it	hi
 8006202:	3304      	addhi	r3, #4
 8006204:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 8006208:	9b04      	ldr	r3, [sp, #16]
 800620a:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
        p_ctx->prl.data_retransmit_counter = 0;
 800620e:	2400      	movs	r4, #0
        p_ctx->prl.trans_repeat_status = FALSE;
        p_ctx->prl.decryption_failure_counter = 0;
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8006210:	2311      	movs	r3, #17
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
        p_ctx->prl.actual_payload_length = tx_data_len;
 8006212:	f8a0 51c4 	strh.w	r5, [r0, #452]	; 0x1c4
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
        p_ctx->prl.data_retransmit_counter = 0;
 8006216:	f880 4263 	strb.w	r4, [r0, #611]	; 0x263
        p_ctx->prl.trans_repeat_status = FALSE;
 800621a:	f880 42a0 	strb.w	r4, [r0, #672]	; 0x2a0
        p_ctx->prl.decryption_failure_counter = 0;
 800621e:	f880 4262 	strb.w	r4, [r0, #610]	; 0x262
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8006222:	f8a0 4264 	strh.w	r4, [r0, #612]	; 0x264
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8006226:	f880 31d2 	strb.w	r3, [r0, #466]	; 0x1d2

        ifx_i2c_prl_event_handler(p_ctx,
 800622a:	4621      	mov	r1, r4
 800622c:	462b      	mov	r3, r5
 800622e:	f7ff fac3 	bl	80057b8 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 8006232:	4620      	mov	r0, r4
 8006234:	bd38      	pop	{r3, r4, r5, pc}
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8006236:	f44f 7081 	mov.w	r0, #258	; 0x102
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;

    } while (FALSE);
    return (return_status);
}
 800623a:	bd38      	pop	{r3, r4, r5, pc}

0800623c <ifx_i2c_tl_send_next_fragment>:
    }

    return (pctr);
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 800623c:	b570      	push	{r4, r5, r6, lr}

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 800623e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8006240:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8006244:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8006248:	1b92      	subs	r2, r2, r6
    }

    return (pctr);
}
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 800624a:	4605      	mov	r5, r0

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 800624c:	b291      	uxth	r1, r2
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 800624e:	b926      	cbnz	r6, 800625a <ifx_i2c_tl_send_next_fragment+0x1e>
    {
        pctr = TL_CHAINING_NO;
 8006250:	42a1      	cmp	r1, r4
 8006252:	bf94      	ite	ls
 8006254:	2300      	movls	r3, #0
 8006256:	2301      	movhi	r3, #1
 8006258:	e003      	b.n	8006262 <ifx_i2c_tl_send_next_fragment+0x26>
        pctr = TL_CHAINING_FIRST;
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 800625a:	42a1      	cmp	r1, r4
 800625c:	bf94      	ite	ls
 800625e:	2304      	movls	r3, #4
 8006260:	2302      	movhi	r3, #2

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8006262:	42a2      	cmp	r2, r4
 8006264:	bfb8      	it	lt
 8006266:	460c      	movlt	r4, r1
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8006268:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 800626a:	f043 0308 	orr.w	r3, r3, #8
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800626e:	4431      	add	r1, r6
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8006270:	f885 32a7 	strb.w	r3, [r5, #679]	; 0x2a7
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8006274:	f505 702a 	add.w	r0, r5, #680	; 0x2a8
 8006278:	4622      	mov	r2, r4
 800627a:	f005 fa8d 	bl	800b798 <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 800627e:	4426      	add	r6, r4
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8006280:	1c61      	adds	r1, r4, #1
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8006282:	f8a5 6040 	strh.w	r6, [r5, #64]	; 0x40
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8006286:	4628      	mov	r0, r5
 8006288:	b289      	uxth	r1, r1
}
 800628a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 800628e:	f7fe bf5b 	b.w	8005148 <ifx_i2c_dl_send_frame>
	...

08006294 <ifx_i2c_dl_event_handler>:
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8006294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t pctr = 0;
    uint8_t chaining = 0;
 8006298:	2500      	movs	r5, #0
}
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 800629a:	4604      	mov	r4, r0
 800629c:	468a      	mov	sl, r1
 800629e:	4690      	mov	r8, r2
 80062a0:	461e      	mov	r6, r3
    uint8_t pctr = 0;
 80062a2:	462f      	mov	r7, r5
    uint8_t chaining = 0;
    uint8_t exit_machine = TRUE;
    do
    {
        if (NULL != p_data)
 80062a4:	f1b8 0f00 	cmp.w	r8, #0
 80062a8:	d003      	beq.n	80062b2 <ifx_i2c_dl_event_handler+0x1e>
        {
            pctr = p_data[0];
 80062aa:	f898 7000 	ldrb.w	r7, [r8]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 80062ae:	f007 0507 	and.w	r5, r7, #7
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 80062b2:	f01a 0201 	ands.w	r2, sl, #1
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 80062b6:	bf1f      	itttt	ne
 80062b8:	2306      	movne	r3, #6
 80062ba:	f884 3034 	strbne.w	r3, [r4, #52]	; 0x34
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80062be:	f44f 7381 	movne.w	r3, #258	; 0x102
 80062c2:	f8a4 3054 	strhne.w	r3, [r4, #84]	; 0x54
        }
        if (0 != data_len)
 80062c6:	b15e      	cbz	r6, 80062e0 <ifx_i2c_dl_event_handler+0x4c>

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 80062c8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80062cc:	b943      	cbnz	r3, 80062e0 <ifx_i2c_dl_event_handler+0x4c>
 80062ce:	f007 0307 	and.w	r3, r7, #7
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d804      	bhi.n	80062e0 <ifx_i2c_dl_event_handler+0x4c>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 80062d6:	f007 03f8 	and.w	r3, r7, #248	; 0xf8
 80062da:	2b08      	cmp	r3, #8
 80062dc:	f040 80e9 	bne.w	80064b2 <ifx_i2c_dl_event_handler+0x21e>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        switch (p_ctx->tl.state)
 80062e6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80062ea:	3b01      	subs	r3, #1
 80062ec:	2b07      	cmp	r3, #7
 80062ee:	f200 80d3 	bhi.w	8006498 <ifx_i2c_dl_event_handler+0x204>
 80062f2:	e8df f003 	tbb	[pc, r3]
 80062f6:	0a04      	.short	0x0a04
 80062f8:	cf7032d1 	.word	0xcf7032d1
 80062fc:	9fb9      	.short	0x9fb9
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 80062fe:	2100      	movs	r1, #0
 8006300:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8006302:	4620      	mov	r0, r4
 8006304:	460a      	mov	r2, r1
 8006306:	460b      	mov	r3, r1
 8006308:	e0cf      	b.n	80064aa <ifx_i2c_dl_event_handler+0x216>
            }
            break;
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 800630a:	f01a 0f02 	tst.w	sl, #2
 800630e:	d060      	beq.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8006310:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8006314:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006316:	429a      	cmp	r2, r3
 8006318:	d209      	bcs.n	800632e <ifx_i2c_dl_event_handler+0x9a>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 800631a:	2d07      	cmp	r5, #7
 800631c:	f000 80d1 	beq.w	80064c2 <ifx_i2c_dl_event_handler+0x22e>
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
                            break;
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8006320:	2e00      	cmp	r6, #0
 8006322:	d156      	bne.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
                        }
                        exit_machine = FALSE;
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 8006324:	4620      	mov	r0, r4
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 8006326:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
                        }
                        exit_machine = FALSE;
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 800632a:	f7ff bf87 	b.w	800623c <ifx_i2c_tl_send_next_fragment>
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
 800632e:	2304      	movs	r3, #4
 8006330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        p_ctx->tl.total_recv_length = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 8006338:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
                        p_ctx->tl.transmission_completed = 1;
                        // if data is received after sending last frame
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 800633c:	f01a 0f04 	tst.w	sl, #4
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
                        p_ctx->tl.total_recv_length = 0;
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
                        p_ctx->tl.transmission_completed = 1;
 8006340:	f04f 0301 	mov.w	r3, #1
 8006344:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
                        // if data is received after sending last frame
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8006348:	d1ac      	bne.n	80062a4 <ifx_i2c_dl_event_handler+0x10>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data already received after Tx\n");
                            // Received CTRL frame, trigger reception in Data Link layer
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 800634a:	4620      	mov	r0, r4
 800634c:	f7fe ff18 	bl	8005180 <ifx_i2c_dl_receive_frame>
 8006350:	2800      	cmp	r0, #0
 8006352:	f000 80d2 	beq.w	80064fa <ifx_i2c_dl_event_handler+0x266>
                            {
                                LOG_TL("[IFX-TL]: Tx:RX Received CTRL frame fail -> Inform UL\n");
                                p_ctx->tl.state = TL_STATE_ERROR;
 8006356:	2306      	movs	r3, #6
 8006358:	e00f      	b.n	800637a <ifx_i2c_dl_event_handler+0xe6>
            }
            break;
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 800635a:	f01a 0f04 	tst.w	sl, #4
 800635e:	d038      	beq.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8006360:	b3be      	cbz	r6, 80063d2 <ifx_i2c_dl_event_handler+0x13e>
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8006362:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
 8006366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800636a:	d10a      	bne.n	8006382 <ifx_i2c_dl_event_handler+0xee>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 800636c:	2d04      	cmp	r5, #4
 800636e:	d030      	beq.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
 8006370:	4620      	mov	r0, r4
 8006372:	f7fe ff05 	bl	8005180 <ifx_i2c_dl_receive_frame>
 8006376:	bb60      	cbnz	r0, 80063d2 <ifx_i2c_dl_event_handler+0x13e>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8006378:	2304      	movs	r3, #4
 800637a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        exit_machine = FALSE;
                        break;
 800637e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8006382:	2d07      	cmp	r5, #7
                        exit_machine = FALSE;
                        break;
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8006384:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8006388:	d004      	beq.n	8006394 <ifx_i2c_dl_event_handler+0x100>
 800638a:	2d02      	cmp	r5, #2
 800638c:	d902      	bls.n	8006394 <ifx_i2c_dl_event_handler+0x100>
 800638e:	2d04      	cmp	r5, #4
 8006390:	f040 8097 	bne.w	80064c2 <ifx_i2c_dl_event_handler+0x22e>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8006394:	4b5a      	ldr	r3, [pc, #360]	; (8006500 <ifx_i2c_dl_event_handler+0x26c>)
 8006396:	f813 1015 	ldrb.w	r1, [r3, r5, lsl #1]
 800639a:	4291      	cmp	r1, r2
 800639c:	d005      	beq.n	80063aa <ifx_i2c_dl_event_handler+0x116>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 800639e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	4293      	cmp	r3, r2
 80063a6:	f040 808c 	bne.w	80064c2 <ifx_i2c_dl_event_handler+0x22e>
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
                        break;
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 80063aa:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
                    if (NULL == p_data)
 80063ae:	f1b8 0f00 	cmp.w	r8, #0
 80063b2:	d00e      	beq.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
                        p_ctx->tl.state = TL_STATE_ERROR;
                        break;
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 80063b4:	f015 0903 	ands.w	r9, r5, #3
 80063b8:	f040 809d 	bne.w	80064f6 <ifx_i2c_dl_event_handler+0x262>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 80063bc:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80063be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80063c0:	198b      	adds	r3, r1, r6
 80063c2:	8812      	ldrh	r2, [r2, #0]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	4293      	cmp	r3, r2
 80063c8:	dd7f      	ble.n	80064ca <ifx_i2c_dl_event_handler+0x236>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 80063ca:	f44f 7382 	mov.w	r3, #260	; 0x104
 80063ce:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
                            p_ctx->tl.state = TL_STATE_ERROR;
 80063d2:	2306      	movs	r3, #6
 80063d4:	e076      	b.n	80064c4 <ifx_i2c_dl_event_handler+0x230>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 80063d6:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80063da:	1c53      	adds	r3, r2, #1
 80063dc:	429e      	cmp	r6, r3
 80063de:	d001      	beq.n	80063e4 <ifx_i2c_dl_event_handler+0x150>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 80063e0:	2307      	movs	r3, #7
 80063e2:	e06f      	b.n	80064c4 <ifx_i2c_dl_event_handler+0x230>
                    break;
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 80063e4:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80063e6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063e8:	1983      	adds	r3, r0, r6
 80063ea:	8809      	ldrh	r1, [r1, #0]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	428b      	cmp	r3, r1
 80063f0:	dd05      	ble.n	80063fe <ifx_i2c_dl_event_handler+0x16a>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 80063f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80063f6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
                    p_ctx->tl.state = TL_STATE_RX;
 80063fa:	2304      	movs	r3, #4
 80063fc:	e062      	b.n	80064c4 <ifx_i2c_dl_event_handler+0x230>
                    break;
                }
                if (NULL == p_data)
 80063fe:	f1b8 0f00 	cmp.w	r8, #0
 8006402:	d0e6      	beq.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8006404:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006406:	f108 0101 	add.w	r1, r8, #1
 800640a:	4418      	add	r0, r3
 800640c:	f005 f9c4 	bl	800b798 <memcpy>
 8006410:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8006412:	3b01      	subs	r3, #1
                p_ctx->tl.total_recv_length += (data_len - 1);
 8006414:	441e      	add	r6, r3

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8006416:	f007 0707 	and.w	r7, r7, #7
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 800641a:	2304      	movs	r3, #4
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                p_ctx->tl.total_recv_length += (data_len - 1);
 800641c:	87a6      	strh	r6, [r4, #60]	; 0x3c

                p_ctx->tl.previous_chaining = pctr & 0x07;
 800641e:	f884 7052 	strb.w	r7, [r4, #82]	; 0x52
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8006422:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8006426:	4620      	mov	r0, r4
 8006428:	f7fe feaa 	bl	8005180 <ifx_i2c_dl_receive_frame>
 800642c:	2800      	cmp	r0, #0
 800642e:	d192      	bne.n	8006356 <ifx_i2c_dl_event_handler+0xc2>
 8006430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            break;
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8006434:	2e01      	cmp	r6, #1
 8006436:	d903      	bls.n	8006440 <ifx_i2c_dl_event_handler+0x1ac>
 8006438:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800643c:	2b01      	cmp	r3, #1
 800643e:	d0cf      	beq.n	80063e0 <ifx_i2c_dl_event_handler+0x14c>
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
                    break;
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8006440:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1c1      	bne.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
    if (TL_STATE_IDLE != p_ctx->tl.state)
    {
        return (IFX_I2C_STACK_ERROR);
    }

    p_ctx->tl.packet_offset = 0;
 800644e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    p_ctx->tl.total_recv_length = 0;
 8006452:	87a3      	strh	r3, [r4, #60]	; 0x3c
    p_ctx->tl.state = TL_STATE_TX;
 8006454:	2302      	movs	r3, #2
 8006456:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 800645a:	4620      	mov	r0, r4
 800645c:	f7ff feee 	bl	800623c <ifx_i2c_tl_send_next_fragment>
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8006460:	2800      	cmp	r0, #0
 8006462:	d1b6      	bne.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            }
            break;
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8006468:	2302      	movs	r3, #2
 800646a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 800646e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1aa      	bne.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
    uint16_t tl_fragment_size = 1;
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 800647c:	2207      	movs	r2, #7
 800647e:	f884 22a7 	strb.w	r2, [r4, #679]	; 0x2a7
    p_ctx->tl.total_recv_length = 0;
 8006482:	87a3      	strh	r3, [r4, #60]	; 0x3c
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 8006484:	4620      	mov	r0, r4
 8006486:	2101      	movs	r1, #1
 8006488:	f7fe fe5e 	bl	8005148 <ifx_i2c_dl_send_frame>
                p_ctx->tl.state = TL_STATE_TX;
                if (0 == (p_ctx->tl.master_chaining_error_count++))
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 800648c:	2800      	cmp	r0, #0
 800648e:	d1a0      	bne.n	80063d2 <ifx_i2c_dl_event_handler+0x13e>
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            break;
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8006494:	b902      	cbnz	r2, 8006498 <ifx_i2c_dl_event_handler+0x204>
 8006496:	b116      	cbz	r6, 800649e <ifx_i2c_dl_event_handler+0x20a>
            }
            break;
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8006498:	2301      	movs	r3, #1
 800649a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 800649e:	2200      	movs	r2, #0
 80064a0:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 80064a2:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
 80064a6:	4620      	mov	r0, r4
 80064a8:	4613      	mov	r3, r2
 80064aa:	46ac      	mov	ip, r5
            }
            break;
        }
    } while (TRUE == exit_machine);
}
 80064ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
                exit_machine = FALSE;
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80064b0:	4760      	bx	ip
        }
        if (0 != data_len)
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 80064b2:	2306      	movs	r3, #6
 80064b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80064b8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80064bc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80064c0:	e70e      	b.n	80062e0 <ifx_i2c_dl_event_handler+0x4c>

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 80064c2:	2308      	movs	r3, #8
 80064c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        break;
 80064c8:	e6ec      	b.n	80062a4 <ifx_i2c_dl_event_handler+0x10>
                            p_ctx->tl.state = TL_STATE_ERROR;
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 80064ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80064cc:	1e72      	subs	r2, r6, #1
 80064ce:	4408      	add	r0, r1
 80064d0:	f108 0101 	add.w	r1, r8, #1
 80064d4:	f005 f960 	bl	800b798 <memcpy>
 80064d8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80064da:	6de5      	ldr	r5, [r4, #92]	; 0x5c
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 80064dc:	2201      	movs	r2, #1
 80064de:	3b01      	subs	r3, #1
 80064e0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
 80064e4:	4433      	add	r3, r6
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 80064e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
                            break;
                        }
                        exit_machine = FALSE;
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80064ec:	4620      	mov	r0, r4
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 80064ee:	8013      	strh	r3, [r2, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80064f0:	4649      	mov	r1, r9
 80064f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80064f4:	e7d9      	b.n	80064aa <ifx_i2c_dl_event_handler+0x216>
                                                            p_ctx->tl.p_recv_packet_buffer,
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
                    }
                    else
                    {
                        p_ctx->tl.state = TL_STATE_CHAINING;
 80064f6:	2305      	movs	r3, #5
 80064f8:	e7e4      	b.n	80064c4 <ifx_i2c_dl_event_handler+0x230>
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fe:	bf00      	nop
 8006500:	0800c35d 	.word	0x0800c35d

08006504 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006504:	b538      	push	{r3, r4, r5, lr}
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8006506:	2300      	movs	r3, #0
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006508:	460d      	mov	r5, r1
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 800650a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800650e:	4909      	ldr	r1, [pc, #36]	; (8006534 <ifx_i2c_tl_init+0x30>)
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8006510:	4604      	mov	r4, r0
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 8006512:	f7fe fdf5 	bl	8005100 <ifx_i2c_dl_init>
 8006516:	b950      	cbnz	r0, 800652e <ifx_i2c_tl_init+0x2a>
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
 800651e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 8006522:	88a3      	ldrh	r3, [r4, #4]
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
    }
    p_ctx->tl.initialization_state = TRUE;
    p_ctx->tl.upper_layer_event_handler = handler;
 8006524:	65e5      	str	r5, [r4, #92]	; 0x5c
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 8006526:	3b06      	subs	r3, #6
 8006528:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42

    return (IFX_I2C_STACK_SUCCESS);
 800652c:	bd38      	pop	{r3, r4, r5, pc}
    p_ctx->tl.state = TL_STATE_UNINIT;

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
    {
        return (IFX_I2C_STACK_ERROR);
 800652e:	f44f 7081 	mov.w	r0, #258	; 0x102
    p_ctx->tl.upper_layer_event_handler = handler;
    p_ctx->tl.state = TL_STATE_IDLE;
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);

    return (IFX_I2C_STACK_SUCCESS);
}
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	08006295 	.word	0x08006295

08006538 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	9f06      	ldr	r7, [sp, #24]
 800653e:	4604      	mov	r4, r0
 8006540:	4615      	mov	r5, r2
 8006542:	4698      	mov	r8, r3
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 8006544:	460e      	mov	r6, r1
 8006546:	b311      	cbz	r1, 800658e <ifx_i2c_tl_transceive+0x56>
 8006548:	b30a      	cbz	r2, 800658e <ifx_i2c_tl_transceive+0x56>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 800654a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800654e:	2b01      	cmp	r3, #1
 8006550:	d11d      	bne.n	800658e <ifx_i2c_tl_transceive+0x56>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8006552:	2302      	movs	r3, #2
 8006554:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8006558:	f7fd feca 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
        p_ctx->tl.p_actual_packet = p_packet;
        p_ctx->tl.actual_packet_length = packet_len;
        p_ctx->tl.packet_offset = 0;
 800655c:	2200      	movs	r2, #0
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
 800655e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        p_ctx->tl.master_chaining_error_count = 0;
 8006562:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
        p_ctx->tl.transmission_completed = 0;
 8006566:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800656a:	f44f 7381 	mov.w	r3, #258	; 0x102
        if (TL_STATE_IDLE != p_ctx->tl.state)
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 800656e:	64e0      	str	r0, [r4, #76]	; 0x4c
        p_ctx->tl.p_actual_packet = p_packet;
 8006570:	63a6      	str	r6, [r4, #56]	; 0x38
        p_ctx->tl.actual_packet_length = packet_len;
 8006572:	87e5      	strh	r5, [r4, #62]	; 0x3e
        p_ctx->tl.packet_offset = 0;
 8006574:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 8006578:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 800657c:	64a7      	str	r7, [r4, #72]	; 0x48
        p_ctx->tl.total_recv_length = 0;
 800657e:	87a2      	strh	r2, [r4, #60]	; 0x3c
        p_ctx->tl.chaining_error_count = 0;
        p_ctx->tl.master_chaining_error_count = 0;
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8006580:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 8006584:	4620      	mov	r0, r4
    } while (FALSE);
    return (status);
}
 8006586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        p_ctx->tl.total_recv_length = 0;
        p_ctx->tl.chaining_error_count = 0;
        p_ctx->tl.master_chaining_error_count = 0;
        p_ctx->tl.transmission_completed = 0;
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 800658a:	f7ff be57 	b.w	800623c <ifx_i2c_tl_send_next_fragment>
    } while (FALSE);
    return (status);
}
 800658e:	f44f 7081 	mov.w	r0, #258	; 0x102
 8006592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006596 <ifx_i2c_event_handler>:
    return (status);
}

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8006596:	b510      	push	{r4, lr}
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8006598:	6883      	ldr	r3, [r0, #8]
    return (status);
}

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 800659a:	4604      	mov	r4, r0
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 800659c:	6840      	ldr	r0, [r0, #4]
 800659e:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 80065a0:	2300      	movs	r3, #0
 80065a2:	7363      	strb	r3, [r4, #13]
 80065a4:	bd10      	pop	{r4, pc}
	...

080065a8 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    do
    {
        p_optiga_comms = &optiga_comms;

        if (FALSE == p_optiga_comms->instance_init_state)
 80065aa:	4d08      	ldr	r5, [pc, #32]	; (80065cc <optiga_comms_create+0x24>)
 80065ac:	7b2c      	ldrb	r4, [r5, #12]

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 80065ae:	4607      	mov	r7, r0
 80065b0:	460e      	mov	r6, r1

    do
    {
        p_optiga_comms = &optiga_comms;

        if (FALSE == p_optiga_comms->instance_init_state)
 80065b2:	b934      	cbnz	r4, 80065c2 <optiga_comms_create+0x1a>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 80065b4:	f7fd fb94 	bl	8003ce0 <pal_init>
 80065b8:	b928      	cbnz	r0, 80065c6 <optiga_comms_create+0x1e>
                break;
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
            p_optiga_comms->p_upper_layer_ctx = context;
            p_optiga_comms->instance_init_state = TRUE;
 80065ba:	2301      	movs	r3, #1
            {
                p_optiga_comms = NULL;
                break;
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 80065bc:	60af      	str	r7, [r5, #8]
            p_optiga_comms->p_upper_layer_ctx = context;
 80065be:	606e      	str	r6, [r5, #4]
            p_optiga_comms->instance_init_state = TRUE;
 80065c0:	732b      	strb	r3, [r5, #12]
{
    optiga_comms_t * p_optiga_comms = NULL;

    do
    {
        p_optiga_comms = &optiga_comms;
 80065c2:	4628      	mov	r0, r5
 80065c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (FALSE == p_optiga_comms->instance_init_state)
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
            {
                p_optiga_comms = NULL;
 80065c6:	4620      	mov	r0, r4
            p_optiga_comms->p_upper_layer_ctx = context;
            p_optiga_comms->instance_init_state = TRUE;
        }
    } while (FALSE);
    return (p_optiga_comms);
}
 80065c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ca:	bf00      	nop
 80065cc:	1ffed65c 	.word	0x1ffed65c

080065d0 <optiga_comms_set_callback_context>:
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
    p_optiga_comms->p_upper_layer_ctx = context;
 80065d0:	6041      	str	r1, [r0, #4]
    return (0);
}
 80065d2:	2000      	movs	r0, #0
 80065d4:	4770      	bx	lr
	...

080065d8 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 80065d8:	b510      	push	{r4, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 80065da:	4604      	mov	r4, r0
 80065dc:	b1a8      	cbz	r0, 800660a <optiga_comms_open+0x32>
 80065de:	7b43      	ldrb	r3, [r0, #13]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d012      	beq.n	800660a <optiga_comms_open+0x32>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	7343      	strb	r3, [r0, #13]
optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80065e8:	6803      	ldr	r3, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80065ea:	4a09      	ldr	r2, [pc, #36]	; (8006610 <optiga_comms_open+0x38>)
optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80065ec:	61d8      	str	r0, [r3, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80065ee:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 80065f0:	7c02      	ldrb	r2, [r0, #16]
 80065f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 80065f6:	6800      	ldr	r0, [r0, #0]
 80065f8:	6963      	ldr	r3, [r4, #20]
 80065fa:	f8c0 34d0 	str.w	r3, [r0, #1232]	; 0x4d0

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80065fe:	f7fe fb4c 	bl	8004c9a <ifx_i2c_open>
        if (IFX_I2C_STACK_SUCCESS != status)
 8006602:	b120      	cbz	r0, 800660e <optiga_comms_open+0x36>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8006604:	2300      	movs	r3, #0
 8006606:	7363      	strb	r3, [r4, #13]
 8006608:	bd10      	pop	{r4, pc}

/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800660a:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
 800660e:	bd10      	pop	{r4, pc}
 8006610:	08006597 	.word	0x08006597

08006614 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8006614:	b537      	push	{r0, r1, r2, r4, r5, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8006616:	4604      	mov	r4, r0
 8006618:	b1e0      	cbz	r0, 8006654 <optiga_comms_transceive+0x40>
 800661a:	7b40      	ldrb	r0, [r0, #13]
 800661c:	2801      	cmp	r0, #1
 800661e:	d019      	beq.n	8006654 <optiga_comms_transceive+0x40>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8006620:	2001      	movs	r0, #1
 8006622:	7360      	strb	r0, [r4, #13]
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8006624:	6820      	ldr	r0, [r4, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8006626:	4d0d      	ldr	r5, [pc, #52]	; (800665c <optiga_comms_transceive+0x48>)
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8006628:	61c4      	str	r4, [r0, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 800662a:	6185      	str	r5, [r0, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 800662c:	7ba5      	ldrb	r5, [r4, #14]
 800662e:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8006632:	6820      	ldr	r0, [r4, #0]
 8006634:	7be5      	ldrb	r5, [r4, #15]
 8006636:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	7c25      	ldrb	r5, [r4, #16]
 800663e:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8006642:	9806      	ldr	r0, [sp, #24]
 8006644:	9000      	str	r0, [sp, #0]
 8006646:	6820      	ldr	r0, [r4, #0]
 8006648:	f7fe fb44 	bl	8004cd4 <ifx_i2c_transceive>
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 800664c:	b120      	cbz	r0, 8006658 <optiga_comms_transceive+0x44>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800664e:	2300      	movs	r3, #0
 8006650:	7363      	strb	r3, [r4, #13]
 8006652:	e001      	b.n	8006658 <optiga_comms_transceive+0x44>
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8006654:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
 8006658:	b003      	add	sp, #12
 800665a:	bd30      	pop	{r4, r5, pc}
 800665c:	08006597 	.word	0x08006597

08006660 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8006660:	b510      	push	{r4, lr}

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8006662:	4604      	mov	r4, r0
 8006664:	b190      	cbz	r0, 800668c <optiga_comms_close+0x2c>
 8006666:	7b43      	ldrb	r3, [r0, #13]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d00f      	beq.n	800668c <optiga_comms_close+0x2c>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 800666c:	2301      	movs	r3, #1
 800666e:	7343      	strb	r3, [r0, #13]
optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8006670:	6803      	ldr	r3, [r0, #0]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8006672:	4a08      	ldr	r2, [pc, #32]	; (8006694 <optiga_comms_close+0x34>)
optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8006674:	61d8      	str	r0, [r3, #28]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8006676:	619a      	str	r2, [r3, #24]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8006678:	7c02      	ldrb	r2, [r0, #16]
 800667a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 800667e:	6800      	ldr	r0, [r0, #0]
 8006680:	f7fe fb44 	bl	8004d0c <ifx_i2c_close>
        if (IFX_I2C_STACK_SUCCESS != status)
 8006684:	b120      	cbz	r0, 8006690 <optiga_comms_close+0x30>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8006686:	2300      	movs	r3, #0
 8006688:	7363      	strb	r3, [r4, #13]
 800668a:	bd10      	pop	{r4, pc}
}


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800668c:	f44f 7081 	mov.w	r0, #258	; 0x102
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
        }
    }
    return (status);
}
 8006690:	bd10      	pop	{r4, pc}
 8006692:	bf00      	nop
 8006694:	08006597 	.word	0x08006597

08006698 <optiga_common_set_uint16>:
#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8006698:	0a0b      	lsrs	r3, r1, #8
 800669a:	7003      	strb	r3, [r0, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 800669c:	7041      	strb	r1, [r0, #1]
 800669e:	4770      	bx	lr

080066a0 <optiga_common_set_uint32>:
}

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 80066a0:	0e0b      	lsrs	r3, r1, #24
 80066a2:	7003      	strb	r3, [r0, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 80066a4:	0c0b      	lsrs	r3, r1, #16
 80066a6:	7043      	strb	r3, [r0, #1]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 80066a8:	0a0b      	lsrs	r3, r1, #8
 80066aa:	7083      	strb	r3, [r0, #2]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 80066ac:	70c1      	strb	r1, [r0, #3]
 80066ae:	4770      	bx	lr

080066b0 <optiga_common_get_uint32>:
}

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 80066b0:	7843      	ldrb	r3, [r0, #1]
 80066b2:	7802      	ldrb	r2, [r0, #0]
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 80066ba:	78c2      	ldrb	r2, [r0, #3]
 80066bc:	7880      	ldrb	r0, [r0, #2]
 80066be:	4313      	orrs	r3, r2

    return (four_byte_value);
}
 80066c0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80066c4:	4770      	bx	lr

080066c6 <optiga_common_get_uint16>:

void optiga_common_get_uint16 (const uint8_t * p_input_buffer,uint16_t* p_two_byte_value)
{
    *p_two_byte_value = (uint16_t)(*p_input_buffer << 8);
 80066c6:	7803      	ldrb	r3, [r0, #0]
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	800b      	strh	r3, [r1, #0]
    *p_two_byte_value |= (uint16_t)(*(p_input_buffer+1));
 80066cc:	7842      	ldrb	r2, [r0, #1]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	800b      	strh	r3, [r1, #0]
 80066d2:	4770      	bx	lr

080066d4 <optiga_lib_word_to_hex_string>:
    } while(0);
}
/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_word_to_hex_string(uint16_t value,
                                             uint8_t * p_buffer)
{
 80066d4:	b082      	sub	sp, #8
    uint8_t loop, hex_byte = 0, index = 0;
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
    array_buffer [1] = (uint8_t)((value & 0x00FF));

    p_buffer [index++] = '0';
 80066d6:	2330      	movs	r3, #48	; 0x30
{
    uint8_t array_buffer [5] = {0};   
    uint8_t loop, hex_byte = 0, index = 0;
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
    array_buffer [1] = (uint8_t)((value & 0x00FF));
 80066d8:	f88d 0001 	strb.w	r0, [sp, #1]

    p_buffer [index++] = '0';
 80066dc:	700b      	strb	r3, [r1, #0]
    p_buffer [index++] = 'x';
    
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];
 80066de:	0a00      	lsrs	r0, r0, #8
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
    array_buffer [1] = (uint8_t)((value & 0x00FF));

    p_buffer [index++] = '0';
    p_buffer [index++] = 'x';
 80066e0:	2378      	movs	r3, #120	; 0x78
 80066e2:	704b      	strb	r3, [r1, #1]
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
 80066e4:	0903      	lsrs	r3, r0, #4
 80066e6:	2b09      	cmp	r3, #9
 80066e8:	bf94      	ite	ls
 80066ea:	3330      	addls	r3, #48	; 0x30
 80066ec:	3337      	addhi	r3, #55	; 0x37
 80066ee:	708b      	strb	r3, [r1, #2]
    p_buffer [index++] = '0';
    p_buffer [index++] = 'x';
    
    for (loop = 0; loop < 2; loop++)
    {
        hex_byte = array_buffer[loop];
 80066f0:	f89d 3001 	ldrb.w	r3, [sp, #1]

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
 80066f4:	f000 000f 	and.w	r0, r0, #15
 80066f8:	091a      	lsrs	r2, r3, #4
 80066fa:	2809      	cmp	r0, #9
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	bf94      	ite	ls
 8006702:	3030      	addls	r0, #48	; 0x30
 8006704:	3037      	addhi	r0, #55	; 0x37
 8006706:	2a09      	cmp	r2, #9
 8006708:	bf8c      	ite	hi
 800670a:	3237      	addhi	r2, #55	; 0x37
 800670c:	3230      	addls	r2, #48	; 0x30
 800670e:	2b09      	cmp	r3, #9
 8006710:	bf8c      	ite	hi
 8006712:	3337      	addhi	r3, #55	; 0x37
 8006714:	3330      	addls	r3, #48	; 0x30
 8006716:	70c8      	strb	r0, [r1, #3]
 8006718:	710a      	strb	r2, [r1, #4]
 800671a:	714b      	strb	r3, [r1, #5]
    }    

}
 800671c:	b002      	add	sp, #8
 800671e:	4770      	bx	lr

08006720 <optiga_lib_print_string>:
    
    optiga_lib_print_string_with_newline(print_buffer);
}

void optiga_lib_print_string(const char_t * p_log_string)
{
 8006720:	b510      	push	{r4, lr}
    if (NULL == p_log_string)
 8006722:	4604      	mov	r4, r0
 8006724:	b140      	cbz	r0, 8006738 <optiga_lib_print_string+0x18>
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
 8006726:	f005 f948 	bl	800b9ba <strlen>
 800672a:	4621      	mov	r1, r4
 800672c:	4602      	mov	r2, r0
}
 800672e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
 8006732:	4802      	ldr	r0, [pc, #8]	; (800673c <optiga_lib_print_string+0x1c>)
 8006734:	f7fd bcf0 	b.w	8004118 <pal_logger_write>
 8006738:	bd10      	pop	{r4, pc}
 800673a:	bf00      	nop
 800673c:	1ffed134 	.word	0x1ffed134

08006740 <optiga_lib_print_string_with_newline>:
}

void optiga_lib_print_string_with_newline(const char_t * p_log_string)
{
 8006740:	b513      	push	{r0, r1, r4, lr}
    uint8_t new_line_characters [2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006742:	4b0a      	ldr	r3, [pc, #40]	; (800676c <optiga_lib_print_string_with_newline+0x2c>)
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	f8ad 3004 	strh.w	r3, [sp, #4]

    if (NULL == p_log_string)
 800674a:	4604      	mov	r4, r0
 800674c:	b158      	cbz	r0, 8006766 <optiga_lib_print_string_with_newline+0x26>
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
 800674e:	f005 f934 	bl	800b9ba <strlen>
 8006752:	4621      	mov	r1, r4
 8006754:	4602      	mov	r2, r0
 8006756:	4806      	ldr	r0, [pc, #24]	; (8006770 <optiga_lib_print_string_with_newline+0x30>)
 8006758:	f7fd fcde 	bl	8004118 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 800675c:	4804      	ldr	r0, [pc, #16]	; (8006770 <optiga_lib_print_string_with_newline+0x30>)
 800675e:	a901      	add	r1, sp, #4
 8006760:	2202      	movs	r2, #2
 8006762:	f7fd fcd9 	bl	8004118 <pal_logger_write>

}
 8006766:	b002      	add	sp, #8
 8006768:	bd10      	pop	{r4, pc}
 800676a:	bf00      	nop
 800676c:	0800c36d 	.word	0x0800c36d
 8006770:	1ffed134 	.word	0x1ffed134

08006774 <optiga_lib_print_message>:

void optiga_lib_print_message(const char_t * p_log_string,
                              const char_t * p_log_layer,
                              const char_t * p_log_color)                                  
{
 8006774:	b510      	push	{r4, lr}
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006776:	4c0f      	ldr	r4, [pc, #60]	; (80067b4 <optiga_lib_print_message+0x40>)
}

void optiga_lib_print_message(const char_t * p_log_string,
                              const char_t * p_log_layer,
                              const char_t * p_log_color)                                  
{
 8006778:	b0e8      	sub	sp, #416	; 0x1a0
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 800677a:	8824      	ldrh	r4, [r4, #0]
 800677c:	f8ad 400c 	strh.w	r4, [sp, #12]
}

void optiga_lib_print_message(const char_t * p_log_string,
                              const char_t * p_log_layer,
                              const char_t * p_log_color)                                  
{
 8006780:	460b      	mov	r3, r1
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
    char_t color_buffer[400];

    if ((NULL == p_log_string) || (NULL == p_log_layer) || (NULL == p_log_color))
 8006782:	b1a8      	cbz	r0, 80067b0 <optiga_lib_print_message+0x3c>
 8006784:	b1a3      	cbz	r3, 80067b0 <optiga_lib_print_message+0x3c>
 8006786:	b19a      	cbz	r2, 80067b0 <optiga_lib_print_message+0x3c>
    {
        return;
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, p_log_layer, p_log_color);
 8006788:	490b      	ldr	r1, [pc, #44]	; (80067b8 <optiga_lib_print_message+0x44>)
 800678a:	9000      	str	r0, [sp, #0]
 800678c:	9101      	str	r1, [sp, #4]
 800678e:	a804      	add	r0, sp, #16
 8006790:	490a      	ldr	r1, [pc, #40]	; (80067bc <optiga_lib_print_message+0x48>)
 8006792:	f005 f8cd 	bl	800b930 <siprintf>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
 8006796:	a804      	add	r0, sp, #16
 8006798:	f005 f90f 	bl	800b9ba <strlen>
 800679c:	a904      	add	r1, sp, #16
 800679e:	4602      	mov	r2, r0
 80067a0:	4807      	ldr	r0, [pc, #28]	; (80067c0 <optiga_lib_print_message+0x4c>)
 80067a2:	f7fd fcb9 	bl	8004118 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 80067a6:	4806      	ldr	r0, [pc, #24]	; (80067c0 <optiga_lib_print_message+0x4c>)
 80067a8:	a903      	add	r1, sp, #12
 80067aa:	2202      	movs	r2, #2
 80067ac:	f7fd fcb4 	bl	8004118 <pal_logger_write>
}
 80067b0:	b068      	add	sp, #416	; 0x1a0
 80067b2:	bd10      	pop	{r4, pc}
 80067b4:	0800c36d 	.word	0x0800c36d
 80067b8:	0800c378 	.word	0x0800c378
 80067bc:	0800c36f 	.word	0x0800c36f
 80067c0:	1ffed134 	.word	0x1ffed134

080067c4 <optiga_lib_print_status>:

void optiga_lib_print_status(const char_t * p_log_layer,
                             const char_t * p_log_color,
                             uint16_t return_value)
{
 80067c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 80067c6:	4b25      	ldr	r3, [pc, #148]	; (800685c <optiga_lib_print_status+0x98>)
}

void optiga_lib_print_status(const char_t * p_log_layer,
                             const char_t * p_log_color,
                             uint16_t return_value)
{
 80067c8:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	f8ad 3008 	strh.w	r3, [sp, #8]
}

void optiga_lib_print_status(const char_t * p_log_layer,
                             const char_t * p_log_color,
                             uint16_t return_value)
{
 80067d2:	4605      	mov	r5, r0
 80067d4:	460e      	mov	r6, r1
 80067d6:	4617      	mov	r7, r2
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
    uint8_t uint16t_conv_buffer[10] = {0};
 80067d8:	2100      	movs	r1, #0
 80067da:	220a      	movs	r2, #10
 80067dc:	a803      	add	r0, sp, #12
    char_t return_value_buffer[20] = {0};
 80067de:	ac06      	add	r4, sp, #24
void optiga_lib_print_status(const char_t * p_log_layer,
                             const char_t * p_log_color,
                             uint16_t return_value)
{
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
    uint8_t uint16t_conv_buffer[10] = {0};
 80067e0:	f004 ffe5 	bl	800b7ae <memset>
    char_t return_value_buffer[20] = {0};
 80067e4:	2100      	movs	r1, #0
 80067e6:	2214      	movs	r2, #20
 80067e8:	4620      	mov	r0, r4
 80067ea:	f004 ffe0 	bl	800b7ae <memset>
    char_t string_buffer[100] = {0};
 80067ee:	a80b      	add	r0, sp, #44	; 0x2c
 80067f0:	2100      	movs	r1, #0
 80067f2:	2264      	movs	r2, #100	; 0x64
 80067f4:	f004 ffdb 	bl	800b7ae <memset>
    char_t color_buffer[400];

    if ((NULL == p_log_layer) || (NULL == p_log_color))
 80067f8:	b365      	cbz	r5, 8006854 <optiga_lib_print_status+0x90>
 80067fa:	b35e      	cbz	r6, 8006854 <optiga_lib_print_status+0x90>
    }

    // if return value is successful, log SUCCESS
    if (OPTIGA_LIB_SUCCESS == return_value)
    {
        strcat(string_buffer,p_log_layer);
 80067fc:	a80b      	add	r0, sp, #44	; 0x2c
 80067fe:	4629      	mov	r1, r5
    {
        return;
    }

    // if return value is successful, log SUCCESS
    if (OPTIGA_LIB_SUCCESS == return_value)
 8006800:	b927      	cbnz	r7, 800680c <optiga_lib_print_status+0x48>
    {
        strcat(string_buffer,p_log_layer);
 8006802:	f005 f8b9 	bl	800b978 <strcat>
        strcat(string_buffer,"Passed");
 8006806:	a80b      	add	r0, sp, #44	; 0x2c
 8006808:	4915      	ldr	r1, [pc, #84]	; (8006860 <optiga_lib_print_status+0x9c>)
 800680a:	e00b      	b.n	8006824 <optiga_lib_print_status+0x60>
        strcat(return_value_buffer,"");
    }
    else
    {
        strcat(string_buffer,p_log_layer);
 800680c:	f005 f8b4 	bl	800b978 <strcat>
        strcat(string_buffer,"Failed with return value - ");
 8006810:	4914      	ldr	r1, [pc, #80]	; (8006864 <optiga_lib_print_status+0xa0>)
 8006812:	a80b      	add	r0, sp, #44	; 0x2c
 8006814:	f005 f8b0 	bl	800b978 <strcat>
        strcat(return_value_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
        optiga_lib_word_to_hex_string(return_value,uint16t_conv_buffer);
 8006818:	4638      	mov	r0, r7
 800681a:	a903      	add	r1, sp, #12
 800681c:	f7ff ff5a 	bl	80066d4 <optiga_lib_word_to_hex_string>
        strcat(return_value_buffer,(char_t *)uint16t_conv_buffer);
 8006820:	4620      	mov	r0, r4
 8006822:	a903      	add	r1, sp, #12
 8006824:	f005 f8a8 	bl	800b978 <strcat>
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, (char_t *)return_value_buffer, string_buffer, p_log_color);
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <optiga_lib_print_status+0xa4>)
 800682a:	4910      	ldr	r1, [pc, #64]	; (800686c <optiga_lib_print_status+0xa8>)
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	4632      	mov	r2, r6
 8006830:	ab0b      	add	r3, sp, #44	; 0x2c
 8006832:	9400      	str	r4, [sp, #0]
 8006834:	a824      	add	r0, sp, #144	; 0x90
 8006836:	f005 f87b 	bl	800b930 <siprintf>

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
 800683a:	a824      	add	r0, sp, #144	; 0x90
 800683c:	f005 f8bd 	bl	800b9ba <strlen>
 8006840:	a924      	add	r1, sp, #144	; 0x90
 8006842:	4602      	mov	r2, r0
 8006844:	480a      	ldr	r0, [pc, #40]	; (8006870 <optiga_lib_print_status+0xac>)
 8006846:	f7fd fc67 	bl	8004118 <pal_logger_write>
    //Print new line
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 800684a:	4809      	ldr	r0, [pc, #36]	; (8006870 <optiga_lib_print_status+0xac>)
 800684c:	a902      	add	r1, sp, #8
 800684e:	2202      	movs	r2, #2
 8006850:	f7fd fc62 	bl	8004118 <pal_logger_write>
}
 8006854:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
 8006858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685a:	bf00      	nop
 800685c:	0800c36d 	.word	0x0800c36d
 8006860:	0800c37d 	.word	0x0800c37d
 8006864:	0800c384 	.word	0x0800c384
 8006868:	0800c378 	.word	0x0800c378
 800686c:	0800c36f 	.word	0x0800c36f
 8006870:	1ffed134 	.word	0x1ffed134

08006874 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 8006874:	b530      	push	{r4, r5, lr}
    uint16_t start_position = *position;
 8006876:	881c      	ldrh	r4, [r3, #0]

    buffer[start_position++] = tag;
 8006878:	5510      	strb	r0, [r2, r4]
 800687a:	1c60      	adds	r0, r4, #1
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800687c:	b280      	uxth	r0, r0
 800687e:	0a0d      	lsrs	r5, r1, #8
 8006880:	5415      	strb	r5, [r2, r0]
 8006882:	1ca0      	adds	r0, r4, #2
    buffer[start_position++] = (uint8_t )(tag_length);
 8006884:	b280      	uxth	r0, r0
 8006886:	3403      	adds	r4, #3
 8006888:	5411      	strb	r1, [r2, r0]

    *position = start_position;
 800688a:	801c      	strh	r4, [r3, #0]
 800688c:	bd30      	pop	{r4, r5, pc}

0800688e <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 800688e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8006890:	6807      	ldr	r7, [r0, #0]
 8006892:	7f85      	ldrb	r5, [r0, #30]
 8006894:	230c      	movs	r3, #12
 8006896:	fb03 7305 	mla	r3, r3, r5, r7

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 800689a:	4604      	mov	r4, r0
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 800689c:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 80068a0:	2b23      	cmp	r3, #35	; 0x23

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 80068a2:	460e      	mov	r6, r1
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80068a4:	d101      	bne.n	80068aa <optiga_cmd_queue_update_slot+0x1c>
 80068a6:	2923      	cmp	r1, #35	; 0x23
 80068a8:	d006      	beq.n	80068b8 <optiga_cmd_queue_update_slot+0x2a>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80068aa:	f7fd fd19 	bl	80042e0 <pal_os_timer_get_time_in_microseconds>
 80068ae:	230c      	movs	r3, #12
 80068b0:	fb03 7505 	mla	r5, r3, r5, r7
 80068b4:	f8c5 0634 	str.w	r0, [r5, #1588]	; 0x634
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 80068b8:	6821      	ldr	r1, [r4, #0]
 80068ba:	7fa2      	ldrb	r2, [r4, #30]
 80068bc:	230c      	movs	r3, #12
 80068be:	fb03 1202 	mla	r2, r3, r2, r1
 80068c2:	f8c2 4630 	str.w	r4, [r2, #1584]	; 0x630
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80068c6:	7fa2      	ldrb	r2, [r4, #30]
 80068c8:	fb03 1002 	mla	r0, r3, r2, r1
 80068cc:	f500 65c7 	add.w	r5, r0, #1592	; 0x638
 80068d0:	f890 0638 	ldrb.w	r0, [r0, #1592]	; 0x638
 80068d4:	2823      	cmp	r0, #35	; 0x23
 80068d6:	d104      	bne.n	80068e2 <optiga_cmd_queue_update_slot+0x54>
 80068d8:	2e23      	cmp	r6, #35	; 0x23
 80068da:	d102      	bne.n	80068e2 <optiga_cmd_queue_update_slot+0x54>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 80068dc:	2308      	movs	r3, #8
 80068de:	706b      	strb	r3, [r5, #1]
 80068e0:	e004      	b.n	80068ec <optiga_cmd_queue_update_slot+0x5e>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 80068e2:	fb03 1302 	mla	r3, r3, r2, r1
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	7fa2      	ldrb	r2, [r4, #30]
 80068f0:	210c      	movs	r1, #12
 80068f2:	fb01 3302 	mla	r3, r1, r2, r3
 80068f6:	f883 6638 	strb.w	r6, [r3, #1592]	; 0x638
 80068fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068fc <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 80068fc:	b510      	push	{r4, lr}
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 80068fe:	6801      	ldr	r1, [r0, #0]
 8006900:	7f82      	ldrb	r2, [r0, #30]
 8006902:	230c      	movs	r3, #12
 8006904:	fb03 1202 	mla	r2, r3, r2, r1
 8006908:	f04f 34ff 	mov.w	r4, #4294967295
 800690c:	f8c2 4634 	str.w	r4, [r2, #1588]	; 0x634
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8006910:	7f82      	ldrb	r2, [r0, #30]
 8006912:	fb03 1202 	mla	r2, r3, r2, r1
 8006916:	2400      	movs	r4, #0
 8006918:	f8c2 4630 	str.w	r4, [r2, #1584]	; 0x630
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 800691c:	7f82      	ldrb	r2, [r0, #30]
 800691e:	fb03 1202 	mla	r2, r3, r2, r1
 8006922:	f882 4638 	strb.w	r4, [r2, #1592]	; 0x638
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8006926:	6801      	ldr	r1, [r0, #0]
 8006928:	7f82      	ldrb	r2, [r0, #30]
 800692a:	fb03 1302 	mla	r3, r3, r2, r1
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8006934:	6802      	ldr	r2, [r0, #0]
 8006936:	4903      	ldr	r1, [pc, #12]	; (8006944 <optiga_cmd_queue_reset_slot+0x48>)
 8006938:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
}
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8006940:	f7fd bc9a 	b.w	8004278 <pal_os_event_start>
 8006944:	080076e5 	.word	0x080076e5

08006948 <optiga_cmd_execute_handler>:
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8006948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800694a:	4604      	mov	r4, r0
    uint8_t exit_loop = TRUE;
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 800694c:	460d      	mov	r5, r1
 800694e:	b1b9      	cbz	r1, 8006980 <optiga_cmd_execute_handler+0x38>
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8006950:	7e43      	ldrb	r3, [r0, #25]
 8006952:	b193      	cbz	r3, 800697a <optiga_cmd_execute_handler+0x32>
 8006954:	7f03      	ldrb	r3, [r0, #28]
 8006956:	2b22      	cmp	r3, #34	; 0x22
 8006958:	d10f      	bne.n	800697a <optiga_cmd_execute_handler+0x32>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 800695a:	6800      	ldr	r0, [r0, #0]
 800695c:	2100      	movs	r1, #0
 800695e:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 8006962:	2208      	movs	r2, #8
 8006964:	f7fd fca8 	bl	80042b8 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8006968:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800696a:	2833      	cmp	r0, #51	; 0x33
 800696c:	d105      	bne.n	800697a <optiga_cmd_execute_handler+0x32>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                     me->p_optiga->optiga_context_handle_buffer,
 800696e:	6821      	ldr	r1, [r4, #0]
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8006970:	2208      	movs	r2, #8
 8006972:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8006976:	f7fd fc0b 	bl	8004190 <pal_os_datastore_write>
    if (OPTIGA_LIB_SUCCESS != event)
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 800697a:	2304      	movs	r3, #4
 800697c:	75a3      	strb	r3, [r4, #22]
        me->exit_status = event;
 800697e:	8425      	strh	r5, [r4, #32]
        *exit_loop = TRUE;
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8006980:	2301      	movs	r3, #1
        me->exit_status = event;
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8006982:	7da2      	ldrb	r2, [r4, #22]
 8006984:	2a04      	cmp	r2, #4
 8006986:	f200 81bf 	bhi.w	8006d08 <optiga_cmd_execute_handler+0x3c0>
 800698a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800698e:	0005      	.short	0x0005
 8006990:	0081003c 	.word	0x0081003c
 8006994:	01b300e0 	.word	0x01b300e0
_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8006998:	7de5      	ldrb	r5, [r4, #23]
 800699a:	2d01      	cmp	r5, #1
 800699c:	d015      	beq.n	80069ca <optiga_cmd_execute_handler+0x82>
 800699e:	d30c      	bcc.n	80069ba <optiga_cmd_execute_handler+0x72>
 80069a0:	2d02      	cmp	r5, #2
 80069a2:	f040 80c4 	bne.w	8006b2e <optiga_cmd_execute_handler+0x1e6>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	49a8      	ldr	r1, [pc, #672]	; (8006c4c <optiga_cmd_execute_handler+0x304>)
 80069aa:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 80069ae:	4622      	mov	r2, r4
 80069b0:	2332      	movs	r3, #50	; 0x32
 80069b2:	f7fd fc51 	bl	8004258 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 80069b6:	75a5      	strb	r5, [r4, #22]
 80069b8:	e105      	b.n	8006bc6 <optiga_cmd_execute_handler+0x27e>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
 80069ba:	4620      	mov	r0, r4
 80069bc:	2121      	movs	r1, #33	; 0x21
 80069be:	f7ff ff66 	bl	800688e <optiga_cmd_queue_update_slot>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80069c2:	2300      	movs	r3, #0
 80069c4:	8423      	strh	r3, [r4, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e0fe      	b.n	8006bc8 <optiga_cmd_execute_handler+0x280>
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	7ea2      	ldrb	r2, [r4, #26]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	7ee2      	ldrb	r2, [r4, #27]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	73da      	strb	r2, [r3, #15]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	7f22      	ldrb	r2, [r4, #28]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	741a      	strb	r2, [r3, #16]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 80069ea:	6143      	str	r3, [r0, #20]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 80069ec:	4621      	mov	r1, r4
 80069ee:	f7ff fdef 	bl	80065d0 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f7ff fdef 	bl	80065d8 <optiga_comms_open>
 80069fa:	8420      	strh	r0, [r4, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f040 8096 	bne.w	8006b2e <optiga_cmd_execute_handler+0x1e6>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0e0      	b.n	8006bc8 <optiga_cmd_execute_handler+0x280>
_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        switch (me->cmd_sub_execution_state)
 8006a06:	7de3      	ldrb	r3, [r4, #23]
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d002      	beq.n	8006a12 <optiga_cmd_execute_handler+0xca>
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d031      	beq.n	8006a74 <optiga_cmd_execute_handler+0x12c>
 8006a10:	e08d      	b.n	8006b2e <optiga_cmd_execute_handler+0x1e6>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8006a12:	7f23      	ldrb	r3, [r4, #28]
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8006a14:	7ea2      	ldrb	r2, [r4, #26]
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8006a16:	2b22      	cmp	r3, #34	; 0x22
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8006a18:	bf1c      	itt	ne
 8006a1a:	2304      	movne	r3, #4
 8006a1c:	75e3      	strbne	r3, [r4, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	7ee2      	ldrb	r2, [r4, #27]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	73da      	strb	r2, [r3, #15]
                if (0 != me->p_optiga->protection_level_state)
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	f893 2688 	ldrb.w	r2, [r3, #1672]	; 0x688
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	b10a      	cbz	r2, 8006a3a <optiga_cmd_execute_handler+0xf2>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8006a36:	7f22      	ldrb	r2, [r4, #28]
 8006a38:	e000      	b.n	8006a3c <optiga_cmd_execute_handler+0xf4>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8006a3a:	2233      	movs	r2, #51	; 0x33
 8006a3c:	741a      	strb	r2, [r3, #16]
                }
                me->p_optiga->protection_level_state = 0;
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8006a4e:	2504      	movs	r5, #4
 8006a50:	75e5      	strb	r5, [r4, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8006a52:	4621      	mov	r1, r4
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8006a54:	6143      	str	r3, [r0, #20]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8006a56:	f7ff fdbb 	bl	80065d0 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f7ff fdff 	bl	8006660 <optiga_comms_close>
 8006a62:	8420      	strh	r0, [r4, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8006a64:	b108      	cbz	r0, 8006a6a <optiga_cmd_execute_handler+0x122>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8006a66:	75a5      	strb	r5, [r4, #22]
 8006a68:	e063      	b.n	8006b32 <optiga_cmd_execute_handler+0x1ea>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8006a6a:	7f23      	ldrb	r3, [r4, #28]
 8006a6c:	2b22      	cmp	r3, #34	; 0x22
 8006a6e:	d109      	bne.n	8006a84 <optiga_cmd_execute_handler+0x13c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8006a70:	75e5      	strb	r5, [r4, #23]
 8006a72:	e14c      	b.n	8006d0e <optiga_cmd_execute_handler+0x3c6>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 8006a74:	6923      	ldr	r3, [r4, #16]
 8006a76:	68e0      	ldr	r0, [r4, #12]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8006a7c:	7f23      	ldrb	r3, [r4, #28]
 8006a7e:	2b22      	cmp	r3, #34	; 0x22
 8006a80:	f040 8145 	bne.w	8006d0e <optiga_cmd_execute_handler+0x3c6>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
    optiga_cmd_queue_reset_slot(me);
 8006a84:	4620      	mov	r0, r4
 8006a86:	f7ff ff39 	bl	80068fc <optiga_cmd_queue_reset_slot>
                    *exit_loop = TRUE;
                }
                // For synchronous behavior: After exit from optiga_comms_close, release lock
                else
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	8423      	strh	r3, [r4, #32]
 8006a8e:	e13e      	b.n	8006d0e <optiga_cmd_execute_handler+0x3c6>
_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
    do
    {
        switch (me->cmd_sub_execution_state)
 8006a90:	7de3      	ldrb	r3, [r4, #23]
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
}

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8006a92:	6861      	ldr	r1, [r4, #4]
    do
    {
        switch (me->cmd_sub_execution_state)
 8006a94:	1f5a      	subs	r2, r3, #5
 8006a96:	2a03      	cmp	r2, #3
 8006a98:	d849      	bhi.n	8006b2e <optiga_cmd_execute_handler+0x1e6>
 8006a9a:	e8df f002 	tbb	[pc, r2]
 8006a9e:	0202      	.short	0x0202
 8006aa0:	140d      	.short	0x140d
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8006aa2:	2b05      	cmp	r3, #5
}


optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f04f 0500 	mov.w	r5, #0
 8006aaa:	bf0c      	ite	eq
 8006aac:	2122      	moveq	r1, #34	; 0x22
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
 8006aae:	2121      	movne	r1, #33	; 0x21
 8006ab0:	f7ff feed 	bl	800688e <optiga_cmd_queue_update_slot>
                {
                    me->exit_status = optiga_cmd_request_session(me);
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8006ab4:	8425      	strh	r5, [r4, #32]
 8006ab6:	e086      	b.n	8006bc6 <optiga_cmd_execute_handler+0x27e>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
    optiga_cmd_queue_update_slot(me , lock_type);
 8006ab8:	4620      	mov	r0, r4
 8006aba:	2123      	movs	r1, #35	; 0x23
 8006abc:	f7ff fee7 	bl	800688e <optiga_cmd_queue_update_slot>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
                break;
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	8423      	strh	r3, [r4, #32]
 8006ac4:	e07f      	b.n	8006bc6 <optiga_cmd_execute_handler+0x27e>
                break;
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
                me->exit_status = optiga_cmd_handler(me);
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	4788      	blx	r1
 8006aca:	8420      	strh	r0, [r4, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8006acc:	b118      	cbz	r0, 8006ad6 <optiga_cmd_execute_handler+0x18e>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8006ace:	2304      	movs	r3, #4
 8006ad0:	75a3      	strb	r3, [r4, #22]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e755      	b.n	8006982 <optiga_cmd_execute_handler+0x3a>
                    *exit_loop = FALSE;
                    break;
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	f240 6222 	movw	r2, #1570	; 0x622
 8006adc:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	7ea2      	ldrb	r2, [r4, #26]
 8006ae2:	739a      	strb	r2, [r3, #14]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	7ee2      	ldrb	r2, [r4, #27]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	73da      	strb	r2, [r3, #15]
                me->p_optiga->protection_level_state |= me->protection_level;
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	7ea1      	ldrb	r1, [r4, #26]
 8006af0:	f892 3688 	ldrb.w	r3, [r2, #1672]	; 0x688
 8006af4:	430b      	orrs	r3, r1
 8006af6:	f882 3688 	strb.w	r3, [r2, #1672]	; 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	4621      	mov	r1, r4
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	f7ff fd66 	bl	80065d0 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	1d98      	adds	r0, r3, #6
 8006b08:	889a      	ldrh	r2, [r3, #4]
 8006b0a:	9000      	str	r0, [sp, #0]
                                                          me->p_optiga->optiga_comms_buffer,
                                                          me->p_optiga->comms_tx_size,
                                                          me->p_optiga->optiga_comms_buffer,
 8006b0c:	f103 010d 	add.w	r1, r3, #13
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->protection_level_state |= me->protection_level;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8006b10:	6818      	ldr	r0, [r3, #0]
 8006b12:	460b      	mov	r3, r1
 8006b14:	f7ff fd7e 	bl	8006614 <optiga_comms_transceive>
 8006b18:	8420      	strh	r0, [r4, #32]
                                                          me->p_optiga->optiga_comms_buffer,
                                                          me->p_optiga->comms_tx_size,
                                                          me->p_optiga->optiga_comms_buffer,
                                                          &(me->p_optiga->comms_rx_size));

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8006b1a:	b940      	cbnz	r0, 8006b2e <optiga_cmd_execute_handler+0x1e6>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
                    break;
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	75a3      	strb	r3, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8006b20:	2309      	movs	r3, #9
 8006b22:	75e3      	strb	r3, [r4, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8006b24:	7f63      	ldrb	r3, [r4, #29]
 8006b26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b2a:	7763      	strb	r3, [r4, #29]
 8006b2c:	e0ef      	b.n	8006d0e <optiga_cmd_execute_handler+0x3c6>
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8006b2e:	2304      	movs	r3, #4
 8006b30:	75a3      	strb	r3, [r4, #22]
 8006b32:	f240 2302 	movw	r3, #514	; 0x202
 8006b36:	8423      	strh	r3, [r4, #32]
 8006b38:	e7cb      	b.n	8006ad2 <optiga_cmd_execute_handler+0x18a>
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
    do
    {
        *exit_loop = TRUE;
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8006b3a:	f994 201d 	ldrsb.w	r2, [r4, #29]
    } while (FALSE);
}

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8006b3e:	6863      	ldr	r3, [r4, #4]
    do
    {
        *exit_loop = TRUE;
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	db15      	blt.n	8006b70 <optiga_cmd_execute_handler+0x228>
        {
            me->exit_status = optiga_cmd_handler(me);
        }
        else
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8006b44:	2304      	movs	r3, #4
 8006b46:	75a3      	strb	r3, [r4, #22]
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
            break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8006b48:	7da3      	ldrb	r3, [r4, #22]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d1c1      	bne.n	8006ad2 <optiga_cmd_execute_handler+0x18a>

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        switch (me->cmd_sub_execution_state)
 8006b4e:	7de3      	ldrb	r3, [r4, #23]
 8006b50:	3b09      	subs	r3, #9
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	f200 80c8 	bhi.w	8006ce8 <optiga_cmd_execute_handler+0x3a0>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <optiga_cmd_execute_handler+0x218>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b3b 	.word	0x08006b3b
 8006b64:	08006be5 	.word	0x08006be5
 8006b68:	08006cdd 	.word	0x08006cdd
 8006b6c:	08006cfb 	.word	0x08006cfb
    do
    {
        *exit_loop = TRUE;
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
        {
            me->exit_status = optiga_cmd_handler(me);
 8006b70:	4620      	mov	r0, r4
 8006b72:	4798      	blx	r3
 8006b74:	8420      	strh	r0, [r4, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8006b76:	bb48      	cbnz	r0, 8006bcc <optiga_cmd_execute_handler+0x284>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8006b78:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006b7c:	2bf1      	cmp	r3, #241	; 0xf1
 8006b7e:	d10c      	bne.n	8006b9a <optiga_cmd_execute_handler+0x252>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	4932      	ldr	r1, [pc, #200]	; (8006c4c <optiga_cmd_execute_handler+0x304>)
 8006b84:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 8006b88:	4622      	mov	r2, r4
 8006b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b8e:	f7fd fb63 	bl	8004258 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8006b92:	2301      	movs	r3, #1
 8006b94:	75a3      	strb	r3, [r4, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e016      	b.n	8006bc8 <optiga_cmd_execute_handler+0x280>
            }
            else
            {
                if (FALSE == me->chaining_ongoing)
 8006b9a:	7e23      	ldrb	r3, [r4, #24]
 8006b9c:	b923      	cbnz	r3, 8006ba8 <optiga_cmd_execute_handler+0x260>
                {
                    if (OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state)
 8006b9e:	7de3      	ldrb	r3, [r4, #23]
 8006ba0:	2b0c      	cmp	r3, #12
 8006ba2:	d0d1      	beq.n	8006b48 <optiga_cmd_execute_handler+0x200>
                    {
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8006ba4:	230b      	movs	r3, #11
 8006ba6:	e09d      	b.n	8006ce4 <optiga_cmd_execute_handler+0x39c>
                    break;
                }
                // for chaining, trigger preparing of next command
                else
                {
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	4928      	ldr	r1, [pc, #160]	; (8006c4c <optiga_cmd_execute_handler+0x304>)
 8006bac:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bb6:	f7fd fb4f 	bl	8004258 <pal_os_event_register_callback_oneshot>
                                                           (void*)me,
                                                           OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                    *exit_loop = TRUE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8006bba:	7ea3      	ldrb	r3, [r4, #26]
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	76a3      	strb	r3, [r4, #26]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	75a3      	strb	r3, [r4, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	75e3      	strb	r3, [r4, #23]
 8006bca:	e0a0      	b.n	8006d0e <optiga_cmd_execute_handler+0x3c6>
            }
        }
        else
        {
            // After OPTIGA error is analyzed, invoke upper layer handler and release lock
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8006bcc:	f5b0 7f01 	cmp.w	r0, #516	; 0x204
 8006bd0:	d0e8      	beq.n	8006ba4 <optiga_cmd_execute_handler+0x25c>
                break;
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8006bd2:	230a      	movs	r3, #10
 8006bd4:	75e3      	strb	r3, [r4, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8006bd6:	7f63      	ldrb	r3, [r4, #29]
 8006bd8:	f023 0303 	bic.w	r3, r3, #3
 8006bdc:	f043 0301 	orr.w	r3, r3, #1
 8006be0:	7763      	strb	r3, [r4, #29]
 8006be2:	e7b1      	b.n	8006b48 <optiga_cmd_execute_handler+0x200>
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8006be4:	7f67      	ldrb	r7, [r4, #29]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 8006be6:	6826      	ldr	r6, [r4, #0]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8006be8:	f007 0703 	and.w	r7, r7, #3
 8006bec:	2f02      	cmp	r7, #2
 8006bee:	d02f      	beq.n	8006c50 <optiga_cmd_execute_handler+0x308>
 8006bf0:	2f03      	cmp	r7, #3
 8006bf2:	d04e      	beq.n	8006c92 <optiga_cmd_execute_handler+0x34a>
 8006bf4:	2f01      	cmp	r7, #1
 8006bf6:	d161      	bne.n	8006cbc <optiga_cmd_execute_handler+0x374>
    {
        case OPTIGA_CMD_ERROR_CODE_PREPARE:
        {
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 8006bf8:	f106 0016 	add.w	r0, r6, #22
 8006bfc:	f24f 11c2 	movw	r1, #61890	; 0xf1c2
 8006c00:	f7ff fd4a 	bl	8006698 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	2100      	movs	r1, #0
 8006c08:	3018      	adds	r0, #24
 8006c0a:	f7ff fd45 	bl	8006698 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	4639      	mov	r1, r7
 8006c12:	301a      	adds	r0, #26
 8006c14:	f7ff fd40 	bl	8006698 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
                                           OPTIGA_CMD_PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8006c18:	6823      	ldr	r3, [r4, #0]

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8006c1a:	490c      	ldr	r1, [pc, #48]	; (8006c4c <optiga_cmd_execute_handler+0x304>)
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8006c1c:	749f      	strb	r7, [r3, #18]
    p_apdu_buffer [1] = param;
 8006c1e:	2200      	movs	r2, #0
 8006c20:	74da      	strb	r2, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8006c22:	751a      	strb	r2, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8006c24:	2206      	movs	r2, #6
 8006c26:	755a      	strb	r2, [r3, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
                                           OPTIGA_CMD_PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	230a      	movs	r3, #10
 8006c2c:	8093      	strh	r3, [r2, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8006c2e:	7f63      	ldrb	r3, [r4, #29]
 8006c30:	f023 0303 	bic.w	r3, r3, #3
 8006c34:	f043 0302 	orr.w	r3, r3, #2
 8006c38:	7763      	strb	r3, [r4, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8006c3a:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 8006c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c42:	4622      	mov	r2, r4
 8006c44:	f7fd fb08 	bl	8004258 <pal_os_event_register_callback_oneshot>
 8006c48:	e038      	b.n	8006cbc <optiga_cmd_execute_handler+0x374>
 8006c4a:	bf00      	nop
 8006c4c:	08006d19 	.word	0x08006d19
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8006c50:	f240 6322 	movw	r3, #1570	; 0x622
 8006c54:	80f3      	strh	r3, [r6, #6]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8006c56:	6833      	ldr	r3, [r6, #0]
 8006c58:	7ea2      	ldrb	r2, [r4, #26]
 8006c5a:	739a      	strb	r2, [r3, #14]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	7ee2      	ldrb	r2, [r4, #27]
 8006c60:	681b      	ldr	r3, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8006c62:	4635      	mov	r5, r6
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8006c64:	73da      	strb	r2, [r3, #15]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8006c66:	f855 0b0d 	ldr.w	r0, [r5], #13
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	f7ff fcb0 	bl	80065d0 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8006c70:	1db3      	adds	r3, r6, #6
 8006c72:	88b2      	ldrh	r2, [r6, #4]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	4629      	mov	r1, r5
 8006c78:	462b      	mov	r3, r5
 8006c7a:	6830      	ldr	r0, [r6, #0]
 8006c7c:	f7ff fcca 	bl	8006614 <optiga_comms_transceive>
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
 8006c80:	4605      	mov	r5, r0
 8006c82:	b9c0      	cbnz	r0, 8006cb6 <optiga_cmd_execute_handler+0x36e>
            {
                return_status = OPTIGA_CMD_ERROR;
                break;
            }
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 8006c84:	7f63      	ldrb	r3, [r4, #29]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	f043 0303 	orr.w	r3, r3, #3
 8006c8e:	7763      	strb	r3, [r4, #29]
 8006c90:	e016      	b.n	8006cc0 <optiga_cmd_execute_handler+0x378>
        }
        break;
        case OPTIGA_CMD_ERROR_CODE_RX:
        {
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8006c92:	7cb3      	ldrb	r3, [r6, #18]
 8006c94:	2bff      	cmp	r3, #255	; 0xff
 8006c96:	d011      	beq.n	8006cbc <optiga_cmd_execute_handler+0x374>
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8006c98:	7db5      	ldrb	r5, [r6, #22]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8006c9a:	f8d6 0678 	ldr.w	r0, [r6, #1656]	; 0x678
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
            return_status = return_status | OPTIGA_DEVICE_ERROR;
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8006c9e:	75a7      	strb	r7, [r4, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8006ca0:	2309      	movs	r3, #9
 8006ca2:	75e3      	strb	r3, [r4, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8006ca4:	491b      	ldr	r1, [pc, #108]	; (8006d14 <optiga_cmd_execute_handler+0x3cc>)
 8006ca6:	4622      	mov	r2, r4
 8006ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                break;
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8006cac:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8006cb0:	f7fd fad2 	bl	8004258 <pal_os_event_register_callback_oneshot>
 8006cb4:	e004      	b.n	8006cc0 <optiga_cmd_execute_handler+0x378>
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
            {
                return_status = OPTIGA_CMD_ERROR;
 8006cb6:	f240 2502 	movw	r5, #514	; 0x202
 8006cba:	e001      	b.n	8006cc0 <optiga_cmd_execute_handler+0x378>
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8006cbc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8006cc0:	b22b      	sxth	r3, r5
 8006cc2:	2b00      	cmp	r3, #0
_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8006cc4:	8425      	strh	r5, [r4, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8006cc6:	f73f af3d 	bgt.w	8006b44 <optiga_cmd_execute_handler+0x1fc>
 8006cca:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8006cce:	d11e      	bne.n	8006d0e <optiga_cmd_execute_handler+0x3c6>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8006cd0:	7f63      	ldrb	r3, [r4, #29]
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d119      	bne.n	8006d0e <optiga_cmd_execute_handler+0x3c6>
 8006cda:	e733      	b.n	8006b44 <optiga_cmd_execute_handler+0x1fc>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
    optiga_cmd_queue_reset_slot(me);
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff fe0d 	bl	80068fc <optiga_cmd_queue_reset_slot>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	75e3      	strb	r3, [r4, #23]
 8006ce6:	e72f      	b.n	8006b48 <optiga_cmd_execute_handler+0x200>
                me->handler(me->caller_context, me->exit_status);
                *exit_loop = TRUE;
                break;
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8006ce8:	2304      	movs	r3, #4
 8006cea:	75a3      	strb	r3, [r4, #22]
 8006cec:	f240 2302 	movw	r3, #514	; 0x202
 8006cf0:	8423      	strh	r3, [r4, #32]
 8006cf2:	e729      	b.n	8006b48 <optiga_cmd_execute_handler+0x200>
    return (OPTIGA_CMD_SUCCESS);
}

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
    optiga_cmd_queue_reset_slot(me);
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f7ff fe01 	bl	80068fc <optiga_cmd_queue_reset_slot>
{
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
        me->handler(me->caller_context, me->exit_status);
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	68e0      	ldr	r0, [r4, #12]
 8006cfe:	8c21      	ldrh	r1, [r4, #32]
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
}
 8006d00:	b003      	add	sp, #12
 8006d02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
{
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
        me->handler(me->caller_context, me->exit_status);
 8006d06:	4718      	bx	r3
            }
            default :
                break;
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f43f aee2 	beq.w	8006ad2 <optiga_cmd_execute_handler+0x18a>
}
 8006d0e:	b003      	add	sp, #12
 8006d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d12:	bf00      	nop
 8006d14:	08006d19 	.word	0x08006d19

08006d18 <optiga_cmd_event_trigger_execute>:
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 8006d18:	2100      	movs	r1, #0
 8006d1a:	f7ff be15 	b.w	8006948 <optiga_cmd_execute_handler>

08006d1e <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 8006d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 8006d20:	7d83      	ldrb	r3, [r0, #22]
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 8006d22:	6884      	ldr	r4, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 8006d24:	2b02      	cmp	r3, #2

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 8006d26:	4606      	mov	r6, r0
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
    switch ((uint8_t)me->cmd_next_execution_state)
 8006d28:	d002      	beq.n	8006d30 <optiga_cmd_get_data_object_handler+0x12>
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d034      	beq.n	8006d98 <optiga_cmd_get_data_object_handler+0x7a>
 8006d2e:	e074      	b.n	8006e1a <optiga_cmd_get_data_object_handler+0xfc>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                break;
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006d30:	6800      	ldr	r0, [r0, #0]
 8006d32:	8821      	ldrh	r1, [r4, #0]
 8006d34:	3016      	adds	r0, #22
 8006d36:	f7ff fcaf 	bl	8006698 <optiga_common_set_uint16>
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8006d3a:	88e1      	ldrh	r1, [r4, #6]
 8006d3c:	88a3      	ldrh	r3, [r4, #4]
 8006d3e:	f240 6211 	movw	r2, #1553	; 0x611
 8006d42:	1a5b      	subs	r3, r3, r1
 8006d44:	4293      	cmp	r3, r2
 8006d46:	bfa8      	it	ge
 8006d48:	4613      	movge	r3, r2
 8006d4a:	b29d      	uxth	r5, r3
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 8006d4c:	7aa3      	ldrb	r3, [r4, #10]
 8006d4e:	b96b      	cbnz	r3, 8006d6c <optiga_cmd_get_data_object_handler+0x4e>
            {
                //offset
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006d50:	8863      	ldrh	r3, [r4, #2]
 8006d52:	6830      	ldr	r0, [r6, #0]
 8006d54:	4419      	add	r1, r3
 8006d56:	3018      	adds	r0, #24
 8006d58:	b289      	uxth	r1, r1
 8006d5a:	f7ff fc9d 	bl	8006698 <optiga_common_set_uint16>
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                //length
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006d5e:	6830      	ldr	r0, [r6, #0]
 8006d60:	4629      	mov	r1, r5
 8006d62:	301a      	adds	r0, #26
 8006d64:	f7ff fc98 	bl	8006698 <optiga_common_set_uint16>
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006d68:	230f      	movs	r3, #15
 8006d6a:	e000      	b.n	8006d6e <optiga_cmd_get_data_object_handler+0x50>
                break;
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006d6c:	230b      	movs	r3, #11
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8006d6e:	8822      	ldrh	r2, [r4, #0]
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
 8006d70:	7e70      	ldrb	r0, [r6, #25]
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 8006d72:	f24f 11c2 	movw	r1, #61890	; 0xf1c2
 8006d76:	428a      	cmp	r2, r1
 8006d78:	bf14      	ite	ne
 8006d7a:	2181      	movne	r1, #129	; 0x81
 8006d7c:	2101      	moveq	r1, #1
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 8006d7e:	6832      	ldr	r2, [r6, #0]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8006d80:	7491      	strb	r1, [r2, #18]
    p_apdu_buffer [1] = param;
 8006d82:	74d0      	strb	r0, [r2, #19]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
 8006d84:	f1a3 0109 	sub.w	r1, r3, #9
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8006d88:	2000      	movs	r0, #0
 8006d8a:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8006d8c:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(cmd,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 8006d8e:	6832      	ldr	r2, [r6, #0]
 8006d90:	3b05      	subs	r3, #5
 8006d92:	8093      	strh	r3, [r2, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 8006d94:	8125      	strh	r5, [r4, #8]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
 8006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
 8006d98:	2300      	movs	r3, #0
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8006d9a:	6801      	ldr	r1, [r0, #0]
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
 8006d9c:	7603      	strb	r3, [r0, #24]
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8006d9e:	7c8d      	ldrb	r5, [r1, #18]
 8006da0:	b165      	cbz	r5, 8006dbc <optiga_cmd_get_data_object_handler+0x9e>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                //check if it is out of boundary issue
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 8006da2:	88e2      	ldrh	r2, [r4, #6]
 8006da4:	7f43      	ldrb	r3, [r0, #29]
 8006da6:	b11a      	cbz	r2, 8006db0 <optiga_cmd_get_data_object_handler+0x92>
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8006da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dac:	7743      	strb	r3, [r0, #29]
 8006dae:	e034      	b.n	8006e1a <optiga_cmd_get_data_object_handler+0xfc>
                //flag used to setting the received buffer length to 0, in case unexpected error
                else
                {
                    //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8006db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db4:	7743      	strb	r3, [r0, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8006db6:	68e3      	ldr	r3, [r4, #12]
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	e02e      	b.n	8006e1a <optiga_cmd_get_data_object_handler+0xfc>
                }
                return_status = OPTIGA_CMD_ERROR;
            }
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 8006dbc:	8c02      	ldrh	r2, [r0, #32]
 8006dbe:	f248 0308 	movw	r3, #32776	; 0x8008
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d103      	bne.n	8006dce <optiga_cmd_get_data_object_handler+0xb0>
            {
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8006dc6:	68e3      	ldr	r3, [r4, #12]
 8006dc8:	88e2      	ldrh	r2, [r4, #6]
 8006dca:	801a      	strh	r2, [r3, #0]
 8006dcc:	e023      	b.n	8006e16 <optiga_cmd_get_data_object_handler+0xf8>
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8006dce:	88cf      	ldrh	r7, [r1, #6]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
 8006dd0:	88a3      	ldrh	r3, [r4, #4]
                return_status = OPTIGA_LIB_SUCCESS;
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8006dd2:	3f04      	subs	r7, #4
 8006dd4:	b2bf      	uxth	r7, r7

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
 8006dd6:	42bb      	cmp	r3, r7
 8006dd8:	d204      	bcs.n	8006de4 <optiga_cmd_get_data_object_handler+0xc6>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8006dda:	68e3      	ldr	r3, [r4, #12]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8006ddc:	f44f 7001 	mov.w	r0, #516	; 0x204
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8006de0:	801d      	strh	r5, [r3, #0]
                    break;
 8006de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                }

                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8006de4:	88e3      	ldrh	r3, [r4, #6]
 8006de6:	6920      	ldr	r0, [r4, #16]
 8006de8:	463a      	mov	r2, r7
 8006dea:	4418      	add	r0, r3
 8006dec:	3116      	adds	r1, #22
 8006dee:	f7fd fa61 	bl	80042b4 <pal_os_memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 8006df2:	88e3      	ldrh	r3, [r4, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
 8006df4:	8922      	ldrh	r2, [r4, #8]
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 8006df6:	443b      	add	r3, r7
 8006df8:	b29b      	uxth	r3, r3

                if ((p_optiga_read_data->last_read_size > data_read) ||
 8006dfa:	42ba      	cmp	r2, r7
                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 8006dfc:	80e3      	strh	r3, [r4, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
 8006dfe:	d802      	bhi.n	8006e06 <optiga_cmd_get_data_object_handler+0xe8>
 8006e00:	88a2      	ldrh	r2, [r4, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d105      	bne.n	8006e12 <optiga_cmd_get_data_object_handler+0xf4>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8006e06:	68e2      	ldr	r2, [r4, #12]
                    p_optiga_read_data->accumulated_size = 0;
 8006e08:	2000      	movs	r0, #0
                p_optiga_read_data->accumulated_size += data_read;

                if ((p_optiga_read_data->last_read_size > data_read) ||
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8006e0a:	8013      	strh	r3, [r2, #0]
                    p_optiga_read_data->accumulated_size = 0;
 8006e0c:	80e0      	strh	r0, [r4, #6]
                    p_optiga_read_data->last_read_size = 0;
 8006e0e:	8120      	strh	r0, [r4, #8]
 8006e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                }
                else
                {
                    me->chaining_ongoing = TRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	7633      	strb	r3, [r6, #24]
                }
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
                return_status = OPTIGA_LIB_SUCCESS;
 8006e16:	4628      	mov	r0, r5
 8006e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8006e1a:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 8006e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e20 <optiga_cmd_set_data_object_handler>:

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8006e22:	7d83      	ldrb	r3, [r0, #22]
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
 8006e24:	6885      	ldr	r5, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8006e26:	2b02      	cmp	r3, #2

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
 8006e28:	4604      	mov	r4, r0
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8006e2a:	d002      	beq.n	8006e32 <optiga_cmd_set_data_object_handler+0x12>
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d047      	beq.n	8006ec0 <optiga_cmd_set_data_object_handler+0xa0>
 8006e30:	e04e      	b.n	8006ed0 <optiga_cmd_set_data_object_handler+0xb0>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
            me->chaining_ongoing = FALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	7603      	strb	r3, [r0, #24]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006e36:	6800      	ldr	r0, [r0, #0]
 8006e38:	8829      	ldrh	r1, [r5, #0]
 8006e3a:	3016      	adds	r0, #22
 8006e3c:	f7ff fc2c 	bl	8006698 <optiga_common_set_uint16>
                                     p_optiga_write_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            //offset
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006e40:	886b      	ldrh	r3, [r5, #2]
 8006e42:	88e9      	ldrh	r1, [r5, #6]
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	4419      	add	r1, r3
 8006e48:	3018      	adds	r0, #24
 8006e4a:	b289      	uxth	r1, r1
 8006e4c:	f7ff fc24 	bl	8006698 <optiga_common_set_uint16>
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // Check maximum size that can be written, based on optiga comms buffer size
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
 8006e50:	88ab      	ldrh	r3, [r5, #4]
 8006e52:	88ee      	ldrh	r6, [r5, #6]
 8006e54:	1b9e      	subs	r6, r3, r6
 8006e56:	f240 630d 	movw	r3, #1549	; 0x60d
 8006e5a:	429e      	cmp	r6, r3
 8006e5c:	bfa8      	it	ge
 8006e5e:	461e      	movge	r6, r3
 8006e60:	b2b6      	uxth	r6, r6
                               ((p_optiga_write_data->size) - p_optiga_write_data->written_size));

            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8006e62:	f106 0708 	add.w	r7, r6, #8
 8006e66:	b2bf      	uxth	r7, r7
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8006e68:	f240 6315 	movw	r3, #1557	; 0x615
 8006e6c:	429f      	cmp	r7, r3
 8006e6e:	d832      	bhi.n	8006ed6 <optiga_cmd_set_data_object_handler+0xb6>

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8006e70:	6823      	ldr	r3, [r4, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 8006e72:	7e61      	ldrb	r1, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8006e74:	74d9      	strb	r1, [r3, #19]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 8006e76:	1d32      	adds	r2, r6, #4
 8006e78:	b292      	uxth	r2, r2
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8006e7a:	2082      	movs	r0, #130	; 0x82
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8006e7c:	0a11      	lsrs	r1, r2, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8006e7e:	7498      	strb	r0, [r3, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8006e80:	7519      	strb	r1, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8006e82:	755a      	strb	r2, [r3, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
            //data to be written
            if (OPTIGA_UTIL_COUNT_DATA_OBJECT == me->cmd_param)
 8006e84:	7e63      	ldrb	r3, [r4, #25]
 8006e86:	6820      	ldr	r0, [r4, #0]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d102      	bne.n	8006e92 <optiga_cmd_set_data_object_handler+0x72>
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
 8006e8c:	7bab      	ldrb	r3, [r5, #14]
 8006e8e:	7683      	strb	r3, [r0, #26]
 8006e90:	e006      	b.n	8006ea0 <optiga_cmd_set_data_object_handler+0x80>
            }
            else
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8006e92:	88eb      	ldrh	r3, [r5, #6]
 8006e94:	68a9      	ldr	r1, [r5, #8]
 8006e96:	301a      	adds	r0, #26
 8006e98:	4419      	add	r1, r3
 8006e9a:	4632      	mov	r2, r6
 8006e9c:	f7fd fa0a 	bl	80042b4 <pal_os_memcpy>
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 8006ea0:	88eb      	ldrh	r3, [r5, #6]
 8006ea2:	441e      	add	r6, r3

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 8006ea4:	6823      	ldr	r3, [r4, #0]
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 8006ea6:	b2b6      	uxth	r6, r6
 8006ea8:	80ee      	strh	r6, [r5, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 8006eaa:	809f      	strh	r7, [r3, #4]

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 8006eac:	88ab      	ldrh	r3, [r5, #4]
 8006eae:	42b3      	cmp	r3, r6
 8006eb0:	d101      	bne.n	8006eb6 <optiga_cmd_set_data_object_handler+0x96>
            {
                me->chaining_ongoing = TRUE;
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
            }
            return_status = OPTIGA_LIB_SUCCESS;
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
            {
                me->chaining_ongoing = TRUE;
 8006eb6:	2301      	movs	r3, #1
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 8006eb8:	2000      	movs	r0, #0
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
            {
                me->chaining_ongoing = TRUE;
 8006eba:	7623      	strb	r3, [r4, #24]
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 8006ebc:	7660      	strb	r0, [r4, #25]
 8006ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8006ec0:	6803      	ldr	r3, [r0, #0]
 8006ec2:	7c9b      	ldrb	r3, [r3, #18]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f4      	beq.n	8006eb2 <optiga_cmd_set_data_object_handler+0x92>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8006ec8:	7f43      	ldrb	r3, [r0, #29]
 8006eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ece:	7743      	strb	r3, [r0, #29]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8006ed0:	f240 2002 	movw	r0, #514	; 0x202
 8006ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8006ed6:	f44f 7001 	mov.w	r0, #516	; 0x204
        break;
        default:
            break;
    }
    return (return_status);
}
 8006eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006edc <optiga_cmd_get_random_handler>:
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
 8006edc:	b538      	push	{r3, r4, r5, lr}
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8006ede:	7d84      	ldrb	r4, [r0, #22]
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
 8006ee0:	6883      	ldr	r3, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8006ee2:	2c02      	cmp	r4, #2
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
 8006ee4:	4605      	mov	r5, r0
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8006ee6:	d002      	beq.n	8006eee <optiga_cmd_get_random_handler+0x12>
 8006ee8:	2c03      	cmp	r4, #3
 8006eea:	d011      	beq.n	8006f10 <optiga_cmd_get_random_handler+0x34>
 8006eec:	e01f      	b.n	8006f2e <optiga_cmd_get_random_handler+0x52>
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending get random command...");

            /// Copy the random data length
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006eee:	6800      	ldr	r0, [r0, #0]
 8006ef0:	8819      	ldrh	r1, [r3, #0]
 8006ef2:	3016      	adds	r0, #22
 8006ef4:	f7ff fbd0 	bl	8006698 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8006ef8:	682b      	ldr	r3, [r5, #0]
            /// Copy the random data length
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_random_params->random_data_length);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
 8006efa:	7e6a      	ldrb	r2, [r5, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8006efc:	74da      	strb	r2, [r3, #19]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8006efe:	218c      	movs	r1, #140	; 0x8c
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8006f00:	2000      	movs	r0, #0
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8006f02:	7499      	strb	r1, [r3, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8006f04:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8006f06:	755c      	strb	r4, [r3, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	2206      	movs	r2, #6
 8006f0c:	809a      	strh	r2, [r3, #4]

            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for get random command...");
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8006f10:	6801      	ldr	r1, [r0, #0]
 8006f12:	7c8c      	ldrb	r4, [r1, #18]
 8006f14:	b124      	cbz	r4, 8006f20 <optiga_cmd_get_random_handler+0x44>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8006f16:	7f43      	ldrb	r3, [r0, #29]
 8006f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1c:	7743      	strb	r3, [r0, #29]
 8006f1e:	e006      	b.n	8006f2e <optiga_cmd_get_random_handler+0x52>
                break;
            }
            
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_random_params->random_data,
 8006f20:	6858      	ldr	r0, [r3, #4]
 8006f22:	881a      	ldrh	r2, [r3, #0]
 8006f24:	3116      	adds	r1, #22
 8006f26:	f7fd f9c5 	bl	80042b4 <pal_os_memcpy>
                          me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                          p_random_params->random_data_length);

            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8006f2a:	4620      	mov	r0, r4
        }
        break;
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8006f2e:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 8006f32:	bd38      	pop	{r3, r4, r5, pc}

08006f34 <optiga_cmd_calc_sign_handler>:
#ifdef OPTIGA_CRYPT_ECDSA_SIGN_ENABLED
/*
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
 8006f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8006f36:	7d85      	ldrb	r5, [r0, #22]
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
 8006f38:	6886      	ldr	r6, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8006f3a:	2309      	movs	r3, #9

    switch ((uint8_t)me->cmd_next_execution_state)
 8006f3c:	2d02      	cmp	r5, #2
#ifdef OPTIGA_CRYPT_ECDSA_SIGN_ENABLED
/*
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
 8006f3e:	4604      	mov	r4, r0
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8006f40:	f8ad 3006 	strh.w	r3, [sp, #6]

    switch ((uint8_t)me->cmd_next_execution_state)
 8006f44:	d002      	beq.n	8006f4c <optiga_cmd_calc_sign_handler+0x18>
 8006f46:	2d03      	cmp	r5, #3
 8006f48:	d03c      	beq.n	8006fc4 <optiga_cmd_calc_sign_handler+0x90>
 8006f4a:	e056      	b.n	8006ffa <optiga_cmd_calc_sign_handler+0xc6>
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_DIGEST_TAG,
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
 8006f4c:	6802      	ldr	r2, [r0, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_DIGEST_TAG,
 8006f4e:	7bb1      	ldrb	r1, [r6, #14]
 8006f50:	2001      	movs	r0, #1
 8006f52:	320d      	adds	r2, #13
 8006f54:	f10d 0306 	add.w	r3, sp, #6
 8006f58:	f7ff fc8c 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8006f5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	6831      	ldr	r1, [r6, #0]
 8006f64:	7bb2      	ldrb	r2, [r6, #14]
 8006f66:	4418      	add	r0, r3
 8006f68:	300d      	adds	r0, #13
 8006f6a:	f7fd f9a3 	bl	80042b4 <pal_os_memcpy>
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
 8006f6e:	7bb2      	ldrb	r2, [r6, #14]
 8006f70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006f74:	4413      	add	r3, r2

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_OID_TAG,
                                          OPTIGA_CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
 8006f76:	6822      	ldr	r2, [r4, #0]
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
 8006f78:	f8ad 3006 	strh.w	r3, [sp, #6]

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_OID_TAG,
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	2003      	movs	r0, #3
 8006f80:	320d      	adds	r2, #13
 8006f82:	f10d 0306 	add.w	r3, sp, #6
 8006f86:	f7ff fc75 	bl	8006874 <optiga_cmd_prepare_tag_header>
            private_key_oid = me->session_oid;
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdsa_sign->private_key_oid)
            {
                private_key_oid = (uint16_t)p_optiga_ecdsa_sign->private_key_oid;
            }
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006f8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006f8e:	6820      	ldr	r0, [r4, #0]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_OID_TAG,
                                          OPTIGA_CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //oid
            private_key_oid = me->session_oid;
 8006f90:	8aa2      	ldrh	r2, [r4, #20]
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdsa_sign->private_key_oid)
 8006f92:	89b1      	ldrh	r1, [r6, #12]
            {
                private_key_oid = (uint16_t)p_optiga_ecdsa_sign->private_key_oid;
            }
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006f94:	4418      	add	r0, r3
 8006f96:	2900      	cmp	r1, #0
 8006f98:	bf08      	it	eq
 8006f9a:	4611      	moveq	r1, r2
 8006f9c:	300d      	adds	r0, #13
 8006f9e:	f7ff fb7b 	bl	8006698 <optiga_common_set_uint16>
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006fa2:	f8bd 3006 	ldrh.w	r3, [sp, #6]

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8006fa6:	6822      	ldr	r2, [r4, #0]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
 8006fa8:	7e60      	ldrb	r0, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8006faa:	74d0      	strb	r0, [r2, #19]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
 8006fac:	1fd9      	subs	r1, r3, #7
 8006fae:	b289      	uxth	r1, r1
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8006fb0:	25b1      	movs	r5, #177	; 0xb1
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8006fb2:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8006fb4:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8006fb6:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8006fb8:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	3b03      	subs	r3, #3
 8006fbe:	8093      	strh	r3, [r2, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8006fc0:	2000      	movs	r0, #0
        }
        break;
 8006fc2:	e01c      	b.n	8006ffe <optiga_cmd_calc_sign_handler+0xca>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8006fc4:	6801      	ldr	r1, [r0, #0]
 8006fc6:	7c8d      	ldrb	r5, [r1, #18]
 8006fc8:	b985      	cbnz	r5, 8006fec <optiga_cmd_calc_sign_handler+0xb8>
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
 8006fca:	68b3      	ldr	r3, [r6, #8]
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
 8006fcc:	88ca      	ldrh	r2, [r1, #6]
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
 8006fce:	8818      	ldrh	r0, [r3, #0]
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
 8006fd0:	3a04      	subs	r2, #4
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
 8006fd2:	4290      	cmp	r0, r2
 8006fd4:	da03      	bge.n	8006fde <optiga_cmd_calc_sign_handler+0xaa>
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                    *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
 8006fd6:	801d      	strh	r5, [r3, #0]
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8006fd8:	f44f 7001 	mov.w	r0, #516	; 0x204
 8006fdc:	e00f      	b.n	8006ffe <optiga_cmd_calc_sign_handler+0xca>
                }
                else
                {
                    *(p_optiga_ecdsa_sign->p_signature_length) = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8006fde:	b292      	uxth	r2, r2
 8006fe0:	801a      	strh	r2, [r3, #0]
                    //copy signed data from optiga comms buffer to user provided buffer

                    pal_os_memcpy(p_optiga_ecdsa_sign->p_signature,
 8006fe2:	6870      	ldr	r0, [r6, #4]
 8006fe4:	3116      	adds	r1, #22
 8006fe6:	f7fd f965 	bl	80042b4 <pal_os_memcpy>
 8006fea:	e7e9      	b.n	8006fc0 <optiga_cmd_calc_sign_handler+0x8c>
            else
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8006fec:	7f43      	ldrb	r3, [r0, #29]
 8006fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff2:	7743      	strb	r3, [r0, #29]
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
 8006ff4:	68b3      	ldr	r3, [r6, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	801a      	strh	r2, [r3, #0]
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8006ffa:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 8006ffe:	b002      	add	sp, #8
 8007000:	bd70      	pop	{r4, r5, r6, pc}

08007002 <optiga_cmd_verify_sign_handler>:
#ifdef OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 8007002:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8007004:	2309      	movs	r3, #9
 8007006:	f8ad 3006 	strh.w	r3, [sp, #6]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 800700a:	7d83      	ldrb	r3, [r0, #22]
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 800700c:	6885      	ldr	r5, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 800700e:	2b02      	cmp	r3, #2
#ifdef OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 8007010:	4604      	mov	r4, r0
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007012:	d003      	beq.n	800701c <optiga_cmd_verify_sign_handler+0x1a>
 8007014:	2b03      	cmp	r3, #3
 8007016:	f000 8094 	beq.w	8007142 <optiga_cmd_verify_sign_handler+0x140>
 800701a:	e09a      	b.n	8007152 <optiga_cmd_verify_sign_handler+0x150>
 800701c:	89ab      	ldrh	r3, [r5, #12]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800701e:	7929      	ldrb	r1, [r5, #4]
 8007020:	330a      	adds	r3, #10
 8007022:	b29a      	uxth	r2, r3
 8007024:	7bab      	ldrb	r3, [r5, #14]
 8007026:	b123      	cbz	r3, 8007032 <optiga_cmd_verify_sign_handler+0x30>
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
 8007028:	692b      	ldr	r3, [r5, #16]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800702a:	889b      	ldrh	r3, [r3, #4]
 800702c:	3309      	adds	r3, #9
 800702e:	b298      	uxth	r0, r3
 8007030:	e000      	b.n	8007034 <optiga_cmd_verify_sign_handler+0x32>
 8007032:	2005      	movs	r0, #5
 8007034:	1853      	adds	r3, r2, r1
 8007036:	4403      	add	r3, r0
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8007038:	b29b      	uxth	r3, r3
 800703a:	f240 6215 	movw	r2, #1557	; 0x615
 800703e:	4293      	cmp	r3, r2
 8007040:	f200 808a 	bhi.w	8007158 <optiga_cmd_verify_sign_handler+0x156>
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
 8007044:	6822      	ldr	r2, [r4, #0]
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 8007046:	2001      	movs	r0, #1
 8007048:	320d      	adds	r2, #13
 800704a:	f10d 0306 	add.w	r3, sp, #6
 800704e:	f7ff fc11 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8007052:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007056:	6820      	ldr	r0, [r4, #0]
 8007058:	6829      	ldr	r1, [r5, #0]
 800705a:	792a      	ldrb	r2, [r5, #4]
 800705c:	4418      	add	r0, r3
 800705e:	300d      	adds	r0, #13
 8007060:	f7fd f928 	bl	80042b4 <pal_os_memcpy>
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
 8007064:	792a      	ldrb	r2, [r5, #4]
 8007066:	f8bd 3006 	ldrh.w	r3, [sp, #6]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 800706a:	89a9      	ldrh	r1, [r5, #12]
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
 800706c:	4413      	add	r3, r2

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
 800706e:	6822      	ldr	r2, [r4, #0]
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
 8007070:	f8ad 3006 	strh.w	r3, [sp, #6]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8007074:	2002      	movs	r0, #2
 8007076:	320d      	adds	r2, #13
 8007078:	f10d 0306 	add.w	r3, sp, #6
 800707c:	f7ff fbfa 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8007080:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	89aa      	ldrh	r2, [r5, #12]
 8007088:	68a9      	ldr	r1, [r5, #8]
 800708a:	4418      	add	r0, r3
 800708c:	300d      	adds	r0, #13
 800708e:	f7fd f911 	bl	80042b4 <pal_os_memcpy>
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;
 8007092:	89aa      	ldrh	r2, [r5, #12]
 8007094:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007098:	4413      	add	r3, r2
 800709a:	f8ad 3006 	strh.w	r3, [sp, #6]

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 800709e:	7bab      	ldrb	r3, [r5, #14]
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	b993      	cbnz	r3, 80070ca <optiga_cmd_verify_sign_handler+0xc8>
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 80070a4:	2004      	movs	r0, #4
 80070a6:	2102      	movs	r1, #2
 80070a8:	320d      	adds	r2, #13
 80070aa:	f10d 0306 	add.w	r3, sp, #6
 80070ae:	f7ff fbe1 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80070b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	8aa9      	ldrh	r1, [r5, #20]
 80070ba:	4418      	add	r0, r3
 80070bc:	300d      	adds	r0, #13
 80070be:	f7ff faeb 	bl	8006698 <optiga_common_set_uint16>
                                         p_optiga_verify_sign->certificate_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80070c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80070c6:	3302      	adds	r3, #2
 80070c8:	e028      	b.n	800711c <optiga_cmd_verify_sign_handler+0x11a>
            }
            else
            {
                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 80070ca:	2005      	movs	r0, #5
 80070cc:	2101      	movs	r1, #1
 80070ce:	320d      	adds	r2, #13
 80070d0:	f10d 0306 	add.w	r3, sp, #6
 80070d4:	f7ff fbce 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 80070d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80070dc:	6821      	ldr	r1, [r4, #0]
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80070e4:	692a      	ldr	r2, [r5, #16]
 80070e6:	440b      	add	r3, r1
 80070e8:	7992      	ldrb	r2, [r2, #6]
 80070ea:	735a      	strb	r2, [r3, #13]

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 80070ec:	692b      	ldr	r3, [r5, #16]
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
 80070ee:	6822      	ldr	r2, [r4, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 80070f0:	8899      	ldrh	r1, [r3, #4]
 80070f2:	2006      	movs	r0, #6
 80070f4:	eb0d 0300 	add.w	r3, sp, r0
 80070f8:	320d      	adds	r2, #13
 80070fa:	f7ff fbbb 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80070fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007102:	6820      	ldr	r0, [r4, #0]
                              p_optiga_verify_sign->public_key->public_key,
 8007104:	692a      	ldr	r2, [r5, #16]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8007106:	4418      	add	r0, r3
 8007108:	6811      	ldr	r1, [r2, #0]
 800710a:	8892      	ldrh	r2, [r2, #4]
 800710c:	300d      	adds	r0, #13
 800710e:	f7fd f8d1 	bl	80042b4 <pal_os_memcpy>
                              p_optiga_verify_sign->public_key->public_key,
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
 8007112:	692b      	ldr	r3, [r5, #16]
 8007114:	889a      	ldrh	r2, [r3, #4]
 8007116:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800711a:	4413      	add	r3, r2
 800711c:	f8ad 3006 	strh.w	r3, [sp, #6]
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8007120:	f8bd 3006 	ldrh.w	r3, [sp, #6]
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8007124:	6822      	ldr	r2, [r4, #0]
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8007126:	7e60      	ldrb	r0, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8007128:	74d0      	strb	r0, [r2, #19]
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 800712a:	f1a3 0109 	sub.w	r1, r3, #9
 800712e:	b289      	uxth	r1, r1
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8007130:	25b2      	movs	r5, #178	; 0xb2
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8007132:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8007134:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8007136:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8007138:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	3b05      	subs	r3, #5
 800713e:	8093      	strh	r3, [r2, #4]
 8007140:	e00d      	b.n	800715e <optiga_cmd_verify_sign_handler+0x15c>
        }
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8007142:	6803      	ldr	r3, [r0, #0]
 8007144:	7c9b      	ldrb	r3, [r3, #18]
 8007146:	2bff      	cmp	r3, #255	; 0xff
 8007148:	d109      	bne.n	800715e <optiga_cmd_verify_sign_handler+0x15c>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800714a:	7f43      	ldrb	r3, [r0, #29]
 800714c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007150:	7743      	strb	r3, [r0, #29]
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8007152:	f240 2002 	movw	r0, #514	; 0x202
 8007156:	e003      	b.n	8007160 <optiga_cmd_verify_sign_handler+0x15e>
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8007158:	f44f 7001 	mov.w	r0, #516	; 0x204
 800715c:	e000      	b.n	8007160 <optiga_cmd_verify_sign_handler+0x15e>
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800715e:	2000      	movs	r0, #0
        default:
            break;
    }

    return (return_status);
}
 8007160:	b003      	add	sp, #12
 8007162:	bd30      	pop	{r4, r5, pc}

08007164 <optiga_cmd_set_object_protected_handler>:

/*
* Set Data Object handler for protected update
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
 8007164:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8007166:	2309      	movs	r3, #9
 8007168:	f8ad 3006 	strh.w	r3, [sp, #6]

    switch ((uint8_t)me->cmd_next_execution_state)
 800716c:	7d83      	ldrb	r3, [r0, #22]
* Set Data Object handler for protected update
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
 800716e:	6886      	ldr	r6, [r0, #8]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007170:	2b02      	cmp	r3, #2

/*
* Set Data Object handler for protected update
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
 8007172:	4605      	mov	r5, r0
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007174:	d002      	beq.n	800717c <optiga_cmd_set_object_protected_handler+0x18>
 8007176:	2b03      	cmp	r3, #3
 8007178:	d02f      	beq.n	80071da <optiga_cmd_set_object_protected_handler+0x76>
 800717a:	e045      	b.n	8007208 <optiga_cmd_set_object_protected_handler+0xa4>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending set data object command..");
            me->chaining_ongoing = FALSE;
 800717c:	2400      	movs	r4, #0
 800717e:	7604      	strb	r4, [r0, #24]

            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
 8007180:	88b1      	ldrh	r1, [r6, #4]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending set data object command..");
            me->chaining_ongoing = FALSE;

            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8007182:	1dcb      	adds	r3, r1, #7
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8007184:	b29b      	uxth	r3, r3
 8007186:	f240 6215 	movw	r2, #1557	; 0x615
 800718a:	4293      	cmp	r3, r2
 800718c:	d83f      	bhi.n	800720e <optiga_cmd_set_object_protected_handler+0xaa>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // Copy the tag and protected length
            optiga_cmd_prepare_tag_header((OPTIGA_CMD_SET_OBJECT_PROTECTED_TAG |
 800718e:	79b0      	ldrb	r0, [r6, #6]
                                           (uint8_t)p_optiga_write_protected_data->set_obj_protected_tag),
                                          p_optiga_write_protected_data->p_protected_update_buffer_length,
                                          me->p_optiga->optiga_comms_buffer,
 8007190:	682a      	ldr	r2, [r5, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // Copy the tag and protected length
            optiga_cmd_prepare_tag_header((OPTIGA_CMD_SET_OBJECT_PROTECTED_TAG |
 8007192:	f040 0030 	orr.w	r0, r0, #48	; 0x30
 8007196:	320d      	adds	r2, #13
 8007198:	f10d 0306 	add.w	r3, sp, #6
 800719c:	f7ff fb6a 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                           (uint8_t)p_optiga_write_protected_data->set_obj_protected_tag),
                                          p_optiga_write_protected_data->p_protected_update_buffer_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            // data to be written
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80071a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80071a4:	6828      	ldr	r0, [r5, #0]
 80071a6:	6831      	ldr	r1, [r6, #0]
 80071a8:	88b2      	ldrh	r2, [r6, #4]
 80071aa:	4418      	add	r0, r3
 80071ac:	300d      	adds	r0, #13
 80071ae:	f7fd f881 	bl	80042b4 <pal_os_memcpy>
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
 80071b2:	88b2      	ldrh	r2, [r6, #4]
 80071b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
 80071b8:	7e68      	ldrb	r0, [r5, #25]
            // data to be written
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
 80071ba:	4413      	add	r3, r2
 80071bc:	b29b      	uxth	r3, r3
            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80071be:	682a      	ldr	r2, [r5, #0]
                          p_optiga_write_protected_data->p_protected_update_buffer,
                          p_optiga_write_protected_data->p_protected_update_buffer_length);

            index_for_data += p_optiga_write_protected_data->p_protected_update_buffer_length;
            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
 80071c0:	f1a3 0109 	sub.w	r1, r3, #9
 80071c4:	b289      	uxth	r1, r1
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80071c6:	74d0      	strb	r0, [r2, #19]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80071c8:	2683      	movs	r6, #131	; 0x83
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80071ca:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80071cc:	7496      	strb	r6, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80071ce:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80071d0:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_OBJECT_PROTECTED,
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80071d2:	682a      	ldr	r2, [r5, #0]
 80071d4:	3b05      	subs	r3, #5
 80071d6:	8093      	strh	r3, [r2, #4]
 80071d8:	e014      	b.n	8007204 <optiga_cmd_set_object_protected_handler+0xa0>

        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data object data command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80071da:	6802      	ldr	r2, [r0, #0]
 80071dc:	7c94      	ldrb	r4, [r2, #18]
 80071de:	b124      	cbz	r4, 80071ea <optiga_cmd_set_object_protected_handler+0x86>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data object response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80071e0:	7f43      	ldrb	r3, [r0, #29]
 80071e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e6:	7743      	strb	r3, [r0, #29]
 80071e8:	e00e      	b.n	8007208 <optiga_cmd_set_object_protected_handler+0xa4>
                break;
            }
            if (OPTIGA_SET_PROTECTED_UPDATE_FINAL == p_optiga_write_protected_data->set_obj_protected_tag)
 80071ea:	79b3      	ldrb	r3, [r6, #6]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d102      	bne.n	80071f6 <optiga_cmd_set_object_protected_handler+0x92>
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 80071f0:	230b      	movs	r3, #11
 80071f2:	75c3      	strb	r3, [r0, #23]
 80071f4:	e006      	b.n	8007204 <optiga_cmd_set_object_protected_handler+0xa0>
            }
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 80071f6:	230c      	movs	r3, #12
 80071f8:	75c3      	strb	r3, [r0, #23]
                pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80071fa:	4907      	ldr	r1, [pc, #28]	; (8007218 <optiga_cmd_set_object_protected_handler+0xb4>)
 80071fc:	f8d2 0678 	ldr.w	r0, [r2, #1656]	; 0x678
 8007200:	f7fd f83a 	bl	8004278 <pal_os_event_start>
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of set data object command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8007204:	4620      	mov	r0, r4
 8007206:	e004      	b.n	8007212 <optiga_cmd_set_object_protected_handler+0xae>
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_object_protected_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_set_object_protected_params_t * p_optiga_write_protected_data = (optiga_set_object_protected_params_t *)me->p_input;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8007208:	f240 2002 	movw	r0, #514	; 0x202
 800720c:	e001      	b.n	8007212 <optiga_cmd_set_object_protected_handler+0xae>
            // APDU header size + Set Object protected tag 1 bytes + length of buffer 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                                p_optiga_write_protected_data->p_protected_update_buffer_length;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800720e:	f44f 7001 	mov.w	r0, #516	; 0x204
        break;
        default:
            break;
    }
    return (return_status);
}
 8007212:	b002      	add	sp, #8
 8007214:	bd70      	pop	{r4, r5, r6, pc}
 8007216:	bf00      	nop
 8007218:	080076e5 	.word	0x080076e5

0800721c <optiga_cmd_gen_keypair_handler>:
#ifdef OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED
/*
* GenKeyPair handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_gen_keypair_handler(optiga_cmd_t * me)
{
 800721c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 800721e:	7d81      	ldrb	r1, [r0, #22]
* GenKeyPair handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_gen_keypair_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t *)me->p_input;
 8007220:	6886      	ldr	r6, [r0, #8]
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8007222:	2309      	movs	r3, #9
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007224:	2902      	cmp	r1, #2
#ifdef OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED
/*
* GenKeyPair handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_gen_keypair_handler(optiga_cmd_t * me)
{
 8007226:	4604      	mov	r4, r0
    uint16_t total_apdu_length;
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t *)me->p_input;
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8007228:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 800722c:	d002      	beq.n	8007234 <optiga_cmd_gen_keypair_handler+0x18>
 800722e:	2903      	cmp	r1, #3
 8007230:	d043      	beq.n	80072ba <optiga_cmd_gen_keypair_handler+0x9e>
 8007232:	e08f      	b.n	8007354 <optiga_cmd_gen_keypair_handler+0x138>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
                break;
            }
            if (FALSE == p_optiga_ecc_gen_keypair->export_private_key)
 8007234:	7873      	ldrb	r3, [r6, #1]
 8007236:	6802      	ldr	r2, [r0, #0]
 8007238:	bb33      	cbnz	r3, 8007288 <optiga_cmd_gen_keypair_handler+0x6c>
            {
                ///TLV formation for private key OID
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
 800723a:	2001      	movs	r0, #1
 800723c:	f10d 0302 	add.w	r3, sp, #2
 8007240:	320d      	adds	r2, #13
 8007242:	f7ff fb17 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                               OPTIGA_CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8007246:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800724a:	6820      	ldr	r0, [r4, #0]
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
 800724c:	8871      	ldrh	r1, [r6, #2]
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
                                               OPTIGA_CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800724e:	4418      	add	r0, r3
 8007250:	300d      	adds	r0, #13
 8007252:	b901      	cbnz	r1, 8007256 <optiga_cmd_gen_keypair_handler+0x3a>
 8007254:	8aa1      	ldrh	r1, [r4, #20]
 8007256:	f7ff fa1f 	bl	8006698 <optiga_common_set_uint16>
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800725a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
                                               OPTIGA_CMD_GEN_KEY_PAIR_KEY_USAGE_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
 800725e:	6822      	ldr	r2, [r4, #0]
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8007260:	3302      	adds	r3, #2
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
 8007262:	2002      	movs	r0, #2
                ///Update OID based on input param
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)?
                                         me->session_oid:(uint16_t)p_optiga_ecc_gen_keypair->private_key_oid));

                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8007264:	f8ad 3002 	strh.w	r3, [sp, #2]
                ///TLV formation for key usage
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
 8007268:	2101      	movs	r1, #1
 800726a:	320d      	adds	r2, #13
 800726c:	eb0d 0300 	add.w	r3, sp, r0
 8007270:	f7ff fb00 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                               OPTIGA_CMD_GEN_KEY_PAIR_KEY_USAGE_LENGTH,
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_ecc_gen_keypair->key_usage;
 8007274:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007278:	6821      	ldr	r1, [r4, #0]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	f8ad 2002 	strh.w	r2, [sp, #2]
 8007280:	440b      	add	r3, r1
 8007282:	7832      	ldrb	r2, [r6, #0]
 8007284:	735a      	strb	r2, [r3, #13]
 8007286:	e006      	b.n	8007296 <optiga_cmd_gen_keypair_handler+0x7a>
            }
            else
            {
                ///TLV formation for export key
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_EXPORT_KEY_TAG,
 8007288:	2007      	movs	r0, #7
 800728a:	2100      	movs	r1, #0
 800728c:	320d      	adds	r2, #13
 800728e:	f10d 0302 	add.w	r3, sp, #2
 8007292:	f7ff faef 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
 8007296:	f8bd 3002 	ldrh.w	r3, [sp, #2]
                                            (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800729a:	6822      	ldr	r2, [r4, #0]
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
 800729c:	7e60      	ldrb	r0, [r4, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 800729e:	74d0      	strb	r0, [r2, #19]
                                               me->p_optiga->optiga_comms_buffer,
                                               &index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
 80072a0:	f1a3 0109 	sub.w	r1, r3, #9
 80072a4:	b289      	uxth	r1, r1
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80072a6:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80072a8:	25b8      	movs	r5, #184	; 0xb8
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80072aa:	7510      	strb	r0, [r2, #20]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80072ac:	7495      	strb	r5, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80072ae:	7551      	strb	r1, [r2, #21]
            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
                                            (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80072b0:	6822      	ldr	r2, [r4, #0]
 80072b2:	3b05      	subs	r3, #5
 80072b4:	8093      	strh	r3, [r2, #4]

            return_status = OPTIGA_LIB_SUCCESS;
 80072b6:	2000      	movs	r0, #0
        }
        break;
 80072b8:	e04e      	b.n	8007358 <optiga_cmd_gen_keypair_handler+0x13c>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for generate keypair command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	7c83      	ldrb	r3, [r0, #18]
 80072be:	2bff      	cmp	r3, #255	; 0xff
 80072c0:	d107      	bne.n	80072d2 <optiga_cmd_gen_keypair_handler+0xb6>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                *p_optiga_ecc_gen_keypair->public_key_length = 0;
 80072c2:	6933      	ldr	r3, [r6, #16]
 80072c4:	2200      	movs	r2, #0
 80072c6:	801a      	strh	r2, [r3, #0]
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80072c8:	7f63      	ldrb	r3, [r4, #29]
 80072ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ce:	7763      	strb	r3, [r4, #29]
 80072d0:	e040      	b.n	8007354 <optiga_cmd_gen_keypair_handler+0x138>
                break;
            }
            header_offset = 0;
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
 80072d2:	3014      	adds	r0, #20
 80072d4:	a901      	add	r1, sp, #4
 80072d6:	f7ff f9f6 	bl	80066c6 <optiga_common_get_uint16>
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            header_offset = 0;
 80072da:	2500      	movs	r5, #0
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80072dc:	f240 2002 	movw	r0, #514	; 0x202
            }
            header_offset = 0;
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
                                     &out_data_size);

            while (out_data_size > header_offset)
 80072e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80072e4:	42ab      	cmp	r3, r5
 80072e6:	d937      	bls.n	8007358 <optiga_cmd_gen_keypair_handler+0x13c>
            {
                if (OPTIGA_CMD_GEN_KEY_PAIR_PUBLIC_KEY_TAG ==
                    me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset])
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	195a      	adds	r2, r3, r5
 80072ec:	7d92      	ldrb	r2, [r2, #22]
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
                                     &out_data_size);

            while (out_data_size > header_offset)
            {
                if (OPTIGA_CMD_GEN_KEY_PAIR_PUBLIC_KEY_TAG ==
 80072ee:	2a02      	cmp	r2, #2
 80072f0:	d11a      	bne.n	8007328 <optiga_cmd_gen_keypair_handler+0x10c>
                    me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset])
                {
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80072f2:	1958      	adds	r0, r3, r5
 80072f4:	f10d 0106 	add.w	r1, sp, #6
 80072f8:	3017      	adds	r0, #23
 80072fa:	f7ff f9e4 	bl	80066c6 <optiga_common_get_uint16>
                                                header_offset + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &public_key_length);
                    if (public_key_length > *p_optiga_ecc_gen_keypair->public_key_length)
 80072fe:	6933      	ldr	r3, [r6, #16]
 8007300:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007304:	8819      	ldrh	r1, [r3, #0]
 8007306:	4291      	cmp	r1, r2
 8007308:	d204      	bcs.n	8007314 <optiga_cmd_gen_keypair_handler+0xf8>
                    {
                        OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
 800730a:	2200      	movs	r2, #0
 800730c:	801a      	strh	r2, [r3, #0]
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                                header_offset + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &public_key_length);
                    if (public_key_length > *p_optiga_ecc_gen_keypair->public_key_length)
                    {
                        OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800730e:	f44f 7001 	mov.w	r0, #516	; 0x204
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
                        break;
 8007312:	e021      	b.n	8007358 <optiga_cmd_gen_keypair_handler+0x13c>
                    }
                    *p_optiga_ecc_gen_keypair->public_key_length = public_key_length;
                    pal_os_memcpy(p_optiga_ecc_gen_keypair->public_key,
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
 8007314:	6821      	ldr	r1, [r4, #0]
                        OPTIGA_CMD_LOG_MESSAGE("Error in processing generate keypair response...");
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
                        break;
                    }
                    *p_optiga_ecc_gen_keypair->public_key_length = public_key_length;
 8007316:	801a      	strh	r2, [r3, #0]
                    pal_os_memcpy(p_optiga_ecc_gen_keypair->public_key,
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
 8007318:	4429      	add	r1, r5
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                        *p_optiga_ecc_gen_keypair->public_key_length = 0;
                        break;
                    }
                    *p_optiga_ecc_gen_keypair->public_key_length = public_key_length;
                    pal_os_memcpy(p_optiga_ecc_gen_keypair->public_key,
 800731a:	68f0      	ldr	r0, [r6, #12]
 800731c:	3119      	adds	r1, #25
 800731e:	f7fc ffc9 	bl	80042b4 <pal_os_memcpy>
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
                                   OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG],
                                   *p_optiga_ecc_gen_keypair->public_key_length);
                    header_offset +=  (uint16_t)OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG +
                                        *p_optiga_ecc_gen_keypair->public_key_length;
 8007322:	6933      	ldr	r3, [r6, #16]
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	e010      	b.n	800734a <optiga_cmd_gen_keypair_handler+0x12e>
                    return_status = OPTIGA_LIB_SUCCESS;
                }
                else if (OPTIGA_CMD_GEN_KEY_PAIR_PRIVATE_KEY_TAG == me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8007328:	2a01      	cmp	r2, #1
 800732a:	d115      	bne.n	8007358 <optiga_cmd_gen_keypair_handler+0x13c>
                                                             header_offset])
                {
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset
 800732c:	1958      	adds	r0, r3, r5
 800732e:	3017      	adds	r0, #23
 8007330:	4669      	mov	r1, sp
 8007332:	f7ff f9c8 	bl	80066c6 <optiga_common_get_uint16>
                                             + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &private_key_length);

                    pal_os_memcpy(p_optiga_ecc_gen_keypair->private_key,
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
 8007336:	6821      	ldr	r1, [r4, #0]
                                                             header_offset])
                {
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset
                                             + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &private_key_length);

                    pal_os_memcpy(p_optiga_ecc_gen_keypair->private_key,
 8007338:	6870      	ldr	r0, [r6, #4]
 800733a:	f8bd 2000 	ldrh.w	r2, [sp]
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
 800733e:	4429      	add	r1, r5
                                                             header_offset])
                {
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset
                                             + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &private_key_length);

                    pal_os_memcpy(p_optiga_ecc_gen_keypair->private_key,
 8007340:	3119      	adds	r1, #25
 8007342:	f7fc ffb7 	bl	80042b4 <pal_os_memcpy>
 8007346:	f8bd 3000 	ldrh.w	r3, [sp]
 800734a:	3303      	adds	r3, #3
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
                                  OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG], private_key_length);
                    header_offset +=  OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG + private_key_length;
 800734c:	441d      	add	r5, r3
 800734e:	b2ad      	uxth	r5, r5
 8007350:	2000      	movs	r0, #0
 8007352:	e7c5      	b.n	80072e0 <optiga_cmd_gen_keypair_handler+0xc4>
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8007354:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 8007358:	b002      	add	sp, #8
 800735a:	bd70      	pop	{r4, r5, r6, pc}

0800735c <optiga_cmd_calc_hash_handler>:

/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
 800735c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 800735e:	7d82      	ldrb	r2, [r0, #22]
/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
 8007360:	6884      	ldr	r4, [r0, #8]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8007362:	2309      	movs	r3, #9
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 8007364:	2a02      	cmp	r2, #2

/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
 8007366:	4605      	mov	r5, r0
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8007368:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;


    switch ((uint8_t)me->cmd_next_execution_state)
 800736c:	d003      	beq.n	8007376 <optiga_cmd_calc_hash_handler+0x1a>
 800736e:	2a03      	cmp	r2, #3
 8007370:	f000 80cc 	beq.w	800750c <optiga_cmd_calc_hash_handler+0x1b0>
 8007374:	e107      	b.n	8007586 <optiga_cmd_calc_hash_handler+0x22a>
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint32_t apparent_comms_buffer_size = (OPTIGA_MAX_COMMS_BUFFER_SIZE - (OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_HASH_HEADER_SIZE \
                                          + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER));

    p_optiga_calc_hash->current_hash_sequence = p_optiga_calc_hash->hash_sequence;
 8007376:	7b23      	ldrb	r3, [r4, #12]
 8007378:	7363      	strb	r3, [r4, #13]

    // Check for hash sequence as S&F
    if(OPTIGA_CRYPT_HASH_START_FINAL == p_optiga_calc_hash->hash_sequence)
 800737a:	2b01      	cmp	r3, #1
 800737c:	d10f      	bne.n	800739e <optiga_cmd_calc_hash_handler+0x42>
    {
        // Calculate the apparent comms buffer size and compare with hash data length
        if(apparent_comms_buffer_size < p_optiga_calc_hash->p_hash_data->length)
 800737e:	6863      	ldr	r3, [r4, #4]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	f240 6303 	movw	r3, #1539	; 0x603
 8007386:	4299      	cmp	r1, r3
 8007388:	d909      	bls.n	800739e <optiga_cmd_calc_hash_handler+0x42>
        {
            // sent data is 0 hence change the hash sequence to S
            if( 0 == p_optiga_calc_hash->data_sent)
 800738a:	6923      	ldr	r3, [r4, #16]
 800738c:	b133      	cbz	r3, 800739c <optiga_cmd_calc_hash_handler+0x40>
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_START;
            }
            // sent data is greater than 0 and next fragment is greater than apparent_comms_buffer_size hence change the hash sequence to C
            else if((p_optiga_calc_hash->data_sent + apparent_comms_buffer_size) < p_optiga_calc_hash->p_hash_data->length)
 800738e:	f203 6303 	addw	r3, r3, #1539	; 0x603
 8007392:	428b      	cmp	r3, r1
 8007394:	d201      	bcs.n	800739a <optiga_cmd_calc_hash_handler+0x3e>
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
 8007396:	7362      	strb	r2, [r4, #13]
 8007398:	e001      	b.n	800739e <optiga_cmd_calc_hash_handler+0x42>
            }
            // sent data is greater than 0 and next fragment is less than apparent_comms_buffer_size hence change the hash sequence to F
            else
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
 800739a:	2303      	movs	r3, #3
 800739c:	7363      	strb	r3, [r4, #13]
        {
            optiga_cmd_calc_hash_set_current_hash_sequence(me);
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate hash command..");
            //Hash Input
            // tag setting
            me->chaining_ongoing = FALSE;
 800739e:	2300      	movs	r3, #0
 80073a0:	762b      	strb	r3, [r5, #24]

            // add data if available
            if (NULL != p_optiga_calc_hash->p_hash_data)
 80073a2:	6861      	ldr	r1, [r4, #4]
 80073a4:	682a      	ldr	r2, [r5, #0]
 80073a6:	7b60      	ldrb	r0, [r4, #13]
 80073a8:	2900      	cmp	r1, #0
 80073aa:	d032      	beq.n	8007412 <optiga_cmd_calc_hash_handler+0xb6>
            {
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
 80073ac:	69e6      	ldr	r6, [r4, #28]
 80073ae:	6849      	ldr	r1, [r1, #4]
 80073b0:	f5c6 63c0 	rsb	r3, r6, #1536	; 0x600
 80073b4:	6926      	ldr	r6, [r4, #16]
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;
 80073b6:	7590      	strb	r0, [r2, #22]
            if (NULL != p_optiga_calc_hash->p_hash_data)
            {
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
 80073b8:	1b8e      	subs	r6, r1, r6
 80073ba:	3303      	adds	r3, #3
 80073bc:	429e      	cmp	r6, r3
 80073be:	bf28      	it	cs
 80073c0:	461e      	movcs	r6, r3
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
 80073c2:	6828      	ldr	r0, [r5, #0]
 80073c4:	b2b7      	uxth	r7, r6
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;
 80073c6:	230a      	movs	r3, #10

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
 80073c8:	3017      	adds	r0, #23
 80073ca:	4639      	mov	r1, r7
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;
 80073cc:	f8ad 3004 	strh.w	r3, [sp, #4]

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
 80073d0:	f7ff f962 	bl	8006698 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80073d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80073d8:	6828      	ldr	r0, [r5, #0]

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80073da:	3302      	adds	r3, #2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f8ad 3004 	strh.w	r3, [sp, #4]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80073e2:	4418      	add	r0, r3
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
 80073e4:	6863      	ldr	r3, [r4, #4]

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80073e6:	6819      	ldr	r1, [r3, #0]
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	4632      	mov	r2, r6
 80073ec:	4419      	add	r1, r3
 80073ee:	300d      	adds	r0, #13
 80073f0:	f7fc ff60 	bl	80042b4 <pal_os_memcpy>
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
 80073f4:	6923      	ldr	r3, [r4, #16]
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
 80073f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]

                p_optiga_calc_hash->data_sent += length_to_hash;
 80073fa:	441e      	add	r6, r3
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 80073fc:	6863      	ldr	r3, [r4, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;

                p_optiga_calc_hash->data_sent += length_to_hash;
 80073fe:	6126      	str	r6, [r4, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 8007400:	685b      	ldr	r3, [r3, #4]
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
 8007402:	4439      	add	r1, r7

                p_optiga_calc_hash->data_sent += length_to_hash;
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 8007404:	429e      	cmp	r6, r3
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
 8007406:	f8ad 1004 	strh.w	r1, [sp, #4]

                p_optiga_calc_hash->data_sent += length_to_hash;
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 800740a:	d036      	beq.n	800747a <optiga_cmd_calc_hash_handler+0x11e>
                {
                    me->chaining_ongoing = TRUE;
 800740c:	2301      	movs	r3, #1
 800740e:	762b      	strb	r3, [r5, #24]
 8007410:	e033      	b.n	800747a <optiga_cmd_calc_hash_handler+0x11e>
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
 8007412:	6821      	ldr	r1, [r4, #0]
 8007414:	b369      	cbz	r1, 8007472 <optiga_cmd_calc_hash_handler+0x116>
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
 8007416:	320d      	adds	r2, #13
 8007418:	2106      	movs	r1, #6
 800741a:	ab01      	add	r3, sp, #4
 800741c:	f7ff fa2a 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8007420:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007424:	6828      	ldr	r0, [r5, #0]
 8007426:	4418      	add	r0, r3
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	300d      	adds	r0, #13
 800742c:	8819      	ldrh	r1, [r3, #0]
 800742e:	f7ff f933 	bl	8006698 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8007432:	f8bd 3004 	ldrh.w	r3, [sp, #4]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8007436:	6828      	ldr	r0, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8007438:	3302      	adds	r3, #2
 800743a:	b29b      	uxth	r3, r3
 800743c:	f8ad 3004 	strh.w	r3, [sp, #4]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8007440:	4418      	add	r0, r3
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	300d      	adds	r0, #13
 8007446:	8859      	ldrh	r1, [r3, #2]
 8007448:	f7ff f926 	bl	8006698 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800744c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8007450:	6828      	ldr	r0, [r5, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8007452:	3302      	adds	r3, #2
 8007454:	b29b      	uxth	r3, r3
 8007456:	f8ad 3004 	strh.w	r3, [sp, #4]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800745a:	4418      	add	r0, r3
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	300d      	adds	r0, #13
 8007460:	8899      	ldrh	r1, [r3, #4]
 8007462:	f7ff f919 	bl	8006698 <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8007466:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800746a:	3302      	adds	r3, #2
 800746c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007470:	e003      	b.n	800747a <optiga_cmd_calc_hash_handler+0x11e>
            }
            else
            {
                // Tag header in case of sequence as START
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
 8007472:	320d      	adds	r2, #13
 8007474:	ab01      	add	r3, sp, #4
 8007476:	f7ff f9fd 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
                                               (uint16_t*)&index_for_data);
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
 800747a:	68a3      	ldr	r3, [r4, #8]
 800747c:	b34b      	cbz	r3, 80074d2 <optiga_cmd_calc_hash_handler+0x176>
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	b33b      	cbz	r3, 80074d2 <optiga_cmd_calc_hash_handler+0x176>
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
 8007482:	6829      	ldr	r1, [r5, #0]
 8007484:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007488:	1c53      	adds	r3, r2, #1
 800748a:	440a      	add	r2, r1
 800748c:	2106      	movs	r1, #6
 800748e:	7351      	strb	r1, [r2, #13]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8007490:	6828      	ldr	r0, [r5, #0]
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
 8007492:	b29b      	uxth	r3, r3
 8007494:	f8ad 3004 	strh.w	r3, [sp, #4]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8007498:	4418      	add	r0, r3
                                          (uint16_t )p_optiga_calc_hash->p_hash_context->context_buffer_length);
 800749a:	68a3      	ldr	r3, [r4, #8]
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800749c:	300d      	adds	r0, #13
 800749e:	8899      	ldrh	r1, [r3, #4]
 80074a0:	f7ff f8fa 	bl	8006698 <optiga_common_set_uint16>
                                          (uint16_t )p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80074a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80074a8:	6828      	ldr	r0, [r5, #0]
                              p_optiga_calc_hash->p_hash_context->context_buffer,
 80074aa:	68a2      	ldr	r2, [r4, #8]
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          (uint16_t )p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80074ac:	3302      	adds	r3, #2
 80074ae:	b29b      	uxth	r3, r3

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80074b0:	4418      	add	r0, r3
 80074b2:	6811      	ldr	r1, [r2, #0]
 80074b4:	8892      	ldrh	r2, [r2, #4]
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          (uint16_t )p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80074b6:	f8ad 3004 	strh.w	r3, [sp, #4]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80074ba:	300d      	adds	r0, #13
 80074bc:	f7fc fefa 	bl	80042b4 <pal_os_memcpy>
                              p_optiga_calc_hash->p_hash_context->context_buffer,
                              (uint16_t)p_optiga_calc_hash->p_hash_context->context_buffer_length);

                index_for_data += (uint16_t)p_optiga_calc_hash->p_hash_context->context_buffer_length;
 80074c0:	68a3      	ldr	r3, [r4, #8]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80074c8:	4413      	add	r3, r2
 80074ca:	f8ad 3004 	strh.w	r3, [sp, #4]
                p_optiga_calc_hash->apparent_context_size = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61e3      	str	r3, [r4, #28]
            }

            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
 80074d2:	7e23      	ldrb	r3, [r4, #24]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d107      	bne.n	80074e8 <optiga_cmd_calc_hash_handler+0x18c>
 80074d8:	7e29      	ldrb	r1, [r5, #24]
 80074da:	b929      	cbnz	r1, 80074e8 <optiga_cmd_calc_hash_handler+0x18c>
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
 80074dc:	682a      	ldr	r2, [r5, #0]
            }

            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
 80074de:	2007      	movs	r0, #7
 80074e0:	320d      	adds	r2, #13
 80074e2:	ab01      	add	r3, sp, #4
 80074e4:	f7ff f9c6 	bl	8006874 <optiga_cmd_prepare_tag_header>
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 80074e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80074ec:	682a      	ldr	r2, [r5, #0]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 80074ee:	7e68      	ldrb	r0, [r5, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80074f0:	74d0      	strb	r0, [r2, #19]
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 80074f2:	f1a3 0109 	sub.w	r1, r3, #9
 80074f6:	b289      	uxth	r1, r1
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80074f8:	24b0      	movs	r4, #176	; 0xb0
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80074fa:	0a08      	lsrs	r0, r1, #8
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80074fc:	7494      	strb	r4, [r2, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80074fe:	7510      	strb	r0, [r2, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8007500:	7551      	strb	r1, [r2, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8007502:	682a      	ldr	r2, [r5, #0]
 8007504:	3b05      	subs	r3, #5
 8007506:	8093      	strh	r3, [r2, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8007508:	2000      	movs	r0, #0
        }
        break;
 800750a:	e041      	b.n	8007590 <optiga_cmd_calc_hash_handler+0x234>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate hash command...");
            // check for response status code
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	7c83      	ldrb	r3, [r0, #18]
 8007510:	2bff      	cmp	r3, #255	; 0xff
 8007512:	d104      	bne.n	800751e <optiga_cmd_calc_hash_handler+0x1c2>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8007514:	7f6b      	ldrb	r3, [r5, #29]
 8007516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751a:	776b      	strb	r3, [r5, #29]
 800751c:	e033      	b.n	8007586 <optiga_cmd_calc_hash_handler+0x22a>
                break;
            }
            // Copy the digest to buffer, if chaining is false and digest out buffer is not NULL
            if((FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_out_digest))
 800751e:	7e2e      	ldrb	r6, [r5, #24]
 8007520:	b98e      	cbnz	r6, 8007546 <optiga_cmd_calc_hash_handler+0x1ea>
 8007522:	6963      	ldr	r3, [r4, #20]
 8007524:	b17b      	cbz	r3, 8007546 <optiga_cmd_calc_hash_handler+0x1ea>
            {
                // If the out data tag is not the digest out then return failure
                if (OPTIGA_CRYPT_HASH_START_FINAL != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 8007526:	7d83      	ldrb	r3, [r0, #22]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d12c      	bne.n	8007586 <optiga_cmd_calc_hash_handler+0x22a>
                {
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800752c:	f10d 0106 	add.w	r1, sp, #6
 8007530:	3017      	adds	r0, #23
 8007532:	f7ff f8c8 	bl	80066c6 <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8007536:	6829      	ldr	r1, [r5, #0]
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 8007538:	6960      	ldr	r0, [r4, #20]
 800753a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800753e:	3119      	adds	r1, #25
 8007540:	f7fc feb8 	bl	80042b4 <pal_os_memcpy>
 8007544:	e7e0      	b.n	8007508 <optiga_cmd_calc_hash_handler+0x1ac>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            }
            // Copy the intermediate hash context
            else if ((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_hash_context))
 8007546:	7e23      	ldrb	r3, [r4, #24]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d1dd      	bne.n	8007508 <optiga_cmd_calc_hash_handler+0x1ac>
 800754c:	2e00      	cmp	r6, #0
 800754e:	d1db      	bne.n	8007508 <optiga_cmd_calc_hash_handler+0x1ac>
 8007550:	68a3      	ldr	r3, [r4, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0d8      	beq.n	8007508 <optiga_cmd_calc_hash_handler+0x1ac>
            {
                // If the out data tag is not the intermediate tag then return failure
                if (OPTIGA_CRYPT_INTERMEDIATE != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 8007556:	7d83      	ldrb	r3, [r0, #22]
 8007558:	2b06      	cmp	r3, #6
 800755a:	d114      	bne.n	8007586 <optiga_cmd_calc_hash_handler+0x22a>
                {
                    break;
                }

                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800755c:	f10d 0106 	add.w	r1, sp, #6
 8007560:	3017      	adds	r0, #23
 8007562:	f7ff f8b0 	bl	80066c6 <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
 8007566:	68a3      	ldr	r3, [r4, #8]
 8007568:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	4291      	cmp	r1, r2
 8007570:	d30c      	bcc.n	800758c <optiga_cmd_calc_hash_handler+0x230>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    break;
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8007572:	6829      	ldr	r1, [r5, #0]
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    break;
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	3119      	adds	r1, #25
 8007578:	f7fc fe9c 	bl	80042b4 <pal_os_memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
 800757c:	68a3      	ldr	r3, [r4, #8]
 800757e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007582:	605a      	str	r2, [r3, #4]
 8007584:	e7c0      	b.n	8007508 <optiga_cmd_calc_hash_handler+0x1ac>
{
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8007586:	f240 2002 	movw	r0, #514	; 0x202
 800758a:	e001      	b.n	8007590 <optiga_cmd_calc_hash_handler+0x234>
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800758c:	f44f 7001 	mov.w	r0, #516	; 0x204
        default:
            break;
    }

    return (return_status);
}
 8007590:	b003      	add	sp, #12
 8007592:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007594 <optiga_cmd_close_application_handler>:

/*
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
 8007594:	b538      	push	{r3, r4, r5, lr}
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007596:	7d83      	ldrb	r3, [r0, #22]
 8007598:	2b02      	cmp	r3, #2

/*
* Close Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_close_application_handler(optiga_cmd_t * me)
{
 800759a:	4604      	mov	r4, r0
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 800759c:	d002      	beq.n	80075a4 <optiga_cmd_close_application_handler+0x10>
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d00c      	beq.n	80075bc <optiga_cmd_close_application_handler+0x28>
 80075a2:	e02b      	b.n	80075fc <optiga_cmd_close_application_handler+0x68>
                break;
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80075a4:	6803      	ldr	r3, [r0, #0]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
 80075a6:	7e42      	ldrb	r2, [r0, #25]
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 80075a8:	74da      	strb	r2, [r3, #19]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80075aa:	2000      	movs	r0, #0
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 80075ac:	21f1      	movs	r1, #241	; 0xf1
 80075ae:	7499      	strb	r1, [r3, #18]
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80075b0:	7518      	strb	r0, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80075b2:	7558      	strb	r0, [r3, #21]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CLOSE_APPLICATION,
                                           me->cmd_param,
                                           OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = OPTIGA_CMD_APDU_HEADER_SIZE;
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	2204      	movs	r2, #4
 80075b8:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for close app command...");
            // check if the close app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80075bc:	6801      	ldr	r1, [r0, #0]
 80075be:	7c8d      	ldrb	r5, [r1, #18]
 80075c0:	b125      	cbz	r5, 80075cc <optiga_cmd_close_application_handler+0x38>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing close app response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80075c2:	7f43      	ldrb	r3, [r0, #29]
 80075c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c8:	7743      	strb	r3, [r0, #29]
 80075ca:	e017      	b.n	80075fc <optiga_cmd_close_application_handler+0x68>
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80075cc:	7e40      	ldrb	r0, [r0, #25]
 80075ce:	b1c8      	cbz	r0, 8007604 <optiga_cmd_close_application_handler+0x70>
            {
                pal_os_memcpy(me->p_optiga->optiga_context_handle_buffer,
 80075d0:	f501 60d0 	add.w	r0, r1, #1664	; 0x680
 80075d4:	2208      	movs	r2, #8
 80075d6:	3116      	adds	r1, #22
 80075d8:	f7fc fe6c 	bl	80042b4 <pal_os_memcpy>
_STATIC_H optiga_lib_status_t optiga_cmd_store_context(const optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80075dc:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80075de:	b180      	cbz	r0, 8007602 <optiga_cmd_close_application_handler+0x6e>
        {
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                   me->p_optiga->optiga_context_handle_buffer,
 80075e0:	6821      	ldr	r1, [r4, #0]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80075e2:	2208      	movs	r2, #8
 80075e4:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 80075e8:	f7fc fdd2 	bl	8004190 <pal_os_datastore_write>
                                                   me->p_optiga->optiga_context_handle_buffer,
                                                   sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != return_status)
 80075ec:	b148      	cbz	r0, 8007602 <optiga_cmd_close_application_handler+0x6e>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
                ///Optiga context store operation
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_store_context(me))
                {
                    pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	4629      	mov	r1, r5
 80075f2:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 80075f6:	2208      	movs	r2, #8
 80075f8:	f7fc fe5e 	bl	80042b8 <pal_os_memset>
 80075fc:	f240 2002 	movw	r0, #514	; 0x202
 8007600:	bd38      	pop	{r3, r4, r5, pc}
                                    sizeof(me->p_optiga->optiga_context_handle_buffer));
                    break;
                }
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of close app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 8007602:	2000      	movs	r0, #0
        default:
            break;
    }

    return (return_status);
}
 8007604:	bd38      	pop	{r3, r4, r5, pc}
	...

08007608 <optiga_cmd_open_application_handler>:
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007608:	7d83      	ldrb	r3, [r0, #22]
 800760a:	2b02      	cmp	r3, #2

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 800760c:	b513      	push	{r0, r1, r4, lr}
 800760e:	4604      	mov	r4, r0
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;

    switch ((uint8_t)me->cmd_next_execution_state)
 8007610:	d002      	beq.n	8007618 <optiga_cmd_open_application_handler+0x10>
 8007612:	2b03      	cmp	r3, #3
 8007614:	d053      	beq.n	80076be <optiga_cmd_open_application_handler+0xb6>
 8007616:	e05e      	b.n	80076d6 <optiga_cmd_open_application_handler+0xce>
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8007618:	7e43      	ldrb	r3, [r0, #25]
 800761a:	b9e3      	cbnz	r3, 8007656 <optiga_cmd_open_application_handler+0x4e>
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800761c:	7e62      	ldrb	r2, [r4, #25]
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800761e:	6823      	ldr	r3, [r4, #0]
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
                {
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8007620:	2a00      	cmp	r2, #0
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
    p_apdu_buffer [1] = param;
 8007622:	74da      	strb	r2, [r3, #19]
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
                {
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8007624:	bf0c      	ite	eq
 8007626:	2110      	moveq	r1, #16
 8007628:	2118      	movne	r1, #24
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 800762a:	20f0      	movs	r0, #240	; 0xf0
    p_apdu_buffer [1] = param;
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 800762c:	2200      	movs	r2, #0
 800762e:	751a      	strb	r2, [r3, #20]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8007630:	7559      	strb	r1, [r3, #21]
//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
    p_apdu_buffer [0] = cmd;
 8007632:	7498      	strb	r0, [r3, #18]
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8007634:	6820      	ldr	r0, [r4, #0]
 8007636:	492a      	ldr	r1, [pc, #168]	; (80076e0 <optiga_cmd_open_application_handler+0xd8>)
 8007638:	3016      	adds	r0, #22
 800763a:	2210      	movs	r2, #16
 800763c:	f7fc fe3a 	bl	80042b4 <pal_os_memcpy>
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8007640:	7e63      	ldrb	r3, [r4, #25]
 8007642:	b32b      	cbz	r3, 8007690 <optiga_cmd_open_application_handler+0x88>
            {
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8007644:	6821      	ldr	r1, [r4, #0]
 8007646:	2208      	movs	r2, #8
 8007648:	f101 0026 	add.w	r0, r1, #38	; 0x26
 800764c:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8007650:	f7fc fe30 	bl	80042b4 <pal_os_memcpy>
 8007654:	e01c      	b.n	8007690 <optiga_cmd_open_application_handler+0x88>
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8007656:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8007658:	b938      	cbnz	r0, 800766a <optiga_cmd_open_application_handler+0x62>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 800765a:	6820      	ldr	r0, [r4, #0]
 800765c:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 8007660:	f7ff f826 	bl	80066b0 <optiga_common_get_uint32>
 8007664:	2800      	cmp	r0, #0
 8007666:	d1d9      	bne.n	800761c <optiga_cmd_open_application_handler+0x14>
 8007668:	e00b      	b.n	8007682 <optiga_cmd_open_application_handler+0x7a>
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 800766a:	aa02      	add	r2, sp, #8
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
                                                  me->p_optiga->optiga_context_handle_buffer,
 800766c:	6821      	ldr	r1, [r4, #0]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 800766e:	2308      	movs	r3, #8
 8007670:	f822 3d02 	strh.w	r3, [r2, #-2]!
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8007674:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 8007678:	f7fc fdaa 	bl	80041d0 <pal_os_datastore_read>
                                                  me->p_optiga->optiga_context_handle_buffer,
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 800767c:	2800      	cmp	r0, #0
 800767e:	d0ec      	beq.n	800765a <optiga_cmd_open_application_handler+0x52>
 8007680:	e029      	b.n	80076d6 <optiga_cmd_open_application_handler+0xce>
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	f200 6084 	addw	r0, r0, #1668	; 0x684
 8007688:	f7ff f812 	bl	80066b0 <optiga_common_get_uint32>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 800768c:	b318      	cbz	r0, 80076d6 <optiga_cmd_open_application_handler+0xce>
 800768e:	e7c5      	b.n	800761c <optiga_cmd_open_application_handler+0x14>
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8007690:	7e63      	ldrb	r3, [r4, #25]
 8007692:	6820      	ldr	r0, [r4, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	bf0c      	ite	eq
 8007698:	2314      	moveq	r3, #20
 800769a:	231c      	movne	r3, #28
 800769c:	8083      	strh	r3, [r0, #4]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           sizeof(g_optiga_unique_application_identifier):
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))));

            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 800769e:	2100      	movs	r1, #0
 80076a0:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 80076a4:	2208      	movs	r2, #8
 80076a6:	f7fc fe07 	bl	80042b8 <pal_os_memset>
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80076aa:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80076ac:	b1a8      	cbz	r0, 80076da <optiga_cmd_open_application_handler+0xd2>
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
                                                       me->p_optiga->optiga_context_handle_buffer,
 80076ae:	6821      	ldr	r1, [r4, #0]
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80076b0:	2208      	movs	r2, #8
 80076b2:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
 80076b6:	f7fc fd6b 	bl	8004190 <pal_os_datastore_write>
                                                       me->p_optiga->optiga_context_handle_buffer,
                                                       sizeof(me->p_optiga->optiga_context_handle_buffer));
                if (PAL_STATUS_SUCCESS != return_status)
 80076ba:	b960      	cbnz	r0, 80076d6 <optiga_cmd_open_application_handler+0xce>
 80076bc:	e00d      	b.n	80076da <optiga_cmd_open_application_handler+0xd2>
        break;
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");

            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80076be:	6803      	ldr	r3, [r0, #0]
 80076c0:	7c98      	ldrb	r0, [r3, #18]
 80076c2:	b120      	cbz	r0, 80076ce <optiga_cmd_open_application_handler+0xc6>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80076c4:	7f63      	ldrb	r3, [r4, #29]
 80076c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ca:	7763      	strb	r3, [r4, #29]
 80076cc:	e003      	b.n	80076d6 <optiga_cmd_open_application_handler+0xce>
                break;
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2233      	movs	r2, #51	; 0x33
 80076d2:	741a      	strb	r2, [r3, #16]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
 80076d4:	e001      	b.n	80076da <optiga_cmd_open_application_handler+0xd2>
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80076d6:	f240 2002 	movw	r0, #514	; 0x202
        default:
            break;
    }

    return (return_status);
}
 80076da:	b002      	add	sp, #8
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	bf00      	nop
 80076e0:	0800c3c0 	.word	0x0800c3c0

080076e4 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 80076e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 80076e8:	f8d0 8678 	ldr.w	r8, [r0, #1656]	; 0x678
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 80076ec:	4604      	mov	r4, r0
 80076ee:	f100 0948 	add.w	r9, r0, #72	; 0x48
    uint8_t prefered_index = 0xFF;
    uint8_t overflow_detected = FALSE;

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 80076f2:	4602      	mov	r2, r0
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
 80076f4:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 80076f6:	f892 1639 	ldrb.w	r1, [r2, #1593]	; 0x639
 80076fa:	2902      	cmp	r1, #2
        {
            count++;
 80076fc:	bf08      	it	eq
 80076fe:	3301      	addeq	r3, #1
 8007700:	f102 020c 	add.w	r2, r2, #12
 8007704:	bf08      	it	eq
 8007706:	b2db      	uxtbeq	r3, r3
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8007708:	454a      	cmp	r2, r9
 800770a:	d1f4      	bne.n	80076f6 <optiga_cmd_queue_scheduler+0x12>
 800770c:	4622      	mov	r2, r4
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800770e:	b973      	cbnz	r3, 800772e <optiga_cmd_queue_scheduler+0x4a>
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007710:	f892 1639 	ldrb.w	r1, [r2, #1593]	; 0x639
 8007714:	2908      	cmp	r1, #8
        {
            count++;
 8007716:	bf08      	it	eq
 8007718:	3301      	addeq	r3, #1
 800771a:	f102 020c 	add.w	r2, r2, #12
 800771e:	bf08      	it	eq
 8007720:	b2db      	uxtbeq	r3, r3
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8007722:	454a      	cmp	r2, r9
 8007724:	d1f4      	bne.n	8007710 <optiga_cmd_queue_scheduler+0x2c>
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80aa 	beq.w	8007880 <optiga_cmd_queue_scheduler+0x19c>
 800772c:	4622      	mov	r2, r4
 800772e:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007730:	f892 1639 	ldrb.w	r1, [r2, #1593]	; 0x639
 8007734:	2904      	cmp	r1, #4
        {
            count++;
 8007736:	bf08      	it	eq
 8007738:	3301      	addeq	r3, #1
 800773a:	f102 020c 	add.w	r2, r2, #12
 800773e:	bf08      	it	eq
 8007740:	b2db      	uxtbeq	r3, r3
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8007742:	454a      	cmp	r2, r9
 8007744:	d1f4      	bne.n	8007730 <optiga_cmd_queue_scheduler+0x4c>

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8007746:	2b01      	cmp	r3, #1
 8007748:	d10f      	bne.n	800776a <optiga_cmd_queue_scheduler+0x86>
 800774a:	4622      	mov	r2, r4
 800774c:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 800774e:	f892 1638 	ldrb.w	r1, [r2, #1592]	; 0x638
 8007752:	2923      	cmp	r1, #35	; 0x23
        {
            count++;
 8007754:	bf08      	it	eq
 8007756:	3301      	addeq	r3, #1
 8007758:	f102 020c 	add.w	r2, r2, #12
 800775c:	bf08      	it	eq
 800775e:	b2db      	uxtbeq	r3, r3
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8007760:	454a      	cmp	r2, r9
 8007762:	d1f4      	bne.n	800774e <optiga_cmd_queue_scheduler+0x6a>
    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8007764:	2b00      	cmp	r3, #0
 8007766:	f040 808b 	bne.w	8007880 <optiga_cmd_queue_scheduler+0x19c>
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
                                               p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
    }
    else
    {
        pal_os_event_stop(my_os_event);
 800776a:	4640      	mov	r0, r8
 800776c:	f7fc fd5a 	bl	8004224 <pal_os_event_stop>
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8007770:	f04f 3aff 	mov.w	sl, #4294967295
 8007774:	2600      	movs	r6, #0
 8007776:	4625      	mov	r5, r4
 8007778:	46b3      	mov	fp, r6
 800777a:	27ff      	movs	r7, #255	; 0xff
 800777c:	b2f2      	uxtb	r2, r6
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 800777e:	4621      	mov	r1, r4
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
 8007780:	2300      	movs	r3, #0
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 8007782:	f891 0639 	ldrb.w	r0, [r1, #1593]	; 0x639
 8007786:	2808      	cmp	r0, #8
        {
            count++;
 8007788:	bf08      	it	eq
 800778a:	3301      	addeq	r3, #1
 800778c:	f101 010c 	add.w	r1, r1, #12
 8007790:	bf08      	it	eq
 8007792:	b2db      	uxtbeq	r3, r3
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8007794:	4549      	cmp	r1, r9
 8007796:	d1f4      	bne.n	8007782 <optiga_cmd_queue_scheduler+0x9e>
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);

                // if any slot has acquired strict lock, highest priority is given to it
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8007798:	2b01      	cmp	r3, #1
 800779a:	d108      	bne.n	80077ae <optiga_cmd_queue_scheduler+0xca>
                {
                    // Select the slot which has acquired strict lock
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 800779c:	230c      	movs	r3, #12
 800779e:	fb03 4306 	mla	r3, r3, r6, r4
 80077a2:	f8b3 1638 	ldrh.w	r1, [r3, #1592]	; 0x638
 80077a6:	f640 0323 	movw	r3, #2083	; 0x823
 80077aa:	4299      	cmp	r1, r3
 80077ac:	e019      	b.n	80077e2 <optiga_cmd_queue_scheduler+0xfe>

                }
                else
                {
                    // pick only requested queue slot and earliest arrival time
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 80077ae:	f895 3639 	ldrb.w	r3, [r5, #1593]	; 0x639
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d11f      	bne.n	80077f6 <optiga_cmd_queue_scheduler+0x112>
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 80077b6:	f8d5 1634 	ldr.w	r1, [r5, #1588]	; 0x634
 80077ba:	f8d4 367c 	ldr.w	r3, [r4, #1660]	; 0x67c
 80077be:	4299      	cmp	r1, r3
 80077c0:	d202      	bcs.n	80077c8 <optiga_cmd_queue_scheduler+0xe4>
                        {
                            overflow_detected = TRUE;
 80077c2:	f04f 0b01 	mov.w	fp, #1
 80077c6:	e016      	b.n	80077f6 <optiga_cmd_queue_scheduler+0x112>
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 80077c8:	4551      	cmp	r1, sl
 80077ca:	d814      	bhi.n	80077f6 <optiga_cmd_queue_scheduler+0x112>
 80077cc:	f895 3638 	ldrb.w	r3, [r5, #1592]	; 0x638
 80077d0:	2b22      	cmp	r3, #34	; 0x22
 80077d2:	d05f      	beq.n	8007894 <optiga_cmd_queue_scheduler+0x1b0>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80077d4:	f895 3638 	ldrb.w	r3, [r5, #1592]	; 0x638
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 80077d8:	2b22      	cmp	r3, #34	; 0x22
 80077da:	d007      	beq.n	80077ec <optiga_cmd_queue_scheduler+0x108>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80077dc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80077e0:	2b21      	cmp	r3, #33	; 0x21
 80077e2:	d108      	bne.n	80077f6 <optiga_cmd_queue_scheduler+0x112>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
                        {
                            reference_time_stamp = p_queue_entry->arrival_time;
 80077e4:	f8d5 a634 	ldr.w	sl, [r5, #1588]	; 0x634
 80077e8:	4617      	mov	r7, r2
 80077ea:	e004      	b.n	80077f6 <optiga_cmd_queue_scheduler+0x112>
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80077ec:	f8d5 3630 	ldr.w	r3, [r5, #1584]	; 0x630
 80077f0:	8a9b      	ldrh	r3, [r3, #20]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f6      	bne.n	80077e4 <optiga_cmd_queue_scheduler+0x100>
 80077f6:	3601      	adds	r6, #1
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 80077f8:	2e06      	cmp	r6, #6
 80077fa:	f105 050c 	add.w	r5, r5, #12
 80077fe:	d1bd      	bne.n	800777c <optiga_cmd_queue_scheduler+0x98>
                            prefered_index = index;
                        }
                    }
                }
            }
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 8007800:	2fff      	cmp	r7, #255	; 0xff
 8007802:	d106      	bne.n	8007812 <optiga_cmd_queue_scheduler+0x12e>
 8007804:	f1bb 0f00 	cmp.w	fp, #0
 8007808:	d03a      	beq.n	8007880 <optiga_cmd_queue_scheduler+0x19c>
        do
        {
            //reset overflow detected flag and the last_time stamp
            if(overflow_detected == TRUE)
            {
                p_optiga_ctx->last_time_stamp = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	f8c4 367c 	str.w	r3, [r4, #1660]	; 0x67c
 8007810:	e7b0      	b.n	8007774 <optiga_cmd_queue_scheduler+0x90>
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8007812:	230c      	movs	r3, #12
 8007814:	fb03 4307 	mla	r3, r3, r7, r4
 8007818:	f893 2638 	ldrb.w	r2, [r3, #1592]	; 0x638
 800781c:	2a22      	cmp	r2, #34	; 0x22
 800781e:	d11b      	bne.n	8007858 <optiga_cmd_queue_scheduler+0x174>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8007820:	f8d3 0630 	ldr.w	r0, [r3, #1584]	; 0x630
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8007824:	8a83      	ldrh	r3, [r0, #20]
 8007826:	b9bb      	cbnz	r3, 8007858 <optiga_cmd_queue_scheduler+0x174>
/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8007828:	6803      	ldr	r3, [r0, #0]
 800782a:	f103 0508 	add.w	r5, r3, #8
 800782e:	f103 010c 	add.w	r1, r3, #12
 8007832:	462b      	mov	r3, r5
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8007834:	461e      	mov	r6, r3
 8007836:	1b5a      	subs	r2, r3, r5
 8007838:	f896 e000 	ldrb.w	lr, [r6]
 800783c:	f1be 0f10 	cmp.w	lr, #16
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	f103 0301 	add.w	r3, r3, #1
 8007846:	d005      	beq.n	8007854 <optiga_cmd_queue_scheduler+0x170>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8007848:	f442 4361 	orr.w	r3, r2, #57600	; 0xe100
 800784c:	8283      	strh	r3, [r0, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 800784e:	2310      	movs	r3, #16
 8007850:	7033      	strb	r3, [r6, #0]
 8007852:	e001      	b.n	8007858 <optiga_cmd_queue_scheduler+0x174>
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8007854:	428b      	cmp	r3, r1
 8007856:	d1ed      	bne.n	8007834 <optiga_cmd_queue_scheduler+0x150>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8007858:	230c      	movs	r3, #12
 800785a:	fb03 4707 	mla	r7, r3, r7, r4
            pal_os_event_register_callback_oneshot(my_os_event,
 800785e:	4912      	ldr	r1, [pc, #72]	; (80078a8 <optiga_cmd_queue_scheduler+0x1c4>)
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8007860:	f8d7 2630 	ldr.w	r2, [r7, #1584]	; 0x630
 8007864:	6813      	ldr	r3, [r2, #0]
            pal_os_event_register_callback_oneshot(my_os_event,
 8007866:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 800786a:	2332      	movs	r3, #50	; 0x32
 800786c:	f7fc fcf4 	bl	8004258 <pal_os_event_register_callback_oneshot>
                                                   optiga_cmd_event_trigger_execute,
                                                   ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx)),
                                                   OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8007870:	2304      	movs	r3, #4
 8007872:	f887 3639 	strb.w	r3, [r7, #1593]	; 0x639
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8007876:	f8c4 a67c 	str.w	sl, [r4, #1660]	; 0x67c
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 800787a:	b003      	add	sp, #12
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8007880:	490a      	ldr	r1, [pc, #40]	; (80078ac <optiga_cmd_queue_scheduler+0x1c8>)
 8007882:	4640      	mov	r0, r8
 8007884:	4622      	mov	r2, r4
 8007886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 800788a:	b003      	add	sp, #12
 800788c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8007890:	f7fc bce2 	b.w	8004258 <pal_os_event_register_callback_oneshot>
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8007894:	f104 0008 	add.w	r0, r4, #8
 8007898:	9201      	str	r2, [sp, #4]
 800789a:	f7fe ff09 	bl	80066b0 <optiga_common_get_uint32>
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 800789e:	f1b0 3f10 	cmp.w	r0, #269488144	; 0x10101010
 80078a2:	9a01      	ldr	r2, [sp, #4]
 80078a4:	d296      	bcs.n	80077d4 <optiga_cmd_queue_scheduler+0xf0>
 80078a6:	e79d      	b.n	80077e4 <optiga_cmd_queue_scheduler+0x100>
 80078a8:	08006d19 	.word	0x08006d19
 80078ac:	080076e5 	.word	0x080076e5

080078b0 <optiga_cmd_set_shielded_connection_option>:
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
    switch (shielded_connection_option)
 80078b0:	2a01      	cmp	r2, #1
 80078b2:	d005      	beq.n	80078c0 <optiga_cmd_set_shielded_connection_option+0x10>
 80078b4:	d302      	bcc.n	80078bc <optiga_cmd_set_shielded_connection_option+0xc>
 80078b6:	2a02      	cmp	r2, #2
 80078b8:	d004      	beq.n	80078c4 <optiga_cmd_set_shielded_connection_option+0x14>
 80078ba:	4770      	bx	lr
    {
        // Protection Level
        case OPTIGA_SET_PROTECTION_LEVEL:
        {
            me->protection_level = value;
 80078bc:	7681      	strb	r1, [r0, #26]
        }
        break;
 80078be:	4770      	bx	lr
        // Protocol Version
        case OPTIGA_SET_PROTECTION_VERSION:
        {
            me->protocol_version = value;
 80078c0:	76c1      	strb	r1, [r0, #27]
        }
        break;
 80078c2:	4770      	bx	lr
        // Manage Context
        case OPTIGA_SET_MANAGE_CONTEXT:
        {
            me->manage_context_operation = value;
 80078c4:	7701      	strb	r1, [r0, #28]
 80078c6:	4770      	bx	lr

080078c8 <optiga_cmd_create>:
        }
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	4616      	mov	r6, r2
 80078cc:	460f      	mov	r7, r1
    optiga_cmd_t * me = NULL;

    pal_os_lock_enter_critical_section();
 80078ce:	f7fc fceb 	bl	80042a8 <pal_os_lock_enter_critical_section>
 80078d2:	2200      	movs	r2, #0
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
 80078d4:	4613      	mov	r3, r2
 80078d6:	4d25      	ldr	r5, [pc, #148]	; (800796c <optiga_cmd_create+0xa4>)
 80078d8:	18a9      	adds	r1, r5, r2
            }
            break;
            default:
                break;
        }
        if (state_to_check == slot_value)
 80078da:	f891 1639 	ldrb.w	r1, [r1, #1593]	; 0x639
 80078de:	b909      	cbnz	r1, 80078e4 <optiga_cmd_create+0x1c>
        {
            count++;
 80078e0:	3301      	adds	r3, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	320c      	adds	r2, #12
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80078e6:	2a48      	cmp	r2, #72	; 0x48
 80078e8:	d1f5      	bne.n	80078d6 <optiga_cmd_create+0xe>

    pal_os_lock_enter_critical_section();
    do
    {
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 80078ea:	b90b      	cbnz	r3, 80078f0 <optiga_cmd_create+0x28>
    } while (FALSE == exit_loop);
}

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
    optiga_cmd_t * me = NULL;
 80078ec:	2400      	movs	r4, #0
 80078ee:	e039      	b.n	8007964 <optiga_cmd_create+0x9c>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 80078f0:	2001      	movs	r0, #1
 80078f2:	2128      	movs	r1, #40	; 0x28
 80078f4:	f7fc fcda 	bl	80042ac <pal_os_calloc>
        if (NULL == me)
 80078f8:	4604      	mov	r4, r0
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d0f6      	beq.n	80078ec <optiga_cmd_create+0x24>
        {
            break;
        }

        me->handler = handler;
        me->caller_context = caller_context;
 80078fe:	60c6      	str	r6, [r0, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8007900:	2333      	movs	r3, #51	; 0x33
        }

        me->handler = handler;
        me->caller_context = caller_context;

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8007902:	6005      	str	r5, [r0, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8007904:	8443      	strh	r3, [r0, #34]	; 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8007906:	7b2b      	ldrb	r3, [r5, #12]
        if (NULL == me)
        {
            break;
        }

        me->handler = handler;
 8007908:	6107      	str	r7, [r0, #16]
        me->caller_context = caller_context;

        me->p_optiga = g_optiga_list[optiga_instance_id];
 800790a:	4e18      	ldr	r6, [pc, #96]	; (800796c <optiga_cmd_create+0xa4>)
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
 800790c:	b9cb      	cbnz	r3, 8007942 <optiga_cmd_create+0x7a>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 800790e:	4631      	mov	r1, r6
 8007910:	4817      	ldr	r0, [pc, #92]	; (8007970 <optiga_cmd_create+0xa8>)
 8007912:	f7fc fcbd 	bl	8004290 <pal_os_event_create>
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8007916:	4621      	mov	r1, r4
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];

        if (FALSE == me->p_optiga->instance_init_state)
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 8007918:	f8c6 0678 	str.w	r0, [r6, #1656]	; 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 800791c:	4815      	ldr	r0, [pc, #84]	; (8007974 <optiga_cmd_create+0xac>)
 800791e:	6825      	ldr	r5, [r4, #0]
 8007920:	f7fe fe42 	bl	80065a8 <optiga_comms_create>
            if (NULL == me->p_optiga->p_optiga_comms)
 8007924:	6823      	ldr	r3, [r4, #0]

        if (FALSE == me->p_optiga->instance_init_state)
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8007926:	6028      	str	r0, [r5, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8007928:	681d      	ldr	r5, [r3, #0]
 800792a:	b91d      	cbnz	r5, 8007934 <optiga_cmd_create+0x6c>
            {
                pal_os_free(me);
 800792c:	4620      	mov	r0, r4
 800792e:	f7fc fcbf 	bl	80042b0 <pal_os_free>
 8007932:	e7db      	b.n	80078ec <optiga_cmd_create+0x24>
                me = NULL;
                break;
            }
            me->p_optiga->instance_init_state = TRUE;
 8007934:	2201      	movs	r2, #1
 8007936:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
 8007940:	6153      	str	r3, [r2, #20]
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 8007942:	6821      	ldr	r1, [r4, #0]
 8007944:	2300      	movs	r3, #0
 8007946:	220c      	movs	r2, #12
 8007948:	fb02 1203 	mla	r2, r2, r3, r1
 800794c:	b2d8      	uxtb	r0, r3
 800794e:	f892 5639 	ldrb.w	r5, [r2, #1593]	; 0x639
 8007952:	b925      	cbnz	r5, 800795e <optiga_cmd_create+0x96>
        {
            * queue_index_store =  index;
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8007954:	2301      	movs	r3, #1
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
        {
            * queue_index_store =  index;
 8007956:	77a0      	strb	r0, [r4, #30]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8007958:	f882 3639 	strb.w	r3, [r2, #1593]	; 0x639
 800795c:	e002      	b.n	8007964 <optiga_cmd_create+0x9c>
 800795e:	3301      	adds	r3, #1
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8007960:	2b06      	cmp	r3, #6
 8007962:	d1f0      	bne.n	8007946 <optiga_cmd_create+0x7e>
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8007964:	f7fc fca1 	bl	80042aa <pal_os_lock_exit_critical_section>
    return (me);
}
 8007968:	4620      	mov	r0, r4
 800796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796c:	1ffed874 	.word	0x1ffed874
 8007970:	080076e5 	.word	0x080076e5
 8007974:	08006949 	.word	0x08006949

08007978 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 8007978:	b510      	push	{r4, lr}
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
    do
    {
        if (NULL != me)
 800797a:	b1d8      	cbz	r0, 80079b4 <optiga_cmd_destroy+0x3c>
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 800797c:	8a83      	ldrh	r3, [r0, #20]
/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 800797e:	6801      	ldr	r1, [r0, #0]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8007980:	b12b      	cbz	r3, 800798e <optiga_cmd_destroy+0x16>
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	440b      	add	r3, r1
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
    {
        count = me->session_oid & 0x0F;
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8007988:	2200      	movs	r2, #0
 800798a:	8282      	strh	r2, [r0, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 800798c:	721a      	strb	r2, [r3, #8]
/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 800798e:	6802      	ldr	r2, [r0, #0]
 8007990:	7f83      	ldrb	r3, [r0, #30]
 8007992:	210c      	movs	r1, #12
 8007994:	fb01 2303 	mla	r3, r1, r3, r2
 8007998:	2400      	movs	r4, #0
 800799a:	f883 4639 	strb.w	r4, [r3, #1593]	; 0x639
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 800799e:	7f82      	ldrb	r2, [r0, #30]
 80079a0:	6803      	ldr	r3, [r0, #0]
 80079a2:	fb01 3302 	mla	r3, r1, r2, r3
 80079a6:	f883 4638 	strb.w	r4, [r3, #1592]	; 0x638
    me->queue_id = 0;
 80079aa:	7784      	strb	r4, [r0, #30]
        if (NULL != me)
        {
            return_status = optiga_cmd_release_session(me);
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
            pal_os_free(me);
 80079ac:	f7fc fc80 	bl	80042b0 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 80079b0:	4620      	mov	r0, r4
 80079b2:	bd10      	pop	{r4, pc}
    return (me);
}

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80079b4:	f240 2002 	movw	r0, #514	; 0x202
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
        }
    } while (FALSE);
    return (return_status);
}
 80079b8:	bd10      	pop	{r4, pc}
	...

080079bc <optiga_cmd_open_application>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 80079bc:	b510      	push	{r4, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 80079be:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 80079c0:	4a06      	ldr	r2, [pc, #24]	; (80079dc <optiga_cmd_open_application+0x20>)
 80079c2:	6042      	str	r2, [r0, #4]
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80079c4:	2400      	movs	r4, #0
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80079c6:	22f0      	movs	r2, #240	; 0xf0
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 80079c8:	7584      	strb	r4, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80079ca:	75c4      	strb	r4, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80079cc:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 80079ce:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 80079d0:	8482      	strh	r2, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80079d2:	4621      	mov	r1, r4
 80079d4:	f7fe ffb8 	bl	8006948 <optiga_cmd_execute_handler>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 80079d8:	4620      	mov	r0, r4
 80079da:	bd10      	pop	{r4, pc}
 80079dc:	08007609 	.word	0x08007609

080079e0 <optiga_cmd_close_application>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_close_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 80079e0:	b510      	push	{r4, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 80079e2:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
 80079e4:	2202      	movs	r2, #2
 80079e6:	7582      	strb	r2, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 80079e8:	2206      	movs	r2, #6
 80079ea:	75c2      	strb	r2, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80079ec:	4a05      	ldr	r2, [pc, #20]	; (8007a04 <optiga_cmd_close_application+0x24>)
 80079ee:	6042      	str	r2, [r0, #4]
    me->chaining_ongoing = FALSE;
 80079f0:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 80079f2:	22f1      	movs	r2, #241	; 0xf1
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 80079f4:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 80079f6:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 80079f8:	8482      	strh	r2, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80079fa:	4621      	mov	r1, r4
 80079fc:	f7fe ffa4 	bl	8006948 <optiga_cmd_execute_handler>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CLOSE_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8007a00:	4620      	mov	r0, r4
 8007a02:	bd10      	pop	{r4, pc}
 8007a04:	08007595 	.word	0x08007595

08007a08 <optiga_cmd_get_data_object>:
    return (return_status);
}

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 8007a08:	b510      	push	{r4, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8007a0a:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	7582      	strb	r2, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 8007a10:	2206      	movs	r2, #6
 8007a12:	75c2      	strb	r2, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8007a14:	4a05      	ldr	r2, [pc, #20]	; (8007a2c <optiga_cmd_get_data_object+0x24>)
 8007a16:	6042      	str	r2, [r0, #4]
    me->chaining_ongoing = FALSE;
 8007a18:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007a1a:	2281      	movs	r2, #129	; 0x81
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007a1c:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 8007a1e:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 8007a20:	8482      	strh	r2, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007a22:	4621      	mov	r1, r4
 8007a24:	f7fe ff90 	bl	8006948 <optiga_cmd_execute_handler>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8007a28:	4620      	mov	r0, r4
 8007a2a:	bd10      	pop	{r4, pc}
 8007a2c:	08006d1f 	.word	0x08006d1f

08007a30 <optiga_cmd_set_data_object>:
}


optiga_lib_status_t optiga_cmd_set_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_set_data_object_params_t * params)
{
 8007a30:	b510      	push	{r4, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8007a32:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
 8007a34:	2202      	movs	r2, #2
 8007a36:	7582      	strb	r2, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 8007a38:	2206      	movs	r2, #6
 8007a3a:	75c2      	strb	r2, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8007a3c:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <optiga_cmd_set_data_object+0x24>)
 8007a3e:	6042      	str	r2, [r0, #4]
    me->chaining_ongoing = FALSE;
 8007a40:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007a42:	2282      	movs	r2, #130	; 0x82
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007a44:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 8007a46:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 8007a48:	8482      	strh	r2, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	f7fe ff7c 	bl	8006948 <optiga_cmd_execute_handler>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_SET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8007a50:	4620      	mov	r0, r4
 8007a52:	bd10      	pop	{r4, pc}
 8007a54:	08006e21 	.word	0x08006e21

08007a58 <optiga_cmd_get_random>:
    return (return_status);
}


optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
 8007a58:	b510      	push	{r4, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8007a5a:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	7582      	strb	r2, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 8007a60:	2206      	movs	r2, #6
 8007a62:	75c2      	strb	r2, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8007a64:	4a05      	ldr	r2, [pc, #20]	; (8007a7c <optiga_cmd_get_random+0x24>)
 8007a66:	6042      	str	r2, [r0, #4]
    me->chaining_ongoing = FALSE;
 8007a68:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007a6a:	228c      	movs	r2, #140	; 0x8c
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007a6c:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 8007a6e:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 8007a70:	8482      	strh	r2, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007a72:	4621      	mov	r1, r4
 8007a74:	f7fe ff68 	bl	8006948 <optiga_cmd_execute_handler>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_RANDOM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8007a78:	4620      	mov	r0, r4
 8007a7a:	bd10      	pop	{r4, pc}
 8007a7c:	08006edd 	.word	0x08006edd

08007a80 <optiga_cmd_calc_sign>:
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdsa_sign->private_key_oid)
 8007a80:	8993      	ldrh	r3, [r2, #12]
    return (return_status);
}


optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
 8007a82:	b510      	push	{r4, lr}
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdsa_sign->private_key_oid)
 8007a84:	b91b      	cbnz	r3, 8007a8e <optiga_cmd_calc_sign+0xe>
        {
            if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid)
 8007a86:	8a83      	ldrh	r3, [r0, #20]
 8007a88:	b193      	cbz	r3, 8007ab0 <optiga_cmd_calc_sign+0x30>
            {
                break;
            }
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
 8007a8a:	2305      	movs	r3, #5
 8007a8c:	e000      	b.n	8007a90 <optiga_cmd_calc_sign+0x10>

optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
 8007a8e:	2306      	movs	r3, #6
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
 8007a90:	75c3      	strb	r3, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <optiga_cmd_calc_sign+0x38>)
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8007a94:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007a96:	2400      	movs	r4, #0
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8007a98:	2202      	movs	r2, #2
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 8007a9a:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007a9c:	23b1      	movs	r3, #177	; 0xb1
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8007a9e:	7582      	strb	r2, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007aa0:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 8007aa2:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 8007aa4:	8483      	strh	r3, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	f7fe ff4e 	bl	8006948 <optiga_cmd_execute_handler>
                           cmd_handler_state,
                           params,
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
 8007aac:	4620      	mov	r0, r4
 8007aae:	bd10      	pop	{r4, pc}
}


optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
 8007ab0:	f240 2003 	movw	r0, #515	; 0x203
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    return (return_status);
}
 8007ab4:	bd10      	pop	{r4, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08006f35 	.word	0x08006f35

08007abc <optiga_cmd_verify_sign>:
}

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8007abc:	b510      	push	{r4, lr}
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8007abe:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	7582      	strb	r2, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 8007ac4:	2206      	movs	r2, #6
 8007ac6:	75c2      	strb	r2, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8007ac8:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <optiga_cmd_verify_sign+0x24>)
 8007aca:	6042      	str	r2, [r0, #4]
    me->chaining_ongoing = FALSE;
 8007acc:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007ace:	22b2      	movs	r2, #178	; 0xb2
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007ad0:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 8007ad2:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 8007ad4:	8482      	strh	r2, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	f7fe ff36 	bl	8006948 <optiga_cmd_execute_handler>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8007adc:	4620      	mov	r0, r4
 8007ade:	bd10      	pop	{r4, pc}
 8007ae0:	08007003 	.word	0x08007003

08007ae4 <optiga_cmd_gen_keypair>:

    return (return_status);
}

optiga_lib_status_t optiga_cmd_gen_keypair(optiga_cmd_t * me, uint8_t cmd_param, optiga_gen_keypair_params_t * params)
{
 8007ae4:	b570      	push	{r4, r5, r6, lr}
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
        && (FALSE == p_optiga_ecc_gen_keypair->export_private_key))
 8007ae6:	6814      	ldr	r4, [r2, #0]
 8007ae8:	4d0e      	ldr	r5, [pc, #56]	; (8007b24 <optiga_cmd_gen_keypair+0x40>)
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8007aea:	6082      	str	r2, [r0, #8]
 8007aec:	2602      	movs	r6, #2
optiga_lib_status_t optiga_cmd_gen_keypair(optiga_cmd_t * me, uint8_t cmd_param, optiga_gen_keypair_params_t * params)
{
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
 8007aee:	f034 04ff 	bics.w	r4, r4, #255	; 0xff
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8007af2:	7586      	strb	r6, [r0, #22]
optiga_lib_status_t optiga_cmd_gen_keypair(optiga_cmd_t * me, uint8_t cmd_param, optiga_gen_keypair_params_t * params)
{
    optiga_gen_keypair_params_t * p_optiga_ecc_gen_keypair = (optiga_gen_keypair_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecc_gen_keypair->private_key_oid)
 8007af4:	d108      	bne.n	8007b08 <optiga_cmd_gen_keypair+0x24>
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
 8007af6:	2205      	movs	r2, #5
 8007af8:	75c2      	strb	r2, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007afa:	22b8      	movs	r2, #184	; 0xb8
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 8007afc:	7641      	strb	r1, [r0, #25]
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 8007afe:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
 8007b00:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007b02:	8482      	strh	r2, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007b04:	4621      	mov	r1, r4
 8007b06:	e008      	b.n	8007b1a <optiga_cmd_gen_keypair+0x36>
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
 8007b08:	2206      	movs	r2, #6
 8007b0a:	75c2      	strb	r2, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
 8007b0c:	7641      	strb	r1, [r0, #25]
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007b0e:	2200      	movs	r2, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007b10:	21b8      	movs	r1, #184	; 0xb8
 8007b12:	8481      	strh	r1, [r0, #36]	; 0x24
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 8007b14:	6045      	str	r5, [r0, #4]
    me->chaining_ongoing = FALSE;
 8007b16:	7602      	strb	r2, [r0, #24]
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007b18:	4611      	mov	r1, r2
 8007b1a:	f7fe ff15 	bl	8006948 <optiga_cmd_execute_handler>
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GEN_KEYPAIR, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));
    }

    return (OPTIGA_LIB_SUCCESS);
}
 8007b1e:	2000      	movs	r0, #0
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	bf00      	nop
 8007b24:	0800721d 	.word	0x0800721d

08007b28 <optiga_cmd_calc_hash>:
}

optiga_lib_status_t optiga_cmd_calc_hash(optiga_cmd_t * me,
                                         uint8_t cmd_param,
                                         optiga_calc_hash_params_t * params)
{
 8007b28:	b510      	push	{r4, lr}
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    p_optiga_calc_hash->data_sent = 0;
 8007b2a:	2400      	movs	r4, #0
 8007b2c:	6114      	str	r4, [r2, #16]
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8007b2e:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
 8007b30:	2202      	movs	r2, #2
 8007b32:	7582      	strb	r2, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
 8007b34:	2206      	movs	r2, #6
 8007b36:	75c2      	strb	r2, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8007b38:	4a05      	ldr	r2, [pc, #20]	; (8007b50 <optiga_cmd_calc_hash+0x28>)
 8007b3a:	6042      	str	r2, [r0, #4]
    me->chaining_ongoing = FALSE;
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007b3c:	22b0      	movs	r2, #176	; 0xb0
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007b3e:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 8007b40:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 8007b42:	8482      	strh	r2, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007b44:	4621      	mov	r1, r4
 8007b46:	f7fe feff 	bl	8006948 <optiga_cmd_execute_handler>
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_HASH, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
}
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	bf00      	nop
 8007b50:	0800735d 	.word	0x0800735d

08007b54 <optiga_cmd_set_object_protected>:
    return (return_status);
}

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
 8007b54:	b570      	push	{r4, r5, r6, lr}
    optiga_cmd_sub_state_t next_execution_sub_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    // Continue or Final API is invoked without strict lock acquired by instance
    if (((OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag) ||
 8007b56:	7995      	ldrb	r5, [r2, #6]
 8007b58:	1e6b      	subs	r3, r5, #1
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d80d      	bhi.n	8007b7a <optiga_cmd_set_object_protected+0x26>
    uint8_t state = 0;
    switch (slot_member)
    {
        case OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE:
        {
            state = me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type;
 8007b5e:	7f84      	ldrb	r4, [r0, #30]
 8007b60:	6803      	ldr	r3, [r0, #0]
 8007b62:	260c      	movs	r6, #12
 8007b64:	fb06 3304 	mla	r3, r6, r4, r3
 8007b68:	f503 64c7 	add.w	r4, r3, #1592	; 0x638
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    // Continue or Final API is invoked without strict lock acquired by instance
    if (((OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag) ||
       (OPTIGA_SET_PROTECTED_UPDATE_CONTINUE == params->set_obj_protected_tag)) &&
 8007b6c:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 8007b70:	2b23      	cmp	r3, #35	; 0x23
 8007b72:	d11c      	bne.n	8007bae <optiga_cmd_set_object_protected+0x5a>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE)) ||
 8007b74:	7863      	ldrb	r3, [r4, #1]
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d119      	bne.n	8007bae <optiga_cmd_set_object_protected+0x5a>
    {
        return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
    }
    else
    {
        if (( NULL == params->p_protected_update_buffer ) &&
 8007b7a:	6813      	ldr	r3, [r2, #0]
 8007b7c:	b933      	cbnz	r3, 8007b8c <optiga_cmd_set_object_protected+0x38>
            (OPTIGA_SET_PROTECTED_UPDATE_FINAL == params->set_obj_protected_tag))
        {
            /// Release the strict sequence
            next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
            next_execution_sub_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8007b7e:	2d01      	cmp	r5, #1
 8007b80:	bf15      	itete	ne
 8007b82:	2307      	movne	r3, #7
 8007b84:	230b      	moveq	r3, #11
 8007b86:	2402      	movne	r4, #2
 8007b88:	2403      	moveq	r4, #3
 8007b8a:	e001      	b.n	8007b90 <optiga_cmd_set_object_protected+0x3c>

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
    optiga_cmd_sub_state_t next_execution_sub_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8007b8c:	2307      	movs	r3, #7
}

optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8007b8e:	2402      	movs	r4, #2
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
 8007b90:	75c3      	strb	r3, [r0, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8007b92:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <optiga_cmd_set_object_protected+0x60>)
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
    me->cmd_next_execution_state = start_state;
 8007b94:	7584      	strb	r4, [r0, #22]
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
 8007b96:	6043      	str	r3, [r0, #4]
    me->chaining_ongoing = FALSE;
 8007b98:	2400      	movs	r4, #0
    me->cmd_param = cmd_param;
    me->apdu_data = apdu_data;
 8007b9a:	2383      	movs	r3, #131	; 0x83
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
    me->p_input = input;
 8007b9c:	6082      	str	r2, [r0, #8]
    me->cmd_next_execution_state = start_state;
    me->cmd_sub_execution_state = sub_state;
    me->cmd_hdlrs = cmd_hdlrs;
    me->chaining_ongoing = FALSE;
 8007b9e:	7604      	strb	r4, [r0, #24]
    me->cmd_param = cmd_param;
 8007ba0:	7641      	strb	r1, [r0, #25]
    me->apdu_data = apdu_data;
 8007ba2:	8483      	strh	r3, [r0, #36]	; 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	f7fe fecf 	bl	8006948 <optiga_cmd_execute_handler>
optiga_lib_status_t optiga_cmd_set_object_protected(optiga_cmd_t * me, uint8_t cmd_param,
                                                    optiga_set_object_protected_params_t * params)
{
    optiga_cmd_state_t next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
    optiga_cmd_sub_state_t next_execution_sub_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
 8007baa:	4620      	mov	r0, r4
 8007bac:	bd70      	pop	{r4, r5, r6, pc}
       (OPTIGA_SET_PROTECTED_UPDATE_CONTINUE == params->set_obj_protected_tag)) &&
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE)) ||
       (OPTIGA_CMD_QUEUE_PROCESSING != optiga_cmd_queue_get_state_of(me, OPTIGA_CMD_QUEUE_SLOT_STATE))))

    {
        return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
 8007bae:	f240 2003 	movw	r0, #515	; 0x203
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_SET_OBJECT_PROTECTED, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));
    }

    return (return_status);
}
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	08007165 	.word	0x08007165

08007bb8 <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8007bbc:	2301      	movs	r3, #1
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8007bbe:	f5ad 6d00 	sub.w	sp, sp, #2048	; 0x800
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8007bc2:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 8007bc4:	f50d 6680 	add.w	r6, sp, #1024	; 0x400
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8007bc8:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 8007bcc:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
        log[x] = i;
 8007bd0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8007bd4:	bf18      	it	ne
 8007bd6:	211b      	movne	r1, #27
 8007bd8:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8007bdc:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8007bde:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8007be0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8007be4:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8007be6:	d1ed      	bne.n	8007bc4 <aes_gen_tables+0xc>
 8007be8:	2301      	movs	r3, #1
 8007bea:	2200      	movs	r2, #0
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 8007bec:	4960      	ldr	r1, [pc, #384]	; (8007d70 <aes_gen_tables+0x1b8>)
 8007bee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 8007bf2:	f013 0180 	ands.w	r1, r3, #128	; 0x80
 8007bf6:	bf18      	it	ne
 8007bf8:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8007bfa:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 8007bfc:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8007c00:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 8007c02:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8007c04:	d1f2      	bne.n	8007bec <aes_gen_tables+0x34>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8007c06:	4d5b      	ldr	r5, [pc, #364]	; (8007d74 <aes_gen_tables+0x1bc>)
    RSb[0x63] = 0x00;
 8007c08:	4c5b      	ldr	r4, [pc, #364]	; (8007d78 <aes_gen_tables+0x1c0>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8007c0a:	2363      	movs	r3, #99	; 0x63
 8007c0c:	702b      	strb	r3, [r5, #0]
    RSb[0x63] = 0x00;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 8007c14:	2001      	movs	r0, #1
    {
        x = pow[255 - log[i]];
 8007c16:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8007c1a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007c1e:	f85d e023 	ldr.w	lr, [sp, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8007c22:	ea4f 014e 	mov.w	r1, lr, lsl #1
 8007c26:	ea41 11ee 	orr.w	r1, r1, lr, asr #7
 8007c2a:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8007c2c:	004a      	lsls	r2, r1, #1
 8007c2e:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
 8007c32:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8007c34:	0053      	lsls	r3, r2, #1
 8007c36:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8007c40:	005f      	lsls	r7, r3, #1
 8007c42:	ea8e 0101 	eor.w	r1, lr, r1
 8007c46:	ea47 17d3 	orr.w	r7, r7, r3, lsr #7
 8007c4a:	404a      	eors	r2, r1
 8007c4c:	4053      	eors	r3, r2
 8007c4e:	b2fa      	uxtb	r2, r7
        x ^= y ^ 0x63;
 8007c50:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 8007c52:	542b      	strb	r3, [r5, r0]
        RSb[x] = (unsigned char) i;
 8007c54:	54e0      	strb	r0, [r4, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 8007c56:	3001      	adds	r0, #1
 8007c58:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007c5c:	d1db      	bne.n	8007c16 <aes_gen_tables+0x5e>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8007c5e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8007c60:	6a74      	ldr	r4, [r6, #36]	; 0x24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8007c62:	6b75      	ldr	r5, [r6, #52]	; 0x34
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8007c64:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 8007c66:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 8007c68:	4b42      	ldr	r3, [pc, #264]	; (8007d74 <aes_gen_tables+0x1bc>)
 8007c6a:	5cd7      	ldrb	r7, [r2, r3]
        y = XTIME( x ) & 0xFF;
 8007c6c:	f017 0f80 	tst.w	r7, #128	; 0x80
 8007c70:	bf14      	ite	ne
 8007c72:	231b      	movne	r3, #27
 8007c74:	2300      	moveq	r3, #0
 8007c76:	ea83 0347 	eor.w	r3, r3, r7, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8007c7a:	0239      	lsls	r1, r7, #8
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8007c82:	4059      	eors	r1, r3
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
        z =  ( y ^ x ) & 0xFF;
 8007c84:	407b      	eors	r3, r7

        FT0[i] = ( (uint32_t) y       ) ^
 8007c86:	4f3d      	ldr	r7, [pc, #244]	; (8007d7c <aes_gen_tables+0x1c4>)
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 8007c88:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
 8007c8c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 8007c90:	4f3b      	ldr	r7, [pc, #236]	; (8007d80 <aes_gen_tables+0x1c8>)
 8007c92:	ea4f 6333 	mov.w	r3, r3, ror #24
 8007c96:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8007c9a:	4f3a      	ldr	r7, [pc, #232]	; (8007d84 <aes_gen_tables+0x1cc>)
 8007c9c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8007ca0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8007ca4:	4f38      	ldr	r7, [pc, #224]	; (8007d88 <aes_gen_tables+0x1d0>)
 8007ca6:	ea4f 6333 	mov.w	r3, r3, ror #24
 8007caa:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8007cae:	4b32      	ldr	r3, [pc, #200]	; (8007d78 <aes_gen_tables+0x1c0>)
 8007cb0:	5c9b      	ldrb	r3, [r3, r2]
 8007cb2:	0091      	lsls	r1, r2, #2

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8007cb4:	b1d3      	cbz	r3, 8007cec <aes_gen_tables+0x134>
 8007cb6:	f50d 6780 	add.w	r7, sp, #1024	; 0x400
 8007cba:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007cbe:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8007cc2:	eb00 0c07 	add.w	ip, r0, r7
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8007cc6:	4427      	add	r7, r4
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8007cc8:	fb9c f8fe 	sdiv	r8, ip, lr
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8007ccc:	fb97 fefe 	sdiv	lr, r7, lr
 8007cd0:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8007cd4:	ebce 0707 	rsb	r7, lr, r7
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8007cd8:	ebc8 2808 	rsb	r8, r8, r8, lsl #8
 8007cdc:	ebc8 0c0c 	rsb	ip, r8, ip
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8007ce0:	f85d 7027 	ldr.w	r7, [sp, r7, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8007ce4:	f85d c02c 	ldr.w	ip, [sp, ip, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8007ce8:	023f      	lsls	r7, r7, #8
 8007cea:	e001      	b.n	8007cf0 <aes_gen_tables+0x138>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8007cec:	469c      	mov	ip, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8007cee:	461f      	mov	r7, r3
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8007cf0:	ea8c 0e07 	eor.w	lr, ip, r7
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8007cf4:	b183      	cbz	r3, 8007d18 <aes_gen_tables+0x160>
 8007cf6:	f50d 6780 	add.w	r7, sp, #1024	; 0x400
 8007cfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007cfe:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8007d02:	442f      	add	r7, r5
 8007d04:	fb97 fcfc 	sdiv	ip, r7, ip
 8007d08:	ebcc 2c0c 	rsb	ip, ip, ip, lsl #8
 8007d0c:	ebcc 0707 	rsb	r7, ip, r7
 8007d10:	f85d 7027 	ldr.w	r7, [sp, r7, lsl #2]
 8007d14:	043f      	lsls	r7, r7, #16
 8007d16:	e000      	b.n	8007d1a <aes_gen_tables+0x162>
 8007d18:	461f      	mov	r7, r3
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8007d1a:	ea8e 0707 	eor.w	r7, lr, r7
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8007d1e:	b17b      	cbz	r3, 8007d40 <aes_gen_tables+0x188>
 8007d20:	f50d 6e80 	add.w	lr, sp, #1024	; 0x400
 8007d24:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8007d28:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007d2c:	4433      	add	r3, r6
 8007d2e:	fb93 fefe 	sdiv	lr, r3, lr
 8007d32:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 8007d36:	ebce 0303 	rsb	r3, lr, r3
 8007d3a:	f85d 3023 	ldr.w	r3, [sp, r3, lsl #2]
 8007d3e:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8007d40:	407b      	eors	r3, r7
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8007d42:	4f12      	ldr	r7, [pc, #72]	; (8007d8c <aes_gen_tables+0x1d4>)
 8007d44:	51cb      	str	r3, [r1, r7]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8007d46:	4f12      	ldr	r7, [pc, #72]	; (8007d90 <aes_gen_tables+0x1d8>)
 8007d48:	ea4f 6333 	mov.w	r3, r3, ror #24
 8007d4c:	51cb      	str	r3, [r1, r7]
        RT2[i] = ROTL8( RT1[i] );
 8007d4e:	4f11      	ldr	r7, [pc, #68]	; (8007d94 <aes_gen_tables+0x1dc>)
 8007d50:	ea4f 6333 	mov.w	r3, r3, ror #24
 8007d54:	51cb      	str	r3, [r1, r7]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8007d56:	3201      	adds	r2, #1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 8007d58:	4f0f      	ldr	r7, [pc, #60]	; (8007d98 <aes_gen_tables+0x1e0>)
 8007d5a:	ea4f 6333 	mov.w	r3, r3, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8007d5e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 8007d62:	51cb      	str	r3, [r1, r7]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8007d64:	d180      	bne.n	8007c68 <aes_gen_tables+0xb0>
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8007d66:	f50d 6d00 	add.w	sp, sp, #2048	; 0x800
 8007d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d6e:	bf00      	nop
 8007d70:	1ffeef00 	.word	0x1ffeef00
 8007d74:	1ffeef2c 	.word	0x1ffeef2c
 8007d78:	1ffefc2c 	.word	0x1ffefc2c
 8007d7c:	1ffedf00 	.word	0x1ffedf00
 8007d80:	1ffee300 	.word	0x1ffee300
 8007d84:	1ffee700 	.word	0x1ffee700
 8007d88:	1ffeeb00 	.word	0x1ffeeb00
 8007d8c:	1ffef02c 	.word	0x1ffef02c
 8007d90:	1ffef42c 	.word	0x1ffef42c
 8007d94:	1ffef82c 	.word	0x1ffef82c
 8007d98:	1ffefd2c 	.word	0x1ffefd2c

08007d9c <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007da2:	f003 bd04 	b.w	800b7ae <memset>

08007da6 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 8007da6:	b118      	cbz	r0, 8007db0 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8007da8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007dac:	f001 b932 	b.w	8009014 <mbedtls_platform_zeroize>
 8007db0:	4770      	bx	lr
	...

08007db4 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8007db4:	2ac0      	cmp	r2, #192	; 0xc0
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8007db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db8:	4604      	mov	r4, r0
 8007dba:	460f      	mov	r7, r1
 8007dbc:	4615      	mov	r5, r2
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8007dbe:	d007      	beq.n	8007dd0 <mbedtls_aes_setkey_enc+0x1c>
 8007dc0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007dc4:	d006      	beq.n	8007dd4 <mbedtls_aes_setkey_enc+0x20>
 8007dc6:	2a80      	cmp	r2, #128	; 0x80
 8007dc8:	f040 80e2 	bne.w	8007f90 <mbedtls_aes_setkey_enc+0x1dc>
    {
        case 128: ctx->nr = 10; break;
 8007dcc:	230a      	movs	r3, #10
 8007dce:	e002      	b.n	8007dd6 <mbedtls_aes_setkey_enc+0x22>
        case 192: ctx->nr = 12; break;
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	e000      	b.n	8007dd6 <mbedtls_aes_setkey_enc+0x22>
        case 256: ctx->nr = 14; break;
 8007dd4:	230e      	movs	r3, #14
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8007dd6:	4e71      	ldr	r6, [pc, #452]	; (8007f9c <mbedtls_aes_setkey_enc+0x1e8>)

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
 8007dd8:	6023      	str	r3, [r4, #0]
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8007dda:	6833      	ldr	r3, [r6, #0]
 8007ddc:	b91b      	cbnz	r3, 8007de6 <mbedtls_aes_setkey_enc+0x32>
    {
        aes_gen_tables();
 8007dde:	f7ff feeb 	bl	8007bb8 <aes_gen_tables>
        aes_init_done = 1;
 8007de2:	2301      	movs	r3, #1
 8007de4:	6033      	str	r3, [r6, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8007de6:	f104 0308 	add.w	r3, r4, #8
 8007dea:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8007dec:	096d      	lsrs	r5, r5, #5
 8007dee:	2200      	movs	r2, #0
 8007df0:	42aa      	cmp	r2, r5
 8007df2:	d010      	beq.n	8007e16 <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8007df4:	eb07 0182 	add.w	r1, r7, r2, lsl #2
 8007df8:	7888      	ldrb	r0, [r1, #2]
 8007dfa:	784e      	ldrb	r6, [r1, #1]
 8007dfc:	78c9      	ldrb	r1, [r1, #3]
 8007dfe:	0400      	lsls	r0, r0, #16
 8007e00:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8007e04:	f817 6022 	ldrb.w	r6, [r7, r2, lsl #2]
 8007e08:	4330      	orrs	r0, r6
 8007e0a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8007e0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8007e12:	3201      	adds	r2, #1
 8007e14:	e7ec      	b.n	8007df0 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	2a0c      	cmp	r2, #12
 8007e1a:	d031      	beq.n	8007e80 <mbedtls_aes_setkey_enc+0xcc>
 8007e1c:	2a0e      	cmp	r2, #14
 8007e1e:	d066      	beq.n	8007eee <mbedtls_aes_setkey_enc+0x13a>
 8007e20:	2a0a      	cmp	r2, #10
 8007e22:	f040 80b8 	bne.w	8007f96 <mbedtls_aes_setkey_enc+0x1e2>
 8007e26:	2500      	movs	r5, #0
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8007e28:	4a5d      	ldr	r2, [pc, #372]	; (8007fa0 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8007e2a:	68dc      	ldr	r4, [r3, #12]
 8007e2c:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4e5c      	ldr	r6, [pc, #368]	; (8007fa4 <mbedtls_aes_setkey_enc+0x1f0>)
 8007e34:	4051      	eors	r1, r2
 8007e36:	f3c4 2207 	ubfx	r2, r4, #8, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8007e3a:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8007e3c:	5cb0      	ldrb	r0, [r6, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8007e3e:	0e22      	lsrs	r2, r4, #24
 8007e40:	4041      	eors	r1, r0
 8007e42:	5cb2      	ldrb	r2, [r6, r2]
 8007e44:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8007e48:	b2e2      	uxtb	r2, r4

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8007e4a:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8007e4c:	5cb2      	ldrb	r2, [r6, r2]
 8007e4e:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8007e52:	f3c4 4207 	ubfx	r2, r4, #16, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8007e56:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8007e5a:	5cb2      	ldrb	r2, [r6, r2]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8007e5c:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 8007e60:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8007e64:	601a      	str	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 8007e66:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 8007e6a:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 8007e6e:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 8007e70:	ea82 0201 	eor.w	r2, r2, r1
                RK[7]  = RK[3] ^ RK[6];
 8007e74:	ea84 0402 	eor.w	r4, r4, r2
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
                RK[6]  = RK[2] ^ RK[5];
 8007e78:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 8007e7a:	60dc      	str	r4, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8007e7c:	d1d4      	bne.n	8007e28 <mbedtls_aes_setkey_enc+0x74>
 8007e7e:	e08a      	b.n	8007f96 <mbedtls_aes_setkey_enc+0x1e2>
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 8007e80:	2400      	movs	r4, #0

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8007e82:	4a47      	ldr	r2, [pc, #284]	; (8007fa0 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8007e84:	6958      	ldr	r0, [r3, #20]
 8007e86:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	4d45      	ldr	r5, [pc, #276]	; (8007fa4 <mbedtls_aes_setkey_enc+0x1f0>)
 8007e8e:	404a      	eors	r2, r1
 8007e90:	f3c0 2107 	ubfx	r1, r0, #8, #8
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8007e94:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8007e96:	5c69      	ldrb	r1, [r5, r1]
 8007e98:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8007e9a:	0e01      	lsrs	r1, r0, #24
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8007e9c:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8007e9e:	5c69      	ldrb	r1, [r5, r1]
 8007ea0:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8007ea4:	b2c1      	uxtb	r1, r0
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8007ea6:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8007eaa:	5c69      	ldrb	r1, [r5, r1]
 8007eac:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8007eb0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8007eb4:	5c69      	ldrb	r1, [r5, r1]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8007eb6:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 8007eba:	f853 1c14 	ldr.w	r1, [r3, #-20]

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8007ebe:	601a      	str	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 8007ec0:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 8007ec4:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 8007ec8:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 8007eca:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 8007ece:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 8007ed2:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 8007ed4:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 8007ed8:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 8007edc:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 8007ede:	ea82 0201 	eor.w	r2, r2, r1
                RK[11] = RK[5] ^ RK[10];
 8007ee2:	ea80 0002 	eor.w	r0, r0, r2
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
                RK[10] = RK[4] ^ RK[9];
 8007ee6:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 8007ee8:	6158      	str	r0, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8007eea:	d1ca      	bne.n	8007e82 <mbedtls_aes_setkey_enc+0xce>
 8007eec:	e053      	b.n	8007f96 <mbedtls_aes_setkey_enc+0x1e2>
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 8007eee:	2500      	movs	r5, #0

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8007ef0:	4a2b      	ldr	r2, [pc, #172]	; (8007fa0 <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8007ef2:	69dc      	ldr	r4, [r3, #28]
 8007ef4:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	4e2a      	ldr	r6, [pc, #168]	; (8007fa4 <mbedtls_aes_setkey_enc+0x1f0>)
 8007efc:	4051      	eors	r1, r2
 8007efe:	f3c4 2207 	ubfx	r2, r4, #8, #8
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8007f02:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8007f04:	5cb0      	ldrb	r0, [r6, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8007f06:	0e22      	lsrs	r2, r4, #24
 8007f08:	4041      	eors	r1, r0
 8007f0a:	5cb2      	ldrb	r2, [r6, r2]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 8007f0c:	6858      	ldr	r0, [r3, #4]
 8007f0e:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8007f12:	b2e2      	uxtb	r2, r4
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8007f14:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8007f16:	5cb2      	ldrb	r2, [r6, r2]
 8007f18:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8007f1c:	f3c4 4207 	ubfx	r2, r4, #16, #8
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8007f20:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8007f24:	5cb2      	ldrb	r2, [r6, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8007f26:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 8007f2a:	f853 2c18 	ldr.w	r2, [r3, #-24]

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8007f2e:	6019      	str	r1, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 8007f30:	ea81 0100 	eor.w	r1, r1, r0
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 8007f34:	f853 0c14 	ldr.w	r0, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 8007f38:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 8007f3a:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 8007f3e:	ea80 0001 	eor.w	r0, r0, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8007f42:	b2c2      	uxtb	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 8007f44:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 8007f46:	60d8      	str	r0, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8007f48:	5cb2      	ldrb	r2, [r6, r2]
 8007f4a:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8007f4e:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8007f52:	ea4f 6210 	mov.w	r2, r0, lsr #24
 8007f56:	5cb2      	ldrb	r2, [r6, r2]
 8007f58:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8007f5c:	f3c0 2207 	ubfx	r2, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8007f60:	f3c0 4007 	ubfx	r0, r0, #16, #8
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8007f64:	5cb2      	ldrb	r2, [r6, r2]
 8007f66:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8007f6a:	5c32      	ldrb	r2, [r6, r0]
 8007f6c:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8007f70:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
 8007f74:	611a      	str	r2, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8007f76:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 8007f7a:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 8007f7e:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 8007f80:	ea82 0201 	eor.w	r2, r2, r1
                RK[15] = RK[7] ^ RK[14];
 8007f84:	ea84 0402 	eor.w	r4, r4, r2
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
                RK[14] = RK[6] ^ RK[13];
 8007f88:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 8007f8a:	61dc      	str	r4, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8007f8c:	d1b0      	bne.n	8007ef0 <mbedtls_aes_setkey_enc+0x13c>
 8007f8e:	e002      	b.n	8007f96 <mbedtls_aes_setkey_enc+0x1e2>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8007f90:	f06f 001f 	mvn.w	r0, #31
 8007f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 8007f96:	2000      	movs	r0, #0
}
 8007f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	1ffeef28 	.word	0x1ffeef28
 8007fa0:	1ffeef00 	.word	0x1ffeef00
 8007fa4:	1ffeef2c 	.word	0x1ffeef2c

08007fa8 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8007fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007faa:	b0c7      	sub	sp, #284	; 0x11c
 8007fac:	4604      	mov	r4, r0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8007fae:	4668      	mov	r0, sp
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	4615      	mov	r5, r2
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8007fb4:	f7ff fef2 	bl	8007d9c <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8007fb8:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8007fbc:	4631      	mov	r1, r6

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8007fbe:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8007fc0:	4668      	mov	r0, sp
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	f7ff fef6 	bl	8007db4 <mbedtls_aes_setkey_enc>
 8007fc8:	4606      	mov	r6, r0
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d145      	bne.n	800805a <mbedtls_aes_setkey_dec+0xb2>
        goto exit;

    ctx->nr = cty.nr;
 8007fce:	9a00      	ldr	r2, [sp, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8007fd0:	9801      	ldr	r0, [sp, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 8007fd2:	6022      	str	r2, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8007fd4:	0111      	lsls	r1, r2, #4
 8007fd6:	1843      	adds	r3, r0, r1

    *RK++ = *SK++;
 8007fd8:	5841      	ldr	r1, [r0, r1]
 8007fda:	60a1      	str	r1, [r4, #8]
    *RK++ = *SK++;
 8007fdc:	6859      	ldr	r1, [r3, #4]
 8007fde:	60e1      	str	r1, [r4, #12]
    *RK++ = *SK++;
 8007fe0:	6899      	ldr	r1, [r3, #8]
 8007fe2:	6121      	str	r1, [r4, #16]
    *RK++ = *SK++;
 8007fe4:	68d9      	ldr	r1, [r3, #12]
 8007fe6:	6161      	str	r1, [r4, #20]
 8007fe8:	f104 0518 	add.w	r5, r4, #24

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8007fec:	1e54      	subs	r4, r2, #1
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	f1a3 0310 	sub.w	r3, r3, #16
 8007ff4:	dd29      	ble.n	800804a <mbedtls_aes_setkey_dec+0xa2>
 8007ff6:	2100      	movs	r1, #0
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8007ff8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8007ffc:	481a      	ldr	r0, [pc, #104]	; (8008068 <mbedtls_aes_setkey_dec+0xc0>)
 8007ffe:	0e17      	lsrs	r7, r2, #24
 8008000:	f810 e007 	ldrb.w	lr, [r0, r7]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8008004:	b2d7      	uxtb	r7, r2
 8008006:	f810 c007 	ldrb.w	ip, [r0, r7]
 800800a:	4f18      	ldr	r7, [pc, #96]	; (800806c <mbedtls_aes_setkey_dec+0xc4>)
 800800c:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
 8008010:	4f17      	ldr	r7, [pc, #92]	; (8008070 <mbedtls_aes_setkey_dec+0xc8>)
 8008012:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
 8008016:	ea8e 0e07 	eor.w	lr, lr, r7
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800801a:	f3c2 2707 	ubfx	r7, r2, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800801e:	f3c2 4207 	ubfx	r2, r2, #16, #8
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8008022:	f810 c007 	ldrb.w	ip, [r0, r7]
 8008026:	4f13      	ldr	r7, [pc, #76]	; (8008074 <mbedtls_aes_setkey_dec+0xcc>)
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8008028:	5c80      	ldrb	r0, [r0, r2]
 800802a:	4a13      	ldr	r2, [pc, #76]	; (8008078 <mbedtls_aes_setkey_dec+0xd0>)
 800802c:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
 8008030:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8008034:	ea8e 0707 	eor.w	r7, lr, r7
 8008038:	407a      	eors	r2, r7

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800803a:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 800803e:	3101      	adds	r1, #1
 8008040:	2904      	cmp	r1, #4
 8008042:	d1d9      	bne.n	8007ff8 <mbedtls_aes_setkey_dec+0x50>
 8008044:	3510      	adds	r5, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8008046:	3c01      	subs	r4, #1
 8008048:	e7d1      	b.n	8007fee <mbedtls_aes_setkey_dec+0x46>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	602a      	str	r2, [r5, #0]
    *RK++ = *SK++;
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	606a      	str	r2, [r5, #4]
    *RK++ = *SK++;
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	60aa      	str	r2, [r5, #8]
    *RK++ = *SK++;
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	60eb      	str	r3, [r5, #12]

exit:
    mbedtls_aes_free( &cty );
 800805a:	4668      	mov	r0, sp
 800805c:	f7ff fea3 	bl	8007da6 <mbedtls_aes_free>

    return( ret );
}
 8008060:	4630      	mov	r0, r6
 8008062:	b047      	add	sp, #284	; 0x11c
 8008064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008066:	bf00      	nop
 8008068:	1ffeef2c 	.word	0x1ffeef2c
 800806c:	1ffefd2c 	.word	0x1ffefd2c
 8008070:	1ffef02c 	.word	0x1ffef02c
 8008074:	1ffef42c 	.word	0x1ffef42c
 8008078:	1ffef82c 	.word	0x1ffef82c

0800807c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800807c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8008080:	788d      	ldrb	r5, [r1, #2]
 8008082:	784b      	ldrb	r3, [r1, #1]
 8008084:	780c      	ldrb	r4, [r1, #0]
                                  unsigned char output[16] )
{
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8008086:	6847      	ldr	r7, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8008088:	7a4e      	ldrb	r6, [r1, #9]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800808a:	f891 e00d 	ldrb.w	lr, [r1, #13]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800808e:	042d      	lsls	r5, r5, #16
 8008090:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8008094:	78cb      	ldrb	r3, [r1, #3]
 8008096:	4325      	orrs	r5, r4
 8008098:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
 800809c:	683d      	ldr	r5, [r7, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800809e:	794c      	ldrb	r4, [r1, #5]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80080a0:	405d      	eors	r5, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80080a2:	798b      	ldrb	r3, [r1, #6]
 80080a4:	041b      	lsls	r3, r3, #16
 80080a6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80080aa:	790c      	ldrb	r4, [r1, #4]
 80080ac:	4323      	orrs	r3, r4
 80080ae:	79cc      	ldrb	r4, [r1, #7]
 80080b0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80080b4:	687c      	ldr	r4, [r7, #4]
 80080b6:	4063      	eors	r3, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80080b8:	7a8c      	ldrb	r4, [r1, #10]
 80080ba:	0424      	lsls	r4, r4, #16
 80080bc:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80080c0:	7a0e      	ldrb	r6, [r1, #8]
 80080c2:	4334      	orrs	r4, r6
 80080c4:	7ace      	ldrb	r6, [r1, #11]
 80080c6:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 80080ca:	68be      	ldr	r6, [r7, #8]
 80080cc:	4074      	eors	r4, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80080ce:	7b8e      	ldrb	r6, [r1, #14]
 80080d0:	0436      	lsls	r6, r6, #16
 80080d2:	ea46 260e 	orr.w	r6, r6, lr, lsl #8
 80080d6:	f891 e00c 	ldrb.w	lr, [r1, #12]
 80080da:	7bc9      	ldrb	r1, [r1, #15]
 80080dc:	ea46 060e 	orr.w	r6, r6, lr
 80080e0:	ea46 6101 	orr.w	r1, r6, r1, lsl #24
 80080e4:	68fe      	ldr	r6, [r7, #12]
 80080e6:	404e      	eors	r6, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80080e8:	6801      	ldr	r1, [r0, #0]
 80080ea:	1049      	asrs	r1, r1, #1
 80080ec:	3901      	subs	r1, #1
 80080ee:	9101      	str	r1, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80080f0:	f107 0110 	add.w	r1, r7, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80080f4:	9801      	ldr	r0, [sp, #4]
 80080f6:	f8df e344 	ldr.w	lr, [pc, #836]	; 800843c <mbedtls_internal_aes_encrypt+0x3c0>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	4688      	mov	r8, r1
 80080fe:	48cd      	ldr	r0, [pc, #820]	; (8008434 <mbedtls_internal_aes_encrypt+0x3b8>)
 8008100:	f101 0120 	add.w	r1, r1, #32
 8008104:	ea4f 6716 	mov.w	r7, r6, lsr #24
 8008108:	fa5f fc85 	uxtb.w	ip, r5
 800810c:	f340 80be 	ble.w	800828c <mbedtls_internal_aes_encrypt+0x210>
 8008110:	f850 9027 	ldr.w	r9, [r0, r7, lsl #2]
 8008114:	f85e 702c 	ldr.w	r7, [lr, ip, lsl #2]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8008118:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8008440 <mbedtls_internal_aes_encrypt+0x3c4>
 800811c:	f8df c324 	ldr.w	ip, [pc, #804]	; 8008444 <mbedtls_internal_aes_encrypt+0x3c8>
 8008120:	ea89 0907 	eor.w	r9, r9, r7
 8008124:	f851 7c20 	ldr.w	r7, [r1, #-32]
 8008128:	ea89 0907 	eor.w	r9, r9, r7
 800812c:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8008130:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8008134:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 8008138:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
 800813c:	ea89 0707 	eor.w	r7, r9, r7
 8008140:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8008144:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 8008148:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
 800814c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8008150:	ea87 0909 	eor.w	r9, r7, r9
 8008154:	b2df      	uxtb	r7, r3
 8008156:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800815a:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800815e:	ea8a 0a07 	eor.w	sl, sl, r7
 8008162:	f851 7c1c 	ldr.w	r7, [r1, #-28]
 8008166:	ea8a 0707 	eor.w	r7, sl, r7
 800816a:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 800816e:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8008172:	ea87 070a 	eor.w	r7, r7, sl
 8008176:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 800817a:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800817e:	ea87 0a0a 	eor.w	sl, r7, sl
 8008182:	b2e7      	uxtb	r7, r4
 8008184:	0e24      	lsrs	r4, r4, #24
 8008186:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800818a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800818e:	ea8b 0b07 	eor.w	fp, fp, r7
 8008192:	f851 7c18 	ldr.w	r7, [r1, #-24]
 8008196:	ea8b 0707 	eor.w	r7, fp, r7
 800819a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 800819e:	f858 b02b 	ldr.w	fp, [r8, fp, lsl #2]
 80081a2:	ea87 070b 	eor.w	r7, r7, fp
 80081a6:	f3c5 4b07 	ubfx	fp, r5, #16, #8
 80081aa:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80081ae:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 80081b2:	ea87 070b 	eor.w	r7, r7, fp
 80081b6:	fa5f fb86 	uxtb.w	fp, r6
 80081ba:	f85e 602b 	ldr.w	r6, [lr, fp, lsl #2]
 80081be:	4066      	eors	r6, r4
 80081c0:	f851 4c14 	ldr.w	r4, [r1, #-20]
 80081c4:	4074      	eors	r4, r6
 80081c6:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
 80081ca:	4074      	eors	r4, r6
 80081cc:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 80081d0:	4066      	eors	r6, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80081d2:	0e33      	lsrs	r3, r6, #24
 80081d4:	fa5f f489 	uxtb.w	r4, r9
 80081d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80081dc:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80081e0:	f3ca 2407 	ubfx	r4, sl, #8, #8
 80081e4:	405d      	eors	r5, r3
 80081e6:	f851 3c10 	ldr.w	r3, [r1, #-16]
 80081ea:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80081ee:	406b      	eors	r3, r5
 80081f0:	4063      	eors	r3, r4
 80081f2:	f3c7 4407 	ubfx	r4, r7, #16, #8
 80081f6:	fa5f fb87 	uxtb.w	fp, r7
 80081fa:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 80081fe:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 8008202:	fa5f f48a 	uxtb.w	r4, sl
 8008206:	405d      	eors	r5, r3
 8008208:	ea4f 6319 	mov.w	r3, r9, lsr #24
 800820c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8008210:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008214:	405c      	eors	r4, r3
 8008216:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 800821a:	4063      	eors	r3, r4
 800821c:	f3c7 2407 	ubfx	r4, r7, #8, #8
 8008220:	0e3f      	lsrs	r7, r7, #24
 8008222:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8008226:	4063      	eors	r3, r4
 8008228:	f3c6 4407 	ubfx	r4, r6, #16, #8
 800822c:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8008230:	4063      	eors	r3, r4
 8008232:	ea4f 641a 	mov.w	r4, sl, lsr #24
 8008236:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 800823a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800823e:	ea8b 0b04 	eor.w	fp, fp, r4
 8008242:	f851 4c08 	ldr.w	r4, [r1, #-8]
 8008246:	ea8b 0404 	eor.w	r4, fp, r4
 800824a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 800824e:	b2f6      	uxtb	r6, r6
 8008250:	f858 b02b 	ldr.w	fp, [r8, fp, lsl #2]
 8008254:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 8008258:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800825c:	ea84 040b 	eor.w	r4, r4, fp
 8008260:	f3c9 4b07 	ubfx	fp, r9, #16, #8
 8008264:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8008268:	4046      	eors	r6, r0
 800826a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800826e:	f858 7029 	ldr.w	r7, [r8, r9, lsl #2]
 8008272:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 8008276:	4070      	eors	r0, r6
 8008278:	f85c 602a 	ldr.w	r6, [ip, sl, lsl #2]
 800827c:	4078      	eors	r0, r7
 800827e:	4046      	eors	r6, r0
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8008280:	9801      	ldr	r0, [sp, #4]
 8008282:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8008284:	ea84 040b 	eor.w	r4, r4, fp
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8008288:	9001      	str	r0, [sp, #4]
 800828a:	e733      	b.n	80080f4 <mbedtls_internal_aes_encrypt+0x78>
 800828c:	f850 1027 	ldr.w	r1, [r0, r7, lsl #2]
 8008290:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8008294:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8008440 <mbedtls_internal_aes_encrypt+0x3c4>
 8008298:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008444 <mbedtls_internal_aes_encrypt+0x3c8>
 800829c:	f3c3 2707 	ubfx	r7, r3, #8, #8
 80082a0:	ea8c 0c01 	eor.w	ip, ip, r1
 80082a4:	f8d8 1000 	ldr.w	r1, [r8]
 80082a8:	f85a 7027 	ldr.w	r7, [sl, r7, lsl #2]
 80082ac:	ea8c 0101 	eor.w	r1, ip, r1
 80082b0:	4079      	eors	r1, r7
 80082b2:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80082b6:	fa5f fb84 	uxtb.w	fp, r4
 80082ba:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 80082be:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 80082c2:	ea81 0c07 	eor.w	ip, r1, r7
 80082c6:	b2df      	uxtb	r7, r3
 80082c8:	0e29      	lsrs	r1, r5, #24
 80082ca:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80082ce:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80082d2:	404f      	eors	r7, r1
 80082d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082d8:	4079      	eors	r1, r7
 80082da:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80082de:	0e24      	lsrs	r4, r4, #24
 80082e0:	f85a 7027 	ldr.w	r7, [sl, r7, lsl #2]
 80082e4:	4079      	eors	r1, r7
 80082e6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80082ea:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 80082ee:	4079      	eors	r1, r7
 80082f0:	0e1f      	lsrs	r7, r3, #24
 80082f2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80082f6:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 80082fa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80082fe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008302:	ea8b 0b07 	eor.w	fp, fp, r7
 8008306:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800830a:	ea8b 0707 	eor.w	r7, fp, r7
 800830e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8008312:	b2f6      	uxtb	r6, r6
 8008314:	f85a b02b 	ldr.w	fp, [sl, fp, lsl #2]
 8008318:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800831c:	ea87 070b 	eor.w	r7, r7, fp
 8008320:	ea86 0400 	eor.w	r4, r6, r0
 8008324:	f3c5 4b07 	ubfx	fp, r5, #16, #8
 8008328:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800832c:	f859 b02b 	ldr.w	fp, [r9, fp, lsl #2]
 8008330:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8008334:	4060      	eors	r0, r4
 8008336:	f85a 4025 	ldr.w	r4, [sl, r5, lsl #2]
 800833a:	4060      	eors	r0, r4
 800833c:	4058      	eors	r0, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800833e:	fa5f f48c 	uxtb.w	r4, ip
 8008342:	4b3d      	ldr	r3, [pc, #244]	; (8008438 <mbedtls_internal_aes_encrypt+0x3bc>)
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8008344:	0e05      	lsrs	r5, r0, #24
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8008346:	5d1e      	ldrb	r6, [r3, r4]
 8008348:	f8d8 4010 	ldr.w	r4, [r8, #16]
 800834c:	4074      	eors	r4, r6
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800834e:	5d5e      	ldrb	r6, [r3, r5]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8008350:	f3c1 2507 	ubfx	r5, r1, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8008354:	ea87 070b 	eor.w	r7, r7, fp
 8008358:	ea84 6406 	eor.w	r4, r4, r6, lsl #24

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800835c:	5d5e      	ldrb	r6, [r3, r5]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800835e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8008362:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
 8008366:	5d5e      	ldrb	r6, [r3, r5]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
 8008368:	ea84 4606 	eor.w	r6, r4, r6, lsl #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800836c:	b2cc      	uxtb	r4, r1
 800836e:	5d1d      	ldrb	r5, [r3, r4]
 8008370:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8008374:	406c      	eors	r4, r5
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8008376:	ea4f 651c 	mov.w	r5, ip, lsr #24
 800837a:	5d5d      	ldrb	r5, [r3, r5]
 800837c:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8008380:	f3c7 2507 	ubfx	r5, r7, #8, #8
 8008384:	5d5d      	ldrb	r5, [r3, r5]
 8008386:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800838a:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800838e:	5d5d      	ldrb	r5, [r3, r5]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 8008390:	ea84 4505 	eor.w	r5, r4, r5, lsl #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8008394:	b2fc      	uxtb	r4, r7

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8008396:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8008398:	f813 e004 	ldrb.w	lr, [r3, r4]
 800839c:	f8d8 4018 	ldr.w	r4, [r8, #24]
 80083a0:	ea8e 0404 	eor.w	r4, lr, r4
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80083a4:	ea4f 6e11 	mov.w	lr, r1, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80083a8:	f3c1 4107 	ubfx	r1, r1, #16, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80083ac:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80083b0:	ea84 640e 	eor.w	r4, r4, lr, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80083b4:	f3c0 2e07 	ubfx	lr, r0, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 80083b8:	b2c0      	uxtb	r0, r0
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80083ba:	f813 e00e 	ldrb.w	lr, [r3, lr]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80083be:	5ddf      	ldrb	r7, [r3, r7]
 80083c0:	ea84 240e 	eor.w	r4, r4, lr, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80083c4:	f3cc 4e07 	ubfx	lr, ip, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80083c8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80083cc:	f813 e00e 	ldrb.w	lr, [r3, lr]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
 80083d0:	ea84 440e 	eor.w	r4, r4, lr, lsl #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 80083d4:	f813 e000 	ldrb.w	lr, [r3, r0]
 80083d8:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80083dc:	ea8e 0000 	eor.w	r0, lr, r0
 80083e0:	ea80 6007 	eor.w	r0, r0, r7, lsl #24
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80083e4:	f813 700c 	ldrb.w	r7, [r3, ip]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80083e8:	5c5b      	ldrb	r3, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80083ea:	7016      	strb	r6, [r2, #0]
 80083ec:	0a31      	lsrs	r1, r6, #8
 80083ee:	7051      	strb	r1, [r2, #1]
 80083f0:	0c31      	lsrs	r1, r6, #16
 80083f2:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80083f4:	0a29      	lsrs	r1, r5, #8
 80083f6:	7151      	strb	r1, [r2, #5]
 80083f8:	0c29      	lsrs	r1, r5, #16
 80083fa:	ea80 2007 	eor.w	r0, r0, r7, lsl #8
 80083fe:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 8008400:	0a21      	lsrs	r1, r4, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 8008402:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 8008406:	7251      	strb	r1, [r2, #9]
 8008408:	0c21      	lsrs	r1, r4, #16
 800840a:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 800840c:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800840e:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 8008410:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
 8008412:	7214      	strb	r4, [r2, #8]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 8008414:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
 8008416:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
 8008418:	7313      	strb	r3, [r2, #12]
 800841a:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800841c:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 800841e:	0c19      	lsrs	r1, r3, #16
 8008420:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 8008422:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8008424:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8008426:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 8008428:	7391      	strb	r1, [r2, #14]
 800842a:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 800842c:	b003      	add	sp, #12
 800842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008432:	bf00      	nop
 8008434:	1ffeeb00 	.word	0x1ffeeb00
 8008438:	1ffeef2c 	.word	0x1ffeef2c
 800843c:	1ffedf00 	.word	0x1ffedf00
 8008440:	1ffee300 	.word	0x1ffee300
 8008444:	1ffee700 	.word	0x1ffee700

08008448 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8008448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800844c:	788d      	ldrb	r5, [r1, #2]
 800844e:	784b      	ldrb	r3, [r1, #1]
 8008450:	780c      	ldrb	r4, [r1, #0]
                                  unsigned char output[16] )
{
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8008452:	6846      	ldr	r6, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8008454:	790f      	ldrb	r7, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8008456:	f891 800e 	ldrb.w	r8, [r1, #14]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800845a:	042d      	lsls	r5, r5, #16
 800845c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8008460:	78cb      	ldrb	r3, [r1, #3]
 8008462:	4325      	orrs	r5, r4
 8008464:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
 8008468:	6835      	ldr	r5, [r6, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800846a:	798c      	ldrb	r4, [r1, #6]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800846c:	405d      	eors	r5, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800846e:	794b      	ldrb	r3, [r1, #5]
 8008470:	0424      	lsls	r4, r4, #16
 8008472:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8008476:	79cb      	ldrb	r3, [r1, #7]
 8008478:	433c      	orrs	r4, r7
 800847a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
 800847e:	6874      	ldr	r4, [r6, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8008480:	7a4f      	ldrb	r7, [r1, #9]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8008482:	405c      	eors	r4, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8008484:	7a8b      	ldrb	r3, [r1, #10]
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800848c:	7a0f      	ldrb	r7, [r1, #8]
 800848e:	433b      	orrs	r3, r7
 8008490:	7acf      	ldrb	r7, [r1, #11]
 8008492:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8008496:	68b7      	ldr	r7, [r6, #8]
 8008498:	407b      	eors	r3, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800849a:	7b4f      	ldrb	r7, [r1, #13]
 800849c:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80084a0:	ea48 2807 	orr.w	r8, r8, r7, lsl #8
 80084a4:	7b0f      	ldrb	r7, [r1, #12]
 80084a6:	7bc9      	ldrb	r1, [r1, #15]
 80084a8:	ea48 0807 	orr.w	r8, r8, r7
 80084ac:	ea48 6801 	orr.w	r8, r8, r1, lsl #24
 80084b0:	68f1      	ldr	r1, [r6, #12]
 80084b2:	ea88 0801 	eor.w	r8, r8, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80084b6:	6801      	ldr	r1, [r0, #0]
 80084b8:	1049      	asrs	r1, r1, #1
 80084ba:	3901      	subs	r1, #1
 80084bc:	9101      	str	r1, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80084be:	f106 0110 	add.w	r1, r6, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80084c2:	9801      	ldr	r0, [sp, #4]
 80084c4:	4ed3      	ldr	r6, [pc, #844]	; (8008814 <mbedtls_internal_aes_decrypt+0x3cc>)
 80084c6:	2800      	cmp	r0, #0
 80084c8:	468c      	mov	ip, r1
 80084ca:	48d3      	ldr	r0, [pc, #844]	; (8008818 <mbedtls_internal_aes_decrypt+0x3d0>)
 80084cc:	f101 0120 	add.w	r1, r1, #32
 80084d0:	ea4f 6714 	mov.w	r7, r4, lsr #24
 80084d4:	fa5f fe85 	uxtb.w	lr, r5
 80084d8:	f340 80c6 	ble.w	8008668 <mbedtls_internal_aes_decrypt+0x220>
 80084dc:	f850 9027 	ldr.w	r9, [r0, r7, lsl #2]
 80084e0:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80084e4:	f8df c338 	ldr.w	ip, [pc, #824]	; 8008820 <mbedtls_internal_aes_decrypt+0x3d8>
 80084e8:	f8df e338 	ldr.w	lr, [pc, #824]	; 8008824 <mbedtls_internal_aes_decrypt+0x3dc>
 80084ec:	ea89 0907 	eor.w	r9, r9, r7
 80084f0:	f851 7c20 	ldr.w	r7, [r1, #-32]
 80084f4:	ea89 0907 	eor.w	r9, r9, r7
 80084f8:	f3c8 2707 	ubfx	r7, r8, #8, #8
 80084fc:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 8008500:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8008504:	f850 a02a 	ldr.w	sl, [r0, sl, lsl #2]
 8008508:	ea89 0707 	eor.w	r7, r9, r7
 800850c:	f3c3 4907 	ubfx	r9, r3, #16, #8
 8008510:	ea4f 6b18 	mov.w	fp, r8, lsr #24
 8008514:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
 8008518:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800851c:	ea87 0909 	eor.w	r9, r7, r9
 8008520:	b2e7      	uxtb	r7, r4
 8008522:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8008526:	ea8a 0a07 	eor.w	sl, sl, r7
 800852a:	f851 7c1c 	ldr.w	r7, [r1, #-28]
 800852e:	ea8a 0707 	eor.w	r7, sl, r7
 8008532:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8008536:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 800853a:	ea87 070a 	eor.w	r7, r7, sl
 800853e:	f3c8 4a07 	ubfx	sl, r8, #16, #8
 8008542:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 8008546:	ea87 0a0a 	eor.w	sl, r7, sl
 800854a:	b2df      	uxtb	r7, r3
 800854c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008550:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8008554:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8008558:	ea8b 0b07 	eor.w	fp, fp, r7
 800855c:	f851 7c18 	ldr.w	r7, [r1, #-24]
 8008560:	ea8b 0707 	eor.w	r7, fp, r7
 8008564:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 8008568:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800856c:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 8008570:	ea87 070b 	eor.w	r7, r7, fp
 8008574:	f3c5 4b07 	ubfx	fp, r5, #16, #8
 8008578:	0e2d      	lsrs	r5, r5, #24
 800857a:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 800857e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 8008582:	ea87 070b 	eor.w	r7, r7, fp
 8008586:	fa5f fb88 	uxtb.w	fp, r8
 800858a:	f856 802b 	ldr.w	r8, [r6, fp, lsl #2]
 800858e:	ea85 0808 	eor.w	r8, r5, r8
 8008592:	f851 5c14 	ldr.w	r5, [r1, #-20]
 8008596:	ea88 0505 	eor.w	r5, r8, r5
 800859a:	405d      	eors	r5, r3
 800859c:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80085a0:	fa5f f489 	uxtb.w	r4, r9
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80085a4:	ea85 0803 	eor.w	r8, r5, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80085a8:	ea4f 631a 	mov.w	r3, sl, lsr #24
 80085ac:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80085b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80085b4:	f3c8 2407 	ubfx	r4, r8, #8, #8
 80085b8:	405d      	eors	r5, r3
 80085ba:	f851 3c10 	ldr.w	r3, [r1, #-16]
 80085be:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80085c2:	406b      	eors	r3, r5
 80085c4:	4063      	eors	r3, r4
 80085c6:	f3c7 4407 	ubfx	r4, r7, #16, #8
 80085ca:	fa5f fb87 	uxtb.w	fp, r7
 80085ce:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80085d2:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 80085d6:	fa5f f48a 	uxtb.w	r4, sl
 80085da:	405d      	eors	r5, r3
 80085dc:	0e3b      	lsrs	r3, r7, #24
 80085de:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80085e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80085e6:	405c      	eors	r4, r3
 80085e8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80085ec:	4063      	eors	r3, r4
 80085ee:	f3c9 2407 	ubfx	r4, r9, #8, #8
 80085f2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80085f6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80085fa:	4063      	eors	r3, r4
 80085fc:	f3c8 4407 	ubfx	r4, r8, #16, #8
 8008600:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8008604:	405c      	eors	r4, r3
 8008606:	ea4f 6318 	mov.w	r3, r8, lsr #24
 800860a:	fa5f f888 	uxtb.w	r8, r8
 800860e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008612:	ea8b 0b03 	eor.w	fp, fp, r3
 8008616:	f851 3c08 	ldr.w	r3, [r1, #-8]
 800861a:	ea8b 0303 	eor.w	r3, fp, r3
 800861e:	f3ca 2b07 	ubfx	fp, sl, #8, #8
 8008622:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 8008626:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 800862a:	f856 6028 	ldr.w	r6, [r6, r8, lsl #2]
 800862e:	ea83 030b 	eor.w	r3, r3, fp
 8008632:	f3c9 4b07 	ubfx	fp, r9, #16, #8
 8008636:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800863a:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
 800863e:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 8008642:	ea86 0800 	eor.w	r8, r6, r0
 8008646:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800864a:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 800864e:	ea88 0000 	eor.w	r0, r8, r0
 8008652:	4070      	eors	r0, r6
 8008654:	f85e 602a 	ldr.w	r6, [lr, sl, lsl #2]
 8008658:	ea80 0806 	eor.w	r8, r0, r6
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800865c:	9801      	ldr	r0, [sp, #4]
 800865e:	3801      	subs	r0, #1
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8008660:	ea83 030b 	eor.w	r3, r3, fp
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8008664:	9001      	str	r0, [sp, #4]
 8008666:	e72c      	b.n	80084c2 <mbedtls_internal_aes_decrypt+0x7a>
 8008668:	f850 1027 	ldr.w	r1, [r0, r7, lsl #2]
 800866c:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8008670:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8008820 <mbedtls_internal_aes_decrypt+0x3d8>
 8008674:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8008824 <mbedtls_internal_aes_decrypt+0x3dc>
 8008678:	f3c8 2707 	ubfx	r7, r8, #8, #8
 800867c:	ea8e 0e01 	eor.w	lr, lr, r1
 8008680:	f8dc 1000 	ldr.w	r1, [ip]
 8008684:	f85a 7027 	ldr.w	r7, [sl, r7, lsl #2]
 8008688:	ea8e 0101 	eor.w	r1, lr, r1
 800868c:	4079      	eors	r1, r7
 800868e:	f3c3 4707 	ubfx	r7, r3, #16, #8
 8008692:	fa5f fb83 	uxtb.w	fp, r3
 8008696:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 800869a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800869e:	ea81 0e07 	eor.w	lr, r1, r7
 80086a2:	b2e7      	uxtb	r7, r4
 80086a4:	0e19      	lsrs	r1, r3, #24
 80086a6:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80086aa:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80086ae:	404f      	eors	r7, r1
 80086b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80086b4:	4079      	eors	r1, r7
 80086b6:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80086ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80086be:	f85a 7027 	ldr.w	r7, [sl, r7, lsl #2]
 80086c2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80086c6:	4079      	eors	r1, r7
 80086c8:	f3c8 4707 	ubfx	r7, r8, #16, #8
 80086cc:	f859 7027 	ldr.w	r7, [r9, r7, lsl #2]
 80086d0:	4079      	eors	r1, r7
 80086d2:	ea4f 6718 	mov.w	r7, r8, lsr #24
 80086d6:	fa5f f888 	uxtb.w	r8, r8
 80086da:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 80086de:	f856 6028 	ldr.w	r6, [r6, r8, lsl #2]
 80086e2:	ea8b 0b07 	eor.w	fp, fp, r7
 80086e6:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80086ea:	ea8b 0707 	eor.w	r7, fp, r7
 80086ee:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 80086f2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80086f6:	f85a b02b 	ldr.w	fp, [sl, fp, lsl #2]
 80086fa:	ea87 070b 	eor.w	r7, r7, fp
 80086fe:	f3c5 4b07 	ubfx	fp, r5, #16, #8
 8008702:	0e2d      	lsrs	r5, r5, #24
 8008704:	f859 b02b 	ldr.w	fp, [r9, fp, lsl #2]
 8008708:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800870c:	ea86 0500 	eor.w	r5, r6, r0
 8008710:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8008714:	4068      	eors	r0, r5
 8008716:	4058      	eors	r0, r3
 8008718:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800871c:	fa5f f48e 	uxtb.w	r4, lr
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8008720:	4058      	eors	r0, r3

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8008722:	4b3e      	ldr	r3, [pc, #248]	; (800881c <mbedtls_internal_aes_decrypt+0x3d4>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8008724:	0e0d      	lsrs	r5, r1, #24
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8008726:	5d1e      	ldrb	r6, [r3, r4]
 8008728:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800872c:	4074      	eors	r4, r6
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800872e:	5d5e      	ldrb	r6, [r3, r5]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8008730:	f3c0 2507 	ubfx	r5, r0, #8, #8
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8008734:	ea87 070b 	eor.w	r7, r7, fp
 8008738:	ea84 6406 	eor.w	r4, r4, r6, lsl #24

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800873c:	5d5e      	ldrb	r6, [r3, r5]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800873e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8008742:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
 8008746:	5d5e      	ldrb	r6, [r3, r5]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
 8008748:	ea84 4606 	eor.w	r6, r4, r6, lsl #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800874c:	b2cc      	uxtb	r4, r1
 800874e:	5d1d      	ldrb	r5, [r3, r4]
 8008750:	f8dc 4014 	ldr.w	r4, [ip, #20]
 8008754:	406c      	eors	r4, r5
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8008756:	0e3d      	lsrs	r5, r7, #24
 8008758:	5d5d      	ldrb	r5, [r3, r5]
 800875a:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800875e:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8008762:	5d5d      	ldrb	r5, [r3, r5]
 8008764:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8008768:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800876c:	5d5d      	ldrb	r5, [r3, r5]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
 800876e:	ea84 4505 	eor.w	r5, r4, r5, lsl #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8008772:	b2fc      	uxtb	r4, r7
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8008774:	f3c7 2707 	ubfx	r7, r7, #8, #8
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8008778:	f813 8004 	ldrb.w	r8, [r3, r4]
 800877c:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8008780:	ea88 0404 	eor.w	r4, r8, r4
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8008784:	ea4f 6810 	mov.w	r8, r0, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8008788:	b2c0      	uxtb	r0, r0

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800878a:	f813 8008 	ldrb.w	r8, [r3, r8]
 800878e:	ea84 6408 	eor.w	r4, r4, r8, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8008792:	f3c1 2807 	ubfx	r8, r1, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8008796:	f3c1 4107 	ubfx	r1, r1, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800879a:	f813 8008 	ldrb.w	r8, [r3, r8]
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800879e:	5ddf      	ldrb	r7, [r3, r7]
 80087a0:	ea84 2408 	eor.w	r4, r4, r8, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80087a4:	f3ce 4807 	ubfx	r8, lr, #16, #8

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80087a8:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80087ac:	f813 8008 	ldrb.w	r8, [r3, r8]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80087b0:	f813 e00e 	ldrb.w	lr, [r3, lr]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
 80087b4:	ea84 4408 	eor.w	r4, r4, r8, lsl #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80087b8:	f813 8000 	ldrb.w	r8, [r3, r0]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80087bc:	5c5b      	ldrb	r3, [r3, r1]
 80087be:	f8dc 001c 	ldr.w	r0, [ip, #28]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80087c2:	7016      	strb	r6, [r2, #0]
 80087c4:	0a31      	lsrs	r1, r6, #8
 80087c6:	7051      	strb	r1, [r2, #1]
 80087c8:	0c31      	lsrs	r1, r6, #16
 80087ca:	ea88 0000 	eor.w	r0, r8, r0
 80087ce:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80087d0:	0a29      	lsrs	r1, r5, #8
 80087d2:	ea80 600e 	eor.w	r0, r0, lr, lsl #24
 80087d6:	7151      	strb	r1, [r2, #5]
 80087d8:	0c29      	lsrs	r1, r5, #16
 80087da:	ea80 2007 	eor.w	r0, r0, r7, lsl #8
 80087de:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80087e0:	0a21      	lsrs	r1, r4, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 80087e2:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 80087e6:	7251      	strb	r1, [r2, #9]
 80087e8:	0c21      	lsrs	r1, r4, #16
 80087ea:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80087ec:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80087ee:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 80087f0:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
 80087f2:	7214      	strb	r4, [r2, #8]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
 80087f4:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
 80087f6:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
 80087f8:	7313      	strb	r3, [r2, #12]
 80087fa:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80087fc:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 80087fe:	0c19      	lsrs	r1, r3, #16
 8008800:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 8008802:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8008804:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8008806:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 8008808:	7391      	strb	r1, [r2, #14]
 800880a:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 800880c:	b003      	add	sp, #12
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	bf00      	nop
 8008814:	1ffef02c 	.word	0x1ffef02c
 8008818:	1ffefd2c 	.word	0x1ffefd2c
 800881c:	1ffefc2c 	.word	0x1ffefc2c
 8008820:	1ffef42c 	.word	0x1ffef42c
 8008824:	1ffef82c 	.word	0x1ffef82c

08008828 <mbedtls_aes_crypt_ecb>:
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8008828:	2901      	cmp	r1, #1
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800882a:	4611      	mov	r1, r2
 800882c:	461a      	mov	r2, r3
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800882e:	d101      	bne.n	8008834 <mbedtls_aes_crypt_ecb+0xc>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8008830:	f7ff bc24 	b.w	800807c <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8008834:	f7ff be08 	b.w	8008448 <mbedtls_internal_aes_decrypt>

08008838 <ccm_auth_crypt>:
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	b095      	sub	sp, #84	; 0x54
 800883e:	4606      	mov	r6, r0
 8008840:	9304      	str	r3, [sp, #16]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 8008842:	9b24      	ldr	r3, [sp, #144]	; 0x90
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
 8008844:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8008846:	9d20      	ldr	r5, [sp, #128]	; 0x80
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 8008848:	2b02      	cmp	r3, #2
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
 800884a:	468b      	mov	fp, r1
 800884c:	4692      	mov	sl, r2
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800884e:	d102      	bne.n	8008856 <ccm_auth_crypt+0x1e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 8008850:	f06f 000c 	mvn.w	r0, #12
 8008854:	e14e      	b.n	8008af4 <ccm_auth_crypt+0x2bc>
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 8008856:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008858:	2b10      	cmp	r3, #16
 800885a:	d8f9      	bhi.n	8008850 <ccm_auth_crypt+0x18>
 800885c:	07db      	lsls	r3, r3, #31
 800885e:	d4f7      	bmi.n	8008850 <ccm_auth_crypt+0x18>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
 8008860:	1ffb      	subs	r3, r7, #7
 8008862:	2b06      	cmp	r3, #6
 8008864:	d8f4      	bhi.n	8008850 <ccm_auth_crypt+0x18>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
 8008866:	f5b5 4f7f 	cmp.w	r5, #65280	; 0xff00
 800886a:	d8f1      	bhi.n	8008850 <ccm_auth_crypt+0x18>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800886c:	b2fb      	uxtb	r3, r7
 800886e:	f1c3 020f 	rsb	r2, r3, #15
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 8008872:	f1c3 030e 	rsb	r3, r3, #14
 8008876:	fa5f f883 	uxtb.w	r8, r3
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800887a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );
 800887c:	9904      	ldr	r1, [sp, #16]
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 800887e:	b2d2      	uxtb	r2, r2
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 8008880:	2d00      	cmp	r5, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 8008882:	f1a3 0302 	sub.w	r3, r3, #2
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( add_len > 0xFF00 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    q = 16 - 1 - (unsigned char) iv_len;
 8008886:	9205      	str	r2, [sp, #20]
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 8008888:	ea4f 0353 	mov.w	r3, r3, lsr #1
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
 800888c:	bf14      	ite	ne
 800888e:	2240      	movne	r2, #64	; 0x40
 8008890:	2200      	moveq	r2, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;
 8008892:	ac14      	add	r4, sp, #80	; 0x50
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
    b[0] |= ( add_len > 0 ) << 6;
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 8008894:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    b[0] |= q - 1;
 8008898:	ea43 0308 	orr.w	r3, r3, r8
 800889c:	f804 3d30 	strb.w	r3, [r4, #-48]!

    memcpy( b + 1, iv, iv_len );
 80088a0:	463a      	mov	r2, r7
 80088a2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 80088a6:	f1c8 090f 	rsb	r9, r8, #15
 80088aa:	f002 ff75 	bl	800b798 <memcpy>
 80088ae:	eb04 0309 	add.w	r3, r4, r9
 80088b2:	aa0c      	add	r2, sp, #48	; 0x30

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 80088b4:	4654      	mov	r4, sl
        b[15-i] = (unsigned char)( len_left & 0xFF );
 80088b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
    b[0] |= q - 1;

    memcpy( b + 1, iv, iv_len );

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 80088ba:	429a      	cmp	r2, r3
 80088bc:	ea4f 2414 	mov.w	r4, r4, lsr #8
 80088c0:	d1f9      	bne.n	80088b6 <ccm_auth_crypt+0x7e>
        b[15-i] = (unsigned char)( len_left & 0xFF );

    if( len_left > 0 )
 80088c2:	2c00      	cmp	r4, #0
 80088c4:	d1c4      	bne.n	8008850 <ccm_auth_crypt+0x18>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
 80088c6:	a80c      	add	r0, sp, #48	; 0x30
 80088c8:	4621      	mov	r1, r4
 80088ca:	2210      	movs	r2, #16
 80088cc:	f002 ff6f 	bl	800b7ae <memset>
    UPDATE_CBC_MAC;
 80088d0:	a90c      	add	r1, sp, #48	; 0x30
 80088d2:	f10d 0c20 	add.w	ip, sp, #32
 80088d6:	5c63      	ldrb	r3, [r4, r1]
 80088d8:	f814 200c 	ldrb.w	r2, [r4, ip]
 80088dc:	4053      	eors	r3, r2
 80088de:	5463      	strb	r3, [r4, r1]
 80088e0:	3401      	adds	r4, #1
 80088e2:	2c10      	cmp	r4, #16
 80088e4:	d1f4      	bne.n	80088d0 <ccm_auth_crypt+0x98>
 80088e6:	ab07      	add	r3, sp, #28
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	4630      	mov	r0, r6
 80088ec:	460b      	mov	r3, r1
 80088ee:	4622      	mov	r2, r4
 80088f0:	f8cd c00c 	str.w	ip, [sp, #12]
 80088f4:	f000 f9f2 	bl	8008cdc <mbedtls_cipher_update>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f040 80fa 	bne.w	8008af4 <ccm_auth_crypt+0x2bc>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
 8008900:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008904:	b995      	cbnz	r5, 800892c <ccm_auth_crypt+0xf4>
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 8008906:	ac14      	add	r4, sp, #80	; 0x50
    memcpy( ctr + 1, iv, iv_len );
 8008908:	9904      	ldr	r1, [sp, #16]
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 800890a:	f804 8d10 	strb.w	r8, [r4, #-16]!
    memcpy( ctr + 1, iv, iv_len );
 800890e:	463a      	mov	r2, r7
 8008910:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 8008914:	f002 ff40 	bl	800b798 <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
 8008918:	1c78      	adds	r0, r7, #1
 800891a:	4420      	add	r0, r4
 800891c:	2100      	movs	r1, #0
 800891e:	9a05      	ldr	r2, [sp, #20]
 8008920:	f002 ff45 	bl	800b7ae <memset>
    ctr[15] = 1;
 8008924:	2301      	movs	r3, #1
 8008926:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 800892a:	e084      	b.n	8008a36 <ccm_auth_crypt+0x1fe>
    {
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
 800892c:	4619      	mov	r1, r3
 800892e:	4622      	mov	r2, r4
 8008930:	4660      	mov	r0, ip
 8008932:	9303      	str	r3, [sp, #12]
 8008934:	f002 ff3b 	bl	800b7ae <memset>
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 8008938:	2d0e      	cmp	r5, #14
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800893a:	ea4f 2215 	mov.w	r2, r5, lsr #8
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 800893e:	462c      	mov	r4, r5
 8008940:	bf28      	it	cs
 8008942:	240e      	movcs	r4, #14
        size_t use_len;
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 8008944:	f88d 2020 	strb.w	r2, [sp, #32]
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 8008948:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 800894c:	4622      	mov	r2, r4
 800894e:	991f      	ldr	r1, [sp, #124]	; 0x7c
        len_left = add_len;
        src = add;

        memset( b, 0, 16 );
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
 8008950:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
 8008954:	f002 ff20 	bl	800b798 <memcpy>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	461a      	mov	r2, r3
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;
 800895c:	a90c      	add	r1, sp, #48	; 0x30
 800895e:	ab08      	add	r3, sp, #32
 8008960:	5cd0      	ldrb	r0, [r2, r3]
 8008962:	5c53      	ldrb	r3, [r2, r1]
 8008964:	4043      	eors	r3, r0
 8008966:	5453      	strb	r3, [r2, r1]
 8008968:	3201      	adds	r2, #1
 800896a:	2a10      	cmp	r2, #16
 800896c:	d1f6      	bne.n	800895c <ccm_auth_crypt+0x124>
 800896e:	ab07      	add	r3, sp, #28
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	4630      	mov	r0, r6
 8008974:	460b      	mov	r3, r1
 8008976:	f000 f9b1 	bl	8008cdc <mbedtls_cipher_update>
 800897a:	2800      	cmp	r0, #0
 800897c:	f040 80ba 	bne.w	8008af4 <ccm_auth_crypt+0x2bc>
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
        src += use_len;
 8008980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
        memcpy( b + 2, src, use_len );
        len_left -= use_len;
 8008982:	1b2d      	subs	r5, r5, r4
            memset( b, 0, 16 );
            memcpy( b, src, use_len );
            UPDATE_CBC_MAC;

            len_left -= use_len;
            src += use_len;
 8008984:	441c      	add	r4, r3
        len_left -= use_len;
        src += use_len;

        UPDATE_CBC_MAC;

        while( len_left > 0 )
 8008986:	2d00      	cmp	r5, #0
 8008988:	d0bd      	beq.n	8008906 <ccm_auth_crypt+0xce>
        {
            use_len = len_left > 16 ? 16 : len_left;
 800898a:	2d10      	cmp	r5, #16
 800898c:	462b      	mov	r3, r5

            memset( b, 0, 16 );
 800898e:	f04f 0100 	mov.w	r1, #0

        UPDATE_CBC_MAC;

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;
 8008992:	bf28      	it	cs
 8008994:	2310      	movcs	r3, #16

            memset( b, 0, 16 );
 8008996:	2210      	movs	r2, #16
 8008998:	a808      	add	r0, sp, #32

        UPDATE_CBC_MAC;

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;
 800899a:	9303      	str	r3, [sp, #12]

            memset( b, 0, 16 );
 800899c:	f002 ff07 	bl	800b7ae <memset>
            memcpy( b, src, use_len );
 80089a0:	9a03      	ldr	r2, [sp, #12]
 80089a2:	a808      	add	r0, sp, #32
 80089a4:	4621      	mov	r1, r4
 80089a6:	f002 fef7 	bl	800b798 <memcpy>
 80089aa:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
 80089ac:	a90c      	add	r1, sp, #48	; 0x30
 80089ae:	ab08      	add	r3, sp, #32
 80089b0:	5cd0      	ldrb	r0, [r2, r3]
 80089b2:	5c53      	ldrb	r3, [r2, r1]
 80089b4:	4043      	eors	r3, r0
 80089b6:	5453      	strb	r3, [r2, r1]
 80089b8:	3201      	adds	r2, #1
 80089ba:	2a10      	cmp	r2, #16
 80089bc:	d1f6      	bne.n	80089ac <ccm_auth_crypt+0x174>
 80089be:	ab07      	add	r3, sp, #28
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	4630      	mov	r0, r6
 80089c4:	460b      	mov	r3, r1
 80089c6:	f000 f989 	bl	8008cdc <mbedtls_cipher_update>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	f040 8092 	bne.w	8008af4 <ccm_auth_crypt+0x2bc>

            len_left -= use_len;
 80089d0:	9b03      	ldr	r3, [sp, #12]
 80089d2:	1aed      	subs	r5, r5, r3
 80089d4:	e7d6      	b.n	8008984 <ccm_auth_crypt+0x14c>
            UPDATE_CBC_MAC;
        }

        CTR_CRYPT( dst, src, use_len );

        if( mode == CCM_DECRYPT )
 80089d6:	f1bb 0f01 	cmp.w	fp, #1
 80089da:	d11a      	bne.n	8008a12 <ccm_auth_crypt+0x1da>
        {
            memset( b, 0, 16 );
 80089dc:	2100      	movs	r1, #0
 80089de:	2210      	movs	r2, #16
 80089e0:	4628      	mov	r0, r5
 80089e2:	f002 fee4 	bl	800b7ae <memset>
            memcpy( b, dst, use_len );
 80089e6:	463a      	mov	r2, r7
 80089e8:	4628      	mov	r0, r5
 80089ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 80089ec:	f002 fed4 	bl	800b798 <memcpy>
 80089f0:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
 80089f2:	a90c      	add	r1, sp, #48	; 0x30
 80089f4:	5ca8      	ldrb	r0, [r5, r2]
 80089f6:	5c53      	ldrb	r3, [r2, r1]
 80089f8:	4043      	eors	r3, r0
 80089fa:	5453      	strb	r3, [r2, r1]
 80089fc:	3201      	adds	r2, #1
 80089fe:	2a10      	cmp	r2, #16
 8008a00:	d1f7      	bne.n	80089f2 <ccm_auth_crypt+0x1ba>
 8008a02:	ab07      	add	r3, sp, #28
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4630      	mov	r0, r6
 8008a08:	460b      	mov	r3, r1
 8008a0a:	f000 f967 	bl	8008cdc <mbedtls_cipher_update>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d170      	bne.n	8008af4 <ccm_auth_crypt+0x2bc>
        }

        dst += use_len;
 8008a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a14:	443b      	add	r3, r7
 8008a16:	9322      	str	r3, [sp, #136]	; 0x88
        src += use_len;
 8008a18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a1a:	443b      	add	r3, r7
 8008a1c:	9321      	str	r3, [sp, #132]	; 0x84
        len_left -= use_len;
 8008a1e:	ebc7 0a0a 	rsb	sl, r7, sl
 8008a22:	aa14      	add	r2, sp, #80	; 0x50
 8008a24:	eb04 0109 	add.w	r1, r4, r9
        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
            if( ++ctr[15-i] != 0 )
 8008a28:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	7013      	strb	r3, [r2, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d03d      	beq.n	8008ab2 <ccm_auth_crypt+0x27a>
     */
    len_left = length;
    src = input;
    dst = output;

    while( len_left > 0 )
 8008a36:	f1ba 0f00 	cmp.w	sl, #0
 8008a3a:	d03d      	beq.n	8008ab8 <ccm_auth_crypt+0x280>
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
 8008a3c:	4657      	mov	r7, sl
 8008a3e:	2f10      	cmp	r7, #16
 8008a40:	bf28      	it	cs
 8008a42:	2710      	movcs	r7, #16
 8008a44:	ad08      	add	r5, sp, #32

        if( mode == CCM_ENCRYPT )
 8008a46:	f1bb 0f00 	cmp.w	fp, #0
 8008a4a:	d11a      	bne.n	8008a82 <ccm_auth_crypt+0x24a>
        {
            memset( b, 0, 16 );
 8008a4c:	4659      	mov	r1, fp
 8008a4e:	2210      	movs	r2, #16
 8008a50:	4628      	mov	r0, r5
 8008a52:	f002 feac 	bl	800b7ae <memset>
            memcpy( b, src, use_len );
 8008a56:	463a      	mov	r2, r7
 8008a58:	4628      	mov	r0, r5
 8008a5a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008a5c:	f002 fe9c 	bl	800b798 <memcpy>
 8008a60:	465a      	mov	r2, fp
            UPDATE_CBC_MAC;
 8008a62:	a90c      	add	r1, sp, #48	; 0x30
 8008a64:	5ca8      	ldrb	r0, [r5, r2]
 8008a66:	5c53      	ldrb	r3, [r2, r1]
 8008a68:	4043      	eors	r3, r0
 8008a6a:	5453      	strb	r3, [r2, r1]
 8008a6c:	3201      	adds	r2, #1
 8008a6e:	2a10      	cmp	r2, #16
 8008a70:	d1f7      	bne.n	8008a62 <ccm_auth_crypt+0x22a>
 8008a72:	ab07      	add	r3, sp, #28
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	4630      	mov	r0, r6
 8008a78:	460b      	mov	r3, r1
 8008a7a:	f000 f92f 	bl	8008cdc <mbedtls_cipher_update>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d138      	bne.n	8008af4 <ccm_auth_crypt+0x2bc>
        }

        CTR_CRYPT( dst, src, use_len );
 8008a82:	ab07      	add	r3, sp, #28
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4630      	mov	r0, r6
 8008a88:	4621      	mov	r1, r4
 8008a8a:	2210      	movs	r2, #16
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	f000 f925 	bl	8008cdc <mbedtls_cipher_update>
 8008a92:	bb78      	cbnz	r0, 8008af4 <ccm_auth_crypt+0x2bc>
 8008a94:	b2c3      	uxtb	r3, r0
 8008a96:	42bb      	cmp	r3, r7
 8008a98:	f100 0001 	add.w	r0, r0, #1
 8008a9c:	d29b      	bcs.n	80089d6 <ccm_auth_crypt+0x19e>
 8008a9e:	aa14      	add	r2, sp, #80	; 0x50
 8008aa0:	441a      	add	r2, r3
 8008aa2:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008aa4:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8008aa8:	5cc9      	ldrb	r1, [r1, r3]
 8008aaa:	404a      	eors	r2, r1
 8008aac:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008aae:	54ca      	strb	r2, [r1, r3]
 8008ab0:	e7f0      	b.n	8008a94 <ccm_auth_crypt+0x25c>

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 8008ab2:	428a      	cmp	r2, r1
 8008ab4:	d1b8      	bne.n	8008a28 <ccm_auth_crypt+0x1f0>
 8008ab6:	e7be      	b.n	8008a36 <ccm_auth_crypt+0x1fe>
 8008ab8:	ab14      	add	r3, sp, #80	; 0x50
 8008aba:	44a1      	add	r9, r4

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
        ctr[15-i] = 0;
 8008abc:	2200      	movs	r2, #0
 8008abe:	f803 2d01 	strb.w	r2, [r3, #-1]!
    }

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
 8008ac2:	454b      	cmp	r3, r9
 8008ac4:	d1fa      	bne.n	8008abc <ccm_auth_crypt+0x284>
        ctr[15-i] = 0;

    CTR_CRYPT( y, y, 16 );
 8008ac6:	ab07      	add	r3, sp, #28
 8008ac8:	ad08      	add	r5, sp, #32
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	4630      	mov	r0, r6
 8008ace:	4621      	mov	r1, r4
 8008ad0:	2210      	movs	r2, #16
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	f000 f902 	bl	8008cdc <mbedtls_cipher_update>
 8008ad8:	b960      	cbnz	r0, 8008af4 <ccm_auth_crypt+0x2bc>
 8008ada:	a90c      	add	r1, sp, #48	; 0x30
 8008adc:	5c2a      	ldrb	r2, [r5, r0]
 8008ade:	5c43      	ldrb	r3, [r0, r1]
 8008ae0:	4053      	eors	r3, r2
 8008ae2:	5443      	strb	r3, [r0, r1]
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	2810      	cmp	r0, #16
 8008ae8:	d1f7      	bne.n	8008ada <ccm_auth_crypt+0x2a2>
    memcpy( tag, y, tag_len );
 8008aea:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8008aec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008aee:	f002 fe53 	bl	800b798 <memcpy>

    return( 0 );
 8008af2:	2000      	movs	r0, #0
}
 8008af4:	b015      	add	sp, #84	; 0x54
 8008af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008afa <mbedtls_ccm_init>:
 * Initialize context
 */
void mbedtls_ccm_init( mbedtls_ccm_context *ctx )
{
    CCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
 8008afa:	2100      	movs	r1, #0
 8008afc:	2238      	movs	r2, #56	; 0x38
 8008afe:	f002 be56 	b.w	800b7ae <memset>

08008b02 <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8008b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b06:	4604      	mov	r4, r0
 8008b08:	4617      	mov	r7, r2
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8008b0a:	4608      	mov	r0, r1
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	4619      	mov	r1, r3

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8008b10:	461e      	mov	r6, r3
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8008b12:	f000 f887 	bl	8008c24 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8008b16:	4605      	mov	r5, r0
 8008b18:	b190      	cbz	r0, 8008b40 <mbedtls_ccm_setkey+0x3e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 8008b1a:	6943      	ldr	r3, [r0, #20]
 8008b1c:	2b10      	cmp	r3, #16
 8008b1e:	d10f      	bne.n	8008b40 <mbedtls_ccm_setkey+0x3e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 f893 	bl	8008c4c <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f000 f89f 	bl	8008c6c <mbedtls_cipher_setup>
 8008b2e:	b948      	cbnz	r0, 8008b44 <mbedtls_ccm_setkey+0x42>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8008b30:	4620      	mov	r0, r4
 8008b32:	4639      	mov	r1, r7
 8008b34:	4632      	mov	r2, r6
 8008b36:	2301      	movs	r3, #1
    {
        return( ret );
    }

    return( 0 );
}
 8008b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_cipher_free( &ctx->cipher_ctx );

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8008b3c:	f000 b8ae 	b.w	8008c9c <mbedtls_cipher_setkey>
    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 8008b40:	f06f 000c 	mvn.w	r0, #12
    {
        return( ret );
    }

    return( 0 );
}
 8008b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b48 <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
 8008b48:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	b138      	cbz	r0, 8008b5e <mbedtls_ccm_free+0x16>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8008b4e:	f000 f87d 	bl	8008c4c <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 8008b52:	4620      	mov	r0, r4
 8008b54:	2138      	movs	r1, #56	; 0x38
}
 8008b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 8008b5a:	f000 ba5b 	b.w	8009014 <mbedtls_platform_zeroize>
 8008b5e:	bd10      	pop	{r4, pc}

08008b60 <mbedtls_ccm_star_encrypt_and_tag>:
int mbedtls_ccm_star_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 8008b60:	b530      	push	{r4, r5, lr}
 8008b62:	b089      	sub	sp, #36	; 0x24
 8008b64:	460d      	mov	r5, r1
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b6e:	9302      	str	r3, [sp, #8]
 8008b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b72:	9303      	str	r3, [sp, #12]
 8008b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b7a:	9305      	str	r3, [sp, #20]
int mbedtls_ccm_star_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 8008b7c:	4614      	mov	r4, r2
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
 8008b7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b80:	9306      	str	r3, [sp, #24]
 8008b82:	2100      	movs	r1, #0
 8008b84:	462a      	mov	r2, r5
 8008b86:	4623      	mov	r3, r4
 8008b88:	f7ff fe56 	bl	8008838 <ccm_auth_crypt>
                            add, add_len, input, output, tag, tag_len ) );
}
 8008b8c:	b009      	add	sp, #36	; 0x24
 8008b8e:	bd30      	pop	{r4, r5, pc}

08008b90 <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 8008b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b94:	f8dd e018 	ldr.w	lr, [sp, #24]
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
 8008b98:	b11c      	cbz	r4, 8008ba2 <mbedtls_ccm_encrypt_and_tag+0x12>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 8008b9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
 8008b9e:	f7ff bfdf 	b.w	8008b60 <mbedtls_ccm_star_encrypt_and_tag>
                add_len, input, output, tag, tag_len ) );
}
 8008ba2:	f06f 000c 	mvn.w	r0, #12
 8008ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ba8 <mbedtls_ccm_star_auth_decrypt>:
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 8008ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008baa:	b08d      	sub	sp, #52	; 0x34
 8008bac:	460f      	mov	r7, r1
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 8008bba:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008bbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 8008bbe:	9303      	str	r3, [sp, #12]
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 8008bc0:	4696      	mov	lr, r2
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 8008bc2:	ab08      	add	r3, sp, #32
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	9504      	str	r5, [sp, #16]
 8008bc8:	9606      	str	r6, [sp, #24]
 8008bca:	2101      	movs	r1, #1
 8008bcc:	463a      	mov	r2, r7
 8008bce:	4673      	mov	r3, lr
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 8008bd0:	9c16      	ldr	r4, [sp, #88]	; 0x58
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 8008bd2:	f7ff fe31 	bl	8008838 <ccm_auth_crypt>
 8008bd6:	b9b8      	cbnz	r0, 8008c08 <mbedtls_ccm_star_auth_decrypt+0x60>
 8008bd8:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8008bda:	b2c2      	uxtb	r2, r0
 8008bdc:	42b2      	cmp	r2, r6
 8008bde:	f100 0001 	add.w	r0, r0, #1
 8008be2:	d208      	bcs.n	8008bf6 <mbedtls_ccm_star_auth_decrypt+0x4e>
        diff |= tag[i] ^ check_tag[i];
 8008be4:	a90c      	add	r1, sp, #48	; 0x30
 8008be6:	eb01 0e02 	add.w	lr, r1, r2
 8008bea:	5ca1      	ldrb	r1, [r4, r2]
 8008bec:	f81e 2c10 	ldrb.w	r2, [lr, #-16]
 8008bf0:	404a      	eors	r2, r1
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	e7f1      	b.n	8008bda <mbedtls_ccm_star_auth_decrypt+0x32>

    if( diff != 0 )
 8008bf6:	b133      	cbz	r3, 8008c06 <mbedtls_ccm_star_auth_decrypt+0x5e>
    {
        mbedtls_platform_zeroize( output, length );
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	f000 fa0a 	bl	8009014 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
 8008c00:	f06f 000e 	mvn.w	r0, #14
 8008c04:	e000      	b.n	8008c08 <mbedtls_ccm_star_auth_decrypt+0x60>
    }

    return( 0 );
 8008c06:	4618      	mov	r0, r3
}
 8008c08:	b00d      	add	sp, #52	; 0x34
 8008c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c0c <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 8008c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c10:	f8dd e018 	ldr.w	lr, [sp, #24]
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
 8008c14:	b11c      	cbz	r4, 8008c1e <mbedtls_ccm_auth_decrypt+0x12>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 8008c16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
 8008c1a:	f7ff bfc5 	b.w	8008ba8 <mbedtls_ccm_star_auth_decrypt>
                add_len, input, output, tag, tag_len ) );
}
 8008c1e:	f06f 000c 	mvn.w	r0, #12
 8008c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c24 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 8008c24:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8008c26:	4c08      	ldr	r4, [pc, #32]	; (8008c48 <mbedtls_cipher_info_from_values+0x24>)
 8008c28:	6863      	ldr	r3, [r4, #4]
 8008c2a:	b15b      	cbz	r3, 8008c44 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 8008c2c:	699d      	ldr	r5, [r3, #24]
 8008c2e:	782d      	ldrb	r5, [r5, #0]
 8008c30:	4285      	cmp	r5, r0
 8008c32:	d105      	bne.n	8008c40 <mbedtls_cipher_info_from_values+0x1c>
 8008c34:	685d      	ldr	r5, [r3, #4]
 8008c36:	428d      	cmp	r5, r1
 8008c38:	d102      	bne.n	8008c40 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8008c3a:	785d      	ldrb	r5, [r3, #1]
 8008c3c:	4295      	cmp	r5, r2
 8008c3e:	d001      	beq.n	8008c44 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8008c40:	3408      	adds	r4, #8
 8008c42:	e7f1      	b.n	8008c28 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	bd30      	pop	{r4, r5, pc}
 8008c48:	0800c404 	.word	0x0800c404

08008c4c <mbedtls_cipher_free>:
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 8008c4c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8008c4e:	4604      	mov	r4, r0
 8008c50:	b158      	cbz	r0, 8008c6a <mbedtls_cipher_free+0x1e>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 8008c52:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008c54:	b118      	cbz	r0, 8008c5e <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8008c5e:	4620      	mov	r0, r4
 8008c60:	2138      	movs	r1, #56	; 0x38
}
 8008c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

    if( ctx->cipher_ctx )
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8008c66:	f000 b9d5 	b.w	8009014 <mbedtls_platform_zeroize>
 8008c6a:	bd10      	pop	{r4, pc}

08008c6c <mbedtls_cipher_setup>:
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4605      	mov	r5, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 8008c70:	460c      	mov	r4, r1
 8008c72:	b159      	cbz	r1, 8008c8c <mbedtls_cipher_setup+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8008c74:	2100      	movs	r1, #0
 8008c76:	2238      	movs	r2, #56	; 0x38
 8008c78:	f002 fd99 	bl	800b7ae <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8008c7c:	69a3      	ldr	r3, [r4, #24]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	4798      	blx	r3
 8008c82:	6368      	str	r0, [r5, #52]	; 0x34
 8008c84:	b120      	cbz	r0, 8008c90 <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 8008c86:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 8008c88:	2000      	movs	r0, #0
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8008c8c:	4801      	ldr	r0, [pc, #4]	; (8008c94 <mbedtls_cipher_setup+0x28>)
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <mbedtls_cipher_setup+0x2c>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	ffff9f00 	.word	0xffff9f00
 8008c98:	ffff9e80 	.word	0xffff9e80

08008c9c <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 8008c9c:	b530      	push	{r4, r5, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 8008c9e:	6804      	ldr	r4, [r0, #0]
 8008ca0:	b1bc      	cbz	r4, 8008cd2 <mbedtls_cipher_setkey+0x36>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8008ca2:	6925      	ldr	r5, [r4, #16]
 8008ca4:	07ad      	lsls	r5, r5, #30
 8008ca6:	d402      	bmi.n	8008cae <mbedtls_cipher_setkey+0x12>
 8008ca8:	6865      	ldr	r5, [r4, #4]
 8008caa:	4295      	cmp	r5, r2
 8008cac:	d111      	bne.n	8008cd2 <mbedtls_cipher_setkey+0x36>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8008cae:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 8008cb0:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8008cb2:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8008cb4:	d003      	beq.n	8008cbe <mbedtls_cipher_setkey+0x22>
 8008cb6:	7865      	ldrb	r5, [r4, #1]
 8008cb8:	3d03      	subs	r5, #3
 8008cba:	2d02      	cmp	r5, #2
 8008cbc:	d802      	bhi.n	8008cc4 <mbedtls_cipher_setkey+0x28>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8008cbe:	69a3      	ldr	r3, [r4, #24]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	e002      	b.n	8008cca <mbedtls_cipher_setkey+0x2e>
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
 8008cc4:	b92b      	cbnz	r3, 8008cd2 <mbedtls_cipher_setkey+0x36>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8008cc6:	69a3      	ldr	r3, [r4, #24]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	6b40      	ldr	r0, [r0, #52]	; 0x34
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8008ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8008cd0:	4718      	bx	r3
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8008cd2:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <mbedtls_cipher_setkey+0x3c>)
 8008cd4:	bd30      	pop	{r4, r5, pc}
 8008cd6:	bf00      	nop
 8008cd8:	ffff9f00 	.word	0xffff9f00

08008cdc <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8008cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cde:	4604      	mov	r4, r0

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 8008ce0:	6800      	ldr	r0, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8008ce2:	9e05      	ldr	r6, [sp, #20]
 8008ce4:	460d      	mov	r5, r1

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 8008ce6:	b908      	cbnz	r0, 8008cec <mbedtls_cipher_update+0x10>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8008ce8:	4814      	ldr	r0, [pc, #80]	; (8008d3c <mbedtls_cipher_update+0x60>)
 8008cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8008cec:	f890 e001 	ldrb.w	lr, [r0, #1]
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6031      	str	r1, [r6, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8008cf4:	f1be 0f01 	cmp.w	lr, #1
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
 8008cf8:	6941      	ldr	r1, [r0, #20]
 8008cfa:	d10c      	bne.n	8008d16 <mbedtls_cipher_update+0x3a>
    {
        if( ilen != block_size )
 8008cfc:	428a      	cmp	r2, r1
 8008cfe:	d117      	bne.n	8008d30 <mbedtls_cipher_update+0x54>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 8008d00:	6032      	str	r2, [r6, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8008d02:	6982      	ldr	r2, [r0, #24]
 8008d04:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8008d08:	6856      	ldr	r6, [r2, #4]
 8008d0a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008d0c:	462a      	mov	r2, r5
 8008d0e:	46b4      	mov	ip, r6
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8008d10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8008d14:	4760      	bx	ip
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
 8008d16:	b169      	cbz	r1, 8008d34 <mbedtls_cipher_update+0x58>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
 8008d18:	429d      	cmp	r5, r3
 8008d1a:	d10d      	bne.n	8008d38 <mbedtls_cipher_update+0x5c>
 8008d1c:	69e3      	ldr	r3, [r4, #28]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e2      	bne.n	8008ce8 <mbedtls_cipher_update+0xc>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8008d22:	fbb2 f3f1 	udiv	r3, r2, r1
 8008d26:	fb01 2213 	mls	r2, r1, r3, r2
 8008d2a:	2a00      	cmp	r2, #0
 8008d2c:	d1dc      	bne.n	8008ce8 <mbedtls_cipher_update+0xc>
 8008d2e:	e003      	b.n	8008d38 <mbedtls_cipher_update+0x5c>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8008d30:	4803      	ldr	r0, [pc, #12]	; (8008d40 <mbedtls_cipher_update+0x64>)
 8008d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8008d34:	4803      	ldr	r0, [pc, #12]	; (8008d44 <mbedtls_cipher_update+0x68>)
 8008d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8008d38:	4803      	ldr	r0, [pc, #12]	; (8008d48 <mbedtls_cipher_update+0x6c>)
}
 8008d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d3c:	ffff9f00 	.word	0xffff9f00
 8008d40:	ffff9d80 	.word	0xffff9d80
 8008d44:	ffff9c80 	.word	0xffff9c80
 8008d48:	ffff9f80 	.word	0xffff9f80

08008d4c <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	4604      	mov	r4, r0
    mbedtls_ccm_free( ctx );
 8008d50:	f7ff fefa 	bl	8008b48 <mbedtls_ccm_free>
    mbedtls_free( ctx );
 8008d54:	4620      	mov	r0, r4
}
 8008d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void ccm_ctx_free( void *ctx )
{
    mbedtls_ccm_free( ctx );
    mbedtls_free( ctx );
 8008d5a:	f002 bd05 	b.w	800b768 <free>

08008d5e <ccm_ctx_alloc>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc( void )
{
 8008d5e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
 8008d60:	2001      	movs	r0, #1
 8008d62:	2138      	movs	r1, #56	; 0x38
 8008d64:	f002 fcca 	bl	800b6fc <calloc>

    if( ctx != NULL )
 8008d68:	4604      	mov	r4, r0
 8008d6a:	b108      	cbz	r0, 8008d70 <ccm_ctx_alloc+0x12>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
 8008d6c:	f7ff fec5 	bl	8008afa <mbedtls_ccm_init>

    return( ctx );
}
 8008d70:	4620      	mov	r0, r4
 8008d72:	bd10      	pop	{r4, pc}

08008d74 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8008d74:	b510      	push	{r4, lr}
 8008d76:	460c      	mov	r4, r1
 8008d78:	4613      	mov	r3, r2
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8008d7a:	2102      	movs	r1, #2
 8008d7c:	4622      	mov	r2, r4
                     key, key_bitlen );
}
 8008d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8008d82:	f7ff bebe 	b.w	8008b02 <mbedtls_ccm_setkey>

08008d86 <aes_ctx_free>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 8008d86:	b510      	push	{r4, lr}
 8008d88:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8008d8a:	f7ff f80c 	bl	8007da6 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8008d8e:	4620      	mov	r0, r4
}
 8008d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 8008d94:	f002 bce8 	b.w	800b768 <free>

08008d98 <aes_ctx_alloc>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 8008d98:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8008da0:	f002 fcac 	bl	800b6fc <calloc>

    if( aes == NULL )
 8008da4:	4604      	mov	r4, r0
 8008da6:	b108      	cbz	r0, 8008dac <aes_ctx_alloc+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 8008da8:	f7fe fff8 	bl	8007d9c <mbedtls_aes_init>

    return( aes );
}
 8008dac:	4620      	mov	r0, r4
 8008dae:	bd10      	pop	{r4, pc}

08008db0 <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8008db0:	f7ff b8fa 	b.w	8007fa8 <mbedtls_aes_setkey_dec>

08008db4 <aes_setkey_enc_wrap>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8008db4:	f7fe bffe 	b.w	8007db4 <mbedtls_aes_setkey_enc>

08008db8 <aes_crypt_ecb_wrap>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8008db8:	f7ff bd36 	b.w	8008828 <mbedtls_aes_crypt_ecb>

08008dbc <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 8008dbc:	2805      	cmp	r0, #5
 8008dbe:	d004      	beq.n	8008dca <mbedtls_md_info_from_type+0xe>
 8008dc0:	2806      	cmp	r0, #6
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
 8008dc2:	4803      	ldr	r0, [pc, #12]	; (8008dd0 <mbedtls_md_info_from_type+0x14>)
 8008dc4:	bf18      	it	ne
 8008dc6:	2000      	movne	r0, #0
 8008dc8:	4770      	bx	lr
        case MBEDTLS_MD_SHA1:
            return( &mbedtls_sha1_info );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
            return( &mbedtls_sha224_info );
 8008dca:	4802      	ldr	r0, [pc, #8]	; (8008dd4 <mbedtls_md_info_from_type+0x18>)
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	0800c568 	.word	0x0800c568
 8008dd4:	0800c528 	.word	0x0800c528

08008dd8 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8008dd8:	2100      	movs	r1, #0
 8008dda:	220c      	movs	r2, #12
 8008ddc:	f002 bce7 	b.w	800b7ae <memset>

08008de0 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 8008de0:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8008de2:	4604      	mov	r4, r0
 8008de4:	b1a8      	cbz	r0, 8008e12 <mbedtls_md_free+0x32>
 8008de6:	6803      	ldr	r3, [r0, #0]
 8008de8:	b19b      	cbz	r3, 8008e12 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
 8008dea:	6840      	ldr	r0, [r0, #4]
 8008dec:	b108      	cbz	r0, 8008df2 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 8008df2:	68a0      	ldr	r0, [r4, #8]
 8008df4:	b138      	cbz	r0, 8008e06 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	68d9      	ldr	r1, [r3, #12]
    if( ctx->md_ctx != NULL )
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 8008dfa:	0049      	lsls	r1, r1, #1
 8008dfc:	f000 f90a 	bl	8009014 <mbedtls_platform_zeroize>
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 8008e00:	68a0      	ldr	r0, [r4, #8]
 8008e02:	f002 fcb1 	bl	800b768 <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 8008e06:	4620      	mov	r0, r4
 8008e08:	210c      	movs	r1, #12
}
 8008e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 8008e0e:	f000 b901 	b.w	8009014 <mbedtls_platform_zeroize>
 8008e12:	bd10      	pop	{r4, pc}

08008e14 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	4605      	mov	r5, r0
 8008e18:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	b199      	cbz	r1, 8008e46 <mbedtls_md_setup+0x32>
 8008e1e:	b190      	cbz	r0, 8008e46 <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8008e20:	6a0b      	ldr	r3, [r1, #32]
 8008e22:	4798      	blx	r3
 8008e24:	4606      	mov	r6, r0
 8008e26:	6068      	str	r0, [r5, #4]
 8008e28:	b178      	cbz	r0, 8008e4a <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8008e2a:	b14f      	cbz	r7, 8008e40 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8008e2c:	2002      	movs	r0, #2
 8008e2e:	68e1      	ldr	r1, [r4, #12]
 8008e30:	f002 fc64 	bl	800b6fc <calloc>
 8008e34:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 8008e36:	b918      	cbnz	r0, 8008e40 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8008e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4798      	blx	r3
 8008e3e:	e004      	b.n	8008e4a <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 8008e40:	602c      	str	r4, [r5, #0]

    return( 0 );
 8008e42:	2000      	movs	r0, #0
 8008e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8008e46:	4802      	ldr	r0, [pc, #8]	; (8008e50 <mbedtls_md_setup+0x3c>)
 8008e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8008e4a:	4802      	ldr	r0, [pc, #8]	; (8008e54 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 8008e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	ffffaf00 	.word	0xffffaf00
 8008e54:	ffffae80 	.word	0xffffae80

08008e58 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8008e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5c:	460e      	mov	r6, r1
 8008e5e:	b088      	sub	sp, #32
 8008e60:	4690      	mov	r8, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8008e62:	4604      	mov	r4, r0
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d050      	beq.n	8008f0a <mbedtls_md_hmac_starts+0xb2>
 8008e68:	6803      	ldr	r3, [r0, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d04d      	beq.n	8008f0a <mbedtls_md_hmac_starts+0xb2>
 8008e6e:	6882      	ldr	r2, [r0, #8]
 8008e70:	2a00      	cmp	r2, #0
 8008e72:	d04a      	beq.n	8008f0a <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	4590      	cmp	r8, r2
 8008e78:	d919      	bls.n	8008eae <mbedtls_md_hmac_starts+0x56>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	6840      	ldr	r0, [r0, #4]
 8008e7e:	4798      	blx	r3
 8008e80:	4605      	mov	r5, r0
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d13b      	bne.n	8008efe <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	6860      	ldr	r0, [r4, #4]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4642      	mov	r2, r8
 8008e90:	4798      	blx	r3
 8008e92:	4605      	mov	r5, r0
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d132      	bne.n	8008efe <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	6860      	ldr	r0, [r4, #4]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	4669      	mov	r1, sp
 8008ea0:	4798      	blx	r3
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	bb58      	cbnz	r0, 8008efe <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;

        keylen = ctx->md_info->size;
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	f8d3 8008 	ldr.w	r8, [r3, #8]
        key = sum;
 8008eac:	466e      	mov	r6, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8008eae:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 8008eb0:	68a7      	ldr	r7, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8008eb2:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8008eb4:	2136      	movs	r1, #54	; 0x36
 8008eb6:	4638      	mov	r0, r7
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8008eb8:	18bd      	adds	r5, r7, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 8008eba:	f002 fc78 	bl	800b7ae <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	215c      	movs	r1, #92	; 0x5c
 8008ec6:	f002 fc72 	bl	800b7ae <memset>

    for( i = 0; i < keylen; i++ )
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4543      	cmp	r3, r8
 8008ece:	d009      	beq.n	8008ee4 <mbedtls_md_hmac_starts+0x8c>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8008ed0:	5cf1      	ldrb	r1, [r6, r3]
 8008ed2:	5cfa      	ldrb	r2, [r7, r3]
 8008ed4:	404a      	eors	r2, r1
 8008ed6:	54fa      	strb	r2, [r7, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8008ed8:	5cf1      	ldrb	r1, [r6, r3]
 8008eda:	5cea      	ldrb	r2, [r5, r3]
 8008edc:	404a      	eors	r2, r1
 8008ede:	54ea      	strb	r2, [r5, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	e7f3      	b.n	8008ecc <mbedtls_md_hmac_starts+0x74>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	6860      	ldr	r0, [r4, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	4798      	blx	r3
 8008eec:	4605      	mov	r5, r0
 8008eee:	b930      	cbnz	r0, 8008efe <mbedtls_md_hmac_starts+0xa6>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	6860      	ldr	r0, [r4, #4]
 8008ef4:	695d      	ldr	r5, [r3, #20]
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	4639      	mov	r1, r7
 8008efa:	47a8      	blx	r5
 8008efc:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 8008efe:	4668      	mov	r0, sp
 8008f00:	2120      	movs	r1, #32
 8008f02:	f000 f887 	bl	8009014 <mbedtls_platform_zeroize>

    return( ret );
 8008f06:	4628      	mov	r0, r5
 8008f08:	e000      	b.n	8008f0c <mbedtls_md_hmac_starts+0xb4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8008f0a:	4802      	ldr	r0, [pc, #8]	; (8008f14 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 8008f0c:	b008      	add	sp, #32
 8008f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f12:	bf00      	nop
 8008f14:	ffffaf00 	.word	0xffffaf00

08008f18 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8008f18:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8008f1a:	b140      	cbz	r0, 8008f2e <mbedtls_md_hmac_update+0x16>
 8008f1c:	6803      	ldr	r3, [r0, #0]
 8008f1e:	b133      	cbz	r3, 8008f2e <mbedtls_md_hmac_update+0x16>
 8008f20:	6884      	ldr	r4, [r0, #8]
 8008f22:	b124      	cbz	r4, 8008f2e <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	6840      	ldr	r0, [r0, #4]
}
 8008f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8008f2c:	4718      	bx	r3
}
 8008f2e:	4801      	ldr	r0, [pc, #4]	; (8008f34 <mbedtls_md_hmac_update+0x1c>)
 8008f30:	bd10      	pop	{r4, pc}
 8008f32:	bf00      	nop
 8008f34:	ffffaf00 	.word	0xffffaf00

08008f38 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8008f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f3a:	460d      	mov	r5, r1
 8008f3c:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8008f3e:	4604      	mov	r4, r0
 8008f40:	b318      	cbz	r0, 8008f8a <mbedtls_md_hmac_finish+0x52>
 8008f42:	6803      	ldr	r3, [r0, #0]
 8008f44:	b30b      	cbz	r3, 8008f8a <mbedtls_md_hmac_finish+0x52>
 8008f46:	6886      	ldr	r6, [r0, #8]
 8008f48:	b1fe      	cbz	r6, 8008f8a <mbedtls_md_hmac_finish+0x52>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8008f4a:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 8008f4c:	6840      	ldr	r0, [r0, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	4669      	mov	r1, sp
 8008f52:	4798      	blx	r3
 8008f54:	b9d0      	cbnz	r0, 8008f8c <mbedtls_md_hmac_finish+0x54>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	6860      	ldr	r0, [r4, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	4798      	blx	r3
 8008f5e:	b9a8      	cbnz	r0, 8008f8c <mbedtls_md_hmac_finish+0x54>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	6860      	ldr	r0, [r4, #4]
 8008f64:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	19f1      	adds	r1, r6, r7
 8008f6c:	47e0      	blx	ip
 8008f6e:	b968      	cbnz	r0, 8008f8c <mbedtls_md_hmac_finish+0x54>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	6860      	ldr	r0, [r4, #4]
 8008f74:	695e      	ldr	r6, [r3, #20]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	4669      	mov	r1, sp
 8008f7a:	47b0      	blx	r6
 8008f7c:	b930      	cbnz	r0, 8008f8c <mbedtls_md_hmac_finish+0x54>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	6860      	ldr	r0, [r4, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	4629      	mov	r1, r5
 8008f86:	4798      	blx	r3
 8008f88:	e000      	b.n	8008f8c <mbedtls_md_hmac_finish+0x54>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8008f8a:	4801      	ldr	r0, [pc, #4]	; (8008f90 <mbedtls_md_hmac_finish+0x58>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 8008f8c:	b009      	add	sp, #36	; 0x24
 8008f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f90:	ffffaf00 	.word	0xffffaf00

08008f94 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 8008f94:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8008f96:	4604      	mov	r4, r0
 8008f98:	b180      	cbz	r0, 8008fbc <mbedtls_md_hmac_reset+0x28>
 8008f9a:	6803      	ldr	r3, [r0, #0]
 8008f9c:	b173      	cbz	r3, 8008fbc <mbedtls_md_hmac_reset+0x28>
 8008f9e:	6885      	ldr	r5, [r0, #8]
 8008fa0:	b165      	cbz	r5, 8008fbc <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	6840      	ldr	r0, [r0, #4]
 8008fa6:	4798      	blx	r3
 8008fa8:	b948      	cbnz	r0, 8008fbe <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	6860      	ldr	r0, [r4, #4]
 8008fae:	695e      	ldr	r6, [r3, #20]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
 8008fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8008fba:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8008fbc:	4800      	ldr	r0, [pc, #0]	; (8008fc0 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	ffffaf00 	.word	0xffffaf00

08008fc4 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 8008fc4:	f000 b88c 	b.w	80090e0 <mbedtls_internal_sha256_process>

08008fc8 <sha224_clone_wrap>:
    mbedtls_free( ctx );
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 8008fc8:	f000 b835 	b.w	8009036 <mbedtls_sha256_clone>

08008fcc <sha224_ctx_free>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8008fd0:	f000 f82c 	bl	800902c <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8008fd4:	4620      	mov	r0, r4
}
 8008fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 8008fda:	f002 bbc5 	b.w	800b768 <free>

08008fde <sha224_ctx_alloc>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 8008fde:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	216c      	movs	r1, #108	; 0x6c
 8008fe4:	f002 fb8a 	bl	800b6fc <calloc>

    if( ctx != NULL )
 8008fe8:	4604      	mov	r4, r0
 8008fea:	b108      	cbz	r0, 8008ff0 <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8008fec:	f000 f81a 	bl	8009024 <mbedtls_sha256_init>

    return( ctx );
}
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	bd10      	pop	{r4, pc}

08008ff4 <sha224_wrap>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f000 bcc4 	b.w	8009982 <mbedtls_sha256_ret>

08008ffa <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f000 bcc1 	b.w	8009982 <mbedtls_sha256_ret>

08009000 <sha224_finish_wrap>:
                                       input, ilen ) );
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 8009000:	f000 bc27 	b.w	8009852 <mbedtls_sha256_finish_ret>

08009004 <sha224_update_wrap>:
}

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 8009004:	f000 bbec 	b.w	80097e0 <mbedtls_sha256_update_ret>

08009008 <sha224_starts_wrap>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 8009008:	2101      	movs	r1, #1
 800900a:	f000 b819 	b.w	8009040 <mbedtls_sha256_starts_ret>

0800900e <sha256_starts_wrap>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 800900e:	2100      	movs	r1, #0
 8009010:	f000 b816 	b.w	8009040 <mbedtls_sha256_starts_ret>

08009014 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 8009014:	4b02      	ldr	r3, [pc, #8]	; (8009020 <mbedtls_platform_zeroize+0xc>)
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8009016:	460a      	mov	r2, r1
    memset_func( buf, 0, len );
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2100      	movs	r1, #0
 800901c:	4718      	bx	r3
 800901e:	bf00      	nop
 8009020:	1ffed674 	.word	0x1ffed674

08009024 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8009024:	2100      	movs	r1, #0
 8009026:	226c      	movs	r2, #108	; 0x6c
 8009028:	f002 bbc1 	b.w	800b7ae <memset>

0800902c <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 800902c:	b110      	cbz	r0, 8009034 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 800902e:	216c      	movs	r1, #108	; 0x6c
 8009030:	f7ff bff0 	b.w	8009014 <mbedtls_platform_zeroize>
 8009034:	4770      	bx	lr

08009036 <mbedtls_sha256_clone>:
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8009036:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 8009038:	226c      	movs	r2, #108	; 0x6c
 800903a:	f002 fbad 	bl	800b798 <memcpy>
 800903e:	bd08      	pop	{r3, pc}

08009040 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8009044:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 8009046:	b9a1      	cbnz	r1, 8009072 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8009048:	4b18      	ldr	r3, [pc, #96]	; (80090ac <mbedtls_sha256_starts_ret+0x6c>)
 800904a:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 800904c:	4b18      	ldr	r3, [pc, #96]	; (80090b0 <mbedtls_sha256_starts_ret+0x70>)
 800904e:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 8009050:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <mbedtls_sha256_starts_ret+0x74>)
 8009052:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8009054:	4b18      	ldr	r3, [pc, #96]	; (80090b8 <mbedtls_sha256_starts_ret+0x78>)
 8009056:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 8009058:	4b18      	ldr	r3, [pc, #96]	; (80090bc <mbedtls_sha256_starts_ret+0x7c>)
 800905a:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 800905c:	4b18      	ldr	r3, [pc, #96]	; (80090c0 <mbedtls_sha256_starts_ret+0x80>)
 800905e:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 8009060:	4b18      	ldr	r3, [pc, #96]	; (80090c4 <mbedtls_sha256_starts_ret+0x84>)
 8009062:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8009064:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8009068:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 800906c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8009070:	e018      	b.n	80090a4 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8009072:	4b15      	ldr	r3, [pc, #84]	; (80090c8 <mbedtls_sha256_starts_ret+0x88>)
 8009074:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 8009076:	4b15      	ldr	r3, [pc, #84]	; (80090cc <mbedtls_sha256_starts_ret+0x8c>)
 8009078:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 800907a:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 800907e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009082:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8009086:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 8009088:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <mbedtls_sha256_starts_ret+0x90>)
 800908a:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 800908c:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <mbedtls_sha256_starts_ret+0x94>)
 800908e:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 8009090:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8009094:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8009098:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 800909c:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 800909e:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <mbedtls_sha256_starts_ret+0x98>)
 80090a0:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80090a2:	4b0e      	ldr	r3, [pc, #56]	; (80090dc <mbedtls_sha256_starts_ret+0x9c>)
 80090a4:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 80090a6:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 80090a8:	2000      	movs	r0, #0
 80090aa:	4770      	bx	lr
 80090ac:	6a09e667 	.word	0x6a09e667
 80090b0:	bb67ae85 	.word	0xbb67ae85
 80090b4:	3c6ef372 	.word	0x3c6ef372
 80090b8:	a54ff53a 	.word	0xa54ff53a
 80090bc:	510e527f 	.word	0x510e527f
 80090c0:	9b05688c 	.word	0x9b05688c
 80090c4:	1f83d9ab 	.word	0x1f83d9ab
 80090c8:	c1059ed8 	.word	0xc1059ed8
 80090cc:	367cd507 	.word	0x367cd507
 80090d0:	f70e5939 	.word	0xf70e5939
 80090d4:	ffc00b31 	.word	0xffc00b31
 80090d8:	64f98fa7 	.word	0x64f98fa7
 80090dc:	befa4fa4 	.word	0xbefa4fa4

080090e0 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	b0cf      	sub	sp, #316	; 0x13c
 80090e6:	1d03      	adds	r3, r0, #4
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	461a      	mov	r2, r3
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 80090ec:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 80090ee:	ac06      	add	r4, sp, #24
 80090f0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80090f4:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 80090f8:	3301      	adds	r3, #1
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	d1f7      	bne.n	80090ee <mbedtls_internal_sha256_process+0xe>
 80090fe:	4608      	mov	r0, r1
 8009100:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8009102:	f811 4022 	ldrb.w	r4, [r1, r2, lsl #2]
 8009106:	78c3      	ldrb	r3, [r0, #3]
 8009108:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800910c:	7844      	ldrb	r4, [r0, #1]
 800910e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009112:	7884      	ldrb	r4, [r0, #2]
 8009114:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8009118:	ac0e      	add	r4, sp, #56	; 0x38
 800911a:	3004      	adds	r0, #4
 800911c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8009120:	3201      	adds	r2, #1
 8009122:	2a10      	cmp	r2, #16
 8009124:	d1ed      	bne.n	8009102 <mbedtls_internal_sha256_process+0x22>
 8009126:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800912a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800912e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009130:	9908      	ldr	r1, [sp, #32]
 8009132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009134:	9807      	ldr	r0, [sp, #28]
 8009136:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009138:	9c06      	ldr	r4, [sp, #24]
 800913a:	f8df e284 	ldr.w	lr, [pc, #644]	; 80093c0 <mbedtls_internal_sha256_process+0x2e0>
 800913e:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8009142:	f85c 7c04 	ldr.w	r7, [ip, #-4]
 8009146:	f85e 6c04 	ldr.w	r6, [lr, #-4]
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800914a:	ea4f 1ab5 	mov.w	sl, r5, ror #6
 800914e:	ea8a 2af5 	eor.w	sl, sl, r5, ror #11
 8009152:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
 8009156:	443e      	add	r6, r7
 8009158:	4456      	add	r6, sl
 800915a:	ea83 0a02 	eor.w	sl, r3, r2
 800915e:	ea0a 0a05 	and.w	sl, sl, r5
 8009162:	ea8a 0a03 	eor.w	sl, sl, r3
 8009166:	4456      	add	r6, sl
 8009168:	4446      	add	r6, r8
 800916a:	ea40 0804 	orr.w	r8, r0, r4
 800916e:	ea00 0704 	and.w	r7, r0, r4
 8009172:	ea08 0801 	and.w	r8, r8, r1
 8009176:	ea48 0807 	orr.w	r8, r8, r7
 800917a:	ea4f 07b4 	mov.w	r7, r4, ror #2
 800917e:	ea87 3774 	eor.w	r7, r7, r4, ror #13
 8009182:	ea87 57b4 	eor.w	r7, r7, r4, ror #22
 8009186:	44b8      	add	r8, r7
 8009188:	44b0      	add	r8, r6
 800918a:	44b1      	add	r9, r6
 800918c:	f8de 7000 	ldr.w	r7, [lr]
 8009190:	f8dc 6000 	ldr.w	r6, [ip]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8009194:	ea82 0a05 	eor.w	sl, r2, r5
 8009198:	4437      	add	r7, r6
 800919a:	ea09 0a0a 	and.w	sl, r9, sl
 800919e:	ea8a 0a02 	eor.w	sl, sl, r2
 80091a2:	443b      	add	r3, r7
 80091a4:	eb03 070a 	add.w	r7, r3, sl
 80091a8:	ea4f 13b9 	mov.w	r3, r9, ror #6
 80091ac:	ea83 23f9 	eor.w	r3, r3, r9, ror #11
 80091b0:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 80091b4:	18fe      	adds	r6, r7, r3
 80091b6:	ea48 0304 	orr.w	r3, r8, r4
 80091ba:	eb06 0a01 	add.w	sl, r6, r1
 80091be:	4003      	ands	r3, r0
 80091c0:	ea08 0104 	and.w	r1, r8, r4
 80091c4:	430b      	orrs	r3, r1
 80091c6:	ea4f 01b8 	mov.w	r1, r8, ror #2
 80091ca:	ea81 3178 	eor.w	r1, r1, r8, ror #13
 80091ce:	ea81 51b8 	eor.w	r1, r1, r8, ror #22
 80091d2:	440b      	add	r3, r1
 80091d4:	4433      	add	r3, r6
 80091d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80091da:	f8de 6004 	ldr.w	r6, [lr, #4]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80091de:	ea89 0705 	eor.w	r7, r9, r5
 80091e2:	440e      	add	r6, r1
 80091e4:	ea0a 0707 	and.w	r7, sl, r7
 80091e8:	406f      	eors	r7, r5
 80091ea:	4432      	add	r2, r6
 80091ec:	19d6      	adds	r6, r2, r7
 80091ee:	ea4f 12ba 	mov.w	r2, sl, ror #6
 80091f2:	ea82 22fa 	eor.w	r2, r2, sl, ror #11
 80091f6:	ea82 627a 	eor.w	r2, r2, sl, ror #25
 80091fa:	18b1      	adds	r1, r6, r2
 80091fc:	ea43 0208 	orr.w	r2, r3, r8
 8009200:	180f      	adds	r7, r1, r0
 8009202:	4022      	ands	r2, r4
 8009204:	ea03 0008 	and.w	r0, r3, r8
 8009208:	4302      	orrs	r2, r0
 800920a:	ea4f 00b3 	mov.w	r0, r3, ror #2
 800920e:	ea80 3073 	eor.w	r0, r0, r3, ror #13
 8009212:	ea80 50b3 	eor.w	r0, r0, r3, ror #22
 8009216:	4402      	add	r2, r0
 8009218:	440a      	add	r2, r1
 800921a:	f8de 0008 	ldr.w	r0, [lr, #8]
 800921e:	f8dc 1008 	ldr.w	r1, [ip, #8]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8009222:	ea8a 0609 	eor.w	r6, sl, r9
 8009226:	4401      	add	r1, r0
 8009228:	403e      	ands	r6, r7
 800922a:	ea86 0609 	eor.w	r6, r6, r9
 800922e:	440d      	add	r5, r1
 8009230:	4435      	add	r5, r6
 8009232:	ea4f 16b7 	mov.w	r6, r7, ror #6
 8009236:	ea86 26f7 	eor.w	r6, r6, r7, ror #11
 800923a:	ea86 6677 	eor.w	r6, r6, r7, ror #25
 800923e:	19a9      	adds	r1, r5, r6
 8009240:	ea42 0503 	orr.w	r5, r2, r3
 8009244:	ea05 0508 	and.w	r5, r5, r8
 8009248:	ea02 0603 	and.w	r6, r2, r3
 800924c:	432e      	orrs	r6, r5
 800924e:	ea4f 05b2 	mov.w	r5, r2, ror #2
 8009252:	ea85 3572 	eor.w	r5, r5, r2, ror #13
 8009256:	ea85 50b2 	eor.w	r0, r5, r2, ror #22
 800925a:	1835      	adds	r5, r6, r0
 800925c:	186e      	adds	r6, r5, r1
 800925e:	eb01 0b04 	add.w	fp, r1, r4
 8009262:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8009266:	f8de 100c 	ldr.w	r1, [lr, #12]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 800926a:	ea87 040a 	eor.w	r4, r7, sl
 800926e:	4408      	add	r0, r1
 8009270:	ea0b 0404 	and.w	r4, fp, r4
 8009274:	ea84 040a 	eor.w	r4, r4, sl
 8009278:	4481      	add	r9, r0
 800927a:	eb09 0004 	add.w	r0, r9, r4
 800927e:	ea4f 19bb 	mov.w	r9, fp, ror #6
 8009282:	ea89 29fb 	eor.w	r9, r9, fp, ror #11
 8009286:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 800928a:	eb00 0109 	add.w	r1, r0, r9
 800928e:	ea46 0902 	orr.w	r9, r6, r2
 8009292:	ea06 0002 	and.w	r0, r6, r2
 8009296:	ea09 0903 	and.w	r9, r9, r3
 800929a:	ea49 0900 	orr.w	r9, r9, r0
 800929e:	ea4f 00b6 	mov.w	r0, r6, ror #2
 80092a2:	ea80 3076 	eor.w	r0, r0, r6, ror #13
 80092a6:	ea80 50b6 	eor.w	r0, r0, r6, ror #22
 80092aa:	4481      	add	r9, r0
 80092ac:	4489      	add	r9, r1
 80092ae:	4488      	add	r8, r1
 80092b0:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80092b4:	f8de 1010 	ldr.w	r1, [lr, #16]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80092b8:	ea8b 0407 	eor.w	r4, fp, r7
 80092bc:	4408      	add	r0, r1
 80092be:	ea08 0404 	and.w	r4, r8, r4
 80092c2:	ea4f 11b8 	mov.w	r1, r8, ror #6
 80092c6:	407c      	eors	r4, r7
 80092c8:	4482      	add	sl, r0
 80092ca:	ea81 21f8 	eor.w	r1, r1, r8, ror #11
 80092ce:	eb0a 0004 	add.w	r0, sl, r4
 80092d2:	ea81 6178 	eor.w	r1, r1, r8, ror #25
 80092d6:	eb00 0a01 	add.w	sl, r0, r1
 80092da:	ea49 0106 	orr.w	r1, r9, r6
 80092de:	ea09 0006 	and.w	r0, r9, r6
 80092e2:	4011      	ands	r1, r2
 80092e4:	4301      	orrs	r1, r0
 80092e6:	ea4f 00b9 	mov.w	r0, r9, ror #2
 80092ea:	ea80 3079 	eor.w	r0, r0, r9, ror #13
 80092ee:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 80092f2:	4401      	add	r1, r0
 80092f4:	f8dc 4014 	ldr.w	r4, [ip, #20]
 80092f8:	f8de 0014 	ldr.w	r0, [lr, #20]
 80092fc:	4453      	add	r3, sl
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80092fe:	ea88 050b 	eor.w	r5, r8, fp
 8009302:	4404      	add	r4, r0
 8009304:	401d      	ands	r5, r3
 8009306:	ea4f 10b3 	mov.w	r0, r3, ror #6
 800930a:	ea85 050b 	eor.w	r5, r5, fp
 800930e:	4427      	add	r7, r4
 8009310:	ea80 20f3 	eor.w	r0, r0, r3, ror #11
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8009314:	4451      	add	r1, sl
 8009316:	197c      	adds	r4, r7, r5
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8009318:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 800931c:	1827      	adds	r7, r4, r0
 800931e:	ea41 0009 	orr.w	r0, r1, r9
 8009322:	4030      	ands	r0, r6
 8009324:	ea01 0409 	and.w	r4, r1, r9
 8009328:	4320      	orrs	r0, r4
 800932a:	ea4f 04b1 	mov.w	r4, r1, ror #2
 800932e:	ea84 3471 	eor.w	r4, r4, r1, ror #13
 8009332:	ea84 54b1 	eor.w	r4, r4, r1, ror #22
 8009336:	4420      	add	r0, r4
 8009338:	f8dc 5018 	ldr.w	r5, [ip, #24]
 800933c:	f8de 4018 	ldr.w	r4, [lr, #24]
 8009340:	4438      	add	r0, r7
 8009342:	443a      	add	r2, r7
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8009344:	ea83 0708 	eor.w	r7, r3, r8
 8009348:	4425      	add	r5, r4
 800934a:	4017      	ands	r7, r2
 800934c:	ea4f 14b2 	mov.w	r4, r2, ror #6
 8009350:	44ab      	add	fp, r5
 8009352:	ea87 0708 	eor.w	r7, r7, r8
 8009356:	ea84 24f2 	eor.w	r4, r4, r2, ror #11
 800935a:	eb0b 0507 	add.w	r5, fp, r7
 800935e:	ea84 6472 	eor.w	r4, r4, r2, ror #25
 8009362:	eb05 0b04 	add.w	fp, r5, r4
 8009366:	ea40 0401 	orr.w	r4, r0, r1
 800936a:	eb0b 0506 	add.w	r5, fp, r6
 800936e:	ea04 0409 	and.w	r4, r4, r9
 8009372:	ea00 0601 	and.w	r6, r0, r1
 8009376:	4334      	orrs	r4, r6
 8009378:	ea4f 06b0 	mov.w	r6, r0, ror #2
 800937c:	ea86 3670 	eor.w	r6, r6, r0, ror #13
 8009380:	ea86 56b0 	eor.w	r6, r6, r0, ror #22
 8009384:	4434      	add	r4, r6
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8009386:	4e0d      	ldr	r6, [pc, #52]	; (80093bc <mbedtls_internal_sha256_process+0x2dc>)
 8009388:	f10e 0e20 	add.w	lr, lr, #32
 800938c:	45b6      	cmp	lr, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 800938e:	445c      	add	r4, fp
 8009390:	f10c 0c20 	add.w	ip, ip, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8009394:	f47f aed5 	bne.w	8009142 <mbedtls_internal_sha256_process+0x62>
 8009398:	2700      	movs	r7, #0
 800939a:	f8df a028 	ldr.w	sl, [pc, #40]	; 80093c4 <mbedtls_internal_sha256_process+0x2e4>
 800939e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80093a2:	950a      	str	r5, [sp, #40]	; 0x28
 80093a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80093a6:	930c      	str	r3, [sp, #48]	; 0x30
 80093a8:	9406      	str	r4, [sp, #24]
 80093aa:	9007      	str	r0, [sp, #28]
 80093ac:	9108      	str	r1, [sp, #32]
 80093ae:	4646      	mov	r6, r8
 80093b0:	9100      	str	r1, [sp, #0]
 80093b2:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80093b6:	9704      	str	r7, [sp, #16]
 80093b8:	e006      	b.n	80093c8 <mbedtls_internal_sha256_process+0x2e8>
 80093ba:	bf00      	nop
 80093bc:	0800c5dc 	.word	0x0800c5dc
 80093c0:	0800c59c 	.word	0x0800c59c
 80093c4:	0800c598 	.word	0x0800c598
 80093c8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80093cc:	9f04      	ldr	r7, [sp, #16]
 80093ce:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
 80093d2:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80093d6:	f8de c004 	ldr.w	ip, [lr, #4]
 80093da:	440f      	add	r7, r1
 80093dc:	f8de 1038 	ldr.w	r1, [lr, #56]	; 0x38
 80093e0:	ea4f 4871 	mov.w	r8, r1, ror #17
 80093e4:	ea88 48f1 	eor.w	r8, r8, r1, ror #19
 80093e8:	ea88 2891 	eor.w	r8, r8, r1, lsr #10
 80093ec:	4447      	add	r7, r8
 80093ee:	ea4f 18fc 	mov.w	r8, ip, ror #7
 80093f2:	ea88 48bc 	eor.w	r8, r8, ip, ror #18
 80093f6:	ea88 08dc 	eor.w	r8, r8, ip, lsr #3
 80093fa:	eb07 0108 	add.w	r1, r7, r8
 80093fe:	ea4f 18b5 	mov.w	r8, r5, ror #6
 8009402:	ea88 28f5 	eor.w	r8, r8, r5, ror #11
 8009406:	ea88 6b75 	eor.w	fp, r8, r5, ror #25
 800940a:	ea83 0802 	eor.w	r8, r3, r2
 800940e:	ea08 0805 	and.w	r8, r8, r5
 8009412:	ea88 0703 	eor.w	r7, r8, r3
 8009416:	eb0b 0807 	add.w	r8, fp, r7
 800941a:	f8da 7040 	ldr.w	r7, [sl, #64]	; 0x40
 800941e:	9103      	str	r1, [sp, #12]
 8009420:	44b8      	add	r8, r7
 8009422:	4488      	add	r8, r1
 8009424:	4446      	add	r6, r8
 8009426:	f8ce 1040 	str.w	r1, [lr, #64]	; 0x40
 800942a:	eb09 0106 	add.w	r1, r9, r6
 800942e:	9101      	str	r1, [sp, #4]
 8009430:	9900      	ldr	r1, [sp, #0]
 8009432:	ea40 0804 	orr.w	r8, r0, r4
 8009436:	ea00 0704 	and.w	r7, r0, r4
 800943a:	ea08 0801 	and.w	r8, r8, r1
 800943e:	f8de 1028 	ldr.w	r1, [lr, #40]	; 0x28
 8009442:	ea48 0807 	orr.w	r8, r8, r7
 8009446:	ea4f 07b4 	mov.w	r7, r4, ror #2
 800944a:	448c      	add	ip, r1
 800944c:	ea87 3774 	eor.w	r7, r7, r4, ror #13
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8009450:	f8de 103c 	ldr.w	r1, [lr, #60]	; 0x3c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8009454:	ea87 57b4 	eor.w	r7, r7, r4, ror #22
 8009458:	44b8      	add	r8, r7
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800945a:	ea4f 4771 	mov.w	r7, r1, ror #17
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800945e:	44b0      	add	r8, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8009460:	ea87 47f1 	eor.w	r7, r7, r1, ror #19
 8009464:	f8de 6008 	ldr.w	r6, [lr, #8]
 8009468:	ea87 2791 	eor.w	r7, r7, r1, lsr #10
 800946c:	4467      	add	r7, ip
 800946e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8009472:	ea4f 1cf6 	mov.w	ip, r6, ror #7
 8009476:	ea8c 4cb6 	eor.w	ip, ip, r6, ror #18
 800947a:	ea8c 0cd6 	eor.w	ip, ip, r6, lsr #3
 800947e:	440b      	add	r3, r1
 8009480:	9901      	ldr	r1, [sp, #4]
 8009482:	44bc      	add	ip, r7
 8009484:	ea82 0705 	eor.w	r7, r2, r5
 8009488:	400f      	ands	r7, r1
 800948a:	4463      	add	r3, ip
 800948c:	4057      	eors	r7, r2
 800948e:	eb03 0907 	add.w	r9, r3, r7
 8009492:	ea4f 13b1 	mov.w	r3, r1, ror #6
 8009496:	ea83 23f1 	eor.w	r3, r3, r1, ror #11
 800949a:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 800949e:	eb09 0703 	add.w	r7, r9, r3
 80094a2:	9b00      	ldr	r3, [sp, #0]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80094a4:	f8de 900c 	ldr.w	r9, [lr, #12]
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80094a8:	f8ce c044 	str.w	ip, [lr, #68]	; 0x44
 80094ac:	ea48 0104 	orr.w	r1, r8, r4
 80094b0:	443b      	add	r3, r7
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	ea01 0300 	and.w	r3, r1, r0
 80094b8:	ea08 0104 	and.w	r1, r8, r4
 80094bc:	4319      	orrs	r1, r3
 80094be:	ea4f 03b8 	mov.w	r3, r8, ror #2
 80094c2:	ea83 3378 	eor.w	r3, r3, r8, ror #13
 80094c6:	ea83 53b8 	eor.w	r3, r3, r8, ror #22
 80094ca:	440b      	add	r3, r1
 80094cc:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
 80094d0:	4431      	add	r1, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80094d2:	9e03      	ldr	r6, [sp, #12]
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80094d4:	443b      	add	r3, r7
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80094d6:	9f03      	ldr	r7, [sp, #12]
 80094d8:	ea4f 4676 	mov.w	r6, r6, ror #17
 80094dc:	ea86 46f7 	eor.w	r6, r6, r7, ror #19
 80094e0:	ea86 2797 	eor.w	r7, r6, r7, lsr #10
 80094e4:	19ce      	adds	r6, r1, r7
 80094e6:	ea4f 11f9 	mov.w	r1, r9, ror #7
 80094ea:	ea81 41b9 	eor.w	r1, r1, r9, ror #18
 80094ee:	f8da 7048 	ldr.w	r7, [sl, #72]	; 0x48
 80094f2:	ea81 01d9 	eor.w	r1, r1, r9, lsr #3
 80094f6:	4431      	add	r1, r6
 80094f8:	9e01      	ldr	r6, [sp, #4]
 80094fa:	f8ce 1048 	str.w	r1, [lr, #72]	; 0x48
 80094fe:	443a      	add	r2, r7
 8009500:	9f00      	ldr	r7, [sp, #0]
 8009502:	406e      	eors	r6, r5
 8009504:	403e      	ands	r6, r7
 8009506:	440a      	add	r2, r1
 8009508:	406e      	eors	r6, r5
 800950a:	4416      	add	r6, r2
 800950c:	ea4f 12b7 	mov.w	r2, r7, ror #6
 8009510:	ea82 22f7 	eor.w	r2, r2, r7, ror #11
 8009514:	ea82 6277 	eor.w	r2, r2, r7, ror #25
 8009518:	18b7      	adds	r7, r6, r2
 800951a:	183a      	adds	r2, r7, r0
 800951c:	ea43 0008 	orr.w	r0, r3, r8
 8009520:	9202      	str	r2, [sp, #8]
 8009522:	ea00 0204 	and.w	r2, r0, r4
 8009526:	ea03 0008 	and.w	r0, r3, r8
 800952a:	4310      	orrs	r0, r2
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 800952c:	ea4f 467c 	mov.w	r6, ip, ror #17

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8009530:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8009534:	ea82 3273 	eor.w	r2, r2, r3, ror #13
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8009538:	ea86 46fc 	eor.w	r6, r6, ip, ror #19
 800953c:	ea86 2c9c 	eor.w	ip, r6, ip, lsr #10

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8009540:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8009544:	f8da 604c 	ldr.w	r6, [sl, #76]	; 0x4c
 8009548:	4402      	add	r2, r0
 800954a:	f8de 0030 	ldr.w	r0, [lr, #48]	; 0x30
 800954e:	4435      	add	r5, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8009550:	9e00      	ldr	r6, [sp, #0]
 8009552:	4448      	add	r0, r9

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8009554:	443a      	add	r2, r7
 8009556:	4460      	add	r0, ip
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8009558:	f8de 7010 	ldr.w	r7, [lr, #16]
 800955c:	46b4      	mov	ip, r6
 800955e:	9e01      	ldr	r6, [sp, #4]
 8009560:	ea4f 1bf7 	mov.w	fp, r7, ror #7
 8009564:	ea8c 0c06 	eor.w	ip, ip, r6
 8009568:	9e02      	ldr	r6, [sp, #8]
 800956a:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
 800956e:	ea8b 0bd7 	eor.w	fp, fp, r7, lsr #3
 8009572:	ea06 0c0c 	and.w	ip, r6, ip
 8009576:	9e01      	ldr	r6, [sp, #4]
 8009578:	4458      	add	r0, fp
 800957a:	4405      	add	r5, r0
 800957c:	ea8c 0c06 	eor.w	ip, ip, r6
 8009580:	44ac      	add	ip, r5
 8009582:	9d02      	ldr	r5, [sp, #8]
 8009584:	9e02      	ldr	r6, [sp, #8]
 8009586:	f8ce 004c 	str.w	r0, [lr, #76]	; 0x4c
 800958a:	ea4f 15b5 	mov.w	r5, r5, ror #6
 800958e:	ea85 25f6 	eor.w	r5, r5, r6, ror #11
 8009592:	ea85 6576 	eor.w	r5, r5, r6, ror #25
 8009596:	eb0c 0605 	add.w	r6, ip, r5
 800959a:	ea42 0503 	orr.w	r5, r2, r3
 800959e:	eb06 0b04 	add.w	fp, r6, r4
 80095a2:	ea05 0508 	and.w	r5, r5, r8
 80095a6:	ea02 0403 	and.w	r4, r2, r3
 80095aa:	4325      	orrs	r5, r4
 80095ac:	ea4f 04b2 	mov.w	r4, r2, ror #2
 80095b0:	ea84 3472 	eor.w	r4, r4, r2, ror #13
 80095b4:	ea84 54b2 	eor.w	r4, r4, r2, ror #22
 80095b8:	4425      	add	r5, r4
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80095ba:	f8de 4014 	ldr.w	r4, [lr, #20]
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80095be:	4435      	add	r5, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80095c0:	ea4f 4c71 	mov.w	ip, r1, ror #17
 80095c4:	f8de 6034 	ldr.w	r6, [lr, #52]	; 0x34
 80095c8:	ea8c 4cf1 	eor.w	ip, ip, r1, ror #19
 80095cc:	ea4f 19f4 	mov.w	r9, r4, ror #7
 80095d0:	ea8c 2191 	eor.w	r1, ip, r1, lsr #10
 80095d4:	4437      	add	r7, r6
 80095d6:	ea89 49b4 	eor.w	r9, r9, r4, ror #18
 80095da:	ea89 09d4 	eor.w	r9, r9, r4, lsr #3
 80095de:	440f      	add	r7, r1
 80095e0:	f8da 1050 	ldr.w	r1, [sl, #80]	; 0x50
 80095e4:	9e01      	ldr	r6, [sp, #4]
 80095e6:	444f      	add	r7, r9
 80095e8:	4439      	add	r1, r7
 80095ea:	eb01 0906 	add.w	r9, r1, r6
 80095ee:	9902      	ldr	r1, [sp, #8]
 80095f0:	9e00      	ldr	r6, [sp, #0]
 80095f2:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
 80095f6:	404e      	eors	r6, r1
 80095f8:	9900      	ldr	r1, [sp, #0]
 80095fa:	ea0b 0606 	and.w	r6, fp, r6
 80095fe:	404e      	eors	r6, r1
 8009600:	444e      	add	r6, r9
 8009602:	ea4f 19bb 	mov.w	r9, fp, ror #6
 8009606:	ea89 29fb 	eor.w	r9, r9, fp, ror #11
 800960a:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 800960e:	eb06 0109 	add.w	r1, r6, r9
 8009612:	ea45 0902 	orr.w	r9, r5, r2
 8009616:	ea05 0c02 	and.w	ip, r5, r2
 800961a:	ea09 0903 	and.w	r9, r9, r3
 800961e:	ea49 090c 	orr.w	r9, r9, ip
 8009622:	ea4f 0cb5 	mov.w	ip, r5, ror #2
 8009626:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
 800962a:	ea8c 5cb5 	eor.w	ip, ip, r5, ror #22
 800962e:	44e1      	add	r9, ip
 8009630:	eb01 0608 	add.w	r6, r1, r8
 8009634:	4489      	add	r9, r1
 8009636:	f8de 1038 	ldr.w	r1, [lr, #56]	; 0x38
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800963a:	f8de 8018 	ldr.w	r8, [lr, #24]
 800963e:	440c      	add	r4, r1
 8009640:	ea4f 4170 	mov.w	r1, r0, ror #17
 8009644:	ea81 41f0 	eor.w	r1, r1, r0, ror #19
 8009648:	ea4f 1cf8 	mov.w	ip, r8, ror #7
 800964c:	ea81 2090 	eor.w	r0, r1, r0, lsr #10
 8009650:	ea8c 4cb8 	eor.w	ip, ip, r8, ror #18
 8009654:	ea8c 0cd8 	eor.w	ip, ip, r8, lsr #3
 8009658:	4404      	add	r4, r0
 800965a:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
 800965e:	9900      	ldr	r1, [sp, #0]
 8009660:	4464      	add	r4, ip
 8009662:	4420      	add	r0, r4
 8009664:	1841      	adds	r1, r0, r1
 8009666:	9802      	ldr	r0, [sp, #8]
 8009668:	f8ce 4054 	str.w	r4, [lr, #84]	; 0x54
 800966c:	ea8b 0c00 	eor.w	ip, fp, r0
 8009670:	ea06 0c0c 	and.w	ip, r6, ip
 8009674:	ea8c 0c00 	eor.w	ip, ip, r0
 8009678:	448c      	add	ip, r1
 800967a:	ea4f 11b6 	mov.w	r1, r6, ror #6
 800967e:	ea81 21f6 	eor.w	r1, r1, r6, ror #11
 8009682:	ea81 6176 	eor.w	r1, r1, r6, ror #25
 8009686:	eb0c 0001 	add.w	r0, ip, r1
 800968a:	ea49 0c05 	orr.w	ip, r9, r5
 800968e:	ea0c 0102 	and.w	r1, ip, r2
 8009692:	ea09 0c05 	and.w	ip, r9, r5
 8009696:	ea41 0c0c 	orr.w	ip, r1, ip
 800969a:	ea4f 01b9 	mov.w	r1, r9, ror #2
 800969e:	ea81 3179 	eor.w	r1, r1, r9, ror #13
 80096a2:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 80096a6:	4461      	add	r1, ip
 80096a8:	4401      	add	r1, r0
 80096aa:	4403      	add	r3, r0
 80096ac:	9100      	str	r1, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80096ae:	ea4f 4077 	mov.w	r0, r7, ror #17
 80096b2:	f8de 103c 	ldr.w	r1, [lr, #60]	; 0x3c
 80096b6:	f8de c01c 	ldr.w	ip, [lr, #28]
 80096ba:	ea80 40f7 	eor.w	r0, r0, r7, ror #19
 80096be:	ea80 2797 	eor.w	r7, r0, r7, lsr #10
 80096c2:	4488      	add	r8, r1
 80096c4:	44b8      	add	r8, r7
 80096c6:	ea4f 17fc 	mov.w	r7, ip, ror #7
 80096ca:	ea87 47bc 	eor.w	r7, r7, ip, ror #18
 80096ce:	ea87 00dc 	eor.w	r0, r7, ip, lsr #3
 80096d2:	eb08 0700 	add.w	r7, r8, r0
 80096d6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80096da:	9902      	ldr	r1, [sp, #8]
 80096dc:	f8ce 7058 	str.w	r7, [lr, #88]	; 0x58
 80096e0:	4438      	add	r0, r7
 80096e2:	ea86 080b 	eor.w	r8, r6, fp
 80096e6:	4408      	add	r0, r1
 80096e8:	ea03 0808 	and.w	r8, r3, r8
 80096ec:	9900      	ldr	r1, [sp, #0]
 80096ee:	ea4f 17b3 	mov.w	r7, r3, ror #6
 80096f2:	ea88 080b 	eor.w	r8, r8, fp
 80096f6:	ea87 27f3 	eor.w	r7, r7, r3, ror #11
 80096fa:	4440      	add	r0, r8
 80096fc:	ea87 6773 	eor.w	r7, r7, r3, ror #25
 8009700:	ea41 0809 	orr.w	r8, r1, r9
 8009704:	4407      	add	r7, r0
 8009706:	ea08 0005 	and.w	r0, r8, r5
 800970a:	ea01 0809 	and.w	r8, r1, r9
 800970e:	ea40 0808 	orr.w	r8, r0, r8
 8009712:	ea4f 00b1 	mov.w	r0, r1, ror #2
 8009716:	ea80 3071 	eor.w	r0, r0, r1, ror #13
 800971a:	ea80 50b1 	eor.w	r0, r0, r1, ror #22
 800971e:	4440      	add	r0, r8
 8009720:	4438      	add	r0, r7
 8009722:	443a      	add	r2, r7
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8009724:	ea4f 4874 	mov.w	r8, r4, ror #17
 8009728:	f8de 7020 	ldr.w	r7, [lr, #32]
 800972c:	9903      	ldr	r1, [sp, #12]
 800972e:	ea88 48f4 	eor.w	r8, r8, r4, ror #19
 8009732:	ea88 2494 	eor.w	r4, r8, r4, lsr #10
 8009736:	ea4f 18f7 	mov.w	r8, r7, ror #7
 800973a:	448c      	add	ip, r1
 800973c:	ea88 48b7 	eor.w	r8, r8, r7, ror #18
 8009740:	44a4      	add	ip, r4
 8009742:	ea88 07d7 	eor.w	r7, r8, r7, lsr #3
 8009746:	f8da 405c 	ldr.w	r4, [sl, #92]	; 0x5c
 800974a:	9900      	ldr	r1, [sp, #0]
 800974c:	4467      	add	r7, ip
 800974e:	443c      	add	r4, r7
 8009750:	ea83 0c06 	eor.w	ip, r3, r6
 8009754:	445c      	add	r4, fp
 8009756:	ea02 0c0c 	and.w	ip, r2, ip
 800975a:	ea4f 1bb2 	mov.w	fp, r2, ror #6
 800975e:	ea8c 0c06 	eor.w	ip, ip, r6
 8009762:	ea8b 2bf2 	eor.w	fp, fp, r2, ror #11
 8009766:	4464      	add	r4, ip
 8009768:	ea8b 6b72 	eor.w	fp, fp, r2, ror #25
 800976c:	44a3      	add	fp, r4
 800976e:	ea40 0401 	orr.w	r4, r0, r1
 8009772:	f8ce 705c 	str.w	r7, [lr, #92]	; 0x5c
 8009776:	ea04 0409 	and.w	r4, r4, r9
 800977a:	ea00 0701 	and.w	r7, r0, r1
 800977e:	433c      	orrs	r4, r7
 8009780:	9904      	ldr	r1, [sp, #16]
 8009782:	ea4f 07b0 	mov.w	r7, r0, ror #2
 8009786:	ea87 3770 	eor.w	r7, r7, r0, ror #13
 800978a:	3108      	adds	r1, #8
 800978c:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 8009790:	443c      	add	r4, r7
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 8009792:	2930      	cmp	r1, #48	; 0x30
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8009794:	445d      	add	r5, fp
 8009796:	445c      	add	r4, fp
 8009798:	9104      	str	r1, [sp, #16]
 800979a:	f10a 0a20 	add.w	sl, sl, #32
 800979e:	f10e 0e20 	add.w	lr, lr, #32
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 80097a2:	f47f ae11 	bne.w	80093c8 <mbedtls_internal_sha256_process+0x2e8>
 80097a6:	930c      	str	r3, [sp, #48]	; 0x30
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	9308      	str	r3, [sp, #32]
 80097ac:	960d      	str	r6, [sp, #52]	; 0x34
 80097ae:	950a      	str	r5, [sp, #40]	; 0x28
 80097b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80097b2:	9406      	str	r4, [sp, #24]
 80097b4:	9007      	str	r0, [sp, #28]
 80097b6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80097ba:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 80097bc:	9a05      	ldr	r2, [sp, #20]
 80097be:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80097c2:	9205      	str	r2, [sp, #20]
 80097c4:	aa06      	add	r2, sp, #24
 80097c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80097ca:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 80097cc:	440a      	add	r2, r1
 80097ce:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80097d0:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 80097d2:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80097d4:	d1f2      	bne.n	80097bc <mbedtls_internal_sha256_process+0x6dc>
        ctx->state[i] += A[i];

    return( 0 );
}
 80097d6:	2000      	movs	r0, #0
 80097d8:	b04f      	add	sp, #316	; 0x13c
 80097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	bf00      	nop

080097e0 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	4605      	mov	r5, r0
 80097e6:	4688      	mov	r8, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80097e8:	4616      	mov	r6, r2
 80097ea:	b37a      	cbz	r2, 800984c <mbedtls_sha256_update_ret+0x6c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80097ec:	6803      	ldr	r3, [r0, #0]
 80097ee:	f003 043f 	and.w	r4, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80097f2:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80097f4:	4293      	cmp	r3, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80097f6:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80097f8:	bf3e      	ittt	cc
 80097fa:	6843      	ldrcc	r3, [r0, #4]
 80097fc:	3301      	addcc	r3, #1
 80097fe:	6043      	strcc	r3, [r0, #4]

    if( left && ilen >= fill )
 8009800:	b194      	cbz	r4, 8009828 <mbedtls_sha256_update_ret+0x48>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8009802:	f1c4 0740 	rsb	r7, r4, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 8009806:	42ba      	cmp	r2, r7
 8009808:	d30e      	bcc.n	8009828 <mbedtls_sha256_update_ret+0x48>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800980a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800980e:	4428      	add	r0, r5
 8009810:	463a      	mov	r2, r7
 8009812:	f001 ffc1 	bl	800b798 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8009816:	4628      	mov	r0, r5
 8009818:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800981c:	f7ff fc60 	bl	80090e0 <mbedtls_internal_sha256_process>
 8009820:	b9a8      	cbnz	r0, 800984e <mbedtls_sha256_update_ret+0x6e>
            return( ret );

        input += fill;
 8009822:	44b8      	add	r8, r7
        ilen  -= fill;
 8009824:	1bf6      	subs	r6, r6, r7
        left = 0;
 8009826:	4604      	mov	r4, r0
 8009828:	4637      	mov	r7, r6
 800982a:	1bf1      	subs	r1, r6, r7
    }

    while( ilen >= 64 )
 800982c:	2f3f      	cmp	r7, #63	; 0x3f
 800982e:	4441      	add	r1, r8
 8009830:	d905      	bls.n	800983e <mbedtls_sha256_update_ret+0x5e>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8009832:	4628      	mov	r0, r5
 8009834:	f7ff fc54 	bl	80090e0 <mbedtls_internal_sha256_process>
 8009838:	b948      	cbnz	r0, 800984e <mbedtls_sha256_update_ret+0x6e>
            return( ret );

        input += 64;
        ilen  -= 64;
 800983a:	3f40      	subs	r7, #64	; 0x40
 800983c:	e7f5      	b.n	800982a <mbedtls_sha256_update_ret+0x4a>
    }

    if( ilen > 0 )
 800983e:	b12f      	cbz	r7, 800984c <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8009840:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009844:	4428      	add	r0, r5
 8009846:	463a      	mov	r2, r7
 8009848:	f001 ffa6 	bl	800b798 <memcpy>

    return( 0 );
 800984c:	2000      	movs	r0, #0
}
 800984e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009852 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8009852:	6802      	ldr	r2, [r0, #0]
 8009854:	f002 023f 	and.w	r2, r2, #63	; 0x3f
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 800985c:	1881      	adds	r1, r0, r2
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 800985e:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8009860:	1c53      	adds	r3, r2, #1
 8009862:	2080      	movs	r0, #128	; 0x80
 8009864:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28

    if( used <= 56 )
 8009868:	2b38      	cmp	r3, #56	; 0x38
 800986a:	f102 0029 	add.w	r0, r2, #41	; 0x29
 800986e:	f104 0628 	add.w	r6, r4, #40	; 0x28
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8009872:	4420      	add	r0, r4
 8009874:	f04f 0100 	mov.w	r1, #0
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;

    if( used <= 56 )
 8009878:	d802      	bhi.n	8009880 <mbedtls_sha256_finish_ret+0x2e>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800987a:	f1c2 0237 	rsb	r2, r2, #55	; 0x37
 800987e:	e00c      	b.n	800989a <mbedtls_sha256_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8009880:	f1c2 023f 	rsb	r2, r2, #63	; 0x3f
 8009884:	f001 ff93 	bl	800b7ae <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8009888:	4631      	mov	r1, r6
 800988a:	4620      	mov	r0, r4
 800988c:	f7ff fc28 	bl	80090e0 <mbedtls_internal_sha256_process>
 8009890:	4601      	mov	r1, r0
 8009892:	2800      	cmp	r0, #0
 8009894:	d173      	bne.n	800997e <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8009896:	4630      	mov	r0, r6
 8009898:	2238      	movs	r2, #56	; 0x38
 800989a:	f001 ff88 	bl	800b7ae <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 800989e:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 80098a0:	6861      	ldr	r1, [r4, #4]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80098a2:	0f5a      	lsrs	r2, r3, #29
 80098a4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80098a8:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80098aa:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80098ac:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 80098b0:	0c11      	lsrs	r1, r2, #16
 80098b2:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 80098b6:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 80098ba:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80098bc:	0e1a      	lsrs	r2, r3, #24
 80098be:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80098c2:	0c1a      	lsrs	r2, r3, #16
 80098c4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80098c8:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80098ca:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80098ce:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 80098d2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80098d6:	4620      	mov	r0, r4
 80098d8:	4631      	mov	r1, r6
 80098da:	f7ff fc01 	bl	80090e0 <mbedtls_internal_sha256_process>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d14c      	bne.n	800997c <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80098e2:	7ae3      	ldrb	r3, [r4, #11]
 80098e4:	702b      	strb	r3, [r5, #0]
 80098e6:	8963      	ldrh	r3, [r4, #10]
 80098e8:	706b      	strb	r3, [r5, #1]
 80098ea:	68a3      	ldr	r3, [r4, #8]
 80098ec:	0a1b      	lsrs	r3, r3, #8
 80098ee:	70ab      	strb	r3, [r5, #2]
 80098f0:	68a3      	ldr	r3, [r4, #8]
 80098f2:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80098f4:	7be3      	ldrb	r3, [r4, #15]
 80098f6:	712b      	strb	r3, [r5, #4]
 80098f8:	89e3      	ldrh	r3, [r4, #14]
 80098fa:	716b      	strb	r3, [r5, #5]
 80098fc:	68e3      	ldr	r3, [r4, #12]
 80098fe:	0a1b      	lsrs	r3, r3, #8
 8009900:	71ab      	strb	r3, [r5, #6]
 8009902:	68e3      	ldr	r3, [r4, #12]
 8009904:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8009906:	7ce3      	ldrb	r3, [r4, #19]
 8009908:	722b      	strb	r3, [r5, #8]
 800990a:	8a63      	ldrh	r3, [r4, #18]
 800990c:	726b      	strb	r3, [r5, #9]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	0a1b      	lsrs	r3, r3, #8
 8009912:	72ab      	strb	r3, [r5, #10]
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8009918:	7de3      	ldrb	r3, [r4, #23]
 800991a:	732b      	strb	r3, [r5, #12]
 800991c:	8ae3      	ldrh	r3, [r4, #22]
 800991e:	736b      	strb	r3, [r5, #13]
 8009920:	6963      	ldr	r3, [r4, #20]
 8009922:	0a1b      	lsrs	r3, r3, #8
 8009924:	73ab      	strb	r3, [r5, #14]
 8009926:	6963      	ldr	r3, [r4, #20]
 8009928:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 800992a:	7ee3      	ldrb	r3, [r4, #27]
 800992c:	742b      	strb	r3, [r5, #16]
 800992e:	8b63      	ldrh	r3, [r4, #26]
 8009930:	746b      	strb	r3, [r5, #17]
 8009932:	69a3      	ldr	r3, [r4, #24]
 8009934:	0a1b      	lsrs	r3, r3, #8
 8009936:	74ab      	strb	r3, [r5, #18]
 8009938:	69a3      	ldr	r3, [r4, #24]
 800993a:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 800993c:	7fe3      	ldrb	r3, [r4, #31]
 800993e:	752b      	strb	r3, [r5, #20]
 8009940:	8be3      	ldrh	r3, [r4, #30]
 8009942:	756b      	strb	r3, [r5, #21]
 8009944:	69e3      	ldr	r3, [r4, #28]
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	75ab      	strb	r3, [r5, #22]
 800994a:	69e3      	ldr	r3, [r4, #28]
 800994c:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 800994e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8009952:	762b      	strb	r3, [r5, #24]
 8009954:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009956:	766b      	strb	r3, [r5, #25]
 8009958:	6a23      	ldr	r3, [r4, #32]
 800995a:	0a1b      	lsrs	r3, r3, #8
 800995c:	76ab      	strb	r3, [r5, #26]
 800995e:	6a23      	ldr	r3, [r4, #32]
 8009960:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 8009962:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8009964:	b951      	cbnz	r1, 800997c <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8009966:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800996a:	772b      	strb	r3, [r5, #28]
 800996c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800996e:	776b      	strb	r3, [r5, #29]
 8009970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	77ab      	strb	r3, [r5, #30]
 8009976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009978:	77eb      	strb	r3, [r5, #31]
 800997a:	e000      	b.n	800997e <mbedtls_sha256_finish_ret+0x12c>

    return( 0 );
 800997c:	4601      	mov	r1, r0
}
 800997e:	4608      	mov	r0, r1
 8009980:	bd70      	pop	{r4, r5, r6, pc}

08009982 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8009982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009984:	b09d      	sub	sp, #116	; 0x74
 8009986:	461c      	mov	r4, r3
 8009988:	4607      	mov	r7, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 800998a:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 800998c:	460e      	mov	r6, r1
 800998e:	4615      	mov	r5, r2

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 8009990:	f7ff fb48 	bl	8009024 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8009994:	4621      	mov	r1, r4
 8009996:	a801      	add	r0, sp, #4
 8009998:	f7ff fb52 	bl	8009040 <mbedtls_sha256_starts_ret>
 800999c:	4604      	mov	r4, r0
 800999e:	b958      	cbnz	r0, 80099b8 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80099a0:	a801      	add	r0, sp, #4
 80099a2:	4639      	mov	r1, r7
 80099a4:	4632      	mov	r2, r6
 80099a6:	f7ff ff1b 	bl	80097e0 <mbedtls_sha256_update_ret>
 80099aa:	4604      	mov	r4, r0
 80099ac:	b920      	cbnz	r0, 80099b8 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80099ae:	a801      	add	r0, sp, #4
 80099b0:	4629      	mov	r1, r5
 80099b2:	f7ff ff4e 	bl	8009852 <mbedtls_sha256_finish_ret>
 80099b6:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 80099b8:	a801      	add	r0, sp, #4
 80099ba:	f7ff fb37 	bl	800902c <mbedtls_sha256_free>

    return( ret );
}
 80099be:	4620      	mov	r0, r4
 80099c0:	b01d      	add	sp, #116	; 0x74
 80099c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099c4 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 80099c4:	4b01      	ldr	r3, [pc, #4]	; (80099cc <optiga_crypt_callback+0x8>)
 80099c6:	8019      	strh	r1, [r3, #0]
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	1fff012c 	.word	0x1fff012c

080099d0 <optiga_util_callback>:
    }
}
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 80099d0:	4b01      	ldr	r3, [pc, #4]	; (80099d8 <optiga_util_callback+0x8>)
 80099d2:	8019      	strh	r1, [r3, #0]
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	1fff012c 	.word	0x1fff012c

080099dc <example_optiga_crypt_ecc_generate_keypair>:
 * The below example demonstrates the generation of
 * ECC Key pair using #optiga_crypt_ecc_generate_keypair.
 *
 */
void example_optiga_crypt_ecc_generate_keypair(void)
{
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	b09e      	sub	sp, #120	; 0x78
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
 80099e0:	2364      	movs	r3, #100	; 0x64
    uint16_t optiga_oid;
    
    optiga_crypt_t * crypt_me = NULL;
    optiga_util_t * util_me = NULL;    
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 80099e2:	4836      	ldr	r0, [pc, #216]	; (8009abc <example_optiga_crypt_ecc_generate_keypair+0xe0>)
 80099e4:	4936      	ldr	r1, [pc, #216]	; (8009ac0 <example_optiga_crypt_ecc_generate_keypair+0xe4>)
 80099e6:	4a37      	ldr	r2, [pc, #220]	; (8009ac4 <example_optiga_crypt_ecc_generate_keypair+0xe8>)
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_key_id_t optiga_key_id;

    //To store the generated public key as part of Generate key pair
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
 80099e8:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16_t optiga_oid;
    
    optiga_crypt_t * crypt_me = NULL;
    optiga_util_t * util_me = NULL;    
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 80099ec:	f7fc fec2 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        crypt_me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 80099f0:	2000      	movs	r0, #0
 80099f2:	4935      	ldr	r1, [pc, #212]	; (8009ac8 <example_optiga_crypt_ecc_generate_keypair+0xec>)
 80099f4:	4602      	mov	r2, r0
 80099f6:	f7fa ff31 	bl	800485c <optiga_crypt_create>
        if (NULL == crypt_me)
 80099fa:	4605      	mov	r5, r0
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d058      	beq.n	8009ab2 <example_optiga_crypt_ecc_generate_keypair+0xd6>
        {
            break;
        }

        util_me = optiga_util_create(0, optiga_util_callback, NULL);
 8009a00:	2000      	movs	r0, #0
 8009a02:	4932      	ldr	r1, [pc, #200]	; (8009acc <example_optiga_crypt_ecc_generate_keypair+0xf0>)
 8009a04:	4602      	mov	r2, r0
 8009a06:	f7fa fce7 	bl	80043d8 <optiga_util_create>
        if (NULL == util_me)
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d050      	beq.n	8009ab2 <example_optiga_crypt_ecc_generate_keypair+0xd6>
        {
            break;
        }
        
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009a10:	4c2f      	ldr	r4, [pc, #188]	; (8009ad0 <example_optiga_crypt_ecc_generate_keypair+0xf4>)
        optiga_oid = 0xE0F1;
        return_status = optiga_util_write_metadata(util_me,
 8009a12:	4a30      	ldr	r2, [pc, #192]	; (8009ad4 <example_optiga_crypt_ecc_generate_keypair+0xf8>)
        if (NULL == util_me)
        {
            break;
        }
        
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009a14:	2301      	movs	r3, #1
 8009a16:	8023      	strh	r3, [r4, #0]
        optiga_oid = 0xE0F1;
        return_status = optiga_util_write_metadata(util_me,
 8009a18:	f24e 01f1 	movw	r1, #57585	; 0xe0f1
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	f7fa fe0c 	bl	800463a <optiga_util_write_metadata>
                                                   optiga_oid,
                                                   E0F1_metadata,
                                                   sizeof(E0F1_metadata));

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009a22:	4602      	mov	r2, r0
 8009a24:	bb30      	cbnz	r0, 8009a74 <example_optiga_crypt_ecc_generate_keypair+0x98>
 8009a26:	8823      	ldrh	r3, [r4, #0]
 8009a28:	4a29      	ldr	r2, [pc, #164]	; (8009ad0 <example_optiga_crypt_ecc_generate_keypair+0xf4>)
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d0fa      	beq.n	8009a26 <example_optiga_crypt_ecc_generate_keypair+0x4a>
 8009a30:	8813      	ldrh	r3, [r2, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	b9db      	cbnz	r3, 8009a6e <example_optiga_crypt_ecc_generate_keypair+0x92>
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key in OPTIGA Key store
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009a36:	2101      	movs	r1, #1
 8009a38:	8011      	strh	r1, [r2, #0]
        optiga_key_id = OPTIGA_KEY_ID_E0F1;
 8009a3a:	aa1e      	add	r2, sp, #120	; 0x78
 8009a3c:	f24e 01f1 	movw	r1, #57585	; 0xe0f1
 8009a40:	f822 1d68 	strh.w	r1, [r2, #-104]!
        //for Session based, use OPTIGA_KEY_ID_SESSION_BASED as key id as shown below.
        //optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
        return_status = optiga_crypt_ecc_generate_keypair(crypt_me,
 8009a44:	9200      	str	r2, [sp, #0]
 8009a46:	aa05      	add	r2, sp, #20
 8009a48:	9201      	str	r2, [sp, #4]
 8009a4a:	f10d 0212 	add.w	r2, sp, #18
 8009a4e:	9202      	str	r2, [sp, #8]
 8009a50:	4628      	mov	r0, r5
 8009a52:	2210      	movs	r2, #16
 8009a54:	2103      	movs	r1, #3
 8009a56:	f7fa ffd8 	bl	8004a0a <optiga_crypt_ecc_generate_keypair>
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	b950      	cbnz	r0, 8009a74 <example_optiga_crypt_ecc_generate_keypair+0x98>
 8009a5e:	8823      	ldrh	r3, [r4, #0]
 8009a60:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <example_optiga_crypt_ecc_generate_keypair+0xf4>)
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d0fa      	beq.n	8009a5e <example_optiga_crypt_ecc_generate_keypair+0x82>
 8009a68:	8813      	ldrh	r3, [r2, #0]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	b143      	cbz	r3, 8009a80 <example_optiga_crypt_ecc_generate_keypair+0xa4>
 8009a6e:	8812      	ldrh	r2, [r2, #0]
 8009a70:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009a72:	b12a      	cbz	r2, 8009a80 <example_optiga_crypt_ecc_generate_keypair+0xa4>
 8009a74:	4812      	ldr	r0, [pc, #72]	; (8009ac0 <example_optiga_crypt_ecc_generate_keypair+0xe4>)
 8009a76:	4918      	ldr	r1, [pc, #96]	; (8009ad8 <example_optiga_crypt_ecc_generate_keypair+0xfc>)
 8009a78:	f7fc fea4 	bl	80067c4 <optiga_lib_print_status>

    if (crypt_me)
 8009a7c:	b175      	cbz	r5, 8009a9c <example_optiga_crypt_ecc_generate_keypair+0xc0>
 8009a7e:	e004      	b.n	8009a8a <example_optiga_crypt_ecc_generate_keypair+0xae>
                                                          public_key,
                                                          &public_key_length);
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009a80:	480f      	ldr	r0, [pc, #60]	; (8009ac0 <example_optiga_crypt_ecc_generate_keypair+0xe4>)
 8009a82:	4910      	ldr	r1, [pc, #64]	; (8009ac4 <example_optiga_crypt_ecc_generate_keypair+0xe8>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	f7fc fe9d 	bl	80067c4 <optiga_lib_print_status>

    if (crypt_me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(crypt_me);
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f7fa ff0e 	bl	80048ac <optiga_crypt_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 8009a90:	4602      	mov	r2, r0
 8009a92:	b118      	cbz	r0, 8009a9c <example_optiga_crypt_ecc_generate_keypair+0xc0>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009a94:	480a      	ldr	r0, [pc, #40]	; (8009ac0 <example_optiga_crypt_ecc_generate_keypair+0xe4>)
 8009a96:	4910      	ldr	r1, [pc, #64]	; (8009ad8 <example_optiga_crypt_ecc_generate_keypair+0xfc>)
 8009a98:	f7fc fe94 	bl	80067c4 <optiga_lib_print_status>
        }
    }
    if (util_me)
 8009a9c:	b166      	cbz	r6, 8009ab8 <example_optiga_crypt_ecc_generate_keypair+0xdc>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(util_me);
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7fa fcc2 	bl	8004428 <optiga_util_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	b138      	cbz	r0, 8009ab8 <example_optiga_crypt_ecc_generate_keypair+0xdc>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009aa8:	4805      	ldr	r0, [pc, #20]	; (8009ac0 <example_optiga_crypt_ecc_generate_keypair+0xe4>)
 8009aaa:	490b      	ldr	r1, [pc, #44]	; (8009ad8 <example_optiga_crypt_ecc_generate_keypair+0xfc>)
 8009aac:	f7fc fe8a 	bl	80067c4 <optiga_lib_print_status>
 8009ab0:	e002      	b.n	8009ab8 <example_optiga_crypt_ecc_generate_keypair+0xdc>
    uint8_t public_key [100];
    uint16_t public_key_length = sizeof(public_key);
    uint16_t optiga_oid;
    
    optiga_crypt_t * crypt_me = NULL;
    optiga_util_t * util_me = NULL;    
 8009ab2:	2600      	movs	r6, #0
 * ECC Key pair using #optiga_crypt_ecc_generate_keypair.
 *
 */
void example_optiga_crypt_ecc_generate_keypair(void)
{
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	e7dd      	b.n	8009a74 <example_optiga_crypt_ecc_generate_keypair+0x98>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }    
}
 8009ab8:	b01e      	add	sp, #120	; 0x78
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	0800c6bb 	.word	0x0800c6bb
 8009ac0:	0800c6a0 	.word	0x0800c6a0
 8009ac4:	0800c378 	.word	0x0800c378
 8009ac8:	080099c5 	.word	0x080099c5
 8009acc:	080099d1 	.word	0x080099d1
 8009ad0:	1fff012c 	.word	0x1fff012c
 8009ad4:	0800c698 	.word	0x0800c698
 8009ad8:	0800c6b5 	.word	0x0800c6b5

08009adc <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 8009adc:	4b01      	ldr	r3, [pc, #4]	; (8009ae4 <optiga_crypt_callback+0x8>)
 8009ade:	8019      	strh	r1, [r3, #0]
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	1fff012e 	.word	0x1fff012e

08009ae8 <example_optiga_crypt_ecdsa_sign>:
 *
 * Example for #optiga_crypt_ecdsa_sign
 *
 */
void example_optiga_crypt_ecdsa_sign(void)
{
 8009ae8:	b530      	push	{r4, r5, lr}
 8009aea:	b099      	sub	sp, #100	; 0x64
    //To store the signture generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
 8009aec:	2350      	movs	r3, #80	; 0x50

    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009aee:	481f      	ldr	r0, [pc, #124]	; (8009b6c <example_optiga_crypt_ecdsa_sign+0x84>)
 8009af0:	491f      	ldr	r1, [pc, #124]	; (8009b70 <example_optiga_crypt_ecdsa_sign+0x88>)
 8009af2:	4a20      	ldr	r2, [pc, #128]	; (8009b74 <example_optiga_crypt_ecdsa_sign+0x8c>)
 */
void example_optiga_crypt_ecdsa_sign(void)
{
    //To store the signture generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
 8009af4:	f8ad 300e 	strh.w	r3, [sp, #14]

    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009af8:	f7fc fe3c 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 8009afc:	2000      	movs	r0, #0
 8009afe:	4602      	mov	r2, r0
 8009b00:	491d      	ldr	r1, [pc, #116]	; (8009b78 <example_optiga_crypt_ecdsa_sign+0x90>)
 8009b02:	f7fa feab 	bl	800485c <optiga_crypt_create>
 8009b06:	2201      	movs	r2, #1
        if (NULL == me)
 8009b08:	4605      	mov	r5, r0
 8009b0a:	b1c8      	cbz	r0, 8009b40 <example_optiga_crypt_ecdsa_sign+0x58>

        /**
         * 2. Sign the digest using Private key from Key Store ID E0F0
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_ecdsa_sign(me,
 8009b0c:	ab04      	add	r3, sp, #16
        }

        /**
         * 2. Sign the digest using Private key from Key Store ID E0F0
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009b0e:	4c1b      	ldr	r4, [pc, #108]	; (8009b7c <example_optiga_crypt_ecdsa_sign+0x94>)
        return_status = optiga_crypt_ecdsa_sign(me,
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	f10d 030e 	add.w	r3, sp, #14
        }

        /**
         * 2. Sign the digest using Private key from Key Store ID E0F0
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009b16:	8022      	strh	r2, [r4, #0]
        return_status = optiga_crypt_ecdsa_sign(me,
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	4918      	ldr	r1, [pc, #96]	; (8009b80 <example_optiga_crypt_ecdsa_sign+0x98>)
 8009b1e:	f24e 03f0 	movw	r3, #57584	; 0xe0f0
 8009b22:	f7fa ffba 	bl	8004a9a <optiga_crypt_ecdsa_sign>
                                                sizeof(digest),
                                                OPTIGA_KEY_ID_E0F0,
                                                signature,
                                                &signature_length);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009b26:	4602      	mov	r2, r0
 8009b28:	b950      	cbnz	r0, 8009b40 <example_optiga_crypt_ecdsa_sign+0x58>
 8009b2a:	8823      	ldrh	r3, [r4, #0]
 8009b2c:	4a13      	ldr	r2, [pc, #76]	; (8009b7c <example_optiga_crypt_ecdsa_sign+0x94>)
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d0fa      	beq.n	8009b2a <example_optiga_crypt_ecdsa_sign+0x42>
 8009b34:	8813      	ldrh	r3, [r2, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	b143      	cbz	r3, 8009b4c <example_optiga_crypt_ecdsa_sign+0x64>
 8009b3a:	8812      	ldrh	r2, [r2, #0]
 8009b3c:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009b3e:	b12a      	cbz	r2, 8009b4c <example_optiga_crypt_ecdsa_sign+0x64>
 8009b40:	480b      	ldr	r0, [pc, #44]	; (8009b70 <example_optiga_crypt_ecdsa_sign+0x88>)
 8009b42:	4910      	ldr	r1, [pc, #64]	; (8009b84 <example_optiga_crypt_ecdsa_sign+0x9c>)
 8009b44:	f7fc fe3e 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
 8009b48:	b92d      	cbnz	r5, 8009b56 <example_optiga_crypt_ecdsa_sign+0x6e>
 8009b4a:	e00d      	b.n	8009b68 <example_optiga_crypt_ecdsa_sign+0x80>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009b4c:	4808      	ldr	r0, [pc, #32]	; (8009b70 <example_optiga_crypt_ecdsa_sign+0x88>)
 8009b4e:	4909      	ldr	r1, [pc, #36]	; (8009b74 <example_optiga_crypt_ecdsa_sign+0x8c>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	f7fc fe37 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7fa fea8 	bl	80048ac <optiga_crypt_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	b118      	cbz	r0, 8009b68 <example_optiga_crypt_ecdsa_sign+0x80>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009b60:	4803      	ldr	r0, [pc, #12]	; (8009b70 <example_optiga_crypt_ecdsa_sign+0x88>)
 8009b62:	4908      	ldr	r1, [pc, #32]	; (8009b84 <example_optiga_crypt_ecdsa_sign+0x9c>)
 8009b64:	f7fc fe2e 	bl	80067c4 <optiga_lib_print_status>
        }
    }
}
 8009b68:	b019      	add	sp, #100	; 0x64
 8009b6a:	bd30      	pop	{r4, r5, pc}
 8009b6c:	0800c705 	.word	0x0800c705
 8009b70:	0800c6a0 	.word	0x0800c6a0
 8009b74:	0800c378 	.word	0x0800c378
 8009b78:	08009add 	.word	0x08009add
 8009b7c:	1fff012e 	.word	0x1fff012e
 8009b80:	0800c6e5 	.word	0x0800c6e5
 8009b84:	0800c6b5 	.word	0x0800c6b5

08009b88 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 8009b88:	4b01      	ldr	r3, [pc, #4]	; (8009b90 <optiga_crypt_callback+0x8>)
 8009b8a:	8019      	strh	r1, [r3, #0]
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	1fff0178 	.word	0x1fff0178

08009b94 <example_optiga_crypt_ecdsa_verify>:
 *
 * Example for #optiga_crypt_ecdsa_verify
 *
 */
void example_optiga_crypt_ecdsa_verify(void)
{
 8009b94:	b530      	push	{r4, r5, lr}
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);

    example_util_encode_ecc_public_key_in_bit_string_format(ecc_public_key_component,
 8009b96:	4d26      	ldr	r5, [pc, #152]	; (8009c30 <example_optiga_crypt_ecdsa_verify+0x9c>)
 8009b98:	4c26      	ldr	r4, [pc, #152]	; (8009c34 <example_optiga_crypt_ecdsa_verify+0xa0>)
void example_optiga_crypt_ecdsa_verify(void)
{
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009b9a:	4827      	ldr	r0, [pc, #156]	; (8009c38 <example_optiga_crypt_ecdsa_verify+0xa4>)
 8009b9c:	4927      	ldr	r1, [pc, #156]	; (8009c3c <example_optiga_crypt_ecdsa_verify+0xa8>)
 8009b9e:	4a28      	ldr	r2, [pc, #160]	; (8009c40 <example_optiga_crypt_ecdsa_verify+0xac>)
 *
 * Example for #optiga_crypt_ecdsa_verify
 *
 */
void example_optiga_crypt_ecdsa_verify(void)
{
 8009ba0:	b087      	sub	sp, #28
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009ba2:	f7fc fde7 	bl	8006774 <optiga_lib_print_message>

    example_util_encode_ecc_public_key_in_bit_string_format(ecc_public_key_component,
 8009ba6:	462a      	mov	r2, r5
 8009ba8:	4826      	ldr	r0, [pc, #152]	; (8009c44 <example_optiga_crypt_ecdsa_verify+0xb0>)
 8009baa:	2140      	movs	r1, #64	; 0x40
 8009bac:	4623      	mov	r3, r4
 8009bae:	f000 ff07 	bl	800a9c0 <example_util_encode_ecc_public_key_in_bit_string_format>
                                                        sizeof(ecc_public_key_component),
                                                        ecc_public_key,
                                                        &ecc_public_key_length);
    
    public_key_from_host_t public_key_details = {
 8009bb2:	8823      	ldrh	r3, [r4, #0]
 8009bb4:	f8ad 3014 	strh.w	r3, [sp, #20]
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 8009bb8:	2000      	movs	r0, #0
    example_util_encode_ecc_public_key_in_bit_string_format(ecc_public_key_component,
                                                        sizeof(ecc_public_key_component),
                                                        ecc_public_key,
                                                        &ecc_public_key_length);
    
    public_key_from_host_t public_key_details = {
 8009bba:	2303      	movs	r3, #3
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	4922      	ldr	r1, [pc, #136]	; (8009c48 <example_optiga_crypt_ecdsa_verify+0xb4>)
    example_util_encode_ecc_public_key_in_bit_string_format(ecc_public_key_component,
                                                        sizeof(ecc_public_key_component),
                                                        ecc_public_key,
                                                        &ecc_public_key_length);
    
    public_key_from_host_t public_key_details = {
 8009bc0:	9504      	str	r5, [sp, #16]
 8009bc2:	f88d 3016 	strb.w	r3, [sp, #22]
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 8009bc6:	f7fa fe49 	bl	800485c <optiga_crypt_create>
 8009bca:	2201      	movs	r2, #1
        if (NULL == me)
 8009bcc:	4605      	mov	r5, r0
 8009bce:	b1c0      	cbz	r0, 8009c02 <example_optiga_crypt_ecdsa_verify+0x6e>
        }

        /**
         * 2. Verify ECDSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009bd0:	4c1e      	ldr	r4, [pc, #120]	; (8009c4c <example_optiga_crypt_ecdsa_verify+0xb8>)
        return_status = optiga_crypt_ecdsa_verify (me,
 8009bd2:	491f      	ldr	r1, [pc, #124]	; (8009c50 <example_optiga_crypt_ecdsa_verify+0xbc>)
        }

        /**
         * 2. Verify ECDSA signature using public key from host
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009bd4:	8022      	strh	r2, [r4, #0]
        return_status = optiga_crypt_ecdsa_verify (me,
 8009bd6:	2342      	movs	r3, #66	; 0x42
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	ab04      	add	r3, sp, #16
 8009bdc:	9201      	str	r2, [sp, #4]
 8009bde:	9302      	str	r3, [sp, #8]
 8009be0:	2220      	movs	r2, #32
 8009be2:	4b1c      	ldr	r3, [pc, #112]	; (8009c54 <example_optiga_crypt_ecdsa_verify+0xc0>)
 8009be4:	f7fa ff9b 	bl	8004b1e <optiga_crypt_ecdsa_verify>
                                                   signature,
                                                   sizeof(signature),
                                                   OPTIGA_CRYPT_HOST_DATA,
                                                   &public_key_details);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009be8:	4602      	mov	r2, r0
 8009bea:	b950      	cbnz	r0, 8009c02 <example_optiga_crypt_ecdsa_verify+0x6e>
 8009bec:	8823      	ldrh	r3, [r4, #0]
 8009bee:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <example_optiga_crypt_ecdsa_verify+0xb8>)
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d0fa      	beq.n	8009bec <example_optiga_crypt_ecdsa_verify+0x58>
 8009bf6:	8813      	ldrh	r3, [r2, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	b143      	cbz	r3, 8009c0e <example_optiga_crypt_ecdsa_verify+0x7a>
 8009bfc:	8812      	ldrh	r2, [r2, #0]
 8009bfe:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009c00:	b12a      	cbz	r2, 8009c0e <example_optiga_crypt_ecdsa_verify+0x7a>
 8009c02:	480e      	ldr	r0, [pc, #56]	; (8009c3c <example_optiga_crypt_ecdsa_verify+0xa8>)
 8009c04:	4914      	ldr	r1, [pc, #80]	; (8009c58 <example_optiga_crypt_ecdsa_verify+0xc4>)
 8009c06:	f7fc fddd 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
 8009c0a:	b92d      	cbnz	r5, 8009c18 <example_optiga_crypt_ecdsa_verify+0x84>
 8009c0c:	e00d      	b.n	8009c2a <example_optiga_crypt_ecdsa_verify+0x96>
                                                   &public_key_details);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009c0e:	480b      	ldr	r0, [pc, #44]	; (8009c3c <example_optiga_crypt_ecdsa_verify+0xa8>)
 8009c10:	490b      	ldr	r1, [pc, #44]	; (8009c40 <example_optiga_crypt_ecdsa_verify+0xac>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	f7fc fdd6 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7fa fe47 	bl	80048ac <optiga_crypt_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 8009c1e:	4602      	mov	r2, r0
 8009c20:	b118      	cbz	r0, 8009c2a <example_optiga_crypt_ecdsa_verify+0x96>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009c22:	4806      	ldr	r0, [pc, #24]	; (8009c3c <example_optiga_crypt_ecdsa_verify+0xa8>)
 8009c24:	490c      	ldr	r1, [pc, #48]	; (8009c58 <example_optiga_crypt_ecdsa_verify+0xc4>)
 8009c26:	f7fc fdcd 	bl	80067c4 <optiga_lib_print_status>
        }
    }
    
}
 8009c2a:	b007      	add	sp, #28
 8009c2c:	bd30      	pop	{r4, r5, pc}
 8009c2e:	bf00      	nop
 8009c30:	1fff0132 	.word	0x1fff0132
 8009c34:	1fff0130 	.word	0x1fff0130
 8009c38:	0800c785 	.word	0x0800c785
 8009c3c:	0800c6a0 	.word	0x0800c6a0
 8009c40:	0800c378 	.word	0x0800c378
 8009c44:	0800c745 	.word	0x0800c745
 8009c48:	08009b89 	.word	0x08009b89
 8009c4c:	1fff0178 	.word	0x1fff0178
 8009c50:	0800c725 	.word	0x0800c725
 8009c54:	0800c7a7 	.word	0x0800c7a7
 8009c58:	0800c6b5 	.word	0x0800c6b5

08009c5c <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 8009c5c:	4b01      	ldr	r3, [pc, #4]	; (8009c64 <optiga_crypt_callback+0x8>)
 8009c5e:	8019      	strh	r1, [r3, #0]
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	1fff017a 	.word	0x1fff017a

08009c68 <example_optiga_crypt_hash>:
 * Example for #optiga_crypt_hash_start, #optiga_crypt_hash_update,
 * #optiga_crypt_hash_finalize
 *
 */
void example_optiga_crypt_hash(void)
{
 8009c68:	b570      	push	{r4, r5, r6, lr}

    // Note : The size of the hash context provided by OPTIGA is OPTIGA_HASH_CONTEXT_LENGTH_SHA_256 bytes for SHA-256
    uint8_t hash_context_buffer [OPTIGA_HASH_CONTEXT_LENGTH_SHA_256];
    optiga_hash_context_t hash_context;

    uint8_t data_to_hash [] = {"OPTIGA, Infineon Technologies AG"};
 8009c6a:	4b3c      	ldr	r3, [pc, #240]	; (8009d5c <example_optiga_crypt_hash+0xf4>)
 * Example for #optiga_crypt_hash_start, #optiga_crypt_hash_update,
 * #optiga_crypt_hash_finalize
 *
 */
void example_optiga_crypt_hash(void)
{
 8009c6c:	b0b8      	sub	sp, #224	; 0xe0

    // Note : The size of the hash context provided by OPTIGA is OPTIGA_HASH_CONTEXT_LENGTH_SHA_256 bytes for SHA-256
    uint8_t hash_context_buffer [OPTIGA_HASH_CONTEXT_LENGTH_SHA_256];
    optiga_hash_context_t hash_context;

    uint8_t data_to_hash [] = {"OPTIGA, Infineon Technologies AG"};
 8009c6e:	aa0e      	add	r2, sp, #56	; 0x38
 8009c70:	f103 0520 	add.w	r5, r3, #32
 8009c74:	4616      	mov	r6, r2
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	6859      	ldr	r1, [r3, #4]
 8009c7a:	4614      	mov	r4, r2
 8009c7c:	c403      	stmia	r4!, {r0, r1}
 8009c7e:	3308      	adds	r3, #8
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	4622      	mov	r2, r4
 8009c84:	d1f7      	bne.n	8009c76 <example_optiga_crypt_hash+0xe>
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	7023      	strb	r3, [r4, #0]
    hash_data_from_host_t hash_data_host;

    uint8_t digest [32];

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009c8a:	4835      	ldr	r0, [pc, #212]	; (8009d60 <example_optiga_crypt_hash+0xf8>)
 8009c8c:	4935      	ldr	r1, [pc, #212]	; (8009d64 <example_optiga_crypt_hash+0xfc>)
 8009c8e:	4a36      	ldr	r2, [pc, #216]	; (8009d68 <example_optiga_crypt_hash+0x100>)
 8009c90:	f7fc fd70 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 8009c94:	2000      	movs	r0, #0
 8009c96:	4935      	ldr	r1, [pc, #212]	; (8009d6c <example_optiga_crypt_hash+0x104>)
 8009c98:	4602      	mov	r2, r0
 8009c9a:	f7fa fddf 	bl	800485c <optiga_crypt_create>
        if (NULL == me)
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d056      	beq.n	8009d52 <example_optiga_crypt_hash+0xea>
        }

        /**
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
 8009ca4:	ab17      	add	r3, sp, #92	; 0x5c
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	2382      	movs	r3, #130	; 0x82
 8009caa:	9304      	str	r3, [sp, #16]
                                 sizeof(hash_context_buffer),(uint8_t)OPTIGA_HASH_TYPE_SHA_256);

        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009cac:	4c30      	ldr	r4, [pc, #192]	; (8009d70 <example_optiga_crypt_hash+0x108>)
        }

        /**
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
 8009cae:	23e2      	movs	r3, #226	; 0xe2
 8009cb0:	f88d 3014 	strb.w	r3, [sp, #20]
        optiga_lib_status = OPTIGA_LIB_BUSY;

        /**
         * 3. Initialize the hashing context at OPTIGA
         */
        return_status = optiga_crypt_hash_start(me, &hash_context);
 8009cb4:	a903      	add	r1, sp, #12
         * 2. Initialize the Hash context
         */
        OPTIGA_HASH_CONTEXT_INIT(hash_context,hash_context_buffer,  \
                                 sizeof(hash_context_buffer),(uint8_t)OPTIGA_HASH_TYPE_SHA_256);

        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	8023      	strh	r3, [r4, #0]

        /**
         * 3. Initialize the hashing context at OPTIGA
         */
        return_status = optiga_crypt_hash_start(me, &hash_context);
 8009cba:	f7fa fe44 	bl	8004946 <optiga_crypt_hash_start>
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d131      	bne.n	8009d28 <example_optiga_crypt_hash+0xc0>
 8009cc4:	8822      	ldrh	r2, [r4, #0]
 8009cc6:	4b2a      	ldr	r3, [pc, #168]	; (8009d70 <example_optiga_crypt_hash+0x108>)
 8009cc8:	b292      	uxth	r2, r2
 8009cca:	2a01      	cmp	r2, #1
 8009ccc:	d0fa      	beq.n	8009cc4 <example_optiga_crypt_hash+0x5c>
 8009cce:	881a      	ldrh	r2, [r3, #0]
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	b99a      	cbnz	r2, 8009cfc <example_optiga_crypt_hash+0x94>

        /**
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);
 8009cd4:	2221      	movs	r2, #33	; 0x21
 8009cd6:	9202      	str	r2, [sp, #8]

        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009cd8:	2201      	movs	r2, #1
 8009cda:	801a      	strh	r2, [r3, #0]
        return_status = optiga_crypt_hash_update(me,
 8009cdc:	4628      	mov	r0, r5
 8009cde:	a903      	add	r1, sp, #12
 8009ce0:	ab01      	add	r3, sp, #4
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

        /**
         * 4. Continue hashing the data
         */
        hash_data_host.buffer = data_to_hash;
 8009ce2:	9601      	str	r6, [sp, #4]
        hash_data_host.length = sizeof(data_to_hash);

        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_hash_update(me,
 8009ce4:	f7fa fe46 	bl	8004974 <optiga_crypt_hash_update>
                                                 &hash_context,
                                                 OPTIGA_CRYPT_HOST_DATA,
                                                 &hash_data_host);
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009ce8:	4602      	mov	r2, r0
 8009cea:	b9e8      	cbnz	r0, 8009d28 <example_optiga_crypt_hash+0xc0>
 8009cec:	8822      	ldrh	r2, [r4, #0]
 8009cee:	4b20      	ldr	r3, [pc, #128]	; (8009d70 <example_optiga_crypt_hash+0x108>)
 8009cf0:	b292      	uxth	r2, r2
 8009cf2:	2a01      	cmp	r2, #1
 8009cf4:	d0fa      	beq.n	8009cec <example_optiga_crypt_hash+0x84>
 8009cf6:	881a      	ldrh	r2, [r3, #0]
 8009cf8:	b292      	uxth	r2, r2
 8009cfa:	b10a      	cbz	r2, 8009d00 <example_optiga_crypt_hash+0x98>
 8009cfc:	881a      	ldrh	r2, [r3, #0]
 8009cfe:	e011      	b.n	8009d24 <example_optiga_crypt_hash+0xbc>

        /**
         * 5. Finalize the hash
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009d00:	2201      	movs	r2, #1
 8009d02:	801a      	strh	r2, [r3, #0]
        return_status = optiga_crypt_hash_finalize(me,
 8009d04:	4628      	mov	r0, r5
 8009d06:	aa06      	add	r2, sp, #24
 8009d08:	a903      	add	r1, sp, #12
 8009d0a:	f7fa fe4e 	bl	80049aa <optiga_crypt_hash_finalize>
                                                   &hash_context,
                                                   digest);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009d0e:	4602      	mov	r2, r0
 8009d10:	b950      	cbnz	r0, 8009d28 <example_optiga_crypt_hash+0xc0>
 8009d12:	8823      	ldrh	r3, [r4, #0]
 8009d14:	4a16      	ldr	r2, [pc, #88]	; (8009d70 <example_optiga_crypt_hash+0x108>)
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d0fa      	beq.n	8009d12 <example_optiga_crypt_hash+0xaa>
 8009d1c:	8813      	ldrh	r3, [r2, #0]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	b143      	cbz	r3, 8009d34 <example_optiga_crypt_hash+0xcc>
 8009d22:	8812      	ldrh	r2, [r2, #0]
 8009d24:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009d26:	b12a      	cbz	r2, 8009d34 <example_optiga_crypt_hash+0xcc>
 8009d28:	480e      	ldr	r0, [pc, #56]	; (8009d64 <example_optiga_crypt_hash+0xfc>)
 8009d2a:	4912      	ldr	r1, [pc, #72]	; (8009d74 <example_optiga_crypt_hash+0x10c>)
 8009d2c:	f7fc fd4a 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
 8009d30:	b92d      	cbnz	r5, 8009d3e <example_optiga_crypt_hash+0xd6>
 8009d32:	e010      	b.n	8009d56 <example_optiga_crypt_hash+0xee>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009d34:	480b      	ldr	r0, [pc, #44]	; (8009d64 <example_optiga_crypt_hash+0xfc>)
 8009d36:	490c      	ldr	r1, [pc, #48]	; (8009d68 <example_optiga_crypt_hash+0x100>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f7fc fd43 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f7fa fdb4 	bl	80048ac <optiga_crypt_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 8009d44:	4602      	mov	r2, r0
 8009d46:	b130      	cbz	r0, 8009d56 <example_optiga_crypt_hash+0xee>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009d48:	4806      	ldr	r0, [pc, #24]	; (8009d64 <example_optiga_crypt_hash+0xfc>)
 8009d4a:	490a      	ldr	r1, [pc, #40]	; (8009d74 <example_optiga_crypt_hash+0x10c>)
 8009d4c:	f7fc fd3a 	bl	80067c4 <optiga_lib_print_status>
 8009d50:	e001      	b.n	8009d56 <example_optiga_crypt_hash+0xee>
 * #optiga_crypt_hash_finalize
 *
 */
void example_optiga_crypt_hash(void)
{
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 8009d52:	2201      	movs	r2, #1
 8009d54:	e7e8      	b.n	8009d28 <example_optiga_crypt_hash+0xc0>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
}
 8009d56:	b038      	add	sp, #224	; 0xe0
 8009d58:	bd70      	pop	{r4, r5, r6, pc}
 8009d5a:	bf00      	nop
 8009d5c:	0800c803 	.word	0x0800c803
 8009d60:	0800c7e9 	.word	0x0800c7e9
 8009d64:	0800c6a0 	.word	0x0800c6a0
 8009d68:	0800c378 	.word	0x0800c378
 8009d6c:	08009c5d 	.word	0x08009c5d
 8009d70:	1fff017a 	.word	0x1fff017a
 8009d74:	0800c6b5 	.word	0x0800c6b5

08009d78 <example_optiga_crypt_hash_data>:
 *
 * Example for #optiga_crypt_hash
 *
 */
void example_optiga_crypt_hash_data(void)
{
 8009d78:	b570      	push	{r4, r5, r6, lr}
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    uint8_t data_to_hash [] = {"OPTIGA, Infineon Technologies AG"};
 8009d7a:	4b27      	ldr	r3, [pc, #156]	; (8009e18 <example_optiga_crypt_hash_data+0xa0>)
 *
 * Example for #optiga_crypt_hash
 *
 */
void example_optiga_crypt_hash_data(void)
{
 8009d7c:	b096      	sub	sp, #88	; 0x58
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;

    uint8_t data_to_hash [] = {"OPTIGA, Infineon Technologies AG"};
 8009d7e:	aa0d      	add	r2, sp, #52	; 0x34
 8009d80:	f103 0520 	add.w	r5, r3, #32
 8009d84:	4616      	mov	r6, r2
 8009d86:	6818      	ldr	r0, [r3, #0]
 8009d88:	6859      	ldr	r1, [r3, #4]
 8009d8a:	4614      	mov	r4, r2
 8009d8c:	c403      	stmia	r4!, {r0, r1}
 8009d8e:	3308      	adds	r3, #8
 8009d90:	42ab      	cmp	r3, r5
 8009d92:	4622      	mov	r2, r4
 8009d94:	d1f7      	bne.n	8009d86 <example_optiga_crypt_hash_data+0xe>
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	7023      	strb	r3, [r4, #0]
    hash_data_from_host_t hash_data_host;

    uint8_t digest [32];

    optiga_crypt_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009d9a:	4820      	ldr	r0, [pc, #128]	; (8009e1c <example_optiga_crypt_hash_data+0xa4>)
 8009d9c:	4920      	ldr	r1, [pc, #128]	; (8009e20 <example_optiga_crypt_hash_data+0xa8>)
 8009d9e:	4a21      	ldr	r2, [pc, #132]	; (8009e24 <example_optiga_crypt_hash_data+0xac>)
 8009da0:	f7fc fce8 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 8009da4:	2000      	movs	r0, #0
 8009da6:	4920      	ldr	r1, [pc, #128]	; (8009e28 <example_optiga_crypt_hash_data+0xb0>)
 8009da8:	4602      	mov	r2, r0
 8009daa:	f7fa fd57 	bl	800485c <optiga_crypt_create>
        if (NULL == me)
 8009dae:	4605      	mov	r5, r0
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d02d      	beq.n	8009e10 <example_optiga_crypt_hash_data+0x98>

        /**
         * 2. Initialize the hashing context at OPTIGA
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);
 8009db4:	2321      	movs	r3, #33	; 0x21
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009db6:	4c1d      	ldr	r4, [pc, #116]	; (8009e2c <example_optiga_crypt_hash_data+0xb4>)

        /**
         * 2. Initialize the hashing context at OPTIGA
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);
 8009db8:	9304      	str	r3, [sp, #16]
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009dba:	2201      	movs	r2, #1
        return_status = optiga_crypt_hash(me, OPTIGA_HASH_TYPE_SHA_256, OPTIGA_CRYPT_HOST_DATA, &hash_data_host, digest);
 8009dbc:	ab05      	add	r3, sp, #20
        /**
         * 2. Initialize the hashing context at OPTIGA
         */
        hash_data_host.buffer = data_to_hash;
        hash_data_host.length = sizeof(data_to_hash);
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009dbe:	8022      	strh	r2, [r4, #0]
        return_status = optiga_crypt_hash(me, OPTIGA_HASH_TYPE_SHA_256, OPTIGA_CRYPT_HOST_DATA, &hash_data_host, digest);
 8009dc0:	21e2      	movs	r1, #226	; 0xe2
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	ab03      	add	r3, sp, #12
        }

        /**
         * 2. Initialize the hashing context at OPTIGA
         */
        hash_data_host.buffer = data_to_hash;
 8009dc6:	9603      	str	r6, [sp, #12]
        hash_data_host.length = sizeof(data_to_hash);
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_crypt_hash(me, OPTIGA_HASH_TYPE_SHA_256, OPTIGA_CRYPT_HOST_DATA, &hash_data_host, digest);
 8009dc8:	f7fa fe07 	bl	80049da <optiga_crypt_hash>
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009dcc:	4602      	mov	r2, r0
 8009dce:	b950      	cbnz	r0, 8009de6 <example_optiga_crypt_hash_data+0x6e>
 8009dd0:	8823      	ldrh	r3, [r4, #0]
 8009dd2:	4a16      	ldr	r2, [pc, #88]	; (8009e2c <example_optiga_crypt_hash_data+0xb4>)
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d0fa      	beq.n	8009dd0 <example_optiga_crypt_hash_data+0x58>
 8009dda:	8813      	ldrh	r3, [r2, #0]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	b143      	cbz	r3, 8009df2 <example_optiga_crypt_hash_data+0x7a>
 8009de0:	8812      	ldrh	r2, [r2, #0]
 8009de2:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009de4:	b12a      	cbz	r2, 8009df2 <example_optiga_crypt_hash_data+0x7a>
 8009de6:	480e      	ldr	r0, [pc, #56]	; (8009e20 <example_optiga_crypt_hash_data+0xa8>)
 8009de8:	4911      	ldr	r1, [pc, #68]	; (8009e30 <example_optiga_crypt_hash_data+0xb8>)
 8009dea:	f7fc fceb 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
 8009dee:	b92d      	cbnz	r5, 8009dfc <example_optiga_crypt_hash_data+0x84>
 8009df0:	e010      	b.n	8009e14 <example_optiga_crypt_hash_data+0x9c>
        return_status = optiga_crypt_hash(me, OPTIGA_HASH_TYPE_SHA_256, OPTIGA_CRYPT_HOST_DATA, &hash_data_host, digest);
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009df2:	480b      	ldr	r0, [pc, #44]	; (8009e20 <example_optiga_crypt_hash_data+0xa8>)
 8009df4:	490b      	ldr	r1, [pc, #44]	; (8009e24 <example_optiga_crypt_hash_data+0xac>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	f7fc fce4 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f7fa fd55 	bl	80048ac <optiga_crypt_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 8009e02:	4602      	mov	r2, r0
 8009e04:	b130      	cbz	r0, 8009e14 <example_optiga_crypt_hash_data+0x9c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009e06:	4806      	ldr	r0, [pc, #24]	; (8009e20 <example_optiga_crypt_hash_data+0xa8>)
 8009e08:	4909      	ldr	r1, [pc, #36]	; (8009e30 <example_optiga_crypt_hash_data+0xb8>)
 8009e0a:	f7fc fcdb 	bl	80067c4 <optiga_lib_print_status>
 8009e0e:	e001      	b.n	8009e14 <example_optiga_crypt_hash_data+0x9c>
 * Example for #optiga_crypt_hash
 *
 */
void example_optiga_crypt_hash_data(void)
{
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 8009e10:	2201      	movs	r2, #1
 8009e12:	e7e8      	b.n	8009de6 <example_optiga_crypt_hash_data+0x6e>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
}
 8009e14:	b016      	add	sp, #88	; 0x58
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	0800c803 	.word	0x0800c803
 8009e1c:	0800c824 	.word	0x0800c824
 8009e20:	0800c6a0 	.word	0x0800c6a0
 8009e24:	0800c378 	.word	0x0800c378
 8009e28:	08009c5d 	.word	0x08009c5d
 8009e2c:	1fff017a 	.word	0x1fff017a
 8009e30:	0800c6b5 	.word	0x0800c6b5

08009e34 <optiga_crypt_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 8009e34:	4b01      	ldr	r3, [pc, #4]	; (8009e3c <optiga_crypt_callback+0x8>)
 8009e36:	8019      	strh	r1, [r3, #0]
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	1fff017c 	.word	0x1fff017c

08009e40 <example_optiga_crypt_random>:
 *
 * Example for #optiga_crypt_random
 *
 */
void example_optiga_crypt_random(void)
{
 8009e40:	b530      	push	{r4, r5, lr}
    uint8_t random_data_buffer [32];
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009e42:	481c      	ldr	r0, [pc, #112]	; (8009eb4 <example_optiga_crypt_random+0x74>)
 8009e44:	491c      	ldr	r1, [pc, #112]	; (8009eb8 <example_optiga_crypt_random+0x78>)
 8009e46:	4a1d      	ldr	r2, [pc, #116]	; (8009ebc <example_optiga_crypt_random+0x7c>)
 *
 * Example for #optiga_crypt_random
 *
 */
void example_optiga_crypt_random(void)
{
 8009e48:	b089      	sub	sp, #36	; 0x24
    uint8_t random_data_buffer [32];
    optiga_crypt_t * me = NULL;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009e4a:	f7fc fc93 	bl	8006774 <optiga_lib_print_message>
    {
        /**
         * 1. Create OPTIGA Crypt Instance
         *
         */
        me = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 8009e4e:	2000      	movs	r0, #0
 8009e50:	4602      	mov	r2, r0
 8009e52:	491b      	ldr	r1, [pc, #108]	; (8009ec0 <example_optiga_crypt_random+0x80>)
 8009e54:	f7fa fd02 	bl	800485c <optiga_crypt_create>
 8009e58:	2201      	movs	r2, #1
        if (NULL == me)
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	b198      	cbz	r0, 8009e86 <example_optiga_crypt_random+0x46>

        /**
         * 2. Generate Random -
         *       - Specify the Random type as TRNG
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009e5e:	4c19      	ldr	r4, [pc, #100]	; (8009ec4 <example_optiga_crypt_random+0x84>)

        return_status = optiga_crypt_random(me,
 8009e60:	2100      	movs	r1, #0

        /**
         * 2. Generate Random -
         *       - Specify the Random type as TRNG
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009e62:	8022      	strh	r2, [r4, #0]

        return_status = optiga_crypt_random(me,
 8009e64:	2320      	movs	r3, #32
 8009e66:	466a      	mov	r2, sp
 8009e68:	f7fa fd35 	bl	80048d6 <optiga_crypt_random>
                                            OPTIGA_RNG_TYPE_TRNG,
                                            random_data_buffer,
                                            sizeof(random_data_buffer));

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	b950      	cbnz	r0, 8009e86 <example_optiga_crypt_random+0x46>
 8009e70:	8823      	ldrh	r3, [r4, #0]
 8009e72:	4a14      	ldr	r2, [pc, #80]	; (8009ec4 <example_optiga_crypt_random+0x84>)
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d0fa      	beq.n	8009e70 <example_optiga_crypt_random+0x30>
 8009e7a:	8813      	ldrh	r3, [r2, #0]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	b143      	cbz	r3, 8009e92 <example_optiga_crypt_random+0x52>
 8009e80:	8812      	ldrh	r2, [r2, #0]
 8009e82:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009e84:	b12a      	cbz	r2, 8009e92 <example_optiga_crypt_random+0x52>
 8009e86:	480c      	ldr	r0, [pc, #48]	; (8009eb8 <example_optiga_crypt_random+0x78>)
 8009e88:	490f      	ldr	r1, [pc, #60]	; (8009ec8 <example_optiga_crypt_random+0x88>)
 8009e8a:	f7fc fc9b 	bl	80067c4 <optiga_lib_print_status>
    if (me)
 8009e8e:	b92d      	cbnz	r5, 8009e9c <example_optiga_crypt_random+0x5c>
 8009e90:	e00d      	b.n	8009eae <example_optiga_crypt_random+0x6e>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009e92:	4809      	ldr	r0, [pc, #36]	; (8009eb8 <example_optiga_crypt_random+0x78>)
 8009e94:	4909      	ldr	r1, [pc, #36]	; (8009ebc <example_optiga_crypt_random+0x7c>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	f7fc fc94 	bl	80067c4 <optiga_lib_print_status>
    if (me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me);
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f7fa fd05 	bl	80048ac <optiga_crypt_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	b118      	cbz	r0, 8009eae <example_optiga_crypt_random+0x6e>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 8009ea6:	4804      	ldr	r0, [pc, #16]	; (8009eb8 <example_optiga_crypt_random+0x78>)
 8009ea8:	4907      	ldr	r1, [pc, #28]	; (8009ec8 <example_optiga_crypt_random+0x88>)
 8009eaa:	f7fc fc8b 	bl	80067c4 <optiga_lib_print_status>
        }
    }
}
 8009eae:	b009      	add	sp, #36	; 0x24
 8009eb0:	bd30      	pop	{r4, r5, pc}
 8009eb2:	bf00      	nop
 8009eb4:	0800c843 	.word	0x0800c843
 8009eb8:	0800c6a0 	.word	0x0800c6a0
 8009ebc:	0800c378 	.word	0x0800c378
 8009ec0:	08009e35 	.word	0x08009e35
 8009ec4:	1fff017c 	.word	0x1fff017c
 8009ec8:	0800c6b5 	.word	0x0800c6b5

08009ecc <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 8009ecc:	4b01      	ldr	r3, [pc, #4]	; (8009ed4 <optiga_lib_callback+0x8>)
 8009ece:	8019      	strh	r1, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	1fff017e 	.word	0x1fff017e

08009ed8 <example_optiga_util_hibernate_restore>:
 *
 * Example for #optiga_util_open_application and #optiga_util_close_application
 *
 */
void example_optiga_util_hibernate_restore(void)
{
 8009ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009edc:	b0b7      	sub	sp, #220	; 0xdc
    optiga_crypt_t * me_crypt = NULL;
    // To store the public key generated
    uint8_t public_key [100];
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
 8009ede:	2350      	movs	r3, #80	; 0x50
    uint16_t bytes_to_read = 1;
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    uint8_t security_event_counter = 0;
 8009ee0:	2600      	movs	r6, #0
    optiga_crypt_t * me_crypt = NULL;
    // To store the public key generated
    uint8_t public_key [100];
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
 8009ee2:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8_t security_event_counter = 0;
    public_key_from_host_t public_key_details;
    //To store the generated public key as part of Generate key pair
    uint16_t public_key_length = sizeof(public_key);

    OPTIGA_EXAMPLE_LOG_MESSAGE("Begin demonstrating hibernate feature...\n");    
 8009ee6:	4891      	ldr	r0, [pc, #580]	; (800a12c <example_optiga_util_hibernate_restore+0x254>)
 8009ee8:	4991      	ldr	r1, [pc, #580]	; (800a130 <example_optiga_util_hibernate_restore+0x258>)
 8009eea:	4a92      	ldr	r2, [pc, #584]	; (800a134 <example_optiga_util_hibernate_restore+0x25c>)
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
    uint16_t bytes_to_read = 1;
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    uint8_t security_event_counter = 0;
 8009eec:	f88d 6013 	strb.w	r6, [sp, #19]
    public_key_from_host_t public_key_details;
    //To store the generated public key as part of Generate key pair
    uint16_t public_key_length = sizeof(public_key);
 8009ef0:	2364      	movs	r3, #100	; 0x64
    // To store the public key generated
    uint8_t public_key [100];
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
    uint16_t bytes_to_read = 1;
 8009ef2:	f04f 0801 	mov.w	r8, #1
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    uint8_t security_event_counter = 0;
    public_key_from_host_t public_key_details;
    //To store the generated public key as part of Generate key pair
    uint16_t public_key_length = sizeof(public_key);
 8009ef6:	f8ad 301a 	strh.w	r3, [sp, #26]
    // To store the public key generated
    uint8_t public_key [100];
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
    uint16_t bytes_to_read = 1;
 8009efa:	f8ad 8016 	strh.w	r8, [sp, #22]
    uint8_t security_event_counter = 0;
    public_key_from_host_t public_key_details;
    //To store the generated public key as part of Generate key pair
    uint16_t public_key_length = sizeof(public_key);

    OPTIGA_EXAMPLE_LOG_MESSAGE("Begin demonstrating hibernate feature...\n");    
 8009efe:	f7fc fc39 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 8009f02:	488d      	ldr	r0, [pc, #564]	; (800a138 <example_optiga_util_hibernate_restore+0x260>)
 8009f04:	498a      	ldr	r1, [pc, #552]	; (800a130 <example_optiga_util_hibernate_restore+0x258>)
 8009f06:	4a8b      	ldr	r2, [pc, #556]	; (800a134 <example_optiga_util_hibernate_restore+0x25c>)
 8009f08:	f7fc fc34 	bl	8006774 <optiga_lib_print_message>

    do
    {
        //Create an instance of optiga_util and optiga_crypt
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	498b      	ldr	r1, [pc, #556]	; (800a13c <example_optiga_util_hibernate_restore+0x264>)
 8009f10:	4632      	mov	r2, r6
 8009f12:	f7fa fa61 	bl	80043d8 <optiga_util_create>
        if (NULL == me_util)
 8009f16:	4605      	mov	r5, r0
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	f000 80e4 	beq.w	800a0e6 <example_optiga_util_hibernate_restore+0x20e>
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
 8009f1e:	4630      	mov	r0, r6
 8009f20:	4986      	ldr	r1, [pc, #536]	; (800a13c <example_optiga_util_hibernate_restore+0x264>)
 8009f22:	4632      	mov	r2, r6
 8009f24:	f7fa fc9a 	bl	800485c <optiga_crypt_create>
        if (NULL == me_crypt)
 8009f28:	4604      	mov	r4, r0
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f000 80db 	beq.w	800a0e6 <example_optiga_util_hibernate_restore+0x20e>

        /**
         * 1. Open the application on OPTIGA which is a pre-condition to perform any other operations
         *    using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009f30:	4f83      	ldr	r7, [pc, #524]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
        return_status = optiga_util_open_application(me_util, 0);
 8009f32:	4628      	mov	r0, r5
 8009f34:	4631      	mov	r1, r6

        /**
         * 1. Open the application on OPTIGA which is a pre-condition to perform any other operations
         *    using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009f36:	f8a7 8000 	strh.w	r8, [r7]
        return_status = optiga_util_open_application(me_util, 0);
 8009f3a:	f7fa fa8a 	bl	8004452 <optiga_util_open_application>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009f3e:	4602      	mov	r2, r0
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f040 80d2 	bne.w	800a0ea <example_optiga_util_hibernate_restore+0x212>
 8009f46:	883b      	ldrh	r3, [r7, #0]
 8009f48:	4e7d      	ldr	r6, [pc, #500]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d0fa      	beq.n	8009f46 <example_optiga_util_hibernate_restore+0x6e>
 8009f50:	f8b6 8000 	ldrh.w	r8, [r6]
 8009f54:	fa1f f888 	uxth.w	r8, r8
 8009f58:	f1b8 0f00 	cmp.w	r8, #0
 8009f5c:	d001      	beq.n	8009f62 <example_optiga_util_hibernate_restore+0x8a>
 8009f5e:	8832      	ldrh	r2, [r6, #0]
 8009f60:	e0b8      	b.n	800a0d4 <example_optiga_util_hibernate_restore+0x1fc>

        /**
         * 2. Pairing the Host and OPTIGA using a pre-shared secret
         */
        example_pair_host_and_optiga_using_pre_shared_secret();
 8009f62:	f000 fb21 	bl	800a5a8 <example_pair_host_and_optiga_using_pre_shared_secret>
         *       - Use ECC NIST P 256 Curve
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key generated in a Session OID
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009f66:	2101      	movs	r1, #1
 8009f68:	8031      	strh	r1, [r6, #0]
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
 8009f6a:	ae36      	add	r6, sp, #216	; 0xd8
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
 8009f6c:	4620      	mov	r0, r4
         *       - Specify the Key Usage (Key Agreement or Sign based on requirement)
         *       - Store the Private key generated in a Session OID
         *       - Export Public Key
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        optiga_key_id = OPTIGA_KEY_ID_SESSION_BASED;
 8009f6e:	f826 8dc0 	strh.w	r8, [r6, #-192]!
        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
 8009f72:	2202      	movs	r2, #2
 8009f74:	f7fa fc66 	bl	8004844 <optiga_crypt_set_comms_params>

        return_status = optiga_crypt_ecc_generate_keypair(me_crypt,
 8009f78:	9600      	str	r6, [sp, #0]
 8009f7a:	f10d 031a 	add.w	r3, sp, #26
 8009f7e:	ae1d      	add	r6, sp, #116	; 0x74
 8009f80:	9302      	str	r3, [sp, #8]
 8009f82:	2210      	movs	r2, #16
 8009f84:	9601      	str	r6, [sp, #4]
 8009f86:	4620      	mov	r0, r4
 8009f88:	2103      	movs	r1, #3
 8009f8a:	4643      	mov	r3, r8
 8009f8c:	f7fa fd3d 	bl	8004a0a <optiga_crypt_ecc_generate_keypair>
                                                          (uint8_t)OPTIGA_KEY_USAGE_SIGN,
                                                          FALSE,
                                                          &optiga_key_id,
                                                          public_key,
                                                          &public_key_length);
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009f90:	4602      	mov	r2, r0
 8009f92:	2800      	cmp	r0, #0
 8009f94:	f040 80a9 	bne.w	800a0ea <example_optiga_util_hibernate_restore+0x212>
 8009f98:	883b      	ldrh	r3, [r7, #0]
 8009f9a:	4a69      	ldr	r2, [pc, #420]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d0fa      	beq.n	8009f98 <example_optiga_util_hibernate_restore+0xc0>
 8009fa2:	8813      	ldrh	r3, [r2, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f040 8093 	bne.w	800a0d2 <example_optiga_util_hibernate_restore+0x1fa>
         * 4. To perform the hibernate, Security Event Counter(SEC) must be 0.
         *    Read SEC data object (0xE0C5) and wait until SEC = 0
         */
        do
        {
            optiga_lib_status = OPTIGA_LIB_BUSY;
 8009fac:	2301      	movs	r3, #1
 8009fae:	803b      	strh	r3, [r7, #0]
            return_status = optiga_util_read_data(me_util,
 8009fb0:	f10d 0316 	add.w	r3, sp, #22
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f24e 01c5 	movw	r1, #57541	; 0xe0c5
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f10d 0313 	add.w	r3, sp, #19
 8009fc2:	f7fa faaa 	bl	800451a <optiga_util_read_data>
                                                  0xE0C5,
                                                  0x0000,
                                                  &security_event_counter,
                                                  &bytes_to_read);

            WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009fc6:	b988      	cbnz	r0, 8009fec <example_optiga_util_hibernate_restore+0x114>
 8009fc8:	883b      	ldrh	r3, [r7, #0]
 8009fca:	4a5d      	ldr	r2, [pc, #372]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d0fa      	beq.n	8009fc8 <example_optiga_util_hibernate_restore+0xf0>
 8009fd2:	8813      	ldrh	r3, [r2, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	b10b      	cbz	r3, 8009fdc <example_optiga_util_hibernate_restore+0x104>
 8009fd8:	8813      	ldrh	r3, [r2, #0]
 8009fda:	e007      	b.n	8009fec <example_optiga_util_hibernate_restore+0x114>
            pal_os_timer_delay_in_milliseconds(1000);
 8009fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fe0:	f7fa f98c 	bl	80042fc <pal_os_timer_delay_in_milliseconds>
        } while (0 != security_event_counter);
 8009fe4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1df      	bne.n	8009fac <example_optiga_util_hibernate_restore+0xd4>

        /**
         * 5. Hibernate the application on OPTIGA
         *    using optiga_util_close_application with perform_hibernate parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009fec:	2101      	movs	r1, #1
        return_status = optiga_util_close_application(me_util, 1);
 8009fee:	4628      	mov	r0, r5

        /**
         * 5. Hibernate the application on OPTIGA
         *    using optiga_util_close_application with perform_hibernate parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8009ff0:	8039      	strh	r1, [r7, #0]
        return_status = optiga_util_close_application(me_util, 1);
 8009ff2:	f7fa fa60 	bl	80044b6 <optiga_util_close_application>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d176      	bne.n	800a0ea <example_optiga_util_hibernate_restore+0x212>
 8009ffc:	883a      	ldrh	r2, [r7, #0]
 8009ffe:	4b50      	ldr	r3, [pc, #320]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
 800a000:	b292      	uxth	r2, r2
 800a002:	2a01      	cmp	r2, #1
 800a004:	d0fa      	beq.n	8009ffc <example_optiga_util_hibernate_restore+0x124>
 800a006:	881a      	ldrh	r2, [r3, #0]
 800a008:	b292      	uxth	r2, r2
 800a00a:	2a00      	cmp	r2, #0
 800a00c:	d150      	bne.n	800a0b0 <example_optiga_util_hibernate_restore+0x1d8>

        /**
         * 6. Restore the application on OPTIGA
         *    using optiga_util_open_application with perform_restore parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a00e:	2101      	movs	r1, #1
        return_status = optiga_util_open_application(me_util, 1);
 800a010:	4628      	mov	r0, r5

        /**
         * 6. Restore the application on OPTIGA
         *    using optiga_util_open_application with perform_restore parameter as true
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a012:	8019      	strh	r1, [r3, #0]
        return_status = optiga_util_open_application(me_util, 1);
 800a014:	f7fa fa1d 	bl	8004452 <optiga_util_open_application>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a018:	4602      	mov	r2, r0
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d165      	bne.n	800a0ea <example_optiga_util_hibernate_restore+0x212>
 800a01e:	883a      	ldrh	r2, [r7, #0]
 800a020:	4b47      	ldr	r3, [pc, #284]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
 800a022:	b292      	uxth	r2, r2
 800a024:	2a01      	cmp	r2, #1
 800a026:	d0fa      	beq.n	800a01e <example_optiga_util_hibernate_restore+0x146>
 800a028:	f8b3 8000 	ldrh.w	r8, [r3]
 800a02c:	fa1f f888 	uxth.w	r8, r8
 800a030:	f1b8 0f00 	cmp.w	r8, #0
 800a034:	d13c      	bne.n	800a0b0 <example_optiga_util_hibernate_restore+0x1d8>

        /**
         * 7. Sign the digest using the session key from Step 3
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a036:	2101      	movs	r1, #1
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
 800a038:	4620      	mov	r0, r4
 800a03a:	2202      	movs	r2, #2
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

        /**
         * 7. Sign the digest using the session key from Step 3
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a03c:	8019      	strh	r1, [r3, #0]
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
        return_status = optiga_crypt_ecdsa_sign(me_crypt,
 800a03e:	f10d 0924 	add.w	r9, sp, #36	; 0x24

        /**
         * 7. Sign the digest using the session key from Step 3
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt, OPTIGA_COMMS_RESPONSE_PROTECTION);
 800a042:	f7fa fbff 	bl	8004844 <optiga_crypt_set_comms_params>
        return_status = optiga_crypt_ecdsa_sign(me_crypt,
 800a046:	ab05      	add	r3, sp, #20
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8cd 9000 	str.w	r9, [sp]
 800a050:	4620      	mov	r0, r4
 800a052:	493c      	ldr	r1, [pc, #240]	; (800a144 <example_optiga_util_hibernate_restore+0x26c>)
 800a054:	4643      	mov	r3, r8
 800a056:	f7fa fd20 	bl	8004a9a <optiga_crypt_ecdsa_sign>
                                                sizeof(digest),
                                                OPTIGA_KEY_ID_SESSION_BASED,
                                                signature,
                                                &signature_length);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a05a:	4602      	mov	r2, r0
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d144      	bne.n	800a0ea <example_optiga_util_hibernate_restore+0x212>
 800a060:	883a      	ldrh	r2, [r7, #0]
 800a062:	4b37      	ldr	r3, [pc, #220]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
 800a064:	b292      	uxth	r2, r2
 800a066:	2a01      	cmp	r2, #1
 800a068:	d0fa      	beq.n	800a060 <example_optiga_util_hibernate_restore+0x188>
 800a06a:	881a      	ldrh	r2, [r3, #0]
 800a06c:	b292      	uxth	r2, r2
 800a06e:	b9fa      	cbnz	r2, 800a0b0 <example_optiga_util_hibernate_restore+0x1d8>

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a070:	2201      	movs	r2, #1
 800a072:	801a      	strh	r2, [r3, #0]
        public_key_details.public_key = public_key;
        public_key_details.length = public_key_length;
 800a074:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800a078:	f8ad 3020 	strh.w	r3, [sp, #32]
        public_key_details.key_type = (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256;
 800a07c:	2303      	movs	r3, #3
 800a07e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        return_status = optiga_crypt_ecdsa_verify (me_crypt,
 800a082:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	ab07      	add	r3, sp, #28
 800a08a:	9201      	str	r2, [sp, #4]
 800a08c:	9302      	str	r3, [sp, #8]
 800a08e:	2220      	movs	r2, #32
 800a090:	4620      	mov	r0, r4
 800a092:	492c      	ldr	r1, [pc, #176]	; (800a144 <example_optiga_util_hibernate_restore+0x26c>)

        /**
         * 8. Verify ECDSA signature using public key from step 2
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        public_key_details.public_key = public_key;
 800a094:	9607      	str	r6, [sp, #28]
        public_key_details.length = public_key_length;
        public_key_details.key_type = (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256;
        return_status = optiga_crypt_ecdsa_verify (me_crypt,
 800a096:	464b      	mov	r3, r9
 800a098:	f7fa fd41 	bl	8004b1e <optiga_crypt_ecdsa_verify>
                                                   signature,
                                                   signature_length,
                                                   OPTIGA_CRYPT_HOST_DATA,
                                                   &public_key_details);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a09c:	4602      	mov	r2, r0
 800a09e:	bb20      	cbnz	r0, 800a0ea <example_optiga_util_hibernate_restore+0x212>
 800a0a0:	883a      	ldrh	r2, [r7, #0]
 800a0a2:	4b27      	ldr	r3, [pc, #156]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
 800a0a4:	b292      	uxth	r2, r2
 800a0a6:	2a01      	cmp	r2, #1
 800a0a8:	d0fa      	beq.n	800a0a0 <example_optiga_util_hibernate_restore+0x1c8>
 800a0aa:	8819      	ldrh	r1, [r3, #0]
 800a0ac:	b289      	uxth	r1, r1
 800a0ae:	b109      	cbz	r1, 800a0b4 <example_optiga_util_hibernate_restore+0x1dc>
 800a0b0:	881a      	ldrh	r2, [r3, #0]
 800a0b2:	e00f      	b.n	800a0d4 <example_optiga_util_hibernate_restore+0x1fc>

        /**
         * 9. Close the application on OPTIGA without hibernating
         *    using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a0b4:	2201      	movs	r2, #1
        return_status = optiga_util_close_application(me_util, 0);
 800a0b6:	4628      	mov	r0, r5

        /**
         * 9. Close the application on OPTIGA without hibernating
         *    using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a0b8:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_close_application(me_util, 0);
 800a0ba:	f7fa f9fc 	bl	80044b6 <optiga_util_close_application>
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a0be:	4602      	mov	r2, r0
 800a0c0:	b998      	cbnz	r0, 800a0ea <example_optiga_util_hibernate_restore+0x212>
 800a0c2:	883b      	ldrh	r3, [r7, #0]
 800a0c4:	4a1e      	ldr	r2, [pc, #120]	; (800a140 <example_optiga_util_hibernate_restore+0x268>)
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d0fa      	beq.n	800a0c2 <example_optiga_util_hibernate_restore+0x1ea>
 800a0cc:	8813      	ldrh	r3, [r2, #0]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	b11b      	cbz	r3, 800a0da <example_optiga_util_hibernate_restore+0x202>
 800a0d2:	8812      	ldrh	r2, [r2, #0]
 800a0d4:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;
        OPTIGA_EXAMPLE_LOG_MESSAGE("Hibernate feature demonstration completed...\n");
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a0d6:	b172      	cbz	r2, 800a0f6 <example_optiga_util_hibernate_restore+0x21e>
 800a0d8:	e007      	b.n	800a0ea <example_optiga_util_hibernate_restore+0x212>
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_close_application(me_util, 0);
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;
        OPTIGA_EXAMPLE_LOG_MESSAGE("Hibernate feature demonstration completed...\n");
 800a0da:	481b      	ldr	r0, [pc, #108]	; (800a148 <example_optiga_util_hibernate_restore+0x270>)
 800a0dc:	4914      	ldr	r1, [pc, #80]	; (800a130 <example_optiga_util_hibernate_restore+0x258>)
 800a0de:	4a15      	ldr	r2, [pc, #84]	; (800a134 <example_optiga_util_hibernate_restore+0x25c>)
 800a0e0:	f7fc fb48 	bl	8006774 <optiga_lib_print_message>
 800a0e4:	e007      	b.n	800a0f6 <example_optiga_util_hibernate_restore+0x21e>
    //To store the signature generated
    uint8_t signature [80];
    uint16_t signature_length = sizeof(signature);
    uint16_t bytes_to_read = 1;
    optiga_key_id_t optiga_key_id;
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 800a0e6:	2201      	movs	r2, #1
 *
 */
void example_optiga_util_hibernate_restore(void)
{
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;
 800a0e8:	2400      	movs	r4, #0
        return_status = optiga_util_close_application(me_util, 0);
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;
        OPTIGA_EXAMPLE_LOG_MESSAGE("Hibernate feature demonstration completed...\n");
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a0ea:	4811      	ldr	r0, [pc, #68]	; (800a130 <example_optiga_util_hibernate_restore+0x258>)
 800a0ec:	4917      	ldr	r1, [pc, #92]	; (800a14c <example_optiga_util_hibernate_restore+0x274>)
 800a0ee:	f7fc fb69 	bl	80067c4 <optiga_lib_print_status>

    if (me_util)
 800a0f2:	b175      	cbz	r5, 800a112 <example_optiga_util_hibernate_restore+0x23a>
 800a0f4:	e004      	b.n	800a100 <example_optiga_util_hibernate_restore+0x228>
        return_status = optiga_util_close_application(me_util, 0);
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;
        OPTIGA_EXAMPLE_LOG_MESSAGE("Hibernate feature demonstration completed...\n");
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a0f6:	480e      	ldr	r0, [pc, #56]	; (800a130 <example_optiga_util_hibernate_restore+0x258>)
 800a0f8:	490e      	ldr	r1, [pc, #56]	; (800a134 <example_optiga_util_hibernate_restore+0x25c>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f7fc fb62 	bl	80067c4 <optiga_lib_print_status>

    if (me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800a100:	4628      	mov	r0, r5
 800a102:	f7fa f991 	bl	8004428 <optiga_util_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 800a106:	4602      	mov	r2, r0
 800a108:	b118      	cbz	r0, 800a112 <example_optiga_util_hibernate_restore+0x23a>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a10a:	4809      	ldr	r0, [pc, #36]	; (800a130 <example_optiga_util_hibernate_restore+0x258>)
 800a10c:	490f      	ldr	r1, [pc, #60]	; (800a14c <example_optiga_util_hibernate_restore+0x274>)
 800a10e:	f7fc fb59 	bl	80067c4 <optiga_lib_print_status>
        }
    }

    if (me_crypt)
 800a112:	b144      	cbz	r4, 800a126 <example_optiga_util_hibernate_restore+0x24e>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me_crypt);
 800a114:	4620      	mov	r0, r4
 800a116:	f7fa fbc9 	bl	80048ac <optiga_crypt_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 800a11a:	4602      	mov	r2, r0
 800a11c:	b118      	cbz	r0, 800a126 <example_optiga_util_hibernate_restore+0x24e>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a11e:	4804      	ldr	r0, [pc, #16]	; (800a130 <example_optiga_util_hibernate_restore+0x258>)
 800a120:	490a      	ldr	r1, [pc, #40]	; (800a14c <example_optiga_util_hibernate_restore+0x274>)
 800a122:	f7fc fb4f 	bl	80067c4 <optiga_lib_print_status>
        }
    }
}
 800a126:	b037      	add	sp, #220	; 0xdc
 800a128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a12c:	0800c87f 	.word	0x0800c87f
 800a130:	0800c6a0 	.word	0x0800c6a0
 800a134:	0800c378 	.word	0x0800c378
 800a138:	0800c8d7 	.word	0x0800c8d7
 800a13c:	08009ecd 	.word	0x08009ecd
 800a140:	1fff017e 	.word	0x1fff017e
 800a144:	0800c85f 	.word	0x0800c85f
 800a148:	0800c8a9 	.word	0x0800c8a9
 800a14c:	0800c6b5 	.word	0x0800c6b5

0800a150 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800a150:	4b01      	ldr	r3, [pc, #4]	; (800a158 <optiga_util_callback+0x8>)
 800a152:	8019      	strh	r1, [r3, #0]
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	1fff0180 	.word	0x1fff0180

0800a15c <write_metadata>:

/**
 * Local functions prototype
 */
static optiga_lib_status_t write_metadata(optiga_util_t * me, uint16_t oid, uint8_t * metadata, uint8_t metadata_length)
{
 800a15c:	b538      	push	{r3, r4, r5, lr}
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;

    do
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a15e:	4c08      	ldr	r4, [pc, #32]	; (800a180 <write_metadata+0x24>)
 800a160:	2501      	movs	r5, #1
 800a162:	8025      	strh	r5, [r4, #0]
        return_status = optiga_util_write_metadata(me,
 800a164:	f7fa fa69 	bl	800463a <optiga_util_write_metadata>
                                                   oid,
                                                   metadata,
                                                   metadata_length);
        if (OPTIGA_LIB_SUCCESS != return_status)
 800a168:	b948      	cbnz	r0, 800a17e <write_metadata+0x22>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
 800a16a:	8823      	ldrh	r3, [r4, #0]
 800a16c:	4a04      	ldr	r2, [pc, #16]	; (800a180 <write_metadata+0x24>)
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2b01      	cmp	r3, #1
 800a172:	d0fa      	beq.n	800a16a <write_metadata+0xe>
        {
            //Wait until the optiga_util_write_metadata operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
 800a174:	8813      	ldrh	r3, [r2, #0]
 800a176:	b29b      	uxth	r3, r3
 800a178:	b10b      	cbz	r3, 800a17e <write_metadata+0x22>
        {
            //writing metadata to a data object failed.
            return_status = optiga_lib_status;
 800a17a:	8810      	ldrh	r0, [r2, #0]
 800a17c:	b280      	uxth	r0, r0
            break;
        }
    } while (FALSE);

    return(return_status);
}
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	1fff0180 	.word	0x1fff0180

0800a184 <example_optiga_util_protected_update>:
    } while (FALSE);
    return(return_status);
}

void example_optiga_util_protected_update(void)
{
 800a184:	b573      	push	{r0, r1, r4, r5, r6, lr}
    optiga_lib_status_t return_status = OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;
    uint16_t trust_anchor_oid = 0xE0E3;
    uint16_t data_config = 0;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a186:	4a4f      	ldr	r2, [pc, #316]	; (800a2c4 <example_optiga_util_protected_update+0x140>)
 800a188:	484f      	ldr	r0, [pc, #316]	; (800a2c8 <example_optiga_util_protected_update+0x144>)
 800a18a:	4950      	ldr	r1, [pc, #320]	; (800a2cc <example_optiga_util_protected_update+0x148>)
 800a18c:	f7fc faf2 	bl	8006774 <optiga_lib_print_message>
    {
        /**
         *  Create OPTIGA util Instance
         *
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
 800a190:	2000      	movs	r0, #0
 800a192:	494f      	ldr	r1, [pc, #316]	; (800a2d0 <example_optiga_util_protected_update+0x14c>)
 800a194:	4602      	mov	r2, r0
 800a196:	f7fa f91f 	bl	80043d8 <optiga_util_create>
        if (NULL == me)
 800a19a:	4605      	mov	r5, r0
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d049      	beq.n	800a234 <example_optiga_util_protected_update+0xb0>
         * Precondition :
         * Update Metadata for 0xE0E3 :
         * Execute access condition = Always
         * Data object type  =  Trust Anchor
         */
        return_status = write_metadata(me, trust_anchor_oid, trust_anchor_metadata, sizeof(trust_anchor_metadata));
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	f24e 01e3 	movw	r1, #57571	; 0xe0e3
 800a1a6:	4a4b      	ldr	r2, [pc, #300]	; (800a2d4 <example_optiga_util_protected_update+0x150>)
 800a1a8:	f7ff ffd8 	bl	800a15c <write_metadata>
        if (OPTIGA_LIB_SUCCESS != return_status)
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d12e      	bne.n	800a210 <example_optiga_util_protected_update+0x8c>
        {
            break;
        }
        
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a1b2:	4c49      	ldr	r4, [pc, #292]	; (800a2d8 <example_optiga_util_protected_update+0x154>)
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	8022      	strh	r2, [r4, #0]
        return_status = optiga_util_write_data(me,
 800a1b8:	4a48      	ldr	r2, [pc, #288]	; (800a2dc <example_optiga_util_protected_update+0x158>)
 800a1ba:	9200      	str	r2, [sp, #0]
 800a1bc:	f44f 7217 	mov.w	r2, #604	; 0x25c
 800a1c0:	9201      	str	r2, [sp, #4]
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f24e 01e3 	movw	r1, #57571	; 0xe0e3
 800a1c8:	2240      	movs	r2, #64	; 0x40
 800a1ca:	f7fa fa28 	bl	800461e <optiga_util_write_data>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               trust_anchor,
                                               sizeof(trust_anchor));

        if (OPTIGA_LIB_SUCCESS != return_status)
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	b9f0      	cbnz	r0, 800a210 <example_optiga_util_protected_update+0x8c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
 800a1d2:	8823      	ldrh	r3, [r4, #0]
 800a1d4:	4a40      	ldr	r2, [pc, #256]	; (800a2d8 <example_optiga_util_protected_update+0x154>)
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d0fa      	beq.n	800a1d2 <example_optiga_util_protected_update+0x4e>
        {
            //Wait until the optiga_util_write_data operation is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
 800a1dc:	8813      	ldrh	r3, [r2, #0]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	b113      	cbz	r3, 800a1e8 <example_optiga_util_protected_update+0x64>
        {
            //writing data to a data object failed.
            return_status = optiga_lib_status;
 800a1e2:	8813      	ldrh	r3, [r2, #0]
 800a1e4:	b29b      	uxth	r3, r3
        /**
        *  Precondition 1 :
        *  Update the metadata and trust anchor in OID 0xE0E3
        */
        return_status = write_trust_anchor(me, trust_anchor_oid);
        if (OPTIGA_LIB_SUCCESS != return_status)
 800a1e6:	b99b      	cbnz	r3, 800a210 <example_optiga_util_protected_update+0x8c>
        {
            /**
            *  Precondition 3 :
            *  Update the metadata of target OID
            */
            return_status = write_metadata(me,
 800a1e8:	2307      	movs	r3, #7
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f24e 01e1 	movw	r1, #57569	; 0xe0e1
 800a1f0:	4a3b      	ldr	r2, [pc, #236]	; (800a2e0 <example_optiga_util_protected_update+0x15c>)
 800a1f2:	f7ff ffb3 	bl	800a15c <write_metadata>
                                       optiga_protected_update_data_set[data_config].target_oid,
                                       (uint8_t * )optiga_protected_update_data_set[data_config].target_oid_metadata,
                                       (uint8_t)optiga_protected_update_data_set[data_config].target_oid_metadata_length);
            if (OPTIGA_LIB_SUCCESS != return_status)
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	b950      	cbnz	r0, 800a210 <example_optiga_util_protected_update+0x8c>
            /**
            *   Send the manifest using optiga_util_protected_update_start
            */
            
            optiga_lib_status = OPTIGA_LIB_BUSY;
            return_status = optiga_util_protected_update_start(me,
 800a1fa:	4e3a      	ldr	r6, [pc, #232]	; (800a2e4 <example_optiga_util_protected_update+0x160>)

            /**
            *   Send the manifest using optiga_util_protected_update_start
            */
            
            optiga_lib_status = OPTIGA_LIB_BUSY;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	8023      	strh	r3, [r4, #0]
            return_status = optiga_util_protected_update_start(me,
 800a200:	4628      	mov	r0, r5
 800a202:	8933      	ldrh	r3, [r6, #8]
 800a204:	7831      	ldrb	r1, [r6, #0]
 800a206:	6872      	ldr	r2, [r6, #4]
 800a208:	f7fa fa53 	bl	80046b2 <optiga_util_protected_update_start>
                                                               optiga_protected_update_data_set[data_config].data_config->manifest_version,
                                                               optiga_protected_update_data_set[data_config].data_config->manifest_data,
                                                               optiga_protected_update_data_set[data_config].data_config->manifest_length);

            WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a20c:	4603      	mov	r3, r0
 800a20e:	b128      	cbz	r0, 800a21c <example_optiga_util_protected_update+0x98>
                break;
            }
            
        }
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a210:	482e      	ldr	r0, [pc, #184]	; (800a2cc <example_optiga_util_protected_update+0x148>)
 800a212:	4935      	ldr	r1, [pc, #212]	; (800a2e8 <example_optiga_util_protected_update+0x164>)
 800a214:	461a      	mov	r2, r3
 800a216:	f7fc fad5 	bl	80067c4 <optiga_lib_print_status>
 800a21a:	e012      	b.n	800a242 <example_optiga_util_protected_update+0xbe>
            return_status = optiga_util_protected_update_start(me,
                                                               optiga_protected_update_data_set[data_config].data_config->manifest_version,
                                                               optiga_protected_update_data_set[data_config].data_config->manifest_data,
                                                               optiga_protected_update_data_set[data_config].data_config->manifest_length);

            WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a21c:	8822      	ldrh	r2, [r4, #0]
 800a21e:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <example_optiga_util_protected_update+0x154>)
 800a220:	b292      	uxth	r2, r2
 800a222:	2a01      	cmp	r2, #1
 800a224:	d0fa      	beq.n	800a21c <example_optiga_util_protected_update+0x98>
 800a226:	881a      	ldrh	r2, [r3, #0]
 800a228:	b292      	uxth	r2, r2
 800a22a:	b1ba      	cbz	r2, 800a25c <example_optiga_util_protected_update+0xd8>
 800a22c:	881b      	ldrh	r3, [r3, #0]
            optiga_lib_status = OPTIGA_LIB_BUSY;
            return_status = optiga_util_protected_update_final(me,
                                                               optiga_protected_update_data_set[data_config].data_config->final_fragment_data,
                                                               optiga_protected_update_data_set[data_config].data_config->final_fragment_length);

            WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a22e:	b29b      	uxth	r3, r3
                break;
            }
            
        }
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1ed      	bne.n	800a210 <example_optiga_util_protected_update+0x8c>
 800a234:	4825      	ldr	r0, [pc, #148]	; (800a2cc <example_optiga_util_protected_update+0x148>)
 800a236:	4923      	ldr	r1, [pc, #140]	; (800a2c4 <example_optiga_util_protected_update+0x140>)
 800a238:	2200      	movs	r2, #0
 800a23a:	f7fc fac3 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
 800a23e:	2d00      	cmp	r5, #0
 800a240:	d03d      	beq.n	800a2be <example_optiga_util_protected_update+0x13a>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
 800a242:	4628      	mov	r0, r5
 800a244:	f7fa f8f0 	bl	8004428 <optiga_util_destroy>
        if (OPTIGA_LIB_SUCCESS != return_status)
 800a248:	4602      	mov	r2, r0
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d037      	beq.n	800a2be <example_optiga_util_protected_update+0x13a>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a24e:	481f      	ldr	r0, [pc, #124]	; (800a2cc <example_optiga_util_protected_update+0x148>)
 800a250:	4925      	ldr	r1, [pc, #148]	; (800a2e8 <example_optiga_util_protected_update+0x164>)
        }
    }
}
 800a252:	b002      	add	sp, #8
 800a254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
        if (OPTIGA_LIB_SUCCESS != return_status)
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a258:	f7fc bab4 	b.w	80067c4 <optiga_lib_print_status>
                                                               optiga_protected_update_data_set[data_config].data_config->manifest_data,
                                                               optiga_protected_update_data_set[data_config].data_config->manifest_length);

            WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

            if (NULL != optiga_protected_update_data_set[data_config].data_config->continue_fragment_data)
 800a25c:	68f1      	ldr	r1, [r6, #12]
 800a25e:	b189      	cbz	r1, 800a284 <example_optiga_util_protected_update+0x100>
            {
                /**
                *   Send the first fragment using optiga_util_protected_update_continue
                */
                optiga_lib_status = OPTIGA_LIB_BUSY;
 800a260:	2201      	movs	r2, #1
 800a262:	801a      	strh	r2, [r3, #0]
                return_status = optiga_util_protected_update_continue(me,
 800a264:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <example_optiga_util_protected_update+0x160>)
 800a266:	4628      	mov	r0, r5
 800a268:	8a1a      	ldrh	r2, [r3, #16]
 800a26a:	f7fa fa5b 	bl	8004724 <optiga_util_protected_update_continue>
                                                                      optiga_protected_update_data_set[data_config].data_config->continue_fragment_data,
                                                                      optiga_protected_update_data_set[data_config].data_config->continue_fragment_length);

                WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a26e:	4603      	mov	r3, r0
 800a270:	2800      	cmp	r0, #0
 800a272:	d1cd      	bne.n	800a210 <example_optiga_util_protected_update+0x8c>
 800a274:	8823      	ldrh	r3, [r4, #0]
 800a276:	4a18      	ldr	r2, [pc, #96]	; (800a2d8 <example_optiga_util_protected_update+0x154>)
 800a278:	b29b      	uxth	r3, r3
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d0fa      	beq.n	800a274 <example_optiga_util_protected_update+0xf0>
 800a27e:	8813      	ldrh	r3, [r2, #0]
 800a280:	b29b      	uxth	r3, r3
 800a282:	b98b      	cbnz	r3, 800a2a8 <example_optiga_util_protected_update+0x124>
            }

            /**
            *   Send the last fragment using optiga_util_protected_update_final
            */
            optiga_lib_status = OPTIGA_LIB_BUSY;
 800a284:	2301      	movs	r3, #1
            return_status = optiga_util_protected_update_final(me,
 800a286:	4628      	mov	r0, r5
 800a288:	6971      	ldr	r1, [r6, #20]
 800a28a:	8b32      	ldrh	r2, [r6, #24]
            }

            /**
            *   Send the last fragment using optiga_util_protected_update_final
            */
            optiga_lib_status = OPTIGA_LIB_BUSY;
 800a28c:	8023      	strh	r3, [r4, #0]
            return_status = optiga_util_protected_update_final(me,
 800a28e:	f7fa fa66 	bl	800475e <optiga_util_protected_update_final>
                                                               optiga_protected_update_data_set[data_config].data_config->final_fragment_data,
                                                               optiga_protected_update_data_set[data_config].data_config->final_fragment_length);

            WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a292:	4603      	mov	r3, r0
 800a294:	2800      	cmp	r0, #0
 800a296:	d1bb      	bne.n	800a210 <example_optiga_util_protected_update+0x8c>
 800a298:	8823      	ldrh	r3, [r4, #0]
 800a29a:	4a0f      	ldr	r2, [pc, #60]	; (800a2d8 <example_optiga_util_protected_update+0x154>)
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d0fa      	beq.n	800a298 <example_optiga_util_protected_update+0x114>
 800a2a2:	8813      	ldrh	r3, [r2, #0]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	b10b      	cbz	r3, 800a2ac <example_optiga_util_protected_update+0x128>
 800a2a8:	8813      	ldrh	r3, [r2, #0]
 800a2aa:	e7c0      	b.n	800a22e <example_optiga_util_protected_update+0xaa>
            /**
            *  Postcondition  :
            *  Update the metadata of target OID for version tag to be 00
            */
            return_status = write_metadata(me,
 800a2ac:	2306      	movs	r3, #6
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f24e 01e1 	movw	r1, #57569	; 0xe0e1
 800a2b4:	4a0d      	ldr	r2, [pc, #52]	; (800a2ec <example_optiga_util_protected_update+0x168>)
 800a2b6:	f7ff ff51 	bl	800a15c <write_metadata>
                                           optiga_protected_update_data_set[data_config].target_oid,
                                           (uint8_t * )reset_version_tag_metadata,
                                           (uint8_t)sizeof(reset_version_tag_metadata));
            if (OPTIGA_LIB_SUCCESS != return_status)
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	e7b8      	b.n	800a230 <example_optiga_util_protected_update+0xac>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
}
 800a2be:	b002      	add	sp, #8
 800a2c0:	bd70      	pop	{r4, r5, r6, pc}
 800a2c2:	bf00      	nop
 800a2c4:	0800c378 	.word	0x0800c378
 800a2c8:	0800c92f 	.word	0x0800c92f
 800a2cc:	0800c6a0 	.word	0x0800c6a0
 800a2d0:	0800a151 	.word	0x0800a151
 800a2d4:	1ffed678 	.word	0x1ffed678
 800a2d8:	1fff0180 	.word	0x1fff0180
 800a2dc:	0800cc66 	.word	0x0800cc66
 800a2e0:	0800cc5f 	.word	0x0800cc5f
 800a2e4:	1ffed680 	.word	0x1ffed680
 800a2e8:	0800c6b5 	.word	0x0800c6b5
 800a2ec:	0800cec2 	.word	0x0800cec2

0800a2f0 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800a2f0:	4b01      	ldr	r3, [pc, #4]	; (800a2f8 <optiga_util_callback+0x8>)
 800a2f2:	8019      	strh	r1, [r3, #0]
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	1fff0182 	.word	0x1fff0182

0800a2fc <example_optiga_util_read_data>:
 *
 * Example for #optiga_util_read_data and #optiga_util_read_metadata
 *
 */
void example_optiga_util_read_data(void)
{
 800a2fc:	b570      	push	{r4, r5, r6, lr}
    uint16_t offset, bytes_to_read;
    uint16_t optiga_oid;
    uint8_t read_data_buffer[1024];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a2fe:	4833      	ldr	r0, [pc, #204]	; (800a3cc <example_optiga_util_read_data+0xd0>)
 800a300:	4933      	ldr	r1, [pc, #204]	; (800a3d0 <example_optiga_util_read_data+0xd4>)
 800a302:	4a34      	ldr	r2, [pc, #208]	; (800a3d4 <example_optiga_util_read_data+0xd8>)
 *
 * Example for #optiga_util_read_data and #optiga_util_read_metadata
 *
 */
void example_optiga_util_read_data(void)
{
 800a304:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
    uint16_t offset, bytes_to_read;
    uint16_t optiga_oid;
    uint8_t read_data_buffer[1024];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a308:	f7fc fa34 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
 800a30c:	2000      	movs	r0, #0
 800a30e:	4932      	ldr	r1, [pc, #200]	; (800a3d8 <example_optiga_util_read_data+0xdc>)
 800a310:	4602      	mov	r2, r0
 800a312:	f7fa f861 	bl	80043d8 <optiga_util_create>
        if (NULL == me)
 800a316:	4604      	mov	r4, r0
 800a318:	2800      	cmp	r0, #0
 800a31a:	d052      	beq.n	800a3c2 <example_optiga_util_read_data+0xc6>
        }

        //Read device end entity certificate from OPTIGA
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);
 800a31c:	f10d 060e 	add.w	r6, sp, #14
 800a320:	f44f 6380 	mov.w	r3, #1024	; 0x400

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
 800a324:	2102      	movs	r1, #2
 800a326:	2201      	movs	r2, #1
        }

        //Read device end entity certificate from OPTIGA
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);
 800a328:	8033      	strh	r3, [r6, #0]

        /**
         * 2. Read data from a data object (e.g. certificate data object)
         *    using optiga_util_read_data.
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a32a:	4d2c      	ldr	r5, [pc, #176]	; (800a3dc <example_optiga_util_read_data+0xe0>)
        optiga_oid = 0xE0E0;
        offset = 0x00;
        bytes_to_read = sizeof(read_data_buffer);

        // OPTIGA Comms Shielded connection settings to enable the protection
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me, OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
 800a32c:	f7fa f848 	bl	80043c0 <optiga_util_set_comms_params>
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_RESPONSE_PROTECTION);
 800a330:	4620      	mov	r0, r4
 800a332:	2101      	movs	r1, #1
 800a334:	2202      	movs	r2, #2
 800a336:	f7fa f843 	bl	80043c0 <optiga_util_set_comms_params>

        /**
         * 2. Read data from a data object (e.g. certificate data object)
         *    using optiga_util_read_data.
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a33a:	2301      	movs	r3, #1
 800a33c:	802b      	strh	r3, [r5, #0]
        return_status = optiga_util_read_data(me,
 800a33e:	2200      	movs	r2, #0
 800a340:	9600      	str	r6, [sp, #0]
 800a342:	4620      	mov	r0, r4
 800a344:	f24e 01e0 	movw	r1, #57568	; 0xe0e0
 800a348:	ab04      	add	r3, sp, #16
 800a34a:	f7fa f8e6 	bl	800451a <optiga_util_read_data>
                                              optiga_oid,
                                              offset,
                                              read_data_buffer,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a34e:	4602      	mov	r2, r0
 800a350:	bb10      	cbnz	r0, 800a398 <example_optiga_util_read_data+0x9c>
 800a352:	882a      	ldrh	r2, [r5, #0]
 800a354:	4b21      	ldr	r3, [pc, #132]	; (800a3dc <example_optiga_util_read_data+0xe0>)
 800a356:	b292      	uxth	r2, r2
 800a358:	2a01      	cmp	r2, #1
 800a35a:	d0fa      	beq.n	800a352 <example_optiga_util_read_data+0x56>
 800a35c:	881a      	ldrh	r2, [r3, #0]
 800a35e:	b292      	uxth	r2, r2
 800a360:	b10a      	cbz	r2, 800a366 <example_optiga_util_read_data+0x6a>
 800a362:	881a      	ldrh	r2, [r3, #0]
 800a364:	e016      	b.n	800a394 <example_optiga_util_read_data+0x98>
        /**
         * Read metadata of a data object (e.g. certificate data object E0E0)
         * using optiga_util_read_data.
         */
        optiga_oid = 0xE0E0;
        bytes_to_read = sizeof(read_data_buffer);
 800a366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a36a:	8032      	strh	r2, [r6, #0]
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a36c:	2201      	movs	r2, #1
 800a36e:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_read_metadata(me,
 800a370:	4620      	mov	r0, r4
 800a372:	aa04      	add	r2, sp, #16
 800a374:	f24e 01e0 	movw	r1, #57568	; 0xe0e0
 800a378:	4633      	mov	r3, r6
 800a37a:	f7fa f911 	bl	80045a0 <optiga_util_read_metadata>
                                                  optiga_oid,
                                                  read_data_buffer,
                                                  &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a37e:	4602      	mov	r2, r0
 800a380:	b950      	cbnz	r0, 800a398 <example_optiga_util_read_data+0x9c>
 800a382:	882b      	ldrh	r3, [r5, #0]
 800a384:	4a15      	ldr	r2, [pc, #84]	; (800a3dc <example_optiga_util_read_data+0xe0>)
 800a386:	b29b      	uxth	r3, r3
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d0fa      	beq.n	800a382 <example_optiga_util_read_data+0x86>
 800a38c:	8813      	ldrh	r3, [r2, #0]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	b143      	cbz	r3, 800a3a4 <example_optiga_util_read_data+0xa8>
 800a392:	8812      	ldrh	r2, [r2, #0]
 800a394:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a396:	b12a      	cbz	r2, 800a3a4 <example_optiga_util_read_data+0xa8>
 800a398:	480d      	ldr	r0, [pc, #52]	; (800a3d0 <example_optiga_util_read_data+0xd4>)
 800a39a:	4911      	ldr	r1, [pc, #68]	; (800a3e0 <example_optiga_util_read_data+0xe4>)
 800a39c:	f7fc fa12 	bl	80067c4 <optiga_lib_print_status>

    if (me)
 800a3a0:	b92c      	cbnz	r4, 800a3ae <example_optiga_util_read_data+0xb2>
 800a3a2:	e010      	b.n	800a3c6 <example_optiga_util_read_data+0xca>
                                                  &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a3a4:	480a      	ldr	r0, [pc, #40]	; (800a3d0 <example_optiga_util_read_data+0xd4>)
 800a3a6:	490b      	ldr	r1, [pc, #44]	; (800a3d4 <example_optiga_util_read_data+0xd8>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f7fc fa0b 	bl	80067c4 <optiga_lib_print_status>

    if (me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7fa f83a 	bl	8004428 <optiga_util_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	b130      	cbz	r0, 800a3c6 <example_optiga_util_read_data+0xca>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a3b8:	4805      	ldr	r0, [pc, #20]	; (800a3d0 <example_optiga_util_read_data+0xd4>)
 800a3ba:	4909      	ldr	r1, [pc, #36]	; (800a3e0 <example_optiga_util_read_data+0xe4>)
 800a3bc:	f7fc fa02 	bl	80067c4 <optiga_lib_print_status>
 800a3c0:	e001      	b.n	800a3c6 <example_optiga_util_read_data+0xca>
void example_optiga_util_read_data(void)
{
    uint16_t offset, bytes_to_read;
    uint16_t optiga_oid;
    uint8_t read_data_buffer[1024];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	e7e8      	b.n	800a398 <example_optiga_util_read_data+0x9c>
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }

}
 800a3c6:	f50d 6d82 	add.w	sp, sp, #1040	; 0x410
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	0800cec8 	.word	0x0800cec8
 800a3d0:	0800c6a0 	.word	0x0800c6a0
 800a3d4:	0800c378 	.word	0x0800c378
 800a3d8:	0800a2f1 	.word	0x0800a2f1
 800a3dc:	1fff0182 	.word	0x1fff0182
 800a3e0:	0800c6b5 	.word	0x0800c6b5

0800a3e4 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800a3e4:	4b01      	ldr	r3, [pc, #4]	; (800a3ec <optiga_util_callback+0x8>)
 800a3e6:	8019      	strh	r1, [r3, #0]
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	1fff0184 	.word	0x1fff0184

0800a3f0 <example_optiga_util_update_count>:
 *
 * Example for #optiga_util_update_count
 *
 */
void example_optiga_util_update_count(void)
{
 800a3f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint16_t optiga_counter_oid;
    uint8_t offset;

    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a3f2:	4829      	ldr	r0, [pc, #164]	; (800a498 <example_optiga_util_update_count+0xa8>)
 800a3f4:	4929      	ldr	r1, [pc, #164]	; (800a49c <example_optiga_util_update_count+0xac>)
 800a3f6:	4a2a      	ldr	r2, [pc, #168]	; (800a4a0 <example_optiga_util_update_count+0xb0>)
 800a3f8:	f7fc f9bc 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	4602      	mov	r2, r0
 800a400:	4928      	ldr	r1, [pc, #160]	; (800a4a4 <example_optiga_util_update_count+0xb4>)
 800a402:	f7f9 ffe9 	bl	80043d8 <optiga_util_create>
 800a406:	2201      	movs	r2, #1
        if (NULL == me)
 800a408:	4605      	mov	r5, r0
 800a40a:	b360      	cbz	r0, 800a466 <example_optiga_util_update_count+0x76>
         * in order to correctly update the used length of the object.
         */
        optiga_counter_oid = 0xE120;
        offset = 0x00;
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_write_data(me,
 800a40c:	4b26      	ldr	r3, [pc, #152]	; (800a4a8 <example_optiga_util_update_count+0xb8>)
         * Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         * in order to correctly update the used length of the object.
         */
        optiga_counter_oid = 0xE120;
        offset = 0x00;
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a40e:	4c27      	ldr	r4, [pc, #156]	; (800a4ac <example_optiga_util_update_count+0xbc>)
        return_status = optiga_util_write_data(me,
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	2308      	movs	r3, #8
         * Use Erase and Write (OPTIGA_UTIL_ERASE_AND_WRITE) option,
         * in order to correctly update the used length of the object.
         */
        optiga_counter_oid = 0xE120;
        offset = 0x00;
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a414:	8022      	strh	r2, [r4, #0]
        return_status = optiga_util_write_data(me,
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	2240      	movs	r2, #64	; 0x40
 800a41a:	f24e 1120 	movw	r1, #57632	; 0xe120
 800a41e:	2300      	movs	r3, #0
 800a420:	f7fa f8fd 	bl	800461e <optiga_util_write_data>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               initial_counter_object_data,
                                               sizeof(initial_counter_object_data));

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a424:	4602      	mov	r2, r0
 800a426:	b9f0      	cbnz	r0, 800a466 <example_optiga_util_update_count+0x76>
 800a428:	8822      	ldrh	r2, [r4, #0]
 800a42a:	4b20      	ldr	r3, [pc, #128]	; (800a4ac <example_optiga_util_update_count+0xbc>)
 800a42c:	b292      	uxth	r2, r2
 800a42e:	2a01      	cmp	r2, #1
 800a430:	d0fa      	beq.n	800a428 <example_optiga_util_update_count+0x38>
 800a432:	881a      	ldrh	r2, [r3, #0]
 800a434:	b292      	uxth	r2, r2
 800a436:	b10a      	cbz	r2, 800a43c <example_optiga_util_update_count+0x4c>
 800a438:	881a      	ldrh	r2, [r3, #0]
 800a43a:	e012      	b.n	800a462 <example_optiga_util_update_count+0x72>

        // In this example, the counter is update by 5 and the final count would be 15
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a43c:	2201      	movs	r2, #1
 800a43e:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_update_count(me,
 800a440:	4628      	mov	r0, r5
 800a442:	2205      	movs	r2, #5
 800a444:	f24e 1120 	movw	r1, #57632	; 0xe120
 800a448:	f7fa f9a4 	bl	8004794 <optiga_util_update_count>
                                                 optiga_counter_oid,
                                                 0x05);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a44c:	4602      	mov	r2, r0
 800a44e:	b950      	cbnz	r0, 800a466 <example_optiga_util_update_count+0x76>
 800a450:	8823      	ldrh	r3, [r4, #0]
 800a452:	4a16      	ldr	r2, [pc, #88]	; (800a4ac <example_optiga_util_update_count+0xbc>)
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b01      	cmp	r3, #1
 800a458:	d0fa      	beq.n	800a450 <example_optiga_util_update_count+0x60>
 800a45a:	8813      	ldrh	r3, [r2, #0]
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	b143      	cbz	r3, 800a472 <example_optiga_util_update_count+0x82>
 800a460:	8812      	ldrh	r2, [r2, #0]
 800a462:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a464:	b12a      	cbz	r2, 800a472 <example_optiga_util_update_count+0x82>
 800a466:	480d      	ldr	r0, [pc, #52]	; (800a49c <example_optiga_util_update_count+0xac>)
 800a468:	4911      	ldr	r1, [pc, #68]	; (800a4b0 <example_optiga_util_update_count+0xc0>)
 800a46a:	f7fc f9ab 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
 800a46e:	b92d      	cbnz	r5, 800a47c <example_optiga_util_update_count+0x8c>
 800a470:	e010      	b.n	800a494 <example_optiga_util_update_count+0xa4>
                                                 0x05);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;
    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a472:	480a      	ldr	r0, [pc, #40]	; (800a49c <example_optiga_util_update_count+0xac>)
 800a474:	490a      	ldr	r1, [pc, #40]	; (800a4a0 <example_optiga_util_update_count+0xb0>)
 800a476:	2200      	movs	r2, #0
 800a478:	f7fc f9a4 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
 800a47c:	4628      	mov	r0, r5
 800a47e:	f7f9 ffd3 	bl	8004428 <optiga_util_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 800a482:	4602      	mov	r2, r0
 800a484:	b130      	cbz	r0, 800a494 <example_optiga_util_update_count+0xa4>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a486:	4805      	ldr	r0, [pc, #20]	; (800a49c <example_optiga_util_update_count+0xac>)
 800a488:	4909      	ldr	r1, [pc, #36]	; (800a4b0 <example_optiga_util_update_count+0xc0>)
        }
    }
}
 800a48a:	b003      	add	sp, #12
 800a48c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
        if(OPTIGA_LIB_SUCCESS != return_status)
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a490:	f7fc b998 	b.w	80067c4 <optiga_lib_print_status>
        }
    }
}
 800a494:	b003      	add	sp, #12
 800a496:	bd30      	pop	{r4, r5, pc}
 800a498:	0800cee6 	.word	0x0800cee6
 800a49c:	0800c6a0 	.word	0x0800c6a0
 800a4a0:	0800c378 	.word	0x0800c378
 800a4a4:	0800a3e5 	.word	0x0800a3e5
 800a4a8:	0800cf07 	.word	0x0800cf07
 800a4ac:	1fff0184 	.word	0x1fff0184
 800a4b0:	0800c6b5 	.word	0x0800c6b5

0800a4b4 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800a4b4:	4b01      	ldr	r3, [pc, #4]	; (800a4bc <optiga_util_callback+0x8>)
 800a4b6:	8019      	strh	r1, [r3, #0]
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	1fff0186 	.word	0x1fff0186

0800a4c0 <example_optiga_util_write_data>:
 *
 * Example for #optiga_util_write_data and #optiga_util_write_metadata
 *
 */
void example_optiga_util_write_data(void)
{
 800a4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint16_t optiga_oid;
    uint16_t offset;

    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me = NULL;
    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a4c2:	482e      	ldr	r0, [pc, #184]	; (800a57c <example_optiga_util_write_data+0xbc>)
 800a4c4:	492e      	ldr	r1, [pc, #184]	; (800a580 <example_optiga_util_write_data+0xc0>)
 800a4c6:	4a2f      	ldr	r2, [pc, #188]	; (800a584 <example_optiga_util_write_data+0xc4>)
 800a4c8:	f7fc f954 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me = optiga_util_create(0, optiga_util_callback, NULL);
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	492e      	ldr	r1, [pc, #184]	; (800a588 <example_optiga_util_write_data+0xc8>)
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	f7f9 ff81 	bl	80043d8 <optiga_util_create>
        if (NULL == me)
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d04b      	beq.n	800a574 <example_optiga_util_write_data+0xb4>
         * to clear the remaining data in the object
         */
        optiga_oid = 0xE0E8;
        offset = 0x00;

        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 800a4dc:	2101      	movs	r1, #1
 800a4de:	2200      	movs	r2, #0

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a4e0:	4c2a      	ldr	r4, [pc, #168]	; (800a58c <example_optiga_util_write_data+0xcc>)
         * to clear the remaining data in the object
         */
        optiga_oid = 0xE0E8;
        offset = 0x00;

        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 800a4e2:	f7f9 ff6d 	bl	80043c0 <optiga_util_set_comms_params>

        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	8023      	strh	r3, [r4, #0]
        return_status = optiga_util_write_data(me,
 800a4ea:	4b29      	ldr	r3, [pc, #164]	; (800a590 <example_optiga_util_write_data+0xd0>)
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	f240 2382 	movw	r3, #642	; 0x282
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	2240      	movs	r2, #64	; 0x40
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f24e 01e8 	movw	r1, #57576	; 0xe0e8
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f7fa f88e 	bl	800461e <optiga_util_write_data>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               offset,
                                               trust_anchor,
                                               sizeof(trust_anchor));

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a502:	4602      	mov	r2, r0
 800a504:	b9f8      	cbnz	r0, 800a546 <example_optiga_util_write_data+0x86>
 800a506:	8822      	ldrh	r2, [r4, #0]
 800a508:	4b20      	ldr	r3, [pc, #128]	; (800a58c <example_optiga_util_write_data+0xcc>)
 800a50a:	b292      	uxth	r2, r2
 800a50c:	2a01      	cmp	r2, #1
 800a50e:	d0fa      	beq.n	800a506 <example_optiga_util_write_data+0x46>
 800a510:	881a      	ldrh	r2, [r3, #0]
 800a512:	b292      	uxth	r2, r2
 800a514:	b10a      	cbz	r2, 800a51a <example_optiga_util_write_data+0x5a>
 800a516:	881a      	ldrh	r2, [r3, #0]
 800a518:	e013      	b.n	800a542 <example_optiga_util_write_data+0x82>
         * using optiga_util_write_metadata.
         *
         * Sample metadata: write "Read" access condition as LcsO < Operational
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a51a:	2201      	movs	r2, #1
 800a51c:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_write_metadata(me,
 800a51e:	4628      	mov	r0, r5
 800a520:	4a1c      	ldr	r2, [pc, #112]	; (800a594 <example_optiga_util_write_data+0xd4>)
 800a522:	f24e 01e8 	movw	r1, #57576	; 0xe0e8
 800a526:	2307      	movs	r3, #7
 800a528:	f7fa f887 	bl	800463a <optiga_util_write_metadata>
                                                   0xE0E8,
                                                   metadata,
                                                   sizeof(metadata));

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a52c:	4602      	mov	r2, r0
 800a52e:	b950      	cbnz	r0, 800a546 <example_optiga_util_write_data+0x86>
 800a530:	8823      	ldrh	r3, [r4, #0]
 800a532:	4a16      	ldr	r2, [pc, #88]	; (800a58c <example_optiga_util_write_data+0xcc>)
 800a534:	b29b      	uxth	r3, r3
 800a536:	2b01      	cmp	r3, #1
 800a538:	d0fa      	beq.n	800a530 <example_optiga_util_write_data+0x70>
 800a53a:	8813      	ldrh	r3, [r2, #0]
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	b143      	cbz	r3, 800a552 <example_optiga_util_write_data+0x92>
 800a540:	8812      	ldrh	r2, [r2, #0]
 800a542:	b292      	uxth	r2, r2
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a544:	b12a      	cbz	r2, 800a552 <example_optiga_util_write_data+0x92>
 800a546:	480e      	ldr	r0, [pc, #56]	; (800a580 <example_optiga_util_write_data+0xc0>)
 800a548:	4913      	ldr	r1, [pc, #76]	; (800a598 <example_optiga_util_write_data+0xd8>)
 800a54a:	f7fc f93b 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
 800a54e:	b92d      	cbnz	r5, 800a55c <example_optiga_util_write_data+0x9c>
 800a550:	e012      	b.n	800a578 <example_optiga_util_write_data+0xb8>

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;

    } while (FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a552:	480b      	ldr	r0, [pc, #44]	; (800a580 <example_optiga_util_write_data+0xc0>)
 800a554:	490b      	ldr	r1, [pc, #44]	; (800a584 <example_optiga_util_write_data+0xc4>)
 800a556:	2200      	movs	r2, #0
 800a558:	f7fc f934 	bl	80067c4 <optiga_lib_print_status>
    
    if (me)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
 800a55c:	4628      	mov	r0, r5
 800a55e:	f7f9 ff63 	bl	8004428 <optiga_util_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 800a562:	4602      	mov	r2, r0
 800a564:	b140      	cbz	r0, 800a578 <example_optiga_util_write_data+0xb8>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a566:	4806      	ldr	r0, [pc, #24]	; (800a580 <example_optiga_util_write_data+0xc0>)
 800a568:	490b      	ldr	r1, [pc, #44]	; (800a598 <example_optiga_util_write_data+0xd8>)
        }
    }
}
 800a56a:	b003      	add	sp, #12
 800a56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me);
        if(OPTIGA_LIB_SUCCESS != return_status)
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a570:	f7fc b928 	b.w	80067c4 <optiga_lib_print_status>
void example_optiga_util_write_data(void)
{
    uint16_t optiga_oid;
    uint16_t offset;

    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 800a574:	2201      	movs	r2, #1
 800a576:	e7e6      	b.n	800a546 <example_optiga_util_write_data+0x86>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
}
 800a578:	b003      	add	sp, #12
 800a57a:	bd30      	pop	{r4, r5, pc}
 800a57c:	0800cf0f 	.word	0x0800cf0f
 800a580:	0800c6a0 	.word	0x0800c6a0
 800a584:	0800c378 	.word	0x0800c378
 800a588:	0800a4b5 	.word	0x0800a4b5
 800a58c:	1fff0186 	.word	0x1fff0186
 800a590:	0800cf35 	.word	0x0800cf35
 800a594:	0800cf2e 	.word	0x0800cf2e
 800a598:	0800c6b5 	.word	0x0800c6b5

0800a59c <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800a59c:	4b01      	ldr	r3, [pc, #4]	; (800a5a4 <optiga_lib_callback+0x8>)
 800a59e:	8019      	strh	r1, [r3, #0]
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	1fff0188 	.word	0x1fff0188

0800a5a8 <example_pair_host_and_optiga_using_pre_shared_secret>:
 *
 * Preconditions: The optiga_util_open_application must be executed before invoking the below example.
 *
 */
void example_pair_host_and_optiga_using_pre_shared_secret(void)
{
 800a5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a5ac:	4860      	ldr	r0, [pc, #384]	; (800a730 <example_pair_host_and_optiga_using_pre_shared_secret+0x188>)
 800a5ae:	4961      	ldr	r1, [pc, #388]	; (800a734 <example_pair_host_and_optiga_using_pre_shared_secret+0x18c>)
 800a5b0:	4a61      	ldr	r2, [pc, #388]	; (800a738 <example_pair_host_and_optiga_using_pre_shared_secret+0x190>)
 *
 * Preconditions: The optiga_util_open_application must be executed before invoking the below example.
 *
 */
void example_pair_host_and_optiga_using_pre_shared_secret(void)
{
 800a5b2:	b09e      	sub	sp, #120	; 0x78
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a5b4:	f7fc f8de 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util and Crypt Instances
         */
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	4960      	ldr	r1, [pc, #384]	; (800a73c <example_pair_host_and_optiga_using_pre_shared_secret+0x194>)
 800a5bc:	4602      	mov	r2, r0
 800a5be:	f7f9 ff0b 	bl	80043d8 <optiga_util_create>
        if (NULL == me_util)
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	f000 80ad 	beq.w	800a724 <example_pair_host_and_optiga_using_pre_shared_secret+0x17c>
        {
            break;
        }

        me_crypt = optiga_crypt_create(0, optiga_lib_callback, NULL);
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	495b      	ldr	r1, [pc, #364]	; (800a73c <example_pair_host_and_optiga_using_pre_shared_secret+0x194>)
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	f7fa f944 	bl	800485c <optiga_crypt_create>
        if (NULL == me_crypt)
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	f000 80a4 	beq.w	800a724 <example_pair_host_and_optiga_using_pre_shared_secret+0x17c>
        }

        /**
         * 2. Initialize the protection level and protocol version for the instances
         */
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800a5dc:	4620      	mov	r0, r4
 800a5de:	2101      	movs	r1, #1
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f7f9 feed 	bl	80043c0 <optiga_util_set_comms_params>
        OPTIGA_UTIL_SET_COMMS_PROTOCOL_VERSION(me_util,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	2102      	movs	r1, #2
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f7f9 fee8 	bl	80043c0 <optiga_util_set_comms_params>

        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me_crypt,OPTIGA_COMMS_NO_PROTECTION);
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f7fa f925 	bl	8004844 <optiga_crypt_set_comms_params>
        OPTIGA_CRYPT_SET_COMMS_PROTOCOL_VERSION(me_crypt,OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET);
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	2102      	movs	r1, #2
 800a5fe:	2201      	movs	r2, #1
 800a600:	f7fa f920 	bl	8004844 <optiga_crypt_set_comms_params>
        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a604:	4e4e      	ldr	r6, [pc, #312]	; (800a740 <example_pair_host_and_optiga_using_pre_shared_secret+0x198>)

        /**
         * 3. Read Platform Binding Shared secret (0xE140) data object metadata from OPTIGA
         *    using optiga_util_read_metadata.
         */
        bytes_to_read = sizeof(platform_binding_secret_metadata);
 800a606:	232c      	movs	r3, #44	; 0x2c
 800a608:	f8ad 300a 	strh.w	r3, [sp, #10]
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a60c:	2301      	movs	r3, #1
 800a60e:	8033      	strh	r3, [r6, #0]
        return_status = optiga_util_read_metadata(me_util,
 800a610:	aa03      	add	r2, sp, #12
 800a612:	4620      	mov	r0, r4
 800a614:	f24e 1140 	movw	r1, #57664	; 0xe140
 800a618:	f10d 030a 	add.w	r3, sp, #10
 800a61c:	f7f9 ffc0 	bl	80045a0 <optiga_util_read_metadata>
                                                  0xE140,
                                                  platform_binding_secret_metadata,
                                                  &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a620:	4602      	mov	r2, r0
 800a622:	2800      	cmp	r0, #0
 800a624:	d15f      	bne.n	800a6e6 <example_pair_host_and_optiga_using_pre_shared_secret+0x13e>
 800a626:	8832      	ldrh	r2, [r6, #0]
 800a628:	4b45      	ldr	r3, [pc, #276]	; (800a740 <example_pair_host_and_optiga_using_pre_shared_secret+0x198>)
 800a62a:	b292      	uxth	r2, r2
 800a62c:	2a01      	cmp	r2, #1
 800a62e:	d0fa      	beq.n	800a626 <example_pair_host_and_optiga_using_pre_shared_secret+0x7e>
 800a630:	8819      	ldrh	r1, [r3, #0]
 800a632:	b289      	uxth	r1, r1
 800a634:	b9b9      	cbnz	r1, 800a666 <example_pair_host_and_optiga_using_pre_shared_secret+0xbe>

        /**
         * 4. Validate LcsO in the metadata.
         *    Skip the rest of the procedure if LcsO is greater than or equal to operational state(0x07)
         */
        if (platform_binding_secret_metadata[4] >= LCSO_STATE_OPERATIONAL)
 800a636:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a63a:	2a06      	cmp	r2, #6
 800a63c:	d859      	bhi.n	800a6f2 <example_pair_host_and_optiga_using_pre_shared_secret+0x14a>
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generated by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a63e:	2201      	movs	r2, #1
        return_status = optiga_crypt_random(me_crypt,
 800a640:	f10d 0838 	add.w	r8, sp, #56	; 0x38
         *    b. If the host platform doesn't support random generation,
         *       use OPTIGA to generate the maximum size chosen.
         *       else choose the appropriate length of random to be generated by OPTIGA
         *
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a644:	801a      	strh	r2, [r3, #0]
        return_status = optiga_crypt_random(me_crypt,
 800a646:	4628      	mov	r0, r5
 800a648:	4642      	mov	r2, r8
 800a64a:	2340      	movs	r3, #64	; 0x40
 800a64c:	f7fa f943 	bl	80048d6 <optiga_crypt_random>
                                            OPTIGA_RNG_TYPE_TRNG,
                                            platform_binding_secret,
                                            sizeof(platform_binding_secret));
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a650:	4602      	mov	r2, r0
 800a652:	2800      	cmp	r0, #0
 800a654:	d147      	bne.n	800a6e6 <example_pair_host_and_optiga_using_pre_shared_secret+0x13e>
 800a656:	8832      	ldrh	r2, [r6, #0]
 800a658:	4b39      	ldr	r3, [pc, #228]	; (800a740 <example_pair_host_and_optiga_using_pre_shared_secret+0x198>)
 800a65a:	b292      	uxth	r2, r2
 800a65c:	2a01      	cmp	r2, #1
 800a65e:	d0fa      	beq.n	800a656 <example_pair_host_and_optiga_using_pre_shared_secret+0xae>
 800a660:	881f      	ldrh	r7, [r3, #0]
 800a662:	b2bf      	uxth	r7, r7
 800a664:	b10f      	cbz	r7, 800a66a <example_pair_host_and_optiga_using_pre_shared_secret+0xc2>
 800a666:	881a      	ldrh	r2, [r3, #0]
 800a668:	e03b      	b.n	800a6e2 <example_pair_host_and_optiga_using_pre_shared_secret+0x13a>


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a66a:	2101      	movs	r1, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800a66c:	4620      	mov	r0, r4
 800a66e:	463a      	mov	r2, r7


        /**
         * 7. Write random(secret) to OPTIGA platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a670:	8019      	strh	r1, [r3, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800a672:	f7f9 fea5 	bl	80043c0 <optiga_util_set_comms_params>
        return_status = optiga_util_write_data(me_util,
 800a676:	2240      	movs	r2, #64	; 0x40
 800a678:	9201      	str	r2, [sp, #4]
 800a67a:	f8cd 8000 	str.w	r8, [sp]
 800a67e:	4620      	mov	r0, r4
 800a680:	f24e 1140 	movw	r1, #57664	; 0xe140
 800a684:	463b      	mov	r3, r7
 800a686:	f7f9 ffca 	bl	800461e <optiga_util_write_data>
                                               0xE140,
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               platform_binding_secret,
                                               sizeof(platform_binding_secret));
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a68a:	4602      	mov	r2, r0
 800a68c:	bb58      	cbnz	r0, 800a6e6 <example_pair_host_and_optiga_using_pre_shared_secret+0x13e>
 800a68e:	8833      	ldrh	r3, [r6, #0]
 800a690:	4f2b      	ldr	r7, [pc, #172]	; (800a740 <example_pair_host_and_optiga_using_pre_shared_secret+0x198>)
 800a692:	b29b      	uxth	r3, r3
 800a694:	2b01      	cmp	r3, #1
 800a696:	d0fa      	beq.n	800a68e <example_pair_host_and_optiga_using_pre_shared_secret+0xe6>
 800a698:	883b      	ldrh	r3, [r7, #0]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	b10b      	cbz	r3, 800a6a2 <example_pair_host_and_optiga_using_pre_shared_secret+0xfa>
 800a69e:	883a      	ldrh	r2, [r7, #0]
 800a6a0:	e01f      	b.n	800a6e2 <example_pair_host_and_optiga_using_pre_shared_secret+0x13a>

        /**
         * 8. Write/store the random(secret) on the Host platform
         *
         */
        pal_return_status = pal_os_datastore_write(OPTIGA_PLATFORM_BINDING_SHARED_SECRET_ID,
 800a6a2:	2240      	movs	r2, #64	; 0x40
 800a6a4:	2011      	movs	r0, #17
 800a6a6:	4641      	mov	r1, r8
 800a6a8:	f7f9 fd72 	bl	8004190 <pal_os_datastore_write>
                                                   platform_binding_secret,
                                                   sizeof(platform_binding_secret));

        if (PAL_STATUS_SUCCESS != pal_return_status)
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	b108      	cbz	r0, 800a6b4 <example_pair_host_and_optiga_using_pre_shared_secret+0x10c>
        {
            //Storing of Pre-shared secret on Host failed.
            optiga_lib_status = pal_return_status;
 800a6b0:	8038      	strh	r0, [r7, #0]
            break;
 800a6b2:	e01e      	b.n	800a6f2 <example_pair_host_and_optiga_using_pre_shared_secret+0x14a>


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a6b4:	2101      	movs	r1, #1
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800a6b6:	4620      	mov	r0, r4


        /**
         * 9. Update metadata of OPTIGA Platform Binding shared secret data object (0xE140)
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a6b8:	8039      	strh	r1, [r7, #0]
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me_util,OPTIGA_COMMS_NO_PROTECTION);
 800a6ba:	f7f9 fe81 	bl	80043c0 <optiga_util_set_comms_params>
        return_status = optiga_util_write_metadata(me_util,
 800a6be:	4a21      	ldr	r2, [pc, #132]	; (800a744 <example_pair_host_and_optiga_using_pre_shared_secret+0x19c>)
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f24e 1140 	movw	r1, #57664	; 0xe140
 800a6c6:	2319      	movs	r3, #25
 800a6c8:	f7f9 ffb7 	bl	800463a <optiga_util_write_metadata>
                                                   0xE140,
                                                   platform_binding_shared_secret_metadata_final,
                                                   sizeof(platform_binding_shared_secret_metadata_final));

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	b950      	cbnz	r0, 800a6e6 <example_pair_host_and_optiga_using_pre_shared_secret+0x13e>
 800a6d0:	8833      	ldrh	r3, [r6, #0]
 800a6d2:	4a1b      	ldr	r2, [pc, #108]	; (800a740 <example_pair_host_and_optiga_using_pre_shared_secret+0x198>)
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d0fa      	beq.n	800a6d0 <example_pair_host_and_optiga_using_pre_shared_secret+0x128>
 800a6da:	8813      	ldrh	r3, [r2, #0]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	b143      	cbz	r3, 800a6f2 <example_pair_host_and_optiga_using_pre_shared_secret+0x14a>
 800a6e0:	8812      	ldrh	r2, [r2, #0]
 800a6e2:	b292      	uxth	r2, r2

        return_status = OPTIGA_LIB_SUCCESS;

    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a6e4:	b12a      	cbz	r2, 800a6f2 <example_pair_host_and_optiga_using_pre_shared_secret+0x14a>
 800a6e6:	4813      	ldr	r0, [pc, #76]	; (800a734 <example_pair_host_and_optiga_using_pre_shared_secret+0x18c>)
 800a6e8:	4917      	ldr	r1, [pc, #92]	; (800a748 <example_pair_host_and_optiga_using_pre_shared_secret+0x1a0>)
 800a6ea:	f7fc f86b 	bl	80067c4 <optiga_lib_print_status>
    
    if(me_util)
 800a6ee:	b174      	cbz	r4, 800a70e <example_pair_host_and_optiga_using_pre_shared_secret+0x166>
 800a6f0:	e004      	b.n	800a6fc <example_pair_host_and_optiga_using_pre_shared_secret+0x154>
        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);

        return_status = OPTIGA_LIB_SUCCESS;

    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a6f2:	4810      	ldr	r0, [pc, #64]	; (800a734 <example_pair_host_and_optiga_using_pre_shared_secret+0x18c>)
 800a6f4:	4910      	ldr	r1, [pc, #64]	; (800a738 <example_pair_host_and_optiga_using_pre_shared_secret+0x190>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f7fc f864 	bl	80067c4 <optiga_lib_print_status>
    
    if(me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7f9 fe93 	bl	8004428 <optiga_util_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 800a702:	4602      	mov	r2, r0
 800a704:	b118      	cbz	r0, 800a70e <example_pair_host_and_optiga_using_pre_shared_secret+0x166>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a706:	480b      	ldr	r0, [pc, #44]	; (800a734 <example_pair_host_and_optiga_using_pre_shared_secret+0x18c>)
 800a708:	490f      	ldr	r1, [pc, #60]	; (800a748 <example_pair_host_and_optiga_using_pre_shared_secret+0x1a0>)
 800a70a:	f7fc f85b 	bl	80067c4 <optiga_lib_print_status>
        }
    }
    if(me_crypt)
 800a70e:	b165      	cbz	r5, 800a72a <example_pair_host_and_optiga_using_pre_shared_secret+0x182>
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_crypt_destroy(me_crypt);
 800a710:	4628      	mov	r0, r5
 800a712:	f7fa f8cb 	bl	80048ac <optiga_crypt_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 800a716:	4602      	mov	r2, r0
 800a718:	b138      	cbz	r0, 800a72a <example_pair_host_and_optiga_using_pre_shared_secret+0x182>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a71a:	4806      	ldr	r0, [pc, #24]	; (800a734 <example_pair_host_and_optiga_using_pre_shared_secret+0x18c>)
 800a71c:	490a      	ldr	r1, [pc, #40]	; (800a748 <example_pair_host_and_optiga_using_pre_shared_secret+0x1a0>)
 800a71e:	f7fc f851 	bl	80067c4 <optiga_lib_print_status>
 800a722:	e002      	b.n	800a72a <example_pair_host_and_optiga_using_pre_shared_secret+0x182>
    uint8_t platform_binding_secret[64];
    uint8_t platform_binding_secret_metadata[44];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    pal_status_t pal_return_status;
    optiga_util_t * me_util = NULL;
    optiga_crypt_t * me_crypt = NULL;
 800a724:	2500      	movs	r5, #0
void example_pair_host_and_optiga_using_pre_shared_secret(void)
{
    uint16_t bytes_to_read;
    uint8_t platform_binding_secret[64];
    uint8_t platform_binding_secret_metadata[44];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
 800a726:	2201      	movs	r2, #1
 800a728:	e7dd      	b.n	800a6e6 <example_pair_host_and_optiga_using_pre_shared_secret+0x13e>
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
        }
    }
    
}
 800a72a:	b01e      	add	sp, #120	; 0x78
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	0800d1d0 	.word	0x0800d1d0
 800a734:	0800c6a0 	.word	0x0800c6a0
 800a738:	0800c378 	.word	0x0800c378
 800a73c:	0800a59d 	.word	0x0800a59d
 800a740:	1fff0188 	.word	0x1fff0188
 800a744:	0800d1b7 	.word	0x0800d1b7
 800a748:	0800c6b5 	.word	0x0800c6b5

0800a74c <optiga_lib_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_lib_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800a74c:	4b01      	ldr	r3, [pc, #4]	; (800a754 <optiga_lib_callback+0x8>)
 800a74e:	8019      	strh	r1, [r3, #0]
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	1fff018a 	.word	0x1fff018a

0800a758 <optiga_lib_print_coprocessor_components>:
}

static void optiga_lib_print_coprocessor_components(const char_t * p_log_string,
                                                    const uint8_t * p_log_array,
                                                    uint16_t length)
{
 800a758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char_t color_buffer[100];

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, OPTIGA_EXAMPLE, OPTIGA_EXAMPLE_COLOR);
 800a75c:	4d3d      	ldr	r5, [pc, #244]	; (800a854 <optiga_lib_print_coprocessor_components+0xfc>)
 800a75e:	4b3e      	ldr	r3, [pc, #248]	; (800a858 <optiga_lib_print_coprocessor_components+0x100>)
}

static void optiga_lib_print_coprocessor_components(const char_t * p_log_string,
                                                    const uint8_t * p_log_array,
                                                    uint16_t length)
{
 800a760:	b0ce      	sub	sp, #312	; 0x138
    char_t color_buffer[100];

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, OPTIGA_EXAMPLE, OPTIGA_EXAMPLE_COLOR);
 800a762:	e88d 0021 	stmia.w	sp, {r0, r5}
}

static void optiga_lib_print_coprocessor_components(const char_t * p_log_string,
                                                    const uint8_t * p_log_array,
                                                    uint16_t length)
{
 800a766:	460f      	mov	r7, r1
 800a768:	4616      	mov	r6, r2
    char_t color_buffer[100];

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, OPTIGA_EXAMPLE, OPTIGA_EXAMPLE_COLOR);
 800a76a:	493c      	ldr	r1, [pc, #240]	; (800a85c <optiga_lib_print_coprocessor_components+0x104>)
 800a76c:	462a      	mov	r2, r5
 800a76e:	a803      	add	r0, sp, #12
 800a770:	f001 f8de 	bl	800b930 <siprintf>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
 800a774:	a803      	add	r0, sp, #12
 800a776:	f001 f920 	bl	800b9ba <strlen>
 800a77a:	a903      	add	r1, sp, #12
 800a77c:	4602      	mov	r2, r0
 800a77e:	4838      	ldr	r0, [pc, #224]	; (800a860 <optiga_lib_print_coprocessor_components+0x108>)
 800a780:	f7f9 fcca 	bl	8004118 <pal_logger_write>
    uint16_t temp_length;
    uint8_t new_line_characters[2] = {0x0D, 0x0A};
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
 800a784:	f04f 0800 	mov.w	r8, #0
 800a788:	45b0      	cmp	r8, r6
 800a78a:	d260      	bcs.n	800a84e <optiga_lib_print_coprocessor_components+0xf6>
    {
        temp_length = buffer_window;
        if ((length - index) < buffer_window)
 800a78c:	ebc8 0406 	rsb	r4, r8, r6
 800a790:	2c1f      	cmp	r4, #31
        {
            temp_length =  length - index;
        }

        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
 800a792:	a81c      	add	r0, sp, #112	; 0x70
 800a794:	f04f 0100 	mov.w	r1, #0
 800a798:	f04f 0264 	mov.w	r2, #100	; 0x64
    for (index = 0; index < length; index+=buffer_window)
    {
        temp_length = buffer_window;
        if ((length - index) < buffer_window)
        {
            temp_length =  length - index;
 800a79c:	bfd4      	ite	le
 800a79e:	b2a4      	uxthle	r4, r4
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
    {
        temp_length = buffer_window;
 800a7a0:	2420      	movgt	r4, #32
        if ((length - index) < buffer_window)
        {
            temp_length =  length - index;
        }

        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
 800a7a2:	f7f9 fd89 	bl	80042b8 <pal_os_memset>
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));
 800a7a6:	a835      	add	r0, sp, #212	; 0xd4
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	2264      	movs	r2, #100	; 0x64
 800a7ac:	f7f9 fd84 	bl	80042b8 <pal_os_memset>
    uint32_t loop = 0;
    uint8_t hex_byte = 0, index = 0;

    do
    {
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
 800a7b0:	eb17 0e08 	adds.w	lr, r7, r8
 800a7b4:	d027      	beq.n	800a806 <optiga_lib_print_coprocessor_components+0xae>
 800a7b6:	1c63      	adds	r3, r4, #1
 800a7b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a7bc:	aa1c      	add	r2, sp, #112	; 0x70
 800a7be:	f10d 0173 	add.w	r1, sp, #115	; 0x73
 800a7c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a7c6:	441a      	add	r2, r3
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
 800a7c8:	4291      	cmp	r1, r2
 800a7ca:	d015      	beq.n	800a7f8 <optiga_lib_print_coprocessor_components+0xa0>
        {
            index = 0;
            hex_byte = p_array_buffer[loop];
 800a7cc:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
                p_hex_string [index++] = '0';
                p_hex_string [index++] = 'x';
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
 800a7d0:	0918      	lsrs	r0, r3, #4
 800a7d2:	2809      	cmp	r0, #9
 800a7d4:	f003 030f 	and.w	r3, r3, #15
 800a7d8:	bf8c      	ite	hi
 800a7da:	3037      	addhi	r0, #55	; 0x37
 800a7dc:	3030      	addls	r0, #48	; 0x30
 800a7de:	2b09      	cmp	r3, #9
 800a7e0:	bf8c      	ite	hi
 800a7e2:	3337      	addhi	r3, #55	; 0x37
 800a7e4:	3330      	addls	r3, #48	; 0x30
 800a7e6:	f801 3c02 	strb.w	r3, [r1, #-2]
            
            p_hex_string [index++] = ' ';
 800a7ea:	2320      	movs	r3, #32
                p_hex_string [index++] = '0';
                p_hex_string [index++] = 'x';
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
 800a7ec:	f801 0c03 	strb.w	r0, [r1, #-3]
            
            p_hex_string [index++] = ' ';
 800a7f0:	f801 3c01 	strb.w	r3, [r1, #-1]
 800a7f4:	3103      	adds	r1, #3
 800a7f6:	e7e7      	b.n	800a7c8 <optiga_lib_print_coprocessor_components+0x70>
            p_hex_string += index;
        }
        *p_hex_string = 0x00;
 800a7f8:	ab4e      	add	r3, sp, #312	; 0x138
 800a7fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a7fe:	441c      	add	r4, r3
 800a800:	2300      	movs	r3, #0
 800a802:	f804 3cc8 	strb.w	r3, [r4, #-200]
        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);

        sprintf((char_t *)output_buffer, "%s%s%s", p_log_color, temp_buffer, OPTIGA_LIB_LOGGER_COLOR_DEFAULT);
 800a806:	4917      	ldr	r1, [pc, #92]	; (800a864 <optiga_lib_print_coprocessor_components+0x10c>)
 800a808:	4a12      	ldr	r2, [pc, #72]	; (800a854 <optiga_lib_print_coprocessor_components+0xfc>)
 800a80a:	9500      	str	r5, [sp, #0]
 800a80c:	ab1c      	add	r3, sp, #112	; 0x70
 800a80e:	a835      	add	r0, sp, #212	; 0xd4
 800a810:	f001 f88e 	bl	800b930 <siprintf>

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = (char_t)new_line_characters[0];
 800a814:	a835      	add	r0, sp, #212	; 0xd4
 800a816:	f001 f8d0 	bl	800b9ba <strlen>
 800a81a:	ab4e      	add	r3, sp, #312	; 0x138
 800a81c:	4418      	add	r0, r3
 800a81e:	230d      	movs	r3, #13
 800a820:	f800 3c64 	strb.w	r3, [r0, #-100]
        output_buffer[strlen(output_buffer)+1] = (char_t)new_line_characters[1];
 800a824:	a835      	add	r0, sp, #212	; 0xd4
 800a826:	f001 f8c8 	bl	800b9ba <strlen>
 800a82a:	ab4e      	add	r3, sp, #312	; 0x138
 800a82c:	4418      	add	r0, r3
 800a82e:	230a      	movs	r3, #10
 800a830:	f800 3c63 	strb.w	r3, [r0, #-99]
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
 800a834:	a835      	add	r0, sp, #212	; 0xd4
 800a836:	f001 f8c0 	bl	800b9ba <strlen>
    uint16_t temp_length;
    uint8_t new_line_characters[2] = {0x0D, 0x0A};
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
 800a83a:	f108 0820 	add.w	r8, r8, #32

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = (char_t)new_line_characters[0];
        output_buffer[strlen(output_buffer)+1] = (char_t)new_line_characters[1];
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
 800a83e:	1c82      	adds	r2, r0, #2
 800a840:	a935      	add	r1, sp, #212	; 0xd4
 800a842:	4807      	ldr	r0, [pc, #28]	; (800a860 <optiga_lib_print_coprocessor_components+0x108>)
 800a844:	f7f9 fc68 	bl	8004118 <pal_logger_write>
    uint16_t temp_length;
    uint8_t new_line_characters[2] = {0x0D, 0x0A};
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
 800a848:	fa1f f888 	uxth.w	r8, r8
 800a84c:	e79c      	b.n	800a788 <optiga_lib_print_coprocessor_components+0x30>

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, OPTIGA_EXAMPLE, OPTIGA_EXAMPLE_COLOR);
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
    optiga_lib_print_coprocessor_data(p_log_array, length, OPTIGA_EXAMPLE_COLOR);
}
 800a84e:	b04e      	add	sp, #312	; 0x138
 800a850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a854:	0800c378 	.word	0x0800c378
 800a858:	0800c6a0 	.word	0x0800c6a0
 800a85c:	0800c36f 	.word	0x0800c36f
 800a860:	1ffed134 	.word	0x1ffed134
 800a864:	0800c371 	.word	0x0800c371

0800a868 <example_read_coprocessor_id>:
 *
 * Preconditions: The optiga_util_open_application must be executed before invoking the below example.
 *
 */
void example_read_coprocessor_id(void)
{
 800a868:	b530      	push	{r4, r5, lr}
    uint16_t bytes_to_read;
    uint8_t coprocessor_uid[32];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me_util = NULL;

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a86a:	4843      	ldr	r0, [pc, #268]	; (800a978 <example_read_coprocessor_id+0x110>)
 800a86c:	4943      	ldr	r1, [pc, #268]	; (800a97c <example_read_coprocessor_id+0x114>)
 800a86e:	4a44      	ldr	r2, [pc, #272]	; (800a980 <example_read_coprocessor_id+0x118>)
 *
 * Preconditions: The optiga_util_open_application must be executed before invoking the below example.
 *
 */
void example_read_coprocessor_id(void)
{
 800a870:	b08d      	sub	sp, #52	; 0x34
    uint16_t bytes_to_read;
    uint8_t coprocessor_uid[32];
    optiga_lib_status_t return_status = !OPTIGA_LIB_SUCCESS;
    optiga_util_t * me_util = NULL;

    OPTIGA_EXAMPLE_LOG_MESSAGE(__FUNCTION__);
 800a872:	f7fb ff7f 	bl	8006774 <optiga_lib_print_message>
    do
    {
        /**
         * 1. Create OPTIGA Util Instance
         */
        me_util = optiga_util_create(0, optiga_lib_callback, NULL);
 800a876:	2000      	movs	r0, #0
 800a878:	4602      	mov	r2, r0
 800a87a:	4942      	ldr	r1, [pc, #264]	; (800a984 <example_read_coprocessor_id+0x11c>)
 800a87c:	f7f9 fdac 	bl	80043d8 <optiga_util_create>
 800a880:	2201      	movs	r2, #1
        if (NULL == me_util)
 800a882:	4605      	mov	r5, r0
 800a884:	2800      	cmp	r0, #0
 800a886:	d061      	beq.n	800a94c <example_read_coprocessor_id+0xe4>

        /**
         * 2. Read Coprocessor UID (0xE0C2) data object from OPTIGA
         *    using optiga_util_read_data.
         */
        bytes_to_read = sizeof(coprocessor_uid);
 800a888:	2320      	movs	r3, #32
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a88a:	4c3f      	ldr	r4, [pc, #252]	; (800a988 <example_read_coprocessor_id+0x120>)

        /**
         * 2. Read Coprocessor UID (0xE0C2) data object from OPTIGA
         *    using optiga_util_read_data.
         */
        bytes_to_read = sizeof(coprocessor_uid);
 800a88c:	f8ad 300e 	strh.w	r3, [sp, #14]
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_read_data(me_util,
 800a890:	f10d 030e 	add.w	r3, sp, #14
        /**
         * 2. Read Coprocessor UID (0xE0C2) data object from OPTIGA
         *    using optiga_util_read_data.
         */
        bytes_to_read = sizeof(coprocessor_uid);
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800a894:	8022      	strh	r2, [r4, #0]
        return_status = optiga_util_read_data(me_util,
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	2200      	movs	r2, #0
 800a89a:	f24e 01c2 	movw	r1, #57538	; 0xe0c2
 800a89e:	ab04      	add	r3, sp, #16
 800a8a0:	f7f9 fe3b 	bl	800451a <optiga_util_read_data>
                                              0xE0C2,
                                              0x0000,
                                              coprocessor_uid,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d150      	bne.n	800a94c <example_read_coprocessor_id+0xe4>
 800a8aa:	8823      	ldrh	r3, [r4, #0]
 800a8ac:	4a36      	ldr	r2, [pc, #216]	; (800a988 <example_read_coprocessor_id+0x120>)
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d0fa      	beq.n	800a8aa <example_read_coprocessor_id+0x42>
 800a8b4:	8813      	ldrh	r3, [r2, #0]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	b123      	cbz	r3, 800a8c4 <example_read_coprocessor_id+0x5c>
 800a8ba:	8812      	ldrh	r2, [r2, #0]
 800a8bc:	b292      	uxth	r2, r2
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Chip position on wafer: Y-coordinate : ", &coprocessor_uid[19], 0x02);
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Firmware Identifier                  : ", &coprocessor_uid[21], 0x04);
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("ESW build number, BCD coded          : ", &coprocessor_uid[25], 0x02);
        optiga_lib_print_string_with_newline("");
    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a8be:	2a00      	cmp	r2, #0
 800a8c0:	d04a      	beq.n	800a958 <example_read_coprocessor_id+0xf0>
 800a8c2:	e043      	b.n	800a94c <example_read_coprocessor_id+0xe4>
                                              coprocessor_uid,
                                              &bytes_to_read);

        WAIT_AND_CHECK_STATUS(return_status, optiga_lib_status);
        return_status = OPTIGA_LIB_SUCCESS;
        OPTIGA_EXAMPLE_LOG_MESSAGE("Coprocessor UID components are mentioned below:\n");
 800a8c4:	4831      	ldr	r0, [pc, #196]	; (800a98c <example_read_coprocessor_id+0x124>)
 800a8c6:	492d      	ldr	r1, [pc, #180]	; (800a97c <example_read_coprocessor_id+0x114>)
 800a8c8:	4a2d      	ldr	r2, [pc, #180]	; (800a980 <example_read_coprocessor_id+0x118>)
 800a8ca:	f7fb ff53 	bl	8006774 <optiga_lib_print_message>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("CIM Identifier                       : ", &coprocessor_uid[0], 0x01);
 800a8ce:	a904      	add	r1, sp, #16
 800a8d0:	482f      	ldr	r0, [pc, #188]	; (800a990 <example_read_coprocessor_id+0x128>)
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f7ff ff40 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Platform Identifier                  : ", &coprocessor_uid[1], 0x01);
 800a8d8:	f10d 0111 	add.w	r1, sp, #17
 800a8dc:	482d      	ldr	r0, [pc, #180]	; (800a994 <example_read_coprocessor_id+0x12c>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f7ff ff3a 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Model Identifier                     : ", &coprocessor_uid[2], 0x01);
 800a8e4:	f10d 0112 	add.w	r1, sp, #18
 800a8e8:	482b      	ldr	r0, [pc, #172]	; (800a998 <example_read_coprocessor_id+0x130>)
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f7ff ff34 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("ROM mask ID                          : ", &coprocessor_uid[3], 0x02);
 800a8f0:	f10d 0113 	add.w	r1, sp, #19
 800a8f4:	4829      	ldr	r0, [pc, #164]	; (800a99c <example_read_coprocessor_id+0x134>)
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	f7ff ff2e 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Chip type                            : ", &coprocessor_uid[5], 0x06);
 800a8fc:	f10d 0115 	add.w	r1, sp, #21
 800a900:	4827      	ldr	r0, [pc, #156]	; (800a9a0 <example_read_coprocessor_id+0x138>)
 800a902:	2206      	movs	r2, #6
 800a904:	f7ff ff28 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Batch number                         : ", &coprocessor_uid[11], 0x06);
 800a908:	f10d 011b 	add.w	r1, sp, #27
 800a90c:	4825      	ldr	r0, [pc, #148]	; (800a9a4 <example_read_coprocessor_id+0x13c>)
 800a90e:	2206      	movs	r2, #6
 800a910:	f7ff ff22 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Chip position on wafer: X-coordinate : ", &coprocessor_uid[17], 0x02);
 800a914:	f10d 0121 	add.w	r1, sp, #33	; 0x21
 800a918:	4823      	ldr	r0, [pc, #140]	; (800a9a8 <example_read_coprocessor_id+0x140>)
 800a91a:	2202      	movs	r2, #2
 800a91c:	f7ff ff1c 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Chip position on wafer: Y-coordinate : ", &coprocessor_uid[19], 0x02);
 800a920:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 800a924:	4821      	ldr	r0, [pc, #132]	; (800a9ac <example_read_coprocessor_id+0x144>)
 800a926:	2202      	movs	r2, #2
 800a928:	f7ff ff16 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Firmware Identifier                  : ", &coprocessor_uid[21], 0x04);
 800a92c:	f10d 0125 	add.w	r1, sp, #37	; 0x25
 800a930:	481f      	ldr	r0, [pc, #124]	; (800a9b0 <example_read_coprocessor_id+0x148>)
 800a932:	2204      	movs	r2, #4
 800a934:	f7ff ff10 	bl	800a758 <optiga_lib_print_coprocessor_components>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("ESW build number, BCD coded          : ", &coprocessor_uid[25], 0x02);
 800a938:	481e      	ldr	r0, [pc, #120]	; (800a9b4 <example_read_coprocessor_id+0x14c>)
 800a93a:	f10d 0129 	add.w	r1, sp, #41	; 0x29
 800a93e:	2202      	movs	r2, #2
 800a940:	f7ff ff0a 	bl	800a758 <optiga_lib_print_coprocessor_components>
        optiga_lib_print_string_with_newline("");
 800a944:	481c      	ldr	r0, [pc, #112]	; (800a9b8 <example_read_coprocessor_id+0x150>)
 800a946:	f7fb fefb 	bl	8006740 <optiga_lib_print_string_with_newline>
 800a94a:	e005      	b.n	800a958 <example_read_coprocessor_id+0xf0>
    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a94c:	480b      	ldr	r0, [pc, #44]	; (800a97c <example_read_coprocessor_id+0x114>)
 800a94e:	491b      	ldr	r1, [pc, #108]	; (800a9bc <example_read_coprocessor_id+0x154>)
 800a950:	f7fb ff38 	bl	80067c4 <optiga_lib_print_status>
    
    if(me_util)
 800a954:	b92d      	cbnz	r5, 800a962 <example_read_coprocessor_id+0xfa>
 800a956:	e00d      	b.n	800a974 <example_read_coprocessor_id+0x10c>
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Chip position on wafer: Y-coordinate : ", &coprocessor_uid[19], 0x02);
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("Firmware Identifier                  : ", &coprocessor_uid[21], 0x04);
        OPTIGA_EXAMPLE_LOG_COPROCESSOR_ID_INFO("ESW build number, BCD coded          : ", &coprocessor_uid[25], 0x02);
        optiga_lib_print_string_with_newline("");
    } while(FALSE);
    OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a958:	4808      	ldr	r0, [pc, #32]	; (800a97c <example_read_coprocessor_id+0x114>)
 800a95a:	4909      	ldr	r1, [pc, #36]	; (800a980 <example_read_coprocessor_id+0x118>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	f7fb ff31 	bl	80067c4 <optiga_lib_print_status>
    
    if(me_util)
    {
        //Destroy the instance after the completion of usecase if not required.
        return_status = optiga_util_destroy(me_util);
 800a962:	4628      	mov	r0, r5
 800a964:	f7f9 fd60 	bl	8004428 <optiga_util_destroy>
        if(OPTIGA_LIB_SUCCESS != return_status)
 800a968:	4602      	mov	r2, r0
 800a96a:	b118      	cbz	r0, 800a974 <example_read_coprocessor_id+0x10c>
        {
            //lint --e{774} suppress This is a generic macro
            OPTIGA_EXAMPLE_LOG_STATUS(return_status);
 800a96c:	4803      	ldr	r0, [pc, #12]	; (800a97c <example_read_coprocessor_id+0x114>)
 800a96e:	4913      	ldr	r1, [pc, #76]	; (800a9bc <example_read_coprocessor_id+0x154>)
 800a970:	f7fb ff28 	bl	80067c4 <optiga_lib_print_status>
        }
    }
}
 800a974:	b00d      	add	sp, #52	; 0x34
 800a976:	bd30      	pop	{r4, r5, pc}
 800a978:	0800d3c6 	.word	0x0800d3c6
 800a97c:	0800c6a0 	.word	0x0800c6a0
 800a980:	0800c378 	.word	0x0800c378
 800a984:	0800a74d 	.word	0x0800a74d
 800a988:	1fff018a 	.word	0x1fff018a
 800a98c:	0800d205 	.word	0x0800d205
 800a990:	0800d236 	.word	0x0800d236
 800a994:	0800d25e 	.word	0x0800d25e
 800a998:	0800d286 	.word	0x0800d286
 800a99c:	0800d2ae 	.word	0x0800d2ae
 800a9a0:	0800d2d6 	.word	0x0800d2d6
 800a9a4:	0800d2fe 	.word	0x0800d2fe
 800a9a8:	0800d326 	.word	0x0800d326
 800a9ac:	0800d34e 	.word	0x0800d34e
 800a9b0:	0800d376 	.word	0x0800d376
 800a9b4:	0800d39e 	.word	0x0800d39e
 800a9b8:	0800dd56 	.word	0x0800dd56
 800a9bc:	0800c6b5 	.word	0x0800c6b5

0800a9c0 <example_util_encode_ecc_public_key_in_bit_string_format>:

void example_util_encode_ecc_public_key_in_bit_string_format(const uint8_t * q_buffer,
                                                        uint8_t q_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	461d      	mov	r5, r3
#define OPTIGA_EXAMPLE_UTIL_ECC_DER_ADDITIONAL_LENGTH (0x02)

    uint16_t index = 0;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	7013      	strb	r3, [r2, #0]
    pub_key_buffer[index++] = q_length + OPTIGA_EXAMPLE_UTIL_ECC_DER_ADDITIONAL_LENGTH;
 800a9c8:	1c8b      	adds	r3, r1, #2
 800a9ca:	7053      	strb	r3, [r2, #1]
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;
 800a9cc:	2300      	movs	r3, #0

void example_util_encode_ecc_public_key_in_bit_string_format(const uint8_t * q_buffer,
                                                        uint8_t q_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800a9ce:	460c      	mov	r4, r1

    uint16_t index = 0;

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
    pub_key_buffer[index++] = q_length + OPTIGA_EXAMPLE_UTIL_ECC_DER_ADDITIONAL_LENGTH;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;
 800a9d0:	7093      	strb	r3, [r2, #2]

void example_util_encode_ecc_public_key_in_bit_string_format(const uint8_t * q_buffer,
                                                        uint8_t q_length,
                                                        uint8_t * pub_key_buffer,
                                                        uint16_t * pub_key_length)
{
 800a9d2:	4606      	mov	r6, r0

    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_BITSTRING_TAG;
    pub_key_buffer[index++] = q_length + OPTIGA_EXAMPLE_UTIL_ECC_DER_ADDITIONAL_LENGTH;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;
    // Compression format. Supports only 04 [uncompressed]
    pub_key_buffer[index++] = 0x04;
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	70d3      	strb	r3, [r2, #3]

    pal_os_memcpy(&pub_key_buffer[index], q_buffer, q_length);
 800a9d8:	18d0      	adds	r0, r2, r3
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4622      	mov	r2, r4
    index += q_length;
 800a9de:	3404      	adds	r4, #4
    pub_key_buffer[index++] = q_length + OPTIGA_EXAMPLE_UTIL_ECC_DER_ADDITIONAL_LENGTH;
    pub_key_buffer[index++] = OPTIGA_EXAMPLE_UTIL_DER_NUM_UNUSED_BITS;
    // Compression format. Supports only 04 [uncompressed]
    pub_key_buffer[index++] = 0x04;

    pal_os_memcpy(&pub_key_buffer[index], q_buffer, q_length);
 800a9e0:	f7f9 fc68 	bl	80042b4 <pal_os_memcpy>
    index += q_length;

    *pub_key_length = index;
 800a9e4:	802c      	strh	r4, [r5, #0]
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}

0800a9e8 <optiga_util_callback>:
 */
static volatile optiga_lib_status_t optiga_lib_status;
//lint --e{818,715} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
    optiga_lib_status = return_status;
 800a9e8:	4b01      	ldr	r3, [pc, #4]	; (800a9f0 <optiga_util_callback+0x8>)
 800a9ea:	8019      	strh	r1, [r3, #0]
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	1fff0190 	.word	0x1fff0190

0800a9f4 <optiga_shell_crypt_ecdsa_verify>:
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_ECDSA_SIGN_ENABLED");
#endif
}

static void optiga_shell_crypt_ecdsa_verify(void)
{
 800a9f4:	b538      	push	{r3, r4, r5, lr}
#ifdef OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting verification example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
 800a9f6:	4d08      	ldr	r5, [pc, #32]	; (800aa18 <optiga_shell_crypt_ecdsa_verify+0x24>)
 800a9f8:	4c08      	ldr	r4, [pc, #32]	; (800aa1c <optiga_shell_crypt_ecdsa_verify+0x28>)
 800a9fa:	4809      	ldr	r0, [pc, #36]	; (800aa20 <optiga_shell_crypt_ecdsa_verify+0x2c>)
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4622      	mov	r2, r4
 800aa00:	f7fb feb8 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
 800aa04:	4629      	mov	r1, r5
 800aa06:	4622      	mov	r2, r4
 800aa08:	4806      	ldr	r0, [pc, #24]	; (800aa24 <optiga_shell_crypt_ecdsa_verify+0x30>)
 800aa0a:	f7fb feb3 	bl	8006774 <optiga_lib_print_message>
    example_optiga_crypt_ecdsa_verify();
#else
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED");
#endif
}
 800aa0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void optiga_shell_crypt_ecdsa_verify(void)
{
#ifdef OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting verification example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Verify prepared signature, with prepared public key and digest");
    example_optiga_crypt_ecdsa_verify();
 800aa12:	f7ff b8bf 	b.w	8009b94 <example_optiga_crypt_ecdsa_verify>
 800aa16:	bf00      	nop
 800aa18:	0800d437 	.word	0x0800d437
 800aa1c:	0800d44a 	.word	0x0800d44a
 800aa20:	0800d3e2 	.word	0x0800d3e2
 800aa24:	0800d450 	.word	0x0800d450

0800aa28 <optiga_shell_crypt_ecdsa_sign>:
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED");
#endif
}

static void optiga_shell_crypt_ecdsa_sign(void)
{
 800aa28:	b538      	push	{r3, r4, r5, lr}
#ifdef OPTIGA_CRYPT_ECDSA_SIGN_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
 800aa2a:	4d08      	ldr	r5, [pc, #32]	; (800aa4c <optiga_shell_crypt_ecdsa_sign+0x24>)
 800aa2c:	4c08      	ldr	r4, [pc, #32]	; (800aa50 <optiga_shell_crypt_ecdsa_sign+0x28>)
 800aa2e:	4809      	ldr	r0, [pc, #36]	; (800aa54 <optiga_shell_crypt_ecdsa_sign+0x2c>)
 800aa30:	4629      	mov	r1, r5
 800aa32:	4622      	mov	r2, r4
 800aa34:	f7fb fe9e 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	4806      	ldr	r0, [pc, #24]	; (800aa58 <optiga_shell_crypt_ecdsa_sign+0x30>)
 800aa3e:	f7fb fe99 	bl	8006774 <optiga_lib_print_message>
    example_optiga_crypt_ecdsa_sign();
#else
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_ECDSA_SIGN_ENABLED");
#endif
}
 800aa42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void optiga_shell_crypt_ecdsa_sign(void)
{
#ifdef OPTIGA_CRYPT_ECDSA_SIGN_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting signing example for Elliptic-curve Digital Signature Algorithm (ECDSA)");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Sign prepared Data and export the signature");
    example_optiga_crypt_ecdsa_sign();
 800aa46:	f7ff b84f 	b.w	8009ae8 <example_optiga_crypt_ecdsa_sign>
 800aa4a:	bf00      	nop
 800aa4c:	0800d437 	.word	0x0800d437
 800aa50:	0800d44a 	.word	0x0800d44a
 800aa54:	0800d497 	.word	0x0800d497
 800aa58:	0800d4e7 	.word	0x0800d4e7

0800aa5c <optiga_shell_crypt_ecc_generate_keypair>:
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate 32 bytes random");
    example_optiga_crypt_random();
}

static void optiga_shell_crypt_ecc_generate_keypair(void)
{
 800aa5c:	b538      	push	{r3, r4, r5, lr}
#ifdef OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting generate ECC Key Example");
 800aa5e:	4d08      	ldr	r5, [pc, #32]	; (800aa80 <optiga_shell_crypt_ecc_generate_keypair+0x24>)
 800aa60:	4c08      	ldr	r4, [pc, #32]	; (800aa84 <optiga_shell_crypt_ecc_generate_keypair+0x28>)
 800aa62:	4809      	ldr	r0, [pc, #36]	; (800aa88 <optiga_shell_crypt_ecc_generate_keypair+0x2c>)
 800aa64:	4629      	mov	r1, r5
 800aa66:	4622      	mov	r2, r4
 800aa68:	f7fb fe84 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate ECC NIST P-256 Key Pair and export the public key");
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4622      	mov	r2, r4
 800aa70:	4806      	ldr	r0, [pc, #24]	; (800aa8c <optiga_shell_crypt_ecc_generate_keypair+0x30>)
 800aa72:	f7fb fe7f 	bl	8006774 <optiga_lib_print_message>
    example_optiga_crypt_ecc_generate_keypair();
#else
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED");
#endif
}
 800aa76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void optiga_shell_crypt_ecc_generate_keypair(void)
{
#ifdef OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting generate ECC Key Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate ECC NIST P-256 Key Pair and export the public key");
    example_optiga_crypt_ecc_generate_keypair();
 800aa7a:	f7fe bfaf 	b.w	80099dc <example_optiga_crypt_ecc_generate_keypair>
 800aa7e:	bf00      	nop
 800aa80:	0800d437 	.word	0x0800d437
 800aa84:	0800d44a 	.word	0x0800d44a
 800aa88:	0800d51b 	.word	0x0800d51b
 800aa8c:	0800d53d 	.word	0x0800d53d

0800aa90 <optiga_shell_crypt_random>:
#endif
}


static void optiga_shell_crypt_random(void)
{
 800aa90:	b538      	push	{r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting Generate Random Example");
 800aa92:	4d08      	ldr	r5, [pc, #32]	; (800aab4 <optiga_shell_crypt_random+0x24>)
 800aa94:	4c08      	ldr	r4, [pc, #32]	; (800aab8 <optiga_shell_crypt_random+0x28>)
 800aa96:	4809      	ldr	r0, [pc, #36]	; (800aabc <optiga_shell_crypt_random+0x2c>)
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	f7fb fe6a 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate 32 bytes random");
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	4806      	ldr	r0, [pc, #24]	; (800aac0 <optiga_shell_crypt_random+0x30>)
 800aaa6:	f7fb fe65 	bl	8006774 <optiga_lib_print_message>
    example_optiga_crypt_random();
}
 800aaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static void optiga_shell_crypt_random(void)
{
    OPTIGA_SHELL_LOG_MESSAGE("Starting Generate Random Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate 32 bytes random");
    example_optiga_crypt_random();
 800aaae:	f7ff b9c7 	b.w	8009e40 <example_optiga_crypt_random>
 800aab2:	bf00      	nop
 800aab4:	0800d437 	.word	0x0800d437
 800aab8:	0800d44a 	.word	0x0800d44a
 800aabc:	0800d580 	.word	0x0800d580
 800aac0:	0800d5a1 	.word	0x0800d5a1

0800aac4 <optiga_shell_crypt_hash_data>:
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_HASH_ENABLED");
#endif
}

static void optiga_shell_crypt_hash_data(void)
{
 800aac4:	b538      	push	{r3, r4, r5, lr}
#ifdef OPTIGA_CRYPT_HASH_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting generation of digest Example");
 800aac6:	4d08      	ldr	r5, [pc, #32]	; (800aae8 <optiga_shell_crypt_hash_data+0x24>)
 800aac8:	4c08      	ldr	r4, [pc, #32]	; (800aaec <optiga_shell_crypt_hash_data+0x28>)
 800aaca:	4809      	ldr	r0, [pc, #36]	; (800aaf0 <optiga_shell_crypt_hash_data+0x2c>)
 800aacc:	4629      	mov	r1, r5
 800aace:	4622      	mov	r2, r4
 800aad0:	f7fb fe50 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate hash of given user data ");
 800aad4:	4629      	mov	r1, r5
 800aad6:	4622      	mov	r2, r4
 800aad8:	4806      	ldr	r0, [pc, #24]	; (800aaf4 <optiga_shell_crypt_hash_data+0x30>)
 800aada:	f7fb fe4b 	bl	8006774 <optiga_lib_print_message>
    example_optiga_crypt_hash_data();
#else
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_HASH_ENABLED");
#endif
}
 800aade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void optiga_shell_crypt_hash_data(void)
{
#ifdef OPTIGA_CRYPT_HASH_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting generation of digest Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Generate hash of given user data ");
    example_optiga_crypt_hash_data();
 800aae2:	f7ff b949 	b.w	8009d78 <example_optiga_crypt_hash_data>
 800aae6:	bf00      	nop
 800aae8:	0800d437 	.word	0x0800d437
 800aaec:	0800d44a 	.word	0x0800d44a
 800aaf0:	0800d5c2 	.word	0x0800d5c2
 800aaf4:	0800d5e8 	.word	0x0800d5e8

0800aaf8 <optiga_shell_crypt_hash>:
    OPTIGA_SHELL_LOG_MESSAGE("3 Step: Start Protected update with prepared manifest and fragments");
    example_optiga_util_protected_update();
}

static void optiga_shell_crypt_hash(void)
{
 800aaf8:	b538      	push	{r3, r4, r5, lr}
#ifdef OPTIGA_CRYPT_HASH_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting Hash Example");
 800aafa:	4d08      	ldr	r5, [pc, #32]	; (800ab1c <optiga_shell_crypt_hash+0x24>)
 800aafc:	4c08      	ldr	r4, [pc, #32]	; (800ab20 <optiga_shell_crypt_hash+0x28>)
 800aafe:	4809      	ldr	r0, [pc, #36]	; (800ab24 <optiga_shell_crypt_hash+0x2c>)
 800ab00:	4629      	mov	r1, r5
 800ab02:	4622      	mov	r2, r4
 800ab04:	f7fb fe36 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Hash given data with Start, Update and Finalize calls");
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4622      	mov	r2, r4
 800ab0c:	4806      	ldr	r0, [pc, #24]	; (800ab28 <optiga_shell_crypt_hash+0x30>)
 800ab0e:	f7fb fe31 	bl	8006774 <optiga_lib_print_message>
    example_optiga_crypt_hash();
#else
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_HASH_ENABLED");
#endif
}
 800ab12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void optiga_shell_crypt_hash(void)
{
#ifdef OPTIGA_CRYPT_HASH_ENABLED
    OPTIGA_SHELL_LOG_MESSAGE("Starting Hash Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Hash given data with Start, Update and Finalize calls");
    example_optiga_crypt_hash();
 800ab16:	f7ff b8a7 	b.w	8009c68 <example_optiga_crypt_hash>
 800ab1a:	bf00      	nop
 800ab1c:	0800d437 	.word	0x0800d437
 800ab20:	0800d44a 	.word	0x0800d44a
 800ab24:	0800d612 	.word	0x0800d612
 800ab28:	0800d628 	.word	0x0800d628

0800ab2c <optiga_shell_util_protected_update>:
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Increase Counter Object");
    example_optiga_util_update_count();
}

static void optiga_shell_util_protected_update(void)
{
 800ab2c:	b538      	push	{r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting Protected Update Example");
 800ab2e:	4d0d      	ldr	r5, [pc, #52]	; (800ab64 <optiga_shell_util_protected_update+0x38>)
 800ab30:	4c0d      	ldr	r4, [pc, #52]	; (800ab68 <optiga_shell_util_protected_update+0x3c>)
 800ab32:	480e      	ldr	r0, [pc, #56]	; (800ab6c <optiga_shell_util_protected_update+0x40>)
 800ab34:	4629      	mov	r1, r5
 800ab36:	4622      	mov	r2, r4
 800ab38:	f7fb fe1c 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Update Metadata for the Object to be updated and the Trust Anchor used to verify the update");
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4622      	mov	r2, r4
 800ab40:	480b      	ldr	r0, [pc, #44]	; (800ab70 <optiga_shell_util_protected_update+0x44>)
 800ab42:	f7fb fe17 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write Trust Anchor used by the Trust Qi to verify the update");
 800ab46:	4629      	mov	r1, r5
 800ab48:	4622      	mov	r2, r4
 800ab4a:	480a      	ldr	r0, [pc, #40]	; (800ab74 <optiga_shell_util_protected_update+0x48>)
 800ab4c:	f7fb fe12 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("3 Step: Start Protected update with prepared manifest and fragments");
 800ab50:	4629      	mov	r1, r5
 800ab52:	4622      	mov	r2, r4
 800ab54:	4808      	ldr	r0, [pc, #32]	; (800ab78 <optiga_shell_util_protected_update+0x4c>)
 800ab56:	f7fb fe0d 	bl	8006774 <optiga_lib_print_message>
    example_optiga_util_protected_update();
}
 800ab5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
    OPTIGA_SHELL_LOG_MESSAGE("Starting Protected Update Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Update Metadata for the Object to be updated and the Trust Anchor used to verify the update");
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write Trust Anchor used by the Trust Qi to verify the update");
    OPTIGA_SHELL_LOG_MESSAGE("3 Step: Start Protected update with prepared manifest and fragments");
    example_optiga_util_protected_update();
 800ab5e:	f7ff bb11 	b.w	800a184 <example_optiga_util_protected_update>
 800ab62:	bf00      	nop
 800ab64:	0800d437 	.word	0x0800d437
 800ab68:	0800d44a 	.word	0x0800d44a
 800ab6c:	0800d666 	.word	0x0800d666
 800ab70:	0800d688 	.word	0x0800d688
 800ab74:	0800d6ec 	.word	0x0800d6ec
 800ab78:	0800d731 	.word	0x0800d731

0800ab7c <optiga_shell_util_update_count>:
    OPTIGA_SHELL_LOG_MESSAGE("Important note: To continue with other examples you need to call the init parameter once again");
    example_optiga_util_hibernate_restore();
}

static void optiga_shell_util_update_count(void)
{
 800ab7c:	b538      	push	{r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting Update Counter Example");
 800ab7e:	4d0a      	ldr	r5, [pc, #40]	; (800aba8 <optiga_shell_util_update_count+0x2c>)
 800ab80:	4c0a      	ldr	r4, [pc, #40]	; (800abac <optiga_shell_util_update_count+0x30>)
 800ab82:	480b      	ldr	r0, [pc, #44]	; (800abb0 <optiga_shell_util_update_count+0x34>)
 800ab84:	4629      	mov	r1, r5
 800ab86:	4622      	mov	r2, r4
 800ab88:	f7fb fdf4 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Initial Counter Value");
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4808      	ldr	r0, [pc, #32]	; (800abb4 <optiga_shell_util_update_count+0x38>)
 800ab92:	f7fb fdef 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Increase Counter Object");
 800ab96:	4629      	mov	r1, r5
 800ab98:	4622      	mov	r2, r4
 800ab9a:	4807      	ldr	r0, [pc, #28]	; (800abb8 <optiga_shell_util_update_count+0x3c>)
 800ab9c:	f7fb fdea 	bl	8006774 <optiga_lib_print_message>
    example_optiga_util_update_count();
}
 800aba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void optiga_shell_util_update_count(void)
{
    OPTIGA_SHELL_LOG_MESSAGE("Starting Update Counter Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Initial Counter Value");
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Increase Counter Object");
    example_optiga_util_update_count();
 800aba4:	f7ff bc24 	b.w	800a3f0 <example_optiga_util_update_count>
 800aba8:	0800d437 	.word	0x0800d437
 800abac:	0800d44a 	.word	0x0800d44a
 800abb0:	0800d775 	.word	0x0800d775
 800abb4:	0800d795 	.word	0x0800d795
 800abb8:	0800d7b9 	.word	0x0800d7b9

0800abbc <optiga_shell_util_hibernate_restore>:
    OPTIGA_SHELL_LOG_MESSAGE("4 Step: Store new Binding Secret on the Host");
    example_pair_host_and_optiga_using_pre_shared_secret();
}

static void optiga_shell_util_hibernate_restore(void)
{
 800abbc:	b538      	push	{r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting Hibernate and Restore Example");
 800abbe:	4d21      	ldr	r5, [pc, #132]	; (800ac44 <optiga_shell_util_hibernate_restore+0x88>)
 800abc0:	4c21      	ldr	r4, [pc, #132]	; (800ac48 <optiga_shell_util_hibernate_restore+0x8c>)
 800abc2:	4822      	ldr	r0, [pc, #136]	; (800ac4c <optiga_shell_util_hibernate_restore+0x90>)
 800abc4:	4629      	mov	r1, r5
 800abc6:	4622      	mov	r2, r4
 800abc8:	f7fb fdd4 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Open Application on the security chip");
 800abcc:	4629      	mov	r1, r5
 800abce:	4622      	mov	r2, r4
 800abd0:	481f      	ldr	r0, [pc, #124]	; (800ac50 <optiga_shell_util_hibernate_restore+0x94>)
 800abd2:	f7fb fdcf 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Pair the host and the security chip");
 800abd6:	4629      	mov	r1, r5
 800abd8:	4622      	mov	r2, r4
 800abda:	481e      	ldr	r0, [pc, #120]	; (800ac54 <optiga_shell_util_hibernate_restore+0x98>)
 800abdc:	f7fb fdca 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("3 Step: Select Protected I2C Connection");
 800abe0:	4629      	mov	r1, r5
 800abe2:	4622      	mov	r2, r4
 800abe4:	481c      	ldr	r0, [pc, #112]	; (800ac58 <optiga_shell_util_hibernate_restore+0x9c>)
 800abe6:	f7fb fdc5 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("4 Step: Generate ECC NIST P-256 Key pair and store it in Session Data Object, export the public key");
 800abea:	4629      	mov	r1, r5
 800abec:	4622      	mov	r2, r4
 800abee:	481b      	ldr	r0, [pc, #108]	; (800ac5c <optiga_shell_util_hibernate_restore+0xa0>)
 800abf0:	f7fb fdc0 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("5 Step: Check Security Event Counter and wait till it reaches 0");
 800abf4:	4629      	mov	r1, r5
 800abf6:	4622      	mov	r2, r4
 800abf8:	4819      	ldr	r0, [pc, #100]	; (800ac60 <optiga_shell_util_hibernate_restore+0xa4>)
 800abfa:	f7fb fdbb 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("6 Step: Perform Close application with Hibernate parameter set to True");
 800abfe:	4629      	mov	r1, r5
 800ac00:	4622      	mov	r2, r4
 800ac02:	4818      	ldr	r0, [pc, #96]	; (800ac64 <optiga_shell_util_hibernate_restore+0xa8>)
 800ac04:	f7fb fdb6 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("7 Step: Open Application on the security chip");
 800ac08:	4629      	mov	r1, r5
 800ac0a:	4622      	mov	r2, r4
 800ac0c:	4816      	ldr	r0, [pc, #88]	; (800ac68 <optiga_shell_util_hibernate_restore+0xac>)
 800ac0e:	f7fb fdb1 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("8 Step: Sign prepared data with private key stored in Session Data Object");
 800ac12:	4629      	mov	r1, r5
 800ac14:	4622      	mov	r2, r4
 800ac16:	4815      	ldr	r0, [pc, #84]	; (800ac6c <optiga_shell_util_hibernate_restore+0xb0>)
 800ac18:	f7fb fdac 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("9 Step: Verify the signature with the public key generated previously");
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4622      	mov	r2, r4
 800ac20:	4813      	ldr	r0, [pc, #76]	; (800ac70 <optiga_shell_util_hibernate_restore+0xb4>)
 800ac22:	f7fb fda7 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("10 Step: Close Application on the chip");
 800ac26:	4629      	mov	r1, r5
 800ac28:	4622      	mov	r2, r4
 800ac2a:	4812      	ldr	r0, [pc, #72]	; (800ac74 <optiga_shell_util_hibernate_restore+0xb8>)
 800ac2c:	f7fb fda2 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("Important note: To continue with other examples you need to call the init parameter once again");
 800ac30:	4629      	mov	r1, r5
 800ac32:	4622      	mov	r2, r4
 800ac34:	4810      	ldr	r0, [pc, #64]	; (800ac78 <optiga_shell_util_hibernate_restore+0xbc>)
 800ac36:	f7fb fd9d 	bl	8006774 <optiga_lib_print_message>
    example_optiga_util_hibernate_restore();
}
 800ac3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("7 Step: Open Application on the security chip");
    OPTIGA_SHELL_LOG_MESSAGE("8 Step: Sign prepared data with private key stored in Session Data Object");
    OPTIGA_SHELL_LOG_MESSAGE("9 Step: Verify the signature with the public key generated previously");
    OPTIGA_SHELL_LOG_MESSAGE("10 Step: Close Application on the chip");
    OPTIGA_SHELL_LOG_MESSAGE("Important note: To continue with other examples you need to call the init parameter once again");
    example_optiga_util_hibernate_restore();
 800ac3e:	f7ff b94b 	b.w	8009ed8 <example_optiga_util_hibernate_restore>
 800ac42:	bf00      	nop
 800ac44:	0800d437 	.word	0x0800d437
 800ac48:	0800d44a 	.word	0x0800d44a
 800ac4c:	0800d7d9 	.word	0x0800d7d9
 800ac50:	0800d800 	.word	0x0800d800
 800ac54:	0800d82e 	.word	0x0800d82e
 800ac58:	0800d85a 	.word	0x0800d85a
 800ac5c:	0800d882 	.word	0x0800d882
 800ac60:	0800d8e6 	.word	0x0800d8e6
 800ac64:	0800d926 	.word	0x0800d926
 800ac68:	0800d96d 	.word	0x0800d96d
 800ac6c:	0800d99b 	.word	0x0800d99b
 800ac70:	0800d9e5 	.word	0x0800d9e5
 800ac74:	0800da2b 	.word	0x0800da2b
 800ac78:	0800da52 	.word	0x0800da52

0800ac7c <optiga_shell_pair_host_optiga>:
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Coprocessor UID from OID(0xE0C2) ");
    example_read_coprocessor_id();
}

static void optiga_shell_pair_host_optiga(void)
{
 800ac7c:	b538      	push	{r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting Pairing of Host and Trust Qi Example");
 800ac7e:	4d0f      	ldr	r5, [pc, #60]	; (800acbc <optiga_shell_pair_host_optiga+0x40>)
 800ac80:	4c0f      	ldr	r4, [pc, #60]	; (800acc0 <optiga_shell_pair_host_optiga+0x44>)
 800ac82:	4810      	ldr	r0, [pc, #64]	; (800acc4 <optiga_shell_pair_host_optiga+0x48>)
 800ac84:	4629      	mov	r1, r5
 800ac86:	4622      	mov	r2, r4
 800ac88:	f7fb fd74 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read and Check existing Metadata for the Binding Secret");
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	4622      	mov	r2, r4
 800ac90:	480d      	ldr	r0, [pc, #52]	; (800acc8 <optiga_shell_pair_host_optiga+0x4c>)
 800ac92:	f7fb fd6f 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Generate Random for the new Binding Secret");
 800ac96:	4629      	mov	r1, r5
 800ac98:	4622      	mov	r2, r4
 800ac9a:	480c      	ldr	r0, [pc, #48]	; (800accc <optiga_shell_pair_host_optiga+0x50>)
 800ac9c:	f7fb fd6a 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("3 Step: Write new Binding Secret");
 800aca0:	4629      	mov	r1, r5
 800aca2:	4622      	mov	r2, r4
 800aca4:	480a      	ldr	r0, [pc, #40]	; (800acd0 <optiga_shell_pair_host_optiga+0x54>)
 800aca6:	f7fb fd65 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("4 Step: Store new Binding Secret on the Host");
 800acaa:	4629      	mov	r1, r5
 800acac:	4622      	mov	r2, r4
 800acae:	4809      	ldr	r0, [pc, #36]	; (800acd4 <optiga_shell_pair_host_optiga+0x58>)
 800acb0:	f7fb fd60 	bl	8006774 <optiga_lib_print_message>
    example_pair_host_and_optiga_using_pre_shared_secret();
}
 800acb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting Pairing of Host and Trust Qi Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read and Check existing Metadata for the Binding Secret");
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Generate Random for the new Binding Secret");
    OPTIGA_SHELL_LOG_MESSAGE("3 Step: Write new Binding Secret");
    OPTIGA_SHELL_LOG_MESSAGE("4 Step: Store new Binding Secret on the Host");
    example_pair_host_and_optiga_using_pre_shared_secret();
 800acb8:	f7ff bc76 	b.w	800a5a8 <example_pair_host_and_optiga_using_pre_shared_secret>
 800acbc:	0800d437 	.word	0x0800d437
 800acc0:	0800d44a 	.word	0x0800d44a
 800acc4:	0800dab1 	.word	0x0800dab1
 800acc8:	0800dadf 	.word	0x0800dadf
 800accc:	0800db1f 	.word	0x0800db1f
 800acd0:	0800db52 	.word	0x0800db52
 800acd4:	0800db73 	.word	0x0800db73

0800acd8 <optiga_shell_util_read_coprocessor_id>:
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write new Metadata");
    example_optiga_util_write_data();
}

static void optiga_shell_util_read_coprocessor_id(void)
{
 800acd8:	b538      	push	{r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting reading of Coprocessor ID and displaying it's individual components Example");
 800acda:	4d08      	ldr	r5, [pc, #32]	; (800acfc <optiga_shell_util_read_coprocessor_id+0x24>)
 800acdc:	4c08      	ldr	r4, [pc, #32]	; (800ad00 <optiga_shell_util_read_coprocessor_id+0x28>)
 800acde:	4809      	ldr	r0, [pc, #36]	; (800ad04 <optiga_shell_util_read_coprocessor_id+0x2c>)
 800ace0:	4629      	mov	r1, r5
 800ace2:	4622      	mov	r2, r4
 800ace4:	f7fb fd46 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Coprocessor UID from OID(0xE0C2) ");
 800ace8:	4629      	mov	r1, r5
 800acea:	4622      	mov	r2, r4
 800acec:	4806      	ldr	r0, [pc, #24]	; (800ad08 <optiga_shell_util_read_coprocessor_id+0x30>)
 800acee:	f7fb fd41 	bl	8006774 <optiga_lib_print_message>
    example_read_coprocessor_id();
}
 800acf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static void optiga_shell_util_read_coprocessor_id(void)
{
    OPTIGA_SHELL_LOG_MESSAGE("Starting reading of Coprocessor ID and displaying it's individual components Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Coprocessor UID from OID(0xE0C2) ");
    example_read_coprocessor_id();
 800acf6:	f7ff bdb7 	b.w	800a868 <example_read_coprocessor_id>
 800acfa:	bf00      	nop
 800acfc:	0800d437 	.word	0x0800d437
 800ad00:	0800d44a 	.word	0x0800d44a
 800ad04:	0800dba0 	.word	0x0800dba0
 800ad08:	0800dbf5 	.word	0x0800dbf5

0800ad0c <optiga_shell_util_write_data>:
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Read Certificate Metadata");
    example_optiga_util_read_data();
}

static void optiga_shell_util_write_data(void)
{
 800ad0c:	b538      	push	{r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting Write Data/Metadata Example");
 800ad0e:	4d0a      	ldr	r5, [pc, #40]	; (800ad38 <optiga_shell_util_write_data+0x2c>)
 800ad10:	4c0a      	ldr	r4, [pc, #40]	; (800ad3c <optiga_shell_util_write_data+0x30>)
 800ad12:	480b      	ldr	r0, [pc, #44]	; (800ad40 <optiga_shell_util_write_data+0x34>)
 800ad14:	4629      	mov	r1, r5
 800ad16:	4622      	mov	r2, r4
 800ad18:	f7fb fd2c 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Sample Certificate in Trust Anchor Data Object ");
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	4622      	mov	r2, r4
 800ad20:	4808      	ldr	r0, [pc, #32]	; (800ad44 <optiga_shell_util_write_data+0x38>)
 800ad22:	f7fb fd27 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write new Metadata");
 800ad26:	4629      	mov	r1, r5
 800ad28:	4622      	mov	r2, r4
 800ad2a:	4807      	ldr	r0, [pc, #28]	; (800ad48 <optiga_shell_util_write_data+0x3c>)
 800ad2c:	f7fb fd22 	bl	8006774 <optiga_lib_print_message>
    example_optiga_util_write_data();
}
 800ad30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void optiga_shell_util_write_data(void)
{
    OPTIGA_SHELL_LOG_MESSAGE("Starting Write Data/Metadata Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Write Sample Certificate in Trust Anchor Data Object ");
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Write new Metadata");
    example_optiga_util_write_data();
 800ad34:	f7ff bbc4 	b.w	800a4c0 <example_optiga_util_write_data>
 800ad38:	0800d437 	.word	0x0800d437
 800ad3c:	0800d44a 	.word	0x0800d44a
 800ad40:	0800dc24 	.word	0x0800dc24
 800ad44:	0800dc49 	.word	0x0800dc49
 800ad48:	0800dc87 	.word	0x0800dc87

0800ad4c <optiga_shell_util_read_data>:
        }
    }while(FALSE);
}

static void optiga_shell_util_read_data(void)
{
 800ad4c:	b538      	push	{r3, r4, r5, lr}
    OPTIGA_SHELL_LOG_MESSAGE("Starting Read Data/Metadata Example");
 800ad4e:	4d0a      	ldr	r5, [pc, #40]	; (800ad78 <optiga_shell_util_read_data+0x2c>)
 800ad50:	4c0a      	ldr	r4, [pc, #40]	; (800ad7c <optiga_shell_util_read_data+0x30>)
 800ad52:	480b      	ldr	r0, [pc, #44]	; (800ad80 <optiga_shell_util_read_data+0x34>)
 800ad54:	4629      	mov	r1, r5
 800ad56:	4622      	mov	r2, r4
 800ad58:	f7fb fd0c 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Certificate ");
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4622      	mov	r2, r4
 800ad60:	4808      	ldr	r0, [pc, #32]	; (800ad84 <optiga_shell_util_read_data+0x38>)
 800ad62:	f7fb fd07 	bl	8006774 <optiga_lib_print_message>
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Read Certificate Metadata");
 800ad66:	4629      	mov	r1, r5
 800ad68:	4622      	mov	r2, r4
 800ad6a:	4807      	ldr	r0, [pc, #28]	; (800ad88 <optiga_shell_util_read_data+0x3c>)
 800ad6c:	f7fb fd02 	bl	8006774 <optiga_lib_print_message>
    example_optiga_util_read_data();
}
 800ad70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void optiga_shell_util_read_data(void)
{
    OPTIGA_SHELL_LOG_MESSAGE("Starting Read Data/Metadata Example");
    OPTIGA_SHELL_LOG_MESSAGE("1 Step: Read Certificate ");
    OPTIGA_SHELL_LOG_MESSAGE("2 Step: Read Certificate Metadata");
    example_optiga_util_read_data();
 800ad74:	f7ff bac2 	b.w	800a2fc <example_optiga_util_read_data>
 800ad78:	0800d437 	.word	0x0800d437
 800ad7c:	0800d44a 	.word	0x0800d44a
 800ad80:	0800dca2 	.word	0x0800dca2
 800ad84:	0800dcc6 	.word	0x0800dcc6
 800ad88:	0800dce0 	.word	0x0800dce0

0800ad8c <optiga_shell_init>:
    const char_t * cmd_options;
    void (*cmd_handler)(void);
}optiga_example_cmd_t;

static void optiga_shell_init(void)
{
 800ad8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint16_t optiga_oid = 0xE0C4;
    uint8_t required_current = 15;

    do
    {
        if (NULL == me_util)
 800ad8e:	4c27      	ldr	r4, [pc, #156]	; (800ae2c <optiga_shell_init+0xa0>)
 800ad90:	6820      	ldr	r0, [r4, #0]

static void optiga_shell_init(void)
{
    optiga_lib_status_t return_status;
    uint16_t optiga_oid = 0xE0C4;
    uint8_t required_current = 15;
 800ad92:	230f      	movs	r3, #15
 800ad94:	f88d 300f 	strb.w	r3, [sp, #15]

    do
    {
        if (NULL == me_util)
 800ad98:	b920      	cbnz	r0, 800ada4 <optiga_shell_init+0x18>
        {
            //Create an instance of optiga_util to open the application on OPTIGA.
            me_util = optiga_util_create(0, optiga_util_callback, NULL);
 800ad9a:	4925      	ldr	r1, [pc, #148]	; (800ae30 <optiga_shell_init+0xa4>)
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	f7f9 fb1b 	bl	80043d8 <optiga_util_create>
 800ada2:	6020      	str	r0, [r4, #0]
        }

        OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
 800ada4:	4823      	ldr	r0, [pc, #140]	; (800ae34 <optiga_shell_init+0xa8>)
 800ada6:	4924      	ldr	r1, [pc, #144]	; (800ae38 <optiga_shell_init+0xac>)
 800ada8:	4a24      	ldr	r2, [pc, #144]	; (800ae3c <optiga_shell_init+0xb0>)
        /**
         * Open the application on OPTIGA which is a precondition to perform any other operations
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800adaa:	4d25      	ldr	r5, [pc, #148]	; (800ae40 <optiga_shell_init+0xb4>)
        {
            //Create an instance of optiga_util to open the application on OPTIGA.
            me_util = optiga_util_create(0, optiga_util_callback, NULL);
        }

        OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
 800adac:	f7fb fce2 	bl	8006774 <optiga_lib_print_message>
        /**
         * Open the application on OPTIGA which is a precondition to perform any other operations
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800adb0:	2301      	movs	r3, #1
        return_status = optiga_util_open_application(me_util, 0);
 800adb2:	6820      	ldr	r0, [r4, #0]
        OPTIGA_EXAMPLE_LOG_MESSAGE("Initializing OPTIGA for example demonstration...\n");
        /**
         * Open the application on OPTIGA which is a precondition to perform any other operations
         * using optiga_util_open_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800adb4:	802b      	strh	r3, [r5, #0]
        return_status = optiga_util_open_application(me_util, 0);
 800adb6:	2100      	movs	r1, #0
 800adb8:	f7f9 fb4b 	bl	8004452 <optiga_util_open_application>

        if (OPTIGA_LIB_SUCCESS != return_status)
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d133      	bne.n	800ae28 <optiga_shell_init+0x9c>
        {
            break;
        }
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 800adc0:	882b      	ldrh	r3, [r5, #0]
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d0fb      	beq.n	800adc0 <optiga_shell_init+0x34>
        {
            //Wait until the optiga_util_open_application is completed
        }
        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
 800adc8:	4b1d      	ldr	r3, [pc, #116]	; (800ae40 <optiga_shell_init+0xb4>)
 800adca:	881e      	ldrh	r6, [r3, #0]
 800adcc:	b2b6      	uxth	r6, r6
 800adce:	bb5e      	cbnz	r6, 800ae28 <optiga_shell_init+0x9c>
        {
            //optiga util open application failed
            break;
        }

        OPTIGA_SHELL_LOG_MESSAGE("Initializing OPTIGA completed...\n\n");
 800add0:	481c      	ldr	r0, [pc, #112]	; (800ae44 <optiga_shell_init+0xb8>)
 800add2:	491d      	ldr	r1, [pc, #116]	; (800ae48 <optiga_shell_init+0xbc>)
 800add4:	4a1d      	ldr	r2, [pc, #116]	; (800ae4c <optiga_shell_init+0xc0>)
 800add6:	f7fb fccd 	bl	8006774 <optiga_lib_print_message>
        OPTIGA_SHELL_LOG_MESSAGE("Begin pairing of host and OPTIGA...");
 800adda:	481d      	ldr	r0, [pc, #116]	; (800ae50 <optiga_shell_init+0xc4>)
 800addc:	491a      	ldr	r1, [pc, #104]	; (800ae48 <optiga_shell_init+0xbc>)
 800adde:	4a1b      	ldr	r2, [pc, #108]	; (800ae4c <optiga_shell_init+0xc0>)
 800ade0:	f7fb fcc8 	bl	8006774 <optiga_lib_print_message>
        // Usercase: Generate the pre-shared secret on host and write it to OPTIGA
        example_pair_host_and_optiga_using_pre_shared_secret();
 800ade4:	f7ff fbe0 	bl	800a5a8 <example_pair_host_and_optiga_using_pre_shared_secret>
        OPTIGA_SHELL_LOG_MESSAGE("Pairing of host and OPTIGA completed...");
 800ade8:	481a      	ldr	r0, [pc, #104]	; (800ae54 <optiga_shell_init+0xc8>)
 800adea:	4917      	ldr	r1, [pc, #92]	; (800ae48 <optiga_shell_init+0xbc>)
 800adec:	4a17      	ldr	r2, [pc, #92]	; (800ae4c <optiga_shell_init+0xc0>)
 800adee:	f7fb fcc1 	bl	8006774 <optiga_lib_print_message>
        // Usercase: Generate the pre-shared secret on host and write it to OPTIGA
        return_status = optiga_util_write_data(me_util,
 800adf2:	f10d 030f 	add.w	r3, sp, #15
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	2301      	movs	r3, #1
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	f24e 01c4 	movw	r1, #57540	; 0xe0c4
 800ae02:	2240      	movs	r2, #64	; 0x40
 800ae04:	4633      	mov	r3, r6
 800ae06:	f7f9 fc0a 	bl	800461e <optiga_util_write_data>
                                               OPTIGA_UTIL_ERASE_AND_WRITE,
                                               0,
                                               &required_current,
                                               1);

        if (OPTIGA_LIB_SUCCESS != return_status)
 800ae0a:	b968      	cbnz	r0, 800ae28 <optiga_shell_init+0x9c>
        {
            break;
        }

        while (OPTIGA_LIB_BUSY == optiga_lib_status)
 800ae0c:	882b      	ldrh	r3, [r5, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d0fb      	beq.n	800ae0c <optiga_shell_init+0x80>
        {
            //Wait until the optiga_util_write_data operation is completed
        }
        OPTIGA_SHELL_LOG_MESSAGE("Setting current limitation to maximum...");
 800ae14:	4810      	ldr	r0, [pc, #64]	; (800ae58 <optiga_shell_init+0xcc>)
 800ae16:	490c      	ldr	r1, [pc, #48]	; (800ae48 <optiga_shell_init+0xbc>)
 800ae18:	4a0c      	ldr	r2, [pc, #48]	; (800ae4c <optiga_shell_init+0xc0>)
 800ae1a:	f7fb fcab 	bl	8006774 <optiga_lib_print_message>
        OPTIGA_SHELL_LOG_MESSAGE("Starting OPTIGA example demonstration..\n");
 800ae1e:	480f      	ldr	r0, [pc, #60]	; (800ae5c <optiga_shell_init+0xd0>)
 800ae20:	4909      	ldr	r1, [pc, #36]	; (800ae48 <optiga_shell_init+0xbc>)
 800ae22:	4a0a      	ldr	r2, [pc, #40]	; (800ae4c <optiga_shell_init+0xc0>)
 800ae24:	f7fb fca6 	bl	8006774 <optiga_lib_print_message>
    }while(FALSE);
}
 800ae28:	b004      	add	sp, #16
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	1fff018c 	.word	0x1fff018c
 800ae30:	0800a9e9 	.word	0x0800a9e9
 800ae34:	0800dd02 	.word	0x0800dd02
 800ae38:	0800c6a0 	.word	0x0800c6a0
 800ae3c:	0800c378 	.word	0x0800c378
 800ae40:	1fff0190 	.word	0x1fff0190
 800ae44:	0800dd34 	.word	0x0800dd34
 800ae48:	0800d437 	.word	0x0800d437
 800ae4c:	0800d44a 	.word	0x0800d44a
 800ae50:	0800dd57 	.word	0x0800dd57
 800ae54:	0800dd7b 	.word	0x0800dd7b
 800ae58:	0800dda3 	.word	0x0800dda3
 800ae5c:	0800ddcc 	.word	0x0800ddcc

0800ae60 <optiga_shell_show_usage>:
};

#define OPTIGA_SIZE_OF_CMDS            (sizeof(optiga_cmds)/sizeof(optiga_example_cmd_t))

static void optiga_shell_show_usage()
{
 800ae60:	b570      	push	{r4, r5, r6, lr}
    uint8_t number_of_cmds = OPTIGA_SIZE_OF_CMDS;
    uint8_t index;
    optiga_example_cmd_t * current_cmd;
    optiga_lib_print_string_with_newline("");
 800ae62:	480c      	ldr	r0, [pc, #48]	; (800ae94 <optiga_shell_show_usage+0x34>)
 800ae64:	f7fb fc6c 	bl	8006740 <optiga_lib_print_string_with_newline>
    optiga_lib_print_string_with_newline("    usage                : optiga --<cmd>");
 800ae68:	480b      	ldr	r0, [pc, #44]	; (800ae98 <optiga_shell_show_usage+0x38>)
 800ae6a:	f7fb fc69 	bl	8006740 <optiga_lib_print_string_with_newline>
 800ae6e:	2400      	movs	r4, #0
 800ae70:	4e0a      	ldr	r6, [pc, #40]	; (800ae9c <optiga_shell_show_usage+0x3c>)
    for(index = 0; index < number_of_cmds; index++)
    {
        current_cmd = &optiga_cmds[index];
        if(0 != strcmp("help",current_cmd->cmd_options))
 800ae72:	480b      	ldr	r0, [pc, #44]	; (800aea0 <optiga_shell_show_usage+0x40>)
 800ae74:	1935      	adds	r5, r6, r4
 800ae76:	6869      	ldr	r1, [r5, #4]
 800ae78:	f000 fd8d 	bl	800b996 <strcmp>
 800ae7c:	b128      	cbz	r0, 800ae8a <optiga_shell_show_usage+0x2a>
        {
            optiga_lib_print_string(current_cmd->cmd_description);
 800ae7e:	59a0      	ldr	r0, [r4, r6]
 800ae80:	f7fb fc4e 	bl	8006720 <optiga_lib_print_string>
            optiga_lib_print_string_with_newline(current_cmd->cmd_options);
 800ae84:	6868      	ldr	r0, [r5, #4]
 800ae86:	f7fb fc5b 	bl	8006740 <optiga_lib_print_string_with_newline>
 800ae8a:	340c      	adds	r4, #12
    uint8_t number_of_cmds = OPTIGA_SIZE_OF_CMDS;
    uint8_t index;
    optiga_example_cmd_t * current_cmd;
    optiga_lib_print_string_with_newline("");
    optiga_lib_print_string_with_newline("    usage                : optiga --<cmd>");
    for(index = 0; index < number_of_cmds; index++)
 800ae8c:	2ccc      	cmp	r4, #204	; 0xcc
 800ae8e:	d1ef      	bne.n	800ae70 <optiga_shell_show_usage+0x10>
        {
            optiga_lib_print_string(current_cmd->cmd_description);
            optiga_lib_print_string_with_newline(current_cmd->cmd_options);
        }
    }
}
 800ae90:	bd70      	pop	{r4, r5, r6, pc}
 800ae92:	bf00      	nop
 800ae94:	0800dd56 	.word	0x0800dd56
 800ae98:	0800ddf5 	.word	0x0800ddf5
 800ae9c:	1ffed69c 	.word	0x1ffed69c
 800aea0:	0800de1f 	.word	0x0800de1f

0800aea4 <optiga_shell_deinit>:
        OPTIGA_SHELL_LOG_MESSAGE("Starting OPTIGA example demonstration..\n");
    }while(FALSE);
}

static void optiga_shell_deinit(void)
{
 800aea4:	b538      	push	{r3, r4, r5, lr}
        /**
         * Close the application on OPTIGA after all the operations are executed
         * using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
        return_status = optiga_util_close_application(me_util, 0);
 800aea6:	4c0c      	ldr	r4, [pc, #48]	; (800aed8 <optiga_shell_deinit+0x34>)
    {
        /**
         * Close the application on OPTIGA after all the operations are executed
         * using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800aea8:	4d0c      	ldr	r5, [pc, #48]	; (800aedc <optiga_shell_deinit+0x38>)
        return_status = optiga_util_close_application(me_util, 0);
 800aeaa:	6820      	ldr	r0, [r4, #0]
    {
        /**
         * Close the application on OPTIGA after all the operations are executed
         * using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800aeac:	2301      	movs	r3, #1
        return_status = optiga_util_close_application(me_util, 0);
 800aeae:	2100      	movs	r1, #0
    {
        /**
         * Close the application on OPTIGA after all the operations are executed
         * using optiga_util_close_application
         */
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800aeb0:	802b      	strh	r3, [r5, #0]
        return_status = optiga_util_close_application(me_util, 0);
 800aeb2:	f7f9 fb00 	bl	80044b6 <optiga_util_close_application>

        if (OPTIGA_LIB_SUCCESS != return_status)
 800aeb6:	b968      	cbnz	r0, 800aed4 <optiga_shell_deinit+0x30>
        {
            break;
        }

        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 800aeb8:	882b      	ldrh	r3, [r5, #0]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d0fb      	beq.n	800aeb8 <optiga_shell_deinit+0x14>
        {
            //Wait until the optiga_util_close_application is completed
        }

        if (OPTIGA_LIB_SUCCESS != optiga_lib_status)
 800aec0:	4b06      	ldr	r3, [pc, #24]	; (800aedc <optiga_shell_deinit+0x38>)
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	b92b      	cbnz	r3, 800aed4 <optiga_shell_deinit+0x30>
        {
            //optiga util close application failed
            break;
        }

        if (NULL != me_util)
 800aec8:	6820      	ldr	r0, [r4, #0]
 800aeca:	b118      	cbz	r0, 800aed4 <optiga_shell_deinit+0x30>
            // destroy util and crypt instances
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            optiga_util_destroy(me_util);
        }
    }while(FALSE);
}
 800aecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

        if (NULL != me_util)
        {
            // destroy util and crypt instances
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            optiga_util_destroy(me_util);
 800aed0:	f7f9 baaa 	b.w	8004428 <optiga_util_destroy>
 800aed4:	bd38      	pop	{r3, r4, r5, pc}
 800aed6:	bf00      	nop
 800aed8:	1fff018c 	.word	0x1fff018c
 800aedc:	1fff0190 	.word	0x1fff0190

0800aee0 <print_performance_results>:
     OPTIGA_SHELL_LOG_ERROR_MESSAGE("This option is disabled, to use this option enable macro OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED");
#endif
}

void print_performance_results(void (*test_case)(void)) 
{
 800aee0:	b530      	push	{r4, r5, lr}
 800aee2:	b089      	sub	sp, #36	; 0x24
 800aee4:	4605      	mov	r5, r0
    char buffer_string[30];
    unsigned int timestamp = pal_os_timer_get_time_in_milliseconds(); 
 800aee6:	f7f9 fa03 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
 800aeea:	4604      	mov	r4, r0
    test_case(); 
 800aeec:	47a8      	blx	r5
    //lint --e{713} suppress "Due to function parameter typecasting is done from unsigned int to int "
    sprintf(buffer_string, "Example takes %d msec", (int) (pal_os_timer_get_time_in_milliseconds() - timestamp));
 800aeee:	f7f9 f9ff 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
 800aef2:	4909      	ldr	r1, [pc, #36]	; (800af18 <print_performance_results+0x38>)
 800aef4:	1b02      	subs	r2, r0, r4
 800aef6:	4668      	mov	r0, sp
 800aef8:	f000 fd1a 	bl	800b930 <siprintf>
    OPTIGA_SHELL_LOG_MESSAGE(buffer_string); 
 800aefc:	4907      	ldr	r1, [pc, #28]	; (800af1c <print_performance_results+0x3c>)
 800aefe:	4a08      	ldr	r2, [pc, #32]	; (800af20 <print_performance_results+0x40>)
 800af00:	4668      	mov	r0, sp
 800af02:	f7fb fc37 	bl	8006774 <optiga_lib_print_message>
    optiga_lib_print_string_with_newline(""); 
 800af06:	4807      	ldr	r0, [pc, #28]	; (800af24 <print_performance_results+0x44>)
 800af08:	f7fb fc1a 	bl	8006740 <optiga_lib_print_string_with_newline>
    pal_os_timer_delay_in_milliseconds(2000);
 800af0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af10:	f7f9 f9f4 	bl	80042fc <pal_os_timer_delay_in_milliseconds>
}
 800af14:	b009      	add	sp, #36	; 0x24
 800af16:	bd30      	pop	{r4, r5, pc}
 800af18:	0800de24 	.word	0x0800de24
 800af1c:	0800d437 	.word	0x0800d437
 800af20:	0800d44a 	.word	0x0800d44a
 800af24:	0800dd56 	.word	0x0800dd56

0800af28 <optiga_shell_selftest>:

static void optiga_shell_selftest(void)
{
 800af28:	b508      	push	{r3, lr}
    print_performance_results(optiga_shell_init);
 800af2a:	4814      	ldr	r0, [pc, #80]	; (800af7c <optiga_shell_selftest+0x54>)
 800af2c:	f7ff ffd8 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_util_read_data);
 800af30:	4813      	ldr	r0, [pc, #76]	; (800af80 <optiga_shell_selftest+0x58>)
 800af32:	f7ff ffd5 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_util_write_data);
 800af36:	4813      	ldr	r0, [pc, #76]	; (800af84 <optiga_shell_selftest+0x5c>)
 800af38:	f7ff ffd2 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_util_read_coprocessor_id);
 800af3c:	4812      	ldr	r0, [pc, #72]	; (800af88 <optiga_shell_selftest+0x60>)
 800af3e:	f7ff ffcf 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_pair_host_optiga);
 800af42:	4812      	ldr	r0, [pc, #72]	; (800af8c <optiga_shell_selftest+0x64>)
 800af44:	f7ff ffcc 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_util_update_count);
 800af48:	4811      	ldr	r0, [pc, #68]	; (800af90 <optiga_shell_selftest+0x68>)
 800af4a:	f7ff ffc9 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_util_protected_update);
 800af4e:	4811      	ldr	r0, [pc, #68]	; (800af94 <optiga_shell_selftest+0x6c>)
 800af50:	f7ff ffc6 	bl	800aee0 <print_performance_results>

    print_performance_results(optiga_shell_crypt_hash);
 800af54:	4810      	ldr	r0, [pc, #64]	; (800af98 <optiga_shell_selftest+0x70>)
 800af56:	f7ff ffc3 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_crypt_hash_data);
 800af5a:	4810      	ldr	r0, [pc, #64]	; (800af9c <optiga_shell_selftest+0x74>)
 800af5c:	f7ff ffc0 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_crypt_random);
 800af60:	480f      	ldr	r0, [pc, #60]	; (800afa0 <optiga_shell_selftest+0x78>)
 800af62:	f7ff ffbd 	bl	800aee0 <print_performance_results>

    print_performance_results(optiga_shell_crypt_ecc_generate_keypair);
 800af66:	480f      	ldr	r0, [pc, #60]	; (800afa4 <optiga_shell_selftest+0x7c>)
 800af68:	f7ff ffba 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_crypt_ecdsa_sign);
 800af6c:	480e      	ldr	r0, [pc, #56]	; (800afa8 <optiga_shell_selftest+0x80>)
 800af6e:	f7ff ffb7 	bl	800aee0 <print_performance_results>
    print_performance_results(optiga_shell_crypt_ecdsa_verify);
 800af72:	480e      	ldr	r0, [pc, #56]	; (800afac <optiga_shell_selftest+0x84>)

}
 800af74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    print_performance_results(optiga_shell_crypt_hash_data);
    print_performance_results(optiga_shell_crypt_random);

    print_performance_results(optiga_shell_crypt_ecc_generate_keypair);
    print_performance_results(optiga_shell_crypt_ecdsa_sign);
    print_performance_results(optiga_shell_crypt_ecdsa_verify);
 800af78:	f7ff bfb2 	b.w	800aee0 <print_performance_results>
 800af7c:	0800ad8d 	.word	0x0800ad8d
 800af80:	0800ad4d 	.word	0x0800ad4d
 800af84:	0800ad0d 	.word	0x0800ad0d
 800af88:	0800acd9 	.word	0x0800acd9
 800af8c:	0800ac7d 	.word	0x0800ac7d
 800af90:	0800ab7d 	.word	0x0800ab7d
 800af94:	0800ab2d 	.word	0x0800ab2d
 800af98:	0800aaf9 	.word	0x0800aaf9
 800af9c:	0800aac5 	.word	0x0800aac5
 800afa0:	0800aa91 	.word	0x0800aa91
 800afa4:	0800aa5d 	.word	0x0800aa5d
 800afa8:	0800aa29 	.word	0x0800aa29
 800afac:	0800a9f5 	.word	0x0800a9f5

0800afb0 <optiga_shell_begin>:
{
    optiga_lib_print_string("$");
}

void optiga_shell_begin(void)
{
 800afb0:	b530      	push	{r4, r5, lr}
 800afb2:	b097      	sub	sp, #92	; 0x5c

}

static void optiga_shell_show_prompt()
{
    optiga_lib_print_string("$");
 800afb4:	483f      	ldr	r0, [pc, #252]	; (800b0b4 <optiga_shell_begin+0x104>)
}

void optiga_shell_begin(void)
{
    uint8_t ch = 0;
 800afb6:	2400      	movs	r4, #0
 800afb8:	f88d 4003 	strb.w	r4, [sp, #3]

}

static void optiga_shell_show_prompt()
{
    optiga_lib_print_string("$");
 800afbc:	f7fb fbb0 	bl	8006720 <optiga_lib_print_string>
    uint8_t ch = 0;
    char_t user_cmd[50];
    uint8_t index = 0;

    optiga_shell_show_prompt();
    optiga_shell_show_usage();
 800afc0:	f7ff ff4e 	bl	800ae60 <optiga_shell_show_usage>

}

static void optiga_shell_show_prompt()
{
    optiga_lib_print_string("$");
 800afc4:	483b      	ldr	r0, [pc, #236]	; (800b0b4 <optiga_shell_begin+0x104>)
 800afc6:	f7fb fbab 	bl	8006720 <optiga_lib_print_string>
    optiga_shell_show_prompt();

    //lint --e{716} Suppress the infinite loop
    while(TRUE)
    {
        if (0 == pal_logger_read(&logger_console,&ch,1))
 800afca:	483b      	ldr	r0, [pc, #236]	; (800b0b8 <optiga_shell_begin+0x108>)
 800afcc:	f10d 0103 	add.w	r1, sp, #3
 800afd0:	2201      	movs	r2, #1
 800afd2:	f7f9 f8bf 	bl	8004154 <pal_logger_read>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d1f7      	bne.n	800afca <optiga_shell_begin+0x1a>
        {

            if(ch == 0x0d || ch == 0x0a)
 800afda:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800afde:	aa16      	add	r2, sp, #88	; 0x58
 800afe0:	2b0d      	cmp	r3, #13
 800afe2:	eb02 0504 	add.w	r5, r2, r4
 800afe6:	d001      	beq.n	800afec <optiga_shell_begin+0x3c>
 800afe8:	2b0a      	cmp	r3, #10
 800afea:	d155      	bne.n	800b098 <optiga_shell_begin+0xe8>
            {
                user_cmd[index++] = 0;
 800afec:	2300      	movs	r3, #0
                index = 0;
                optiga_lib_print_string_with_newline("");
 800afee:	4833      	ldr	r0, [pc, #204]	; (800b0bc <optiga_shell_begin+0x10c>)
        if (0 == pal_logger_read(&logger_console,&ch,1))
        {

            if(ch == 0x0d || ch == 0x0a)
            {
                user_cmd[index++] = 0;
 800aff0:	f805 3c34 	strb.w	r3, [r5, #-52]
                index = 0;
                optiga_lib_print_string_with_newline("");
 800aff4:	f7fb fba4 	bl	8006740 <optiga_lib_print_string_with_newline>
    optiga_example_cmd_t * current_cmd;

    
    do
    {
        if (0 != strncmp(user_cmd,optiga_cmd_option,9))
 800aff8:	a809      	add	r0, sp, #36	; 0x24
 800affa:	4931      	ldr	r1, [pc, #196]	; (800b0c0 <optiga_shell_begin+0x110>)
 800affc:	2209      	movs	r2, #9
 800affe:	f000 fce4 	bl	800b9ca <strncmp>
 800b002:	2800      	cmp	r0, #0
 800b004:	d13b      	bne.n	800b07e <optiga_shell_begin+0xce>
 800b006:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 800b00a:	ab09      	add	r3, sp, #36	; 0x24

static void optiga_shell_trim_cmd(char_t * user_cmd)
{
    char_t* i = user_cmd;
    char_t* j = user_cmd;
    while(*j != 0)
 800b00c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    {
        *i = *j++;
 800b010:	701a      	strb	r2, [r3, #0]

static void optiga_shell_trim_cmd(char_t * user_cmd)
{
    char_t* i = user_cmd;
    char_t* j = user_cmd;
    while(*j != 0)
 800b012:	b11a      	cbz	r2, 800b01c <optiga_shell_begin+0x6c>
    {
        *i = *j++;
        if(*i != ' ')
 800b014:	2a20      	cmp	r2, #32
            i++;
 800b016:	bf18      	it	ne
 800b018:	3301      	addne	r3, #1
 800b01a:	e7f7      	b.n	800b00c <optiga_shell_begin+0x5c>
    }
    *i = 0;
    if(strlen(user_cmd)>strlen("optiga --"))
 800b01c:	a809      	add	r0, sp, #36	; 0x24
 800b01e:	f000 fccc 	bl	800b9ba <strlen>
 800b022:	2809      	cmp	r0, #9
 800b024:	d903      	bls.n	800b02e <optiga_shell_begin+0x7e>
    {
        strcpy(user_cmd,user_cmd+strlen("optiga --")-1);
 800b026:	a809      	add	r0, sp, #36	; 0x24
 800b028:	a90b      	add	r1, sp, #44	; 0x2c
 800b02a:	f000 fcbe 	bl	800b9aa <strcpy>
    optiga_example_cmd_t * current_cmd;

    
    do
    {
        if (0 != strncmp(user_cmd,optiga_cmd_option,9))
 800b02e:	2500      	movs	r5, #0
 800b030:	4c24      	ldr	r4, [pc, #144]	; (800b0c4 <optiga_shell_begin+0x114>)
 800b032:	230c      	movs	r3, #12
 800b034:	fb03 4405 	mla	r4, r3, r5, r4
        }
        optiga_shell_trim_cmd(user_cmd);
        for(index = 0; index < number_of_cmds; index++)
        {
            current_cmd = &optiga_cmds[index];
            if(0 == strcmp(user_cmd,current_cmd->cmd_options))
 800b038:	a809      	add	r0, sp, #36	; 0x24
 800b03a:	6861      	ldr	r1, [r4, #4]
 800b03c:	f000 fcab 	bl	800b996 <strcmp>
 800b040:	b9d0      	cbnz	r0, 800b078 <optiga_shell_begin+0xc8>
            {
                if(NULL != current_cmd->cmd_handler)
 800b042:	68a3      	ldr	r3, [r4, #8]
 800b044:	b1a3      	cbz	r3, 800b070 <optiga_shell_begin+0xc0>
                {
                    unsigned int timestamp = pal_os_timer_get_time_in_milliseconds();
 800b046:	f7f9 f953 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
                    current_cmd->cmd_handler();
 800b04a:	68a3      	ldr	r3, [r4, #8]
            current_cmd = &optiga_cmds[index];
            if(0 == strcmp(user_cmd,current_cmd->cmd_options))
            {
                if(NULL != current_cmd->cmd_handler)
                {
                    unsigned int timestamp = pal_os_timer_get_time_in_milliseconds();
 800b04c:	4605      	mov	r5, r0
                    current_cmd->cmd_handler();
 800b04e:	4798      	blx	r3
                    char buffer_string[30];
                    //lint --e{713,705,737} suppress "Due to function parameter typecasting is done from unsigned int to int "
                    sprintf(buffer_string, "Example takes %d msec", (int) pal_os_timer_get_time_in_milliseconds() - timestamp);
 800b050:	f7f9 f94e 	bl	80042f0 <pal_os_timer_get_time_in_milliseconds>
 800b054:	491c      	ldr	r1, [pc, #112]	; (800b0c8 <optiga_shell_begin+0x118>)
 800b056:	1b42      	subs	r2, r0, r5
 800b058:	a801      	add	r0, sp, #4
 800b05a:	f000 fc69 	bl	800b930 <siprintf>
                    OPTIGA_EXAMPLE_LOG_MESSAGE(buffer_string);
 800b05e:	a801      	add	r0, sp, #4
 800b060:	491a      	ldr	r1, [pc, #104]	; (800b0cc <optiga_shell_begin+0x11c>)
 800b062:	4a1b      	ldr	r2, [pc, #108]	; (800b0d0 <optiga_shell_begin+0x120>)
 800b064:	f7fb fb86 	bl	8006774 <optiga_lib_print_message>
                    optiga_lib_print_string_with_newline("");
 800b068:	4814      	ldr	r0, [pc, #80]	; (800b0bc <optiga_shell_begin+0x10c>)
 800b06a:	f7fb fb69 	bl	8006740 <optiga_lib_print_string_with_newline>
 800b06e:	e00e      	b.n	800b08e <optiga_shell_begin+0xde>
                    cmd_found = 1;
                    break;
                }
                else
                {
                    optiga_lib_print_string_with_newline("No example exists for this request");
 800b070:	4818      	ldr	r0, [pc, #96]	; (800b0d4 <optiga_shell_begin+0x124>)
 800b072:	f7fb fb65 	bl	8006740 <optiga_lib_print_string_with_newline>
 800b076:	e002      	b.n	800b07e <optiga_shell_begin+0xce>
 800b078:	3501      	adds	r5, #1
        if (0 != strncmp(user_cmd,optiga_cmd_option,9))
        {
            break;
        }
        optiga_shell_trim_cmd(user_cmd);
        for(index = 0; index < number_of_cmds; index++)
 800b07a:	2d11      	cmp	r5, #17
 800b07c:	d1d8      	bne.n	800b030 <optiga_shell_begin+0x80>
            }
        }
    } while (FALSE);
    if(!cmd_found)
    {
        optiga_lib_print_string_with_newline("");
 800b07e:	480f      	ldr	r0, [pc, #60]	; (800b0bc <optiga_shell_begin+0x10c>)
 800b080:	f7fb fb5e 	bl	8006740 <optiga_lib_print_string_with_newline>
        optiga_lib_print_string_with_newline("No example exists for this request chose below options");
 800b084:	4814      	ldr	r0, [pc, #80]	; (800b0d8 <optiga_shell_begin+0x128>)
 800b086:	f7fb fb5b 	bl	8006740 <optiga_lib_print_string_with_newline>
        optiga_shell_show_usage();
 800b08a:	f7ff fee9 	bl	800ae60 <optiga_shell_show_usage>

}

static void optiga_shell_show_prompt()
{
    optiga_lib_print_string("$");
 800b08e:	4809      	ldr	r0, [pc, #36]	; (800b0b4 <optiga_shell_begin+0x104>)
 800b090:	f7fb fb46 	bl	8006720 <optiga_lib_print_string>
        {

            if(ch == 0x0d || ch == 0x0a)
            {
                user_cmd[index++] = 0;
                index = 0;
 800b094:	2400      	movs	r4, #0
 800b096:	e798      	b.n	800afca <optiga_shell_begin+0x1a>
            }
            else
            {
                //keep adding
                //lint --e{534,713} The return value is not used hence not checked*/
                pal_logger_write(&logger_console, &ch, 1);
 800b098:	4807      	ldr	r0, [pc, #28]	; (800b0b8 <optiga_shell_begin+0x108>)
 800b09a:	f10d 0103 	add.w	r1, sp, #3
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f7f9 f83a 	bl	8004118 <pal_logger_write>
                user_cmd[index++] = ch;
 800b0a4:	3401      	adds	r4, #1
 800b0a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b0aa:	f805 3c34 	strb.w	r3, [r5, #-52]
 800b0ae:	b2e4      	uxtb	r4, r4
 800b0b0:	e78b      	b.n	800afca <optiga_shell_begin+0x1a>
 800b0b2:	bf00      	nop
 800b0b4:	0800de3a 	.word	0x0800de3a
 800b0b8:	1ffed134 	.word	0x1ffed134
 800b0bc:	0800dd56 	.word	0x0800dd56
 800b0c0:	0800dfa9 	.word	0x0800dfa9
 800b0c4:	1ffed69c 	.word	0x1ffed69c
 800b0c8:	0800de24 	.word	0x0800de24
 800b0cc:	0800c6a0 	.word	0x0800c6a0
 800b0d0:	0800c378 	.word	0x0800c378
 800b0d4:	0800de3c 	.word	0x0800de3c
 800b0d8:	0800de5f 	.word	0x0800de5f

0800b0dc <optiga_shell_wait_for_user>:
        }
    }
}

void optiga_shell_wait_for_user(void)
{
 800b0dc:	b507      	push	{r0, r1, r2, lr}
    uint16_t bytes = 0;
    uint8_t ch = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f88d 3007 	strb.w	r3, [sp, #7]
    //lint --e{716} Suppress the infinite loop
    while(TRUE)
    {
        bytes = USBD_VCOM_BytesReceived();
 800b0e4:	f7f6 ffe4 	bl	80020b0 <USBD_VCOM_BytesReceived>
        if (bytes)
 800b0e8:	b140      	cbz	r0, 800b0fc <optiga_shell_wait_for_user+0x20>
        {
            //lint --e{534} The return value is not used hence not checked*/
            pal_logger_read(&logger_console,&ch,1);
 800b0ea:	f10d 0107 	add.w	r1, sp, #7
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	4808      	ldr	r0, [pc, #32]	; (800b114 <optiga_shell_wait_for_user+0x38>)
 800b0f2:	f7f9 f82f 	bl	8004154 <pal_logger_read>
            pal_os_timer_delay_in_milliseconds(2000);
        }
        bytes = 0;
        CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
    }
}
 800b0f6:	b003      	add	sp, #12
 800b0f8:	f85d fb04 	ldr.w	pc, [sp], #4
            pal_logger_read(&logger_console,&ch,1);
            break;
        }
        else
        {
            optiga_lib_print_string_with_newline("Press any key to start optiga mini shell");
 800b0fc:	4806      	ldr	r0, [pc, #24]	; (800b118 <optiga_shell_wait_for_user+0x3c>)
 800b0fe:	f7fb fb1f 	bl	8006740 <optiga_lib_print_string_with_newline>
            pal_os_timer_delay_in_milliseconds(2000);
 800b102:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b106:	f7f9 f8f9 	bl	80042fc <pal_os_timer_delay_in_milliseconds>
        }
        bytes = 0;
        CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 800b10a:	4804      	ldr	r0, [pc, #16]	; (800b11c <optiga_shell_wait_for_user+0x40>)
 800b10c:	f7f6 ff02 	bl	8001f14 <CDC_Device_USBTask>
    }
 800b110:	e7e8      	b.n	800b0e4 <optiga_shell_wait_for_user+0x8>
 800b112:	bf00      	nop
 800b114:	1ffed134 	.word	0x1ffed134
 800b118:	0800de96 	.word	0x0800de96
 800b11c:	1fff046c 	.word	0x1fff046c

0800b120 <main>:
 *  0 on success
 *  1 on failure
 */

int main(void)
{
 800b120:	b508      	push	{r3, lr}
    DAVE_STATUS_t status;
    uint8_t return_value = 0;

    // Initialization of DAVE Apps
    status = DAVE_Init(); /* Initialization of DAVE APPs  */
 800b122:	f7f8 fd9d 	bl	8003c60 <DAVE_Init>
    if (status == DAVE_STATUS_FAILURE)
 800b126:	2801      	cmp	r0, #1
 800b128:	d100      	bne.n	800b12c <main+0xc>
        XMC_DEBUG("DAVE APPs initialization failed\n");

        while (1U)
        {

        }
 800b12a:	e7fe      	b.n	800b12a <main+0xa>
    }

    do
    {
        if(PAL_STATUS_SUCCESS != pal_logger_init(&logger_console))
 800b12c:	4806      	ldr	r0, [pc, #24]	; (800b148 <main+0x28>)
 800b12e:	f7f8 ffe3 	bl	80040f8 <pal_logger_init>
 800b132:	b930      	cbnz	r0, 800b142 <main+0x22>
        {
            break;
        }

        pal_os_timer_delay_in_milliseconds(100);
 800b134:	2064      	movs	r0, #100	; 0x64
 800b136:	f7f9 f8e1 	bl	80042fc <pal_os_timer_delay_in_milliseconds>

        optiga_shell_wait_for_user();
 800b13a:	f7ff ffcf 	bl	800b0dc <optiga_shell_wait_for_user>
        optiga_shell_begin();
 800b13e:	f7ff ff37 	bl	800afb0 <optiga_shell_begin>

    }while (FALSE);

    return return_value;
}
 800b142:	2000      	movs	r0, #0
 800b144:	bd08      	pop	{r3, pc}
 800b146:	bf00      	nop
 800b148:	1ffed134 	.word	0x1ffed134

0800b14c <__aeabi_llsr>:
 800b14c:	40d0      	lsrs	r0, r2
 800b14e:	1c0b      	adds	r3, r1, #0
 800b150:	40d1      	lsrs	r1, r2
 800b152:	469c      	mov	ip, r3
 800b154:	3a20      	subs	r2, #32
 800b156:	40d3      	lsrs	r3, r2
 800b158:	4318      	orrs	r0, r3
 800b15a:	4252      	negs	r2, r2
 800b15c:	4663      	mov	r3, ip
 800b15e:	4093      	lsls	r3, r2
 800b160:	4318      	orrs	r0, r3
 800b162:	4770      	bx	lr

0800b164 <__aeabi_uldivmod>:
 800b164:	b94b      	cbnz	r3, 800b17a <__aeabi_uldivmod+0x16>
 800b166:	b942      	cbnz	r2, 800b17a <__aeabi_uldivmod+0x16>
 800b168:	2900      	cmp	r1, #0
 800b16a:	bf08      	it	eq
 800b16c:	2800      	cmpeq	r0, #0
 800b16e:	d002      	beq.n	800b176 <__aeabi_uldivmod+0x12>
 800b170:	f04f 31ff 	mov.w	r1, #4294967295
 800b174:	4608      	mov	r0, r1
 800b176:	f000 b83b 	b.w	800b1f0 <__aeabi_idiv0>
 800b17a:	b082      	sub	sp, #8
 800b17c:	46ec      	mov	ip, sp
 800b17e:	e92d 5000 	stmdb	sp!, {ip, lr}
 800b182:	f000 f81d 	bl	800b1c0 <__gnu_uldivmod_helper>
 800b186:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b18a:	b002      	add	sp, #8
 800b18c:	bc0c      	pop	{r2, r3}
 800b18e:	4770      	bx	lr

0800b190 <__gnu_ldivmod_helper>:
 800b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b194:	9c06      	ldr	r4, [sp, #24]
 800b196:	4615      	mov	r5, r2
 800b198:	4606      	mov	r6, r0
 800b19a:	460f      	mov	r7, r1
 800b19c:	4698      	mov	r8, r3
 800b19e:	f000 f829 	bl	800b1f4 <__divdi3>
 800b1a2:	fb05 f301 	mul.w	r3, r5, r1
 800b1a6:	fb00 3808 	mla	r8, r0, r8, r3
 800b1aa:	fba5 2300 	umull	r2, r3, r5, r0
 800b1ae:	1ab2      	subs	r2, r6, r2
 800b1b0:	4443      	add	r3, r8
 800b1b2:	eb67 0303 	sbc.w	r3, r7, r3
 800b1b6:	e9c4 2300 	strd	r2, r3, [r4]
 800b1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1be:	bf00      	nop

0800b1c0 <__gnu_uldivmod_helper>:
 800b1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c4:	9c06      	ldr	r4, [sp, #24]
 800b1c6:	4690      	mov	r8, r2
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	460f      	mov	r7, r1
 800b1cc:	461d      	mov	r5, r3
 800b1ce:	f000 f95f 	bl	800b490 <__udivdi3>
 800b1d2:	fb00 f505 	mul.w	r5, r0, r5
 800b1d6:	fba0 2308 	umull	r2, r3, r0, r8
 800b1da:	fb08 5501 	mla	r5, r8, r1, r5
 800b1de:	1ab2      	subs	r2, r6, r2
 800b1e0:	442b      	add	r3, r5
 800b1e2:	eb67 0303 	sbc.w	r3, r7, r3
 800b1e6:	e9c4 2300 	strd	r2, r3, [r4]
 800b1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ee:	bf00      	nop

0800b1f0 <__aeabi_idiv0>:
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop

0800b1f4 <__divdi3>:
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1fa:	f2c0 80a6 	blt.w	800b34a <__divdi3+0x156>
 800b1fe:	2600      	movs	r6, #0
 800b200:	2b00      	cmp	r3, #0
 800b202:	f2c0 809c 	blt.w	800b33e <__divdi3+0x14a>
 800b206:	4688      	mov	r8, r1
 800b208:	4694      	mov	ip, r2
 800b20a:	469e      	mov	lr, r3
 800b20c:	4615      	mov	r5, r2
 800b20e:	4604      	mov	r4, r0
 800b210:	460f      	mov	r7, r1
 800b212:	2b00      	cmp	r3, #0
 800b214:	d13d      	bne.n	800b292 <__divdi3+0x9e>
 800b216:	428a      	cmp	r2, r1
 800b218:	d959      	bls.n	800b2ce <__divdi3+0xda>
 800b21a:	fab2 f382 	clz	r3, r2
 800b21e:	b13b      	cbz	r3, 800b230 <__divdi3+0x3c>
 800b220:	f1c3 0220 	rsb	r2, r3, #32
 800b224:	409f      	lsls	r7, r3
 800b226:	fa20 f202 	lsr.w	r2, r0, r2
 800b22a:	409d      	lsls	r5, r3
 800b22c:	4317      	orrs	r7, r2
 800b22e:	409c      	lsls	r4, r3
 800b230:	0c29      	lsrs	r1, r5, #16
 800b232:	0c22      	lsrs	r2, r4, #16
 800b234:	fbb7 fef1 	udiv	lr, r7, r1
 800b238:	b2a8      	uxth	r0, r5
 800b23a:	fb01 771e 	mls	r7, r1, lr, r7
 800b23e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800b242:	fb00 f30e 	mul.w	r3, r0, lr
 800b246:	42bb      	cmp	r3, r7
 800b248:	d90a      	bls.n	800b260 <__divdi3+0x6c>
 800b24a:	197f      	adds	r7, r7, r5
 800b24c:	f10e 32ff 	add.w	r2, lr, #4294967295
 800b250:	f080 8105 	bcs.w	800b45e <__divdi3+0x26a>
 800b254:	42bb      	cmp	r3, r7
 800b256:	f240 8102 	bls.w	800b45e <__divdi3+0x26a>
 800b25a:	f1ae 0e02 	sub.w	lr, lr, #2
 800b25e:	442f      	add	r7, r5
 800b260:	1aff      	subs	r7, r7, r3
 800b262:	b2a4      	uxth	r4, r4
 800b264:	fbb7 f3f1 	udiv	r3, r7, r1
 800b268:	fb01 7713 	mls	r7, r1, r3, r7
 800b26c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b270:	fb00 f003 	mul.w	r0, r0, r3
 800b274:	42b8      	cmp	r0, r7
 800b276:	d908      	bls.n	800b28a <__divdi3+0x96>
 800b278:	197f      	adds	r7, r7, r5
 800b27a:	f103 32ff 	add.w	r2, r3, #4294967295
 800b27e:	f080 80f0 	bcs.w	800b462 <__divdi3+0x26e>
 800b282:	42b8      	cmp	r0, r7
 800b284:	f240 80ed 	bls.w	800b462 <__divdi3+0x26e>
 800b288:	3b02      	subs	r3, #2
 800b28a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800b28e:	2200      	movs	r2, #0
 800b290:	e003      	b.n	800b29a <__divdi3+0xa6>
 800b292:	428b      	cmp	r3, r1
 800b294:	d90f      	bls.n	800b2b6 <__divdi3+0xc2>
 800b296:	2200      	movs	r2, #0
 800b298:	4613      	mov	r3, r2
 800b29a:	1c34      	adds	r4, r6, #0
 800b29c:	bf18      	it	ne
 800b29e:	2401      	movne	r4, #1
 800b2a0:	4260      	negs	r0, r4
 800b2a2:	f04f 0500 	mov.w	r5, #0
 800b2a6:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 800b2aa:	4058      	eors	r0, r3
 800b2ac:	4051      	eors	r1, r2
 800b2ae:	1900      	adds	r0, r0, r4
 800b2b0:	4169      	adcs	r1, r5
 800b2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2b6:	fab3 f283 	clz	r2, r3
 800b2ba:	2a00      	cmp	r2, #0
 800b2bc:	f040 8086 	bne.w	800b3cc <__divdi3+0x1d8>
 800b2c0:	428b      	cmp	r3, r1
 800b2c2:	d302      	bcc.n	800b2ca <__divdi3+0xd6>
 800b2c4:	4584      	cmp	ip, r0
 800b2c6:	f200 80db 	bhi.w	800b480 <__divdi3+0x28c>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e7e5      	b.n	800b29a <__divdi3+0xa6>
 800b2ce:	b912      	cbnz	r2, 800b2d6 <__divdi3+0xe2>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	fbb3 f5f2 	udiv	r5, r3, r2
 800b2d6:	fab5 f085 	clz	r0, r5
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d13b      	bne.n	800b356 <__divdi3+0x162>
 800b2de:	1b78      	subs	r0, r7, r5
 800b2e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b2e4:	fa1f fc85 	uxth.w	ip, r5
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	fbb0 f8fe 	udiv	r8, r0, lr
 800b2ee:	0c21      	lsrs	r1, r4, #16
 800b2f0:	fb0e 0718 	mls	r7, lr, r8, r0
 800b2f4:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 800b2f8:	fb0c f308 	mul.w	r3, ip, r8
 800b2fc:	42bb      	cmp	r3, r7
 800b2fe:	d907      	bls.n	800b310 <__divdi3+0x11c>
 800b300:	197f      	adds	r7, r7, r5
 800b302:	f108 31ff 	add.w	r1, r8, #4294967295
 800b306:	d202      	bcs.n	800b30e <__divdi3+0x11a>
 800b308:	42bb      	cmp	r3, r7
 800b30a:	f200 80bd 	bhi.w	800b488 <__divdi3+0x294>
 800b30e:	4688      	mov	r8, r1
 800b310:	1aff      	subs	r7, r7, r3
 800b312:	b2a4      	uxth	r4, r4
 800b314:	fbb7 f3fe 	udiv	r3, r7, lr
 800b318:	fb0e 7713 	mls	r7, lr, r3, r7
 800b31c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b320:	fb0c fc03 	mul.w	ip, ip, r3
 800b324:	45bc      	cmp	ip, r7
 800b326:	d907      	bls.n	800b338 <__divdi3+0x144>
 800b328:	197f      	adds	r7, r7, r5
 800b32a:	f103 31ff 	add.w	r1, r3, #4294967295
 800b32e:	d202      	bcs.n	800b336 <__divdi3+0x142>
 800b330:	45bc      	cmp	ip, r7
 800b332:	f200 80a7 	bhi.w	800b484 <__divdi3+0x290>
 800b336:	460b      	mov	r3, r1
 800b338:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800b33c:	e7ad      	b.n	800b29a <__divdi3+0xa6>
 800b33e:	4252      	negs	r2, r2
 800b340:	ea6f 0606 	mvn.w	r6, r6
 800b344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b348:	e75d      	b.n	800b206 <__divdi3+0x12>
 800b34a:	4240      	negs	r0, r0
 800b34c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b350:	f04f 36ff 	mov.w	r6, #4294967295
 800b354:	e754      	b.n	800b200 <__divdi3+0xc>
 800b356:	f1c0 0220 	rsb	r2, r0, #32
 800b35a:	fa24 f102 	lsr.w	r1, r4, r2
 800b35e:	fa07 f300 	lsl.w	r3, r7, r0
 800b362:	4085      	lsls	r5, r0
 800b364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b368:	40d7      	lsrs	r7, r2
 800b36a:	4319      	orrs	r1, r3
 800b36c:	fbb7 f2fe 	udiv	r2, r7, lr
 800b370:	0c0b      	lsrs	r3, r1, #16
 800b372:	fb0e 7712 	mls	r7, lr, r2, r7
 800b376:	fa1f fc85 	uxth.w	ip, r5
 800b37a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b37e:	fb0c f702 	mul.w	r7, ip, r2
 800b382:	429f      	cmp	r7, r3
 800b384:	fa04 f400 	lsl.w	r4, r4, r0
 800b388:	d907      	bls.n	800b39a <__divdi3+0x1a6>
 800b38a:	195b      	adds	r3, r3, r5
 800b38c:	f102 30ff 	add.w	r0, r2, #4294967295
 800b390:	d274      	bcs.n	800b47c <__divdi3+0x288>
 800b392:	429f      	cmp	r7, r3
 800b394:	d972      	bls.n	800b47c <__divdi3+0x288>
 800b396:	3a02      	subs	r2, #2
 800b398:	442b      	add	r3, r5
 800b39a:	1bdf      	subs	r7, r3, r7
 800b39c:	b289      	uxth	r1, r1
 800b39e:	fbb7 f8fe 	udiv	r8, r7, lr
 800b3a2:	fb0e 7318 	mls	r3, lr, r8, r7
 800b3a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b3aa:	fb0c f708 	mul.w	r7, ip, r8
 800b3ae:	429f      	cmp	r7, r3
 800b3b0:	d908      	bls.n	800b3c4 <__divdi3+0x1d0>
 800b3b2:	195b      	adds	r3, r3, r5
 800b3b4:	f108 31ff 	add.w	r1, r8, #4294967295
 800b3b8:	d25c      	bcs.n	800b474 <__divdi3+0x280>
 800b3ba:	429f      	cmp	r7, r3
 800b3bc:	d95a      	bls.n	800b474 <__divdi3+0x280>
 800b3be:	f1a8 0802 	sub.w	r8, r8, #2
 800b3c2:	442b      	add	r3, r5
 800b3c4:	1bd8      	subs	r0, r3, r7
 800b3c6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 800b3ca:	e78e      	b.n	800b2ea <__divdi3+0xf6>
 800b3cc:	f1c2 0320 	rsb	r3, r2, #32
 800b3d0:	fa2c f103 	lsr.w	r1, ip, r3
 800b3d4:	fa0e fe02 	lsl.w	lr, lr, r2
 800b3d8:	fa20 f703 	lsr.w	r7, r0, r3
 800b3dc:	ea41 0e0e 	orr.w	lr, r1, lr
 800b3e0:	fa08 f002 	lsl.w	r0, r8, r2
 800b3e4:	fa28 f103 	lsr.w	r1, r8, r3
 800b3e8:	ea4f 451e 	mov.w	r5, lr, lsr #16
 800b3ec:	4338      	orrs	r0, r7
 800b3ee:	fbb1 f8f5 	udiv	r8, r1, r5
 800b3f2:	0c03      	lsrs	r3, r0, #16
 800b3f4:	fb05 1118 	mls	r1, r5, r8, r1
 800b3f8:	fa1f f78e 	uxth.w	r7, lr
 800b3fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800b400:	fb07 f308 	mul.w	r3, r7, r8
 800b404:	428b      	cmp	r3, r1
 800b406:	fa0c fc02 	lsl.w	ip, ip, r2
 800b40a:	d909      	bls.n	800b420 <__divdi3+0x22c>
 800b40c:	eb11 010e 	adds.w	r1, r1, lr
 800b410:	f108 39ff 	add.w	r9, r8, #4294967295
 800b414:	d230      	bcs.n	800b478 <__divdi3+0x284>
 800b416:	428b      	cmp	r3, r1
 800b418:	d92e      	bls.n	800b478 <__divdi3+0x284>
 800b41a:	f1a8 0802 	sub.w	r8, r8, #2
 800b41e:	4471      	add	r1, lr
 800b420:	1ac9      	subs	r1, r1, r3
 800b422:	b280      	uxth	r0, r0
 800b424:	fbb1 f3f5 	udiv	r3, r1, r5
 800b428:	fb05 1113 	mls	r1, r5, r3, r1
 800b42c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800b430:	fb07 f703 	mul.w	r7, r7, r3
 800b434:	428f      	cmp	r7, r1
 800b436:	d908      	bls.n	800b44a <__divdi3+0x256>
 800b438:	eb11 010e 	adds.w	r1, r1, lr
 800b43c:	f103 30ff 	add.w	r0, r3, #4294967295
 800b440:	d216      	bcs.n	800b470 <__divdi3+0x27c>
 800b442:	428f      	cmp	r7, r1
 800b444:	d914      	bls.n	800b470 <__divdi3+0x27c>
 800b446:	3b02      	subs	r3, #2
 800b448:	4471      	add	r1, lr
 800b44a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800b44e:	1bc9      	subs	r1, r1, r7
 800b450:	fba3 890c 	umull	r8, r9, r3, ip
 800b454:	4549      	cmp	r1, r9
 800b456:	d309      	bcc.n	800b46c <__divdi3+0x278>
 800b458:	d005      	beq.n	800b466 <__divdi3+0x272>
 800b45a:	2200      	movs	r2, #0
 800b45c:	e71d      	b.n	800b29a <__divdi3+0xa6>
 800b45e:	4696      	mov	lr, r2
 800b460:	e6fe      	b.n	800b260 <__divdi3+0x6c>
 800b462:	4613      	mov	r3, r2
 800b464:	e711      	b.n	800b28a <__divdi3+0x96>
 800b466:	4094      	lsls	r4, r2
 800b468:	4544      	cmp	r4, r8
 800b46a:	d2f6      	bcs.n	800b45a <__divdi3+0x266>
 800b46c:	3b01      	subs	r3, #1
 800b46e:	e7f4      	b.n	800b45a <__divdi3+0x266>
 800b470:	4603      	mov	r3, r0
 800b472:	e7ea      	b.n	800b44a <__divdi3+0x256>
 800b474:	4688      	mov	r8, r1
 800b476:	e7a5      	b.n	800b3c4 <__divdi3+0x1d0>
 800b478:	46c8      	mov	r8, r9
 800b47a:	e7d1      	b.n	800b420 <__divdi3+0x22c>
 800b47c:	4602      	mov	r2, r0
 800b47e:	e78c      	b.n	800b39a <__divdi3+0x1a6>
 800b480:	4613      	mov	r3, r2
 800b482:	e70a      	b.n	800b29a <__divdi3+0xa6>
 800b484:	3b02      	subs	r3, #2
 800b486:	e757      	b.n	800b338 <__divdi3+0x144>
 800b488:	f1a8 0802 	sub.w	r8, r8, #2
 800b48c:	442f      	add	r7, r5
 800b48e:	e73f      	b.n	800b310 <__divdi3+0x11c>

0800b490 <__udivdi3>:
 800b490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b494:	2b00      	cmp	r3, #0
 800b496:	d144      	bne.n	800b522 <__udivdi3+0x92>
 800b498:	428a      	cmp	r2, r1
 800b49a:	4615      	mov	r5, r2
 800b49c:	4604      	mov	r4, r0
 800b49e:	d94f      	bls.n	800b540 <__udivdi3+0xb0>
 800b4a0:	fab2 f782 	clz	r7, r2
 800b4a4:	460e      	mov	r6, r1
 800b4a6:	b14f      	cbz	r7, 800b4bc <__udivdi3+0x2c>
 800b4a8:	f1c7 0320 	rsb	r3, r7, #32
 800b4ac:	40b9      	lsls	r1, r7
 800b4ae:	fa20 f603 	lsr.w	r6, r0, r3
 800b4b2:	fa02 f507 	lsl.w	r5, r2, r7
 800b4b6:	430e      	orrs	r6, r1
 800b4b8:	fa00 f407 	lsl.w	r4, r0, r7
 800b4bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b4c0:	0c23      	lsrs	r3, r4, #16
 800b4c2:	fbb6 f0fe 	udiv	r0, r6, lr
 800b4c6:	b2af      	uxth	r7, r5
 800b4c8:	fb0e 6110 	mls	r1, lr, r0, r6
 800b4cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b4d0:	fb07 f100 	mul.w	r1, r7, r0
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	d909      	bls.n	800b4ec <__udivdi3+0x5c>
 800b4d8:	195b      	adds	r3, r3, r5
 800b4da:	f100 32ff 	add.w	r2, r0, #4294967295
 800b4de:	f080 80ec 	bcs.w	800b6ba <__udivdi3+0x22a>
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	f240 80e9 	bls.w	800b6ba <__udivdi3+0x22a>
 800b4e8:	3802      	subs	r0, #2
 800b4ea:	442b      	add	r3, r5
 800b4ec:	1a5a      	subs	r2, r3, r1
 800b4ee:	b2a4      	uxth	r4, r4
 800b4f0:	fbb2 f3fe 	udiv	r3, r2, lr
 800b4f4:	fb0e 2213 	mls	r2, lr, r3, r2
 800b4f8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800b4fc:	fb07 f703 	mul.w	r7, r7, r3
 800b500:	4297      	cmp	r7, r2
 800b502:	d908      	bls.n	800b516 <__udivdi3+0x86>
 800b504:	1952      	adds	r2, r2, r5
 800b506:	f103 31ff 	add.w	r1, r3, #4294967295
 800b50a:	f080 80d8 	bcs.w	800b6be <__udivdi3+0x22e>
 800b50e:	4297      	cmp	r7, r2
 800b510:	f240 80d5 	bls.w	800b6be <__udivdi3+0x22e>
 800b514:	3b02      	subs	r3, #2
 800b516:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b51a:	2600      	movs	r6, #0
 800b51c:	4631      	mov	r1, r6
 800b51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b522:	428b      	cmp	r3, r1
 800b524:	d847      	bhi.n	800b5b6 <__udivdi3+0x126>
 800b526:	fab3 f683 	clz	r6, r3
 800b52a:	2e00      	cmp	r6, #0
 800b52c:	d148      	bne.n	800b5c0 <__udivdi3+0x130>
 800b52e:	428b      	cmp	r3, r1
 800b530:	d302      	bcc.n	800b538 <__udivdi3+0xa8>
 800b532:	4282      	cmp	r2, r0
 800b534:	f200 80cd 	bhi.w	800b6d2 <__udivdi3+0x242>
 800b538:	2001      	movs	r0, #1
 800b53a:	4631      	mov	r1, r6
 800b53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b540:	b912      	cbnz	r2, 800b548 <__udivdi3+0xb8>
 800b542:	2501      	movs	r5, #1
 800b544:	fbb5 f5f2 	udiv	r5, r5, r2
 800b548:	fab5 f885 	clz	r8, r5
 800b54c:	f1b8 0f00 	cmp.w	r8, #0
 800b550:	d177      	bne.n	800b642 <__udivdi3+0x1b2>
 800b552:	1b4a      	subs	r2, r1, r5
 800b554:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b558:	b2af      	uxth	r7, r5
 800b55a:	2601      	movs	r6, #1
 800b55c:	fbb2 f0fe 	udiv	r0, r2, lr
 800b560:	0c23      	lsrs	r3, r4, #16
 800b562:	fb0e 2110 	mls	r1, lr, r0, r2
 800b566:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800b56a:	fb07 f300 	mul.w	r3, r7, r0
 800b56e:	428b      	cmp	r3, r1
 800b570:	d907      	bls.n	800b582 <__udivdi3+0xf2>
 800b572:	1949      	adds	r1, r1, r5
 800b574:	f100 32ff 	add.w	r2, r0, #4294967295
 800b578:	d202      	bcs.n	800b580 <__udivdi3+0xf0>
 800b57a:	428b      	cmp	r3, r1
 800b57c:	f200 80ba 	bhi.w	800b6f4 <__udivdi3+0x264>
 800b580:	4610      	mov	r0, r2
 800b582:	1ac9      	subs	r1, r1, r3
 800b584:	b2a4      	uxth	r4, r4
 800b586:	fbb1 f3fe 	udiv	r3, r1, lr
 800b58a:	fb0e 1113 	mls	r1, lr, r3, r1
 800b58e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800b592:	fb07 f703 	mul.w	r7, r7, r3
 800b596:	42a7      	cmp	r7, r4
 800b598:	d908      	bls.n	800b5ac <__udivdi3+0x11c>
 800b59a:	1964      	adds	r4, r4, r5
 800b59c:	f103 32ff 	add.w	r2, r3, #4294967295
 800b5a0:	f080 808f 	bcs.w	800b6c2 <__udivdi3+0x232>
 800b5a4:	42a7      	cmp	r7, r4
 800b5a6:	f240 808c 	bls.w	800b6c2 <__udivdi3+0x232>
 800b5aa:	3b02      	subs	r3, #2
 800b5ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b6:	2600      	movs	r6, #0
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	4631      	mov	r1, r6
 800b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c0:	f1c6 0420 	rsb	r4, r6, #32
 800b5c4:	fa22 f504 	lsr.w	r5, r2, r4
 800b5c8:	40b3      	lsls	r3, r6
 800b5ca:	432b      	orrs	r3, r5
 800b5cc:	fa20 fc04 	lsr.w	ip, r0, r4
 800b5d0:	fa01 f706 	lsl.w	r7, r1, r6
 800b5d4:	fa21 f504 	lsr.w	r5, r1, r4
 800b5d8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5dc:	ea4c 0707 	orr.w	r7, ip, r7
 800b5e0:	fbb5 f8fe 	udiv	r8, r5, lr
 800b5e4:	0c39      	lsrs	r1, r7, #16
 800b5e6:	fb0e 5518 	mls	r5, lr, r8, r5
 800b5ea:	fa1f fc83 	uxth.w	ip, r3
 800b5ee:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800b5f2:	fb0c f108 	mul.w	r1, ip, r8
 800b5f6:	42a9      	cmp	r1, r5
 800b5f8:	fa02 f206 	lsl.w	r2, r2, r6
 800b5fc:	d904      	bls.n	800b608 <__udivdi3+0x178>
 800b5fe:	18ed      	adds	r5, r5, r3
 800b600:	f108 34ff 	add.w	r4, r8, #4294967295
 800b604:	d367      	bcc.n	800b6d6 <__udivdi3+0x246>
 800b606:	46a0      	mov	r8, r4
 800b608:	1a6d      	subs	r5, r5, r1
 800b60a:	b2bf      	uxth	r7, r7
 800b60c:	fbb5 f4fe 	udiv	r4, r5, lr
 800b610:	fb0e 5514 	mls	r5, lr, r4, r5
 800b614:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 800b618:	fb0c fc04 	mul.w	ip, ip, r4
 800b61c:	458c      	cmp	ip, r1
 800b61e:	d904      	bls.n	800b62a <__udivdi3+0x19a>
 800b620:	18c9      	adds	r1, r1, r3
 800b622:	f104 35ff 	add.w	r5, r4, #4294967295
 800b626:	d35c      	bcc.n	800b6e2 <__udivdi3+0x252>
 800b628:	462c      	mov	r4, r5
 800b62a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800b62e:	ebcc 0101 	rsb	r1, ip, r1
 800b632:	fba4 2302 	umull	r2, r3, r4, r2
 800b636:	4299      	cmp	r1, r3
 800b638:	d348      	bcc.n	800b6cc <__udivdi3+0x23c>
 800b63a:	d044      	beq.n	800b6c6 <__udivdi3+0x236>
 800b63c:	4620      	mov	r0, r4
 800b63e:	2600      	movs	r6, #0
 800b640:	e76c      	b.n	800b51c <__udivdi3+0x8c>
 800b642:	f1c8 0420 	rsb	r4, r8, #32
 800b646:	fa01 f308 	lsl.w	r3, r1, r8
 800b64a:	fa05 f508 	lsl.w	r5, r5, r8
 800b64e:	fa20 f704 	lsr.w	r7, r0, r4
 800b652:	40e1      	lsrs	r1, r4
 800b654:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800b658:	431f      	orrs	r7, r3
 800b65a:	fbb1 f6fe 	udiv	r6, r1, lr
 800b65e:	0c3a      	lsrs	r2, r7, #16
 800b660:	fb0e 1116 	mls	r1, lr, r6, r1
 800b664:	fa1f fc85 	uxth.w	ip, r5
 800b668:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800b66c:	fb0c f206 	mul.w	r2, ip, r6
 800b670:	429a      	cmp	r2, r3
 800b672:	fa00 f408 	lsl.w	r4, r0, r8
 800b676:	d907      	bls.n	800b688 <__udivdi3+0x1f8>
 800b678:	195b      	adds	r3, r3, r5
 800b67a:	f106 31ff 	add.w	r1, r6, #4294967295
 800b67e:	d237      	bcs.n	800b6f0 <__udivdi3+0x260>
 800b680:	429a      	cmp	r2, r3
 800b682:	d935      	bls.n	800b6f0 <__udivdi3+0x260>
 800b684:	3e02      	subs	r6, #2
 800b686:	442b      	add	r3, r5
 800b688:	1a9b      	subs	r3, r3, r2
 800b68a:	b2bf      	uxth	r7, r7
 800b68c:	fbb3 f0fe 	udiv	r0, r3, lr
 800b690:	fb0e 3310 	mls	r3, lr, r0, r3
 800b694:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b698:	fb0c f100 	mul.w	r1, ip, r0
 800b69c:	4299      	cmp	r1, r3
 800b69e:	d907      	bls.n	800b6b0 <__udivdi3+0x220>
 800b6a0:	195b      	adds	r3, r3, r5
 800b6a2:	f100 32ff 	add.w	r2, r0, #4294967295
 800b6a6:	d221      	bcs.n	800b6ec <__udivdi3+0x25c>
 800b6a8:	4299      	cmp	r1, r3
 800b6aa:	d91f      	bls.n	800b6ec <__udivdi3+0x25c>
 800b6ac:	3802      	subs	r0, #2
 800b6ae:	442b      	add	r3, r5
 800b6b0:	1a5a      	subs	r2, r3, r1
 800b6b2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800b6b6:	4667      	mov	r7, ip
 800b6b8:	e750      	b.n	800b55c <__udivdi3+0xcc>
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	e716      	b.n	800b4ec <__udivdi3+0x5c>
 800b6be:	460b      	mov	r3, r1
 800b6c0:	e729      	b.n	800b516 <__udivdi3+0x86>
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	e772      	b.n	800b5ac <__udivdi3+0x11c>
 800b6c6:	40b0      	lsls	r0, r6
 800b6c8:	4290      	cmp	r0, r2
 800b6ca:	d2b7      	bcs.n	800b63c <__udivdi3+0x1ac>
 800b6cc:	1e60      	subs	r0, r4, #1
 800b6ce:	2600      	movs	r6, #0
 800b6d0:	e724      	b.n	800b51c <__udivdi3+0x8c>
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	e722      	b.n	800b51c <__udivdi3+0x8c>
 800b6d6:	42a9      	cmp	r1, r5
 800b6d8:	d995      	bls.n	800b606 <__udivdi3+0x176>
 800b6da:	f1a8 0802 	sub.w	r8, r8, #2
 800b6de:	441d      	add	r5, r3
 800b6e0:	e792      	b.n	800b608 <__udivdi3+0x178>
 800b6e2:	458c      	cmp	ip, r1
 800b6e4:	d9a0      	bls.n	800b628 <__udivdi3+0x198>
 800b6e6:	3c02      	subs	r4, #2
 800b6e8:	4419      	add	r1, r3
 800b6ea:	e79e      	b.n	800b62a <__udivdi3+0x19a>
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	e7df      	b.n	800b6b0 <__udivdi3+0x220>
 800b6f0:	460e      	mov	r6, r1
 800b6f2:	e7c9      	b.n	800b688 <__udivdi3+0x1f8>
 800b6f4:	3802      	subs	r0, #2
 800b6f6:	4429      	add	r1, r5
 800b6f8:	e743      	b.n	800b582 <__udivdi3+0xf2>
 800b6fa:	bf00      	nop

0800b6fc <calloc>:
 800b6fc:	460a      	mov	r2, r1
 800b6fe:	4903      	ldr	r1, [pc, #12]	; (800b70c <calloc+0x10>)
 800b700:	4603      	mov	r3, r0
 800b702:	6808      	ldr	r0, [r1, #0]
 800b704:	4619      	mov	r1, r3
 800b706:	f000 b85a 	b.w	800b7be <_calloc_r>
 800b70a:	bf00      	nop
 800b70c:	1ffed7c8 	.word	0x1ffed7c8

0800b710 <__errno>:
 800b710:	4b01      	ldr	r3, [pc, #4]	; (800b718 <__errno+0x8>)
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	1ffed7c8 	.word	0x1ffed7c8

0800b71c <__libc_init_array>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	4b0e      	ldr	r3, [pc, #56]	; (800b758 <__libc_init_array+0x3c>)
 800b720:	4c0e      	ldr	r4, [pc, #56]	; (800b75c <__libc_init_array+0x40>)
 800b722:	1ae4      	subs	r4, r4, r3
 800b724:	10a4      	asrs	r4, r4, #2
 800b726:	2500      	movs	r5, #0
 800b728:	461e      	mov	r6, r3
 800b72a:	42a5      	cmp	r5, r4
 800b72c:	d004      	beq.n	800b738 <__libc_init_array+0x1c>
 800b72e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b732:	4798      	blx	r3
 800b734:	3501      	adds	r5, #1
 800b736:	e7f8      	b.n	800b72a <__libc_init_array+0xe>
 800b738:	f7f6 fad0 	bl	8001cdc <_init>
 800b73c:	4c08      	ldr	r4, [pc, #32]	; (800b760 <__libc_init_array+0x44>)
 800b73e:	4b09      	ldr	r3, [pc, #36]	; (800b764 <__libc_init_array+0x48>)
 800b740:	1ae4      	subs	r4, r4, r3
 800b742:	10a4      	asrs	r4, r4, #2
 800b744:	2500      	movs	r5, #0
 800b746:	461e      	mov	r6, r3
 800b748:	42a5      	cmp	r5, r4
 800b74a:	d004      	beq.n	800b756 <__libc_init_array+0x3a>
 800b74c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b750:	4798      	blx	r3
 800b752:	3501      	adds	r5, #1
 800b754:	e7f8      	b.n	800b748 <__libc_init_array+0x2c>
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	1ffed7cc 	.word	0x1ffed7cc
 800b75c:	1ffed7cc 	.word	0x1ffed7cc
 800b760:	1ffed7cc 	.word	0x1ffed7cc
 800b764:	1ffed7cc 	.word	0x1ffed7cc

0800b768 <free>:
 800b768:	4b02      	ldr	r3, [pc, #8]	; (800b774 <free+0xc>)
 800b76a:	4601      	mov	r1, r0
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	f000 b835 	b.w	800b7dc <_free_r>
 800b772:	bf00      	nop
 800b774:	1ffed7c8 	.word	0x1ffed7c8

0800b778 <memcmp>:
 800b778:	b510      	push	{r4, lr}
 800b77a:	440a      	add	r2, r1
 800b77c:	1e44      	subs	r4, r0, #1
 800b77e:	4291      	cmp	r1, r2
 800b780:	d008      	beq.n	800b794 <memcmp+0x1c>
 800b782:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b786:	7808      	ldrb	r0, [r1, #0]
 800b788:	4283      	cmp	r3, r0
 800b78a:	d001      	beq.n	800b790 <memcmp+0x18>
 800b78c:	1a18      	subs	r0, r3, r0
 800b78e:	bd10      	pop	{r4, pc}
 800b790:	3101      	adds	r1, #1
 800b792:	e7f4      	b.n	800b77e <memcmp+0x6>
 800b794:	2000      	movs	r0, #0
 800b796:	bd10      	pop	{r4, pc}

0800b798 <memcpy>:
 800b798:	b510      	push	{r4, lr}
 800b79a:	1e43      	subs	r3, r0, #1
 800b79c:	440a      	add	r2, r1
 800b79e:	4291      	cmp	r1, r2
 800b7a0:	d004      	beq.n	800b7ac <memcpy+0x14>
 800b7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7aa:	e7f8      	b.n	800b79e <memcpy+0x6>
 800b7ac:	bd10      	pop	{r4, pc}

0800b7ae <memset>:
 800b7ae:	4402      	add	r2, r0
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d002      	beq.n	800b7bc <memset+0xe>
 800b7b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ba:	e7fa      	b.n	800b7b2 <memset+0x4>
 800b7bc:	4770      	bx	lr

0800b7be <_calloc_r>:
 800b7be:	b538      	push	{r3, r4, r5, lr}
 800b7c0:	fb02 f401 	mul.w	r4, r2, r1
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	f000 f84d 	bl	800b864 <_malloc_r>
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	b118      	cbz	r0, 800b7d6 <_calloc_r+0x18>
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	f7ff ffec 	bl	800b7ae <memset>
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b7dc <_free_r>:
 800b7dc:	b530      	push	{r4, r5, lr}
 800b7de:	2900      	cmp	r1, #0
 800b7e0:	d03d      	beq.n	800b85e <_free_r+0x82>
 800b7e2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800b7e6:	1f0b      	subs	r3, r1, #4
 800b7e8:	491d      	ldr	r1, [pc, #116]	; (800b860 <_free_r+0x84>)
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	bfb8      	it	lt
 800b7ee:	189b      	addlt	r3, r3, r2
 800b7f0:	680a      	ldr	r2, [r1, #0]
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	b912      	cbnz	r2, 800b7fc <_free_r+0x20>
 800b7f6:	605a      	str	r2, [r3, #4]
 800b7f8:	600b      	str	r3, [r1, #0]
 800b7fa:	bd30      	pop	{r4, r5, pc}
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d20d      	bcs.n	800b81c <_free_r+0x40>
 800b800:	6819      	ldr	r1, [r3, #0]
 800b802:	1858      	adds	r0, r3, r1
 800b804:	4290      	cmp	r0, r2
 800b806:	bf01      	itttt	eq
 800b808:	585a      	ldreq	r2, [r3, r1]
 800b80a:	1852      	addeq	r2, r2, r1
 800b80c:	601a      	streq	r2, [r3, #0]
 800b80e:	6842      	ldreq	r2, [r0, #4]
 800b810:	605a      	str	r2, [r3, #4]
 800b812:	6023      	str	r3, [r4, #0]
 800b814:	bd30      	pop	{r4, r5, pc}
 800b816:	4299      	cmp	r1, r3
 800b818:	d803      	bhi.n	800b822 <_free_r+0x46>
 800b81a:	460a      	mov	r2, r1
 800b81c:	6851      	ldr	r1, [r2, #4]
 800b81e:	2900      	cmp	r1, #0
 800b820:	d1f9      	bne.n	800b816 <_free_r+0x3a>
 800b822:	6814      	ldr	r4, [r2, #0]
 800b824:	1915      	adds	r5, r2, r4
 800b826:	429d      	cmp	r5, r3
 800b828:	d10a      	bne.n	800b840 <_free_r+0x64>
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4423      	add	r3, r4
 800b82e:	18d0      	adds	r0, r2, r3
 800b830:	4288      	cmp	r0, r1
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	d113      	bne.n	800b85e <_free_r+0x82>
 800b836:	6808      	ldr	r0, [r1, #0]
 800b838:	4403      	add	r3, r0
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	684b      	ldr	r3, [r1, #4]
 800b83e:	e00d      	b.n	800b85c <_free_r+0x80>
 800b840:	d902      	bls.n	800b848 <_free_r+0x6c>
 800b842:	230c      	movs	r3, #12
 800b844:	6003      	str	r3, [r0, #0]
 800b846:	bd30      	pop	{r4, r5, pc}
 800b848:	681c      	ldr	r4, [r3, #0]
 800b84a:	1918      	adds	r0, r3, r4
 800b84c:	4288      	cmp	r0, r1
 800b84e:	bf04      	itt	eq
 800b850:	6808      	ldreq	r0, [r1, #0]
 800b852:	6849      	ldreq	r1, [r1, #4]
 800b854:	6059      	str	r1, [r3, #4]
 800b856:	bf04      	itt	eq
 800b858:	1900      	addeq	r0, r0, r4
 800b85a:	6018      	streq	r0, [r3, #0]
 800b85c:	6053      	str	r3, [r2, #4]
 800b85e:	bd30      	pop	{r4, r5, pc}
 800b860:	1fff0198 	.word	0x1fff0198

0800b864 <_malloc_r>:
 800b864:	b570      	push	{r4, r5, r6, lr}
 800b866:	1ccc      	adds	r4, r1, #3
 800b868:	f024 0403 	bic.w	r4, r4, #3
 800b86c:	3408      	adds	r4, #8
 800b86e:	2c0c      	cmp	r4, #12
 800b870:	bf38      	it	cc
 800b872:	240c      	movcc	r4, #12
 800b874:	2c00      	cmp	r4, #0
 800b876:	4606      	mov	r6, r0
 800b878:	da03      	bge.n	800b882 <_malloc_r+0x1e>
 800b87a:	230c      	movs	r3, #12
 800b87c:	6033      	str	r3, [r6, #0]
 800b87e:	2000      	movs	r0, #0
 800b880:	bd70      	pop	{r4, r5, r6, pc}
 800b882:	428c      	cmp	r4, r1
 800b884:	d3f9      	bcc.n	800b87a <_malloc_r+0x16>
 800b886:	4a20      	ldr	r2, [pc, #128]	; (800b908 <_malloc_r+0xa4>)
 800b888:	6813      	ldr	r3, [r2, #0]
 800b88a:	4610      	mov	r0, r2
 800b88c:	4619      	mov	r1, r3
 800b88e:	b1a1      	cbz	r1, 800b8ba <_malloc_r+0x56>
 800b890:	680a      	ldr	r2, [r1, #0]
 800b892:	1b12      	subs	r2, r2, r4
 800b894:	d40e      	bmi.n	800b8b4 <_malloc_r+0x50>
 800b896:	2a0b      	cmp	r2, #11
 800b898:	d903      	bls.n	800b8a2 <_malloc_r+0x3e>
 800b89a:	600a      	str	r2, [r1, #0]
 800b89c:	188b      	adds	r3, r1, r2
 800b89e:	508c      	str	r4, [r1, r2]
 800b8a0:	e01f      	b.n	800b8e2 <_malloc_r+0x7e>
 800b8a2:	428b      	cmp	r3, r1
 800b8a4:	bf0d      	iteet	eq
 800b8a6:	685a      	ldreq	r2, [r3, #4]
 800b8a8:	684a      	ldrne	r2, [r1, #4]
 800b8aa:	605a      	strne	r2, [r3, #4]
 800b8ac:	6002      	streq	r2, [r0, #0]
 800b8ae:	bf18      	it	ne
 800b8b0:	460b      	movne	r3, r1
 800b8b2:	e016      	b.n	800b8e2 <_malloc_r+0x7e>
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	6849      	ldr	r1, [r1, #4]
 800b8b8:	e7e9      	b.n	800b88e <_malloc_r+0x2a>
 800b8ba:	4d14      	ldr	r5, [pc, #80]	; (800b90c <_malloc_r+0xa8>)
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	b91b      	cbnz	r3, 800b8c8 <_malloc_r+0x64>
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f000 f825 	bl	800b910 <_sbrk_r>
 800b8c6:	6028      	str	r0, [r5, #0]
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	f000 f820 	bl	800b910 <_sbrk_r>
 800b8d0:	1c42      	adds	r2, r0, #1
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	d0d1      	beq.n	800b87a <_malloc_r+0x16>
 800b8d6:	1cc5      	adds	r5, r0, #3
 800b8d8:	f025 0503 	bic.w	r5, r5, #3
 800b8dc:	4285      	cmp	r5, r0
 800b8de:	d10a      	bne.n	800b8f6 <_malloc_r+0x92>
 800b8e0:	601c      	str	r4, [r3, #0]
 800b8e2:	f103 000b 	add.w	r0, r3, #11
 800b8e6:	1d1a      	adds	r2, r3, #4
 800b8e8:	f020 0007 	bic.w	r0, r0, #7
 800b8ec:	1a82      	subs	r2, r0, r2
 800b8ee:	d00a      	beq.n	800b906 <_malloc_r+0xa2>
 800b8f0:	4251      	negs	r1, r2
 800b8f2:	5099      	str	r1, [r3, r2]
 800b8f4:	bd70      	pop	{r4, r5, r6, pc}
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	1ae9      	subs	r1, r5, r3
 800b8fa:	f000 f809 	bl	800b910 <_sbrk_r>
 800b8fe:	3001      	adds	r0, #1
 800b900:	d0bb      	beq.n	800b87a <_malloc_r+0x16>
 800b902:	462b      	mov	r3, r5
 800b904:	e7ec      	b.n	800b8e0 <_malloc_r+0x7c>
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	1fff0198 	.word	0x1fff0198
 800b90c:	1fff0194 	.word	0x1fff0194

0800b910 <_sbrk_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4c06      	ldr	r4, [pc, #24]	; (800b92c <_sbrk_r+0x1c>)
 800b914:	2300      	movs	r3, #0
 800b916:	4605      	mov	r5, r0
 800b918:	4608      	mov	r0, r1
 800b91a:	6023      	str	r3, [r4, #0]
 800b91c:	f7f6 f9be 	bl	8001c9c <_sbrk>
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	d102      	bne.n	800b92a <_sbrk_r+0x1a>
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	b103      	cbz	r3, 800b92a <_sbrk_r+0x1a>
 800b928:	602b      	str	r3, [r5, #0]
 800b92a:	bd38      	pop	{r3, r4, r5, pc}
 800b92c:	1fff082c 	.word	0x1fff082c

0800b930 <siprintf>:
 800b930:	b40e      	push	{r1, r2, r3}
 800b932:	b500      	push	{lr}
 800b934:	b09c      	sub	sp, #112	; 0x70
 800b936:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b93a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b93e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b942:	9104      	str	r1, [sp, #16]
 800b944:	9107      	str	r1, [sp, #28]
 800b946:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b94a:	ab1d      	add	r3, sp, #116	; 0x74
 800b94c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b950:	4908      	ldr	r1, [pc, #32]	; (800b974 <siprintf+0x44>)
 800b952:	f853 2b04 	ldr.w	r2, [r3], #4
 800b956:	9002      	str	r0, [sp, #8]
 800b958:	9006      	str	r0, [sp, #24]
 800b95a:	6808      	ldr	r0, [r1, #0]
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	a902      	add	r1, sp, #8
 800b960:	f000 f8a6 	bl	800bab0 <_svfiprintf_r>
 800b964:	9b02      	ldr	r3, [sp, #8]
 800b966:	2200      	movs	r2, #0
 800b968:	701a      	strb	r2, [r3, #0]
 800b96a:	b01c      	add	sp, #112	; 0x70
 800b96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b970:	b003      	add	sp, #12
 800b972:	4770      	bx	lr
 800b974:	1ffed7c8 	.word	0x1ffed7c8

0800b978 <strcat>:
 800b978:	b510      	push	{r4, lr}
 800b97a:	4602      	mov	r2, r0
 800b97c:	4613      	mov	r3, r2
 800b97e:	3201      	adds	r2, #1
 800b980:	781c      	ldrb	r4, [r3, #0]
 800b982:	2c00      	cmp	r4, #0
 800b984:	d1fa      	bne.n	800b97c <strcat+0x4>
 800b986:	3b01      	subs	r3, #1
 800b988:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b98c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b990:	2a00      	cmp	r2, #0
 800b992:	d1f9      	bne.n	800b988 <strcat+0x10>
 800b994:	bd10      	pop	{r4, pc}

0800b996 <strcmp>:
 800b996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b99a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b99e:	2a01      	cmp	r2, #1
 800b9a0:	bf28      	it	cs
 800b9a2:	429a      	cmpcs	r2, r3
 800b9a4:	d0f7      	beq.n	800b996 <strcmp>
 800b9a6:	1ad0      	subs	r0, r2, r3
 800b9a8:	4770      	bx	lr

0800b9aa <strcpy>:
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9b0:	f803 2b01 	strb.w	r2, [r3], #1
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	d1f9      	bne.n	800b9ac <strcpy+0x2>
 800b9b8:	4770      	bx	lr

0800b9ba <strlen>:
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	d1fb      	bne.n	800b9bc <strlen+0x2>
 800b9c4:	1a18      	subs	r0, r3, r0
 800b9c6:	3801      	subs	r0, #1
 800b9c8:	4770      	bx	lr

0800b9ca <strncmp>:
 800b9ca:	b570      	push	{r4, r5, r6, lr}
 800b9cc:	b1aa      	cbz	r2, 800b9fa <strncmp+0x30>
 800b9ce:	1e45      	subs	r5, r0, #1
 800b9d0:	3901      	subs	r1, #1
 800b9d2:	786b      	ldrb	r3, [r5, #1]
 800b9d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	f105 0601 	add.w	r6, r5, #1
 800b9de:	d106      	bne.n	800b9ee <strncmp+0x24>
 800b9e0:	f06f 0401 	mvn.w	r4, #1
 800b9e4:	1b64      	subs	r4, r4, r5
 800b9e6:	4414      	add	r4, r2
 800b9e8:	42e0      	cmn	r0, r4
 800b9ea:	d102      	bne.n	800b9f2 <strncmp+0x28>
 800b9ec:	461c      	mov	r4, r3
 800b9ee:	1b18      	subs	r0, r3, r4
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
 800b9f2:	4635      	mov	r5, r6
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1ec      	bne.n	800b9d2 <strncmp+0x8>
 800b9f8:	e7f8      	b.n	800b9ec <strncmp+0x22>
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	bd70      	pop	{r4, r5, r6, pc}

0800b9fe <__ssputs_r>:
 800b9fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba02:	688e      	ldr	r6, [r1, #8]
 800ba04:	42b3      	cmp	r3, r6
 800ba06:	4682      	mov	sl, r0
 800ba08:	460c      	mov	r4, r1
 800ba0a:	4690      	mov	r8, r2
 800ba0c:	4699      	mov	r9, r3
 800ba0e:	d340      	bcc.n	800ba92 <__ssputs_r+0x94>
 800ba10:	898a      	ldrh	r2, [r1, #12]
 800ba12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba16:	d03a      	beq.n	800ba8e <__ssputs_r+0x90>
 800ba18:	6825      	ldr	r5, [r4, #0]
 800ba1a:	6909      	ldr	r1, [r1, #16]
 800ba1c:	1a6f      	subs	r7, r5, r1
 800ba1e:	6965      	ldr	r5, [r4, #20]
 800ba20:	2302      	movs	r3, #2
 800ba22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba26:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba2a:	1c7b      	adds	r3, r7, #1
 800ba2c:	444b      	add	r3, r9
 800ba2e:	429d      	cmp	r5, r3
 800ba30:	bf38      	it	cc
 800ba32:	461d      	movcc	r5, r3
 800ba34:	0553      	lsls	r3, r2, #21
 800ba36:	d50f      	bpl.n	800ba58 <__ssputs_r+0x5a>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f7ff ff13 	bl	800b864 <_malloc_r>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	b198      	cbz	r0, 800ba6a <__ssputs_r+0x6c>
 800ba42:	6921      	ldr	r1, [r4, #16]
 800ba44:	463a      	mov	r2, r7
 800ba46:	f7ff fea7 	bl	800b798 <memcpy>
 800ba4a:	89a3      	ldrh	r3, [r4, #12]
 800ba4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba54:	81a3      	strh	r3, [r4, #12]
 800ba56:	e013      	b.n	800ba80 <__ssputs_r+0x82>
 800ba58:	462a      	mov	r2, r5
 800ba5a:	f000 fad5 	bl	800c008 <_realloc_r>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	b970      	cbnz	r0, 800ba80 <__ssputs_r+0x82>
 800ba62:	4650      	mov	r0, sl
 800ba64:	6921      	ldr	r1, [r4, #16]
 800ba66:	f7ff feb9 	bl	800b7dc <_free_r>
 800ba6a:	230c      	movs	r3, #12
 800ba6c:	f8ca 3000 	str.w	r3, [sl]
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba80:	6126      	str	r6, [r4, #16]
 800ba82:	6165      	str	r5, [r4, #20]
 800ba84:	443e      	add	r6, r7
 800ba86:	1bed      	subs	r5, r5, r7
 800ba88:	6026      	str	r6, [r4, #0]
 800ba8a:	60a5      	str	r5, [r4, #8]
 800ba8c:	464e      	mov	r6, r9
 800ba8e:	45b1      	cmp	r9, r6
 800ba90:	d200      	bcs.n	800ba94 <__ssputs_r+0x96>
 800ba92:	464e      	mov	r6, r9
 800ba94:	4632      	mov	r2, r6
 800ba96:	6820      	ldr	r0, [r4, #0]
 800ba98:	4641      	mov	r1, r8
 800ba9a:	f000 fa9a 	bl	800bfd2 <memmove>
 800ba9e:	68a3      	ldr	r3, [r4, #8]
 800baa0:	1b9b      	subs	r3, r3, r6
 800baa2:	60a3      	str	r3, [r4, #8]
 800baa4:	6823      	ldr	r3, [r4, #0]
 800baa6:	441e      	add	r6, r3
 800baa8:	6026      	str	r6, [r4, #0]
 800baaa:	2000      	movs	r0, #0
 800baac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bab0 <_svfiprintf_r>:
 800bab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bab4:	b09d      	sub	sp, #116	; 0x74
 800bab6:	4606      	mov	r6, r0
 800bab8:	9303      	str	r3, [sp, #12]
 800baba:	898b      	ldrh	r3, [r1, #12]
 800babc:	061c      	lsls	r4, r3, #24
 800babe:	460d      	mov	r5, r1
 800bac0:	4690      	mov	r8, r2
 800bac2:	d50c      	bpl.n	800bade <_svfiprintf_r+0x2e>
 800bac4:	690b      	ldr	r3, [r1, #16]
 800bac6:	b953      	cbnz	r3, 800bade <_svfiprintf_r+0x2e>
 800bac8:	2140      	movs	r1, #64	; 0x40
 800baca:	f7ff fecb 	bl	800b864 <_malloc_r>
 800bace:	6028      	str	r0, [r5, #0]
 800bad0:	6128      	str	r0, [r5, #16]
 800bad2:	b910      	cbnz	r0, 800bada <_svfiprintf_r+0x2a>
 800bad4:	230c      	movs	r3, #12
 800bad6:	6033      	str	r3, [r6, #0]
 800bad8:	e0cc      	b.n	800bc74 <_svfiprintf_r+0x1c4>
 800bada:	2340      	movs	r3, #64	; 0x40
 800badc:	616b      	str	r3, [r5, #20]
 800bade:	2300      	movs	r3, #0
 800bae0:	9309      	str	r3, [sp, #36]	; 0x24
 800bae2:	2320      	movs	r3, #32
 800bae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bae8:	2330      	movs	r3, #48	; 0x30
 800baea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baee:	4643      	mov	r3, r8
 800baf0:	461c      	mov	r4, r3
 800baf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baf6:	b91a      	cbnz	r2, 800bb00 <_svfiprintf_r+0x50>
 800baf8:	ebb4 0908 	subs.w	r9, r4, r8
 800bafc:	d00f      	beq.n	800bb1e <_svfiprintf_r+0x6e>
 800bafe:	e002      	b.n	800bb06 <_svfiprintf_r+0x56>
 800bb00:	2a25      	cmp	r2, #37	; 0x25
 800bb02:	d1f5      	bne.n	800baf0 <_svfiprintf_r+0x40>
 800bb04:	e7f8      	b.n	800baf8 <_svfiprintf_r+0x48>
 800bb06:	4630      	mov	r0, r6
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4642      	mov	r2, r8
 800bb0c:	464b      	mov	r3, r9
 800bb0e:	f7ff ff76 	bl	800b9fe <__ssputs_r>
 800bb12:	3001      	adds	r0, #1
 800bb14:	f000 80a9 	beq.w	800bc6a <_svfiprintf_r+0x1ba>
 800bb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1a:	444b      	add	r3, r9
 800bb1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1e:	7823      	ldrb	r3, [r4, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 80a2 	beq.w	800bc6a <_svfiprintf_r+0x1ba>
 800bb26:	2300      	movs	r3, #0
 800bb28:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2c:	9304      	str	r3, [sp, #16]
 800bb2e:	9307      	str	r3, [sp, #28]
 800bb30:	9205      	str	r2, [sp, #20]
 800bb32:	9306      	str	r3, [sp, #24]
 800bb34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb38:	931a      	str	r3, [sp, #104]	; 0x68
 800bb3a:	f104 0801 	add.w	r8, r4, #1
 800bb3e:	4644      	mov	r4, r8
 800bb40:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800bc8c <_svfiprintf_r+0x1dc>
 800bb44:	7821      	ldrb	r1, [r4, #0]
 800bb46:	4648      	mov	r0, r9
 800bb48:	2205      	movs	r2, #5
 800bb4a:	f000 fa33 	bl	800bfb4 <memchr>
 800bb4e:	f108 0801 	add.w	r8, r8, #1
 800bb52:	9b04      	ldr	r3, [sp, #16]
 800bb54:	b130      	cbz	r0, 800bb64 <_svfiprintf_r+0xb4>
 800bb56:	ebc9 0000 	rsb	r0, r9, r0
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	4082      	lsls	r2, r0
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	e7ec      	b.n	800bb3e <_svfiprintf_r+0x8e>
 800bb64:	06d8      	lsls	r0, r3, #27
 800bb66:	bf44      	itt	mi
 800bb68:	2220      	movmi	r2, #32
 800bb6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb6e:	0719      	lsls	r1, r3, #28
 800bb70:	bf44      	itt	mi
 800bb72:	222b      	movmi	r2, #43	; 0x2b
 800bb74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb78:	7822      	ldrb	r2, [r4, #0]
 800bb7a:	2a2a      	cmp	r2, #42	; 0x2a
 800bb7c:	d002      	beq.n	800bb84 <_svfiprintf_r+0xd4>
 800bb7e:	9907      	ldr	r1, [sp, #28]
 800bb80:	4623      	mov	r3, r4
 800bb82:	e00e      	b.n	800bba2 <_svfiprintf_r+0xf2>
 800bb84:	9a03      	ldr	r2, [sp, #12]
 800bb86:	1d11      	adds	r1, r2, #4
 800bb88:	6812      	ldr	r2, [r2, #0]
 800bb8a:	9103      	str	r1, [sp, #12]
 800bb8c:	2a00      	cmp	r2, #0
 800bb8e:	bfbb      	ittet	lt
 800bb90:	4252      	neglt	r2, r2
 800bb92:	f043 0302 	orrlt.w	r3, r3, #2
 800bb96:	9207      	strge	r2, [sp, #28]
 800bb98:	9207      	strlt	r2, [sp, #28]
 800bb9a:	bfb8      	it	lt
 800bb9c:	9304      	strlt	r3, [sp, #16]
 800bb9e:	3401      	adds	r4, #1
 800bba0:	e00a      	b.n	800bbb8 <_svfiprintf_r+0x108>
 800bba2:	461c      	mov	r4, r3
 800bba4:	3301      	adds	r3, #1
 800bba6:	7822      	ldrb	r2, [r4, #0]
 800bba8:	3a30      	subs	r2, #48	; 0x30
 800bbaa:	2a09      	cmp	r2, #9
 800bbac:	d803      	bhi.n	800bbb6 <_svfiprintf_r+0x106>
 800bbae:	200a      	movs	r0, #10
 800bbb0:	fb00 2101 	mla	r1, r0, r1, r2
 800bbb4:	e7f5      	b.n	800bba2 <_svfiprintf_r+0xf2>
 800bbb6:	9107      	str	r1, [sp, #28]
 800bbb8:	7823      	ldrb	r3, [r4, #0]
 800bbba:	2b2e      	cmp	r3, #46	; 0x2e
 800bbbc:	d11a      	bne.n	800bbf4 <_svfiprintf_r+0x144>
 800bbbe:	7863      	ldrb	r3, [r4, #1]
 800bbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc2:	d10a      	bne.n	800bbda <_svfiprintf_r+0x12a>
 800bbc4:	9b03      	ldr	r3, [sp, #12]
 800bbc6:	1d1a      	adds	r2, r3, #4
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	9203      	str	r2, [sp, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	bfb8      	it	lt
 800bbd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbd4:	3402      	adds	r4, #2
 800bbd6:	9305      	str	r3, [sp, #20]
 800bbd8:	e00c      	b.n	800bbf4 <_svfiprintf_r+0x144>
 800bbda:	1c61      	adds	r1, r4, #1
 800bbdc:	2200      	movs	r2, #0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	3101      	adds	r1, #1
 800bbe2:	7823      	ldrb	r3, [r4, #0]
 800bbe4:	3b30      	subs	r3, #48	; 0x30
 800bbe6:	2b09      	cmp	r3, #9
 800bbe8:	d803      	bhi.n	800bbf2 <_svfiprintf_r+0x142>
 800bbea:	200a      	movs	r0, #10
 800bbec:	fb00 3202 	mla	r2, r0, r2, r3
 800bbf0:	e7f5      	b.n	800bbde <_svfiprintf_r+0x12e>
 800bbf2:	9205      	str	r2, [sp, #20]
 800bbf4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800bc90 <_svfiprintf_r+0x1e0>
 800bbf8:	7821      	ldrb	r1, [r4, #0]
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	2203      	movs	r2, #3
 800bbfe:	f000 f9d9 	bl	800bfb4 <memchr>
 800bc02:	b138      	cbz	r0, 800bc14 <_svfiprintf_r+0x164>
 800bc04:	9a04      	ldr	r2, [sp, #16]
 800bc06:	ebc8 0000 	rsb	r0, r8, r0
 800bc0a:	2340      	movs	r3, #64	; 0x40
 800bc0c:	4083      	lsls	r3, r0
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	9304      	str	r3, [sp, #16]
 800bc12:	3401      	adds	r4, #1
 800bc14:	7821      	ldrb	r1, [r4, #0]
 800bc16:	481a      	ldr	r0, [pc, #104]	; (800bc80 <_svfiprintf_r+0x1d0>)
 800bc18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc1c:	2206      	movs	r2, #6
 800bc1e:	f104 0801 	add.w	r8, r4, #1
 800bc22:	f000 f9c7 	bl	800bfb4 <memchr>
 800bc26:	b188      	cbz	r0, 800bc4c <_svfiprintf_r+0x19c>
 800bc28:	4b16      	ldr	r3, [pc, #88]	; (800bc84 <_svfiprintf_r+0x1d4>)
 800bc2a:	b933      	cbnz	r3, 800bc3a <_svfiprintf_r+0x18a>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	3307      	adds	r3, #7
 800bc30:	f023 0307 	bic.w	r3, r3, #7
 800bc34:	3308      	adds	r3, #8
 800bc36:	9303      	str	r3, [sp, #12]
 800bc38:	e013      	b.n	800bc62 <_svfiprintf_r+0x1b2>
 800bc3a:	ab03      	add	r3, sp, #12
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	4630      	mov	r0, r6
 800bc40:	a904      	add	r1, sp, #16
 800bc42:	462a      	mov	r2, r5
 800bc44:	4b10      	ldr	r3, [pc, #64]	; (800bc88 <_svfiprintf_r+0x1d8>)
 800bc46:	f3af 8000 	nop.w
 800bc4a:	e007      	b.n	800bc5c <_svfiprintf_r+0x1ac>
 800bc4c:	ab03      	add	r3, sp, #12
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	4630      	mov	r0, r6
 800bc52:	a904      	add	r1, sp, #16
 800bc54:	462a      	mov	r2, r5
 800bc56:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <_svfiprintf_r+0x1d8>)
 800bc58:	f000 f892 	bl	800bd80 <_printf_i>
 800bc5c:	1c42      	adds	r2, r0, #1
 800bc5e:	4607      	mov	r7, r0
 800bc60:	d003      	beq.n	800bc6a <_svfiprintf_r+0x1ba>
 800bc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc64:	443b      	add	r3, r7
 800bc66:	9309      	str	r3, [sp, #36]	; 0x24
 800bc68:	e741      	b.n	800baee <_svfiprintf_r+0x3e>
 800bc6a:	89ab      	ldrh	r3, [r5, #12]
 800bc6c:	065b      	lsls	r3, r3, #25
 800bc6e:	d401      	bmi.n	800bc74 <_svfiprintf_r+0x1c4>
 800bc70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc72:	e001      	b.n	800bc78 <_svfiprintf_r+0x1c8>
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	b01d      	add	sp, #116	; 0x74
 800bc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc7e:	bf00      	nop
 800bc80:	0800e2d8 	.word	0x0800e2d8
 800bc84:	00000000 	.word	0x00000000
 800bc88:	0800b9ff 	.word	0x0800b9ff
 800bc8c:	0800e2ce 	.word	0x0800e2ce
 800bc90:	0800e2d4 	.word	0x0800e2d4

0800bc94 <_printf_common>:
 800bc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc98:	4691      	mov	r9, r2
 800bc9a:	461f      	mov	r7, r3
 800bc9c:	688a      	ldr	r2, [r1, #8]
 800bc9e:	690b      	ldr	r3, [r1, #16]
 800bca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bca4:	4293      	cmp	r3, r2
 800bca6:	bfb8      	it	lt
 800bca8:	4613      	movlt	r3, r2
 800bcaa:	f8c9 3000 	str.w	r3, [r9]
 800bcae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	b112      	cbz	r2, 800bcbe <_printf_common+0x2a>
 800bcb8:	3301      	adds	r3, #1
 800bcba:	f8c9 3000 	str.w	r3, [r9]
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	0699      	lsls	r1, r3, #26
 800bcc2:	bf42      	ittt	mi
 800bcc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bcc8:	3302      	addmi	r3, #2
 800bcca:	f8c9 3000 	strmi.w	r3, [r9]
 800bcce:	6825      	ldr	r5, [r4, #0]
 800bcd0:	f015 0506 	ands.w	r5, r5, #6
 800bcd4:	d01c      	beq.n	800bd10 <_printf_common+0x7c>
 800bcd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	3300      	adds	r3, #0
 800bcde:	bf18      	it	ne
 800bce0:	2301      	movne	r3, #1
 800bce2:	0692      	lsls	r2, r2, #26
 800bce4:	d51f      	bpl.n	800bd26 <_printf_common+0x92>
 800bce6:	18e1      	adds	r1, r4, r3
 800bce8:	1c5a      	adds	r2, r3, #1
 800bcea:	2030      	movs	r0, #48	; 0x30
 800bcec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcf0:	4422      	add	r2, r4
 800bcf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcfa:	3302      	adds	r3, #2
 800bcfc:	e013      	b.n	800bd26 <_printf_common+0x92>
 800bcfe:	4630      	mov	r0, r6
 800bd00:	4639      	mov	r1, r7
 800bd02:	f104 0219 	add.w	r2, r4, #25
 800bd06:	2301      	movs	r3, #1
 800bd08:	47c0      	blx	r8
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d007      	beq.n	800bd1e <_printf_common+0x8a>
 800bd0e:	3501      	adds	r5, #1
 800bd10:	68e3      	ldr	r3, [r4, #12]
 800bd12:	f8d9 2000 	ldr.w	r2, [r9]
 800bd16:	1a9b      	subs	r3, r3, r2
 800bd18:	429d      	cmp	r5, r3
 800bd1a:	dbf0      	blt.n	800bcfe <_printf_common+0x6a>
 800bd1c:	e7db      	b.n	800bcd6 <_printf_common+0x42>
 800bd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd26:	4630      	mov	r0, r6
 800bd28:	4639      	mov	r1, r7
 800bd2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd2e:	47c0      	blx	r8
 800bd30:	3001      	adds	r0, #1
 800bd32:	d0f4      	beq.n	800bd1e <_printf_common+0x8a>
 800bd34:	6822      	ldr	r2, [r4, #0]
 800bd36:	f8d9 5000 	ldr.w	r5, [r9]
 800bd3a:	68e3      	ldr	r3, [r4, #12]
 800bd3c:	f002 0206 	and.w	r2, r2, #6
 800bd40:	2a04      	cmp	r2, #4
 800bd42:	bf08      	it	eq
 800bd44:	1b5d      	subeq	r5, r3, r5
 800bd46:	6922      	ldr	r2, [r4, #16]
 800bd48:	68a3      	ldr	r3, [r4, #8]
 800bd4a:	bf0c      	ite	eq
 800bd4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd50:	2500      	movne	r5, #0
 800bd52:	4293      	cmp	r3, r2
 800bd54:	bfc4      	itt	gt
 800bd56:	1a9b      	subgt	r3, r3, r2
 800bd58:	18ed      	addgt	r5, r5, r3
 800bd5a:	f04f 0900 	mov.w	r9, #0
 800bd5e:	45a9      	cmp	r9, r5
 800bd60:	da0a      	bge.n	800bd78 <_printf_common+0xe4>
 800bd62:	4630      	mov	r0, r6
 800bd64:	4639      	mov	r1, r7
 800bd66:	f104 021a 	add.w	r2, r4, #26
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	47c0      	blx	r8
 800bd6e:	3001      	adds	r0, #1
 800bd70:	d0d5      	beq.n	800bd1e <_printf_common+0x8a>
 800bd72:	f109 0901 	add.w	r9, r9, #1
 800bd76:	e7f2      	b.n	800bd5e <_printf_common+0xca>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800bd80 <_printf_i>:
 800bd80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bd84:	460c      	mov	r4, r1
 800bd86:	4617      	mov	r7, r2
 800bd88:	7e22      	ldrb	r2, [r4, #24]
 800bd8a:	2a6e      	cmp	r2, #110	; 0x6e
 800bd8c:	4698      	mov	r8, r3
 800bd8e:	4606      	mov	r6, r0
 800bd90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd92:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800bd96:	f000 80a9 	beq.w	800beec <_printf_i+0x16c>
 800bd9a:	d812      	bhi.n	800bdc2 <_printf_i+0x42>
 800bd9c:	2a63      	cmp	r2, #99	; 0x63
 800bd9e:	d023      	beq.n	800bde8 <_printf_i+0x68>
 800bda0:	d80a      	bhi.n	800bdb8 <_printf_i+0x38>
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	f000 80b6 	beq.w	800bf14 <_printf_i+0x194>
 800bda8:	2a58      	cmp	r2, #88	; 0x58
 800bdaa:	f040 80c5 	bne.w	800bf38 <_printf_i+0x1b8>
 800bdae:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800bdb2:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800bfac <_printf_i+0x22c>
 800bdb6:	e051      	b.n	800be5c <_printf_i+0xdc>
 800bdb8:	2a64      	cmp	r2, #100	; 0x64
 800bdba:	d01e      	beq.n	800bdfa <_printf_i+0x7a>
 800bdbc:	2a69      	cmp	r2, #105	; 0x69
 800bdbe:	d01c      	beq.n	800bdfa <_printf_i+0x7a>
 800bdc0:	e0ba      	b.n	800bf38 <_printf_i+0x1b8>
 800bdc2:	2a73      	cmp	r2, #115	; 0x73
 800bdc4:	f000 80aa 	beq.w	800bf1c <_printf_i+0x19c>
 800bdc8:	d809      	bhi.n	800bdde <_printf_i+0x5e>
 800bdca:	2a6f      	cmp	r2, #111	; 0x6f
 800bdcc:	d02b      	beq.n	800be26 <_printf_i+0xa6>
 800bdce:	2a70      	cmp	r2, #112	; 0x70
 800bdd0:	f040 80b2 	bne.w	800bf38 <_printf_i+0x1b8>
 800bdd4:	6822      	ldr	r2, [r4, #0]
 800bdd6:	f042 0220 	orr.w	r2, r2, #32
 800bdda:	6022      	str	r2, [r4, #0]
 800bddc:	e039      	b.n	800be52 <_printf_i+0xd2>
 800bdde:	2a75      	cmp	r2, #117	; 0x75
 800bde0:	d021      	beq.n	800be26 <_printf_i+0xa6>
 800bde2:	2a78      	cmp	r2, #120	; 0x78
 800bde4:	d035      	beq.n	800be52 <_printf_i+0xd2>
 800bde6:	e0a7      	b.n	800bf38 <_printf_i+0x1b8>
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	1d11      	adds	r1, r2, #4
 800bdec:	6019      	str	r1, [r3, #0]
 800bdee:	6813      	ldr	r3, [r2, #0]
 800bdf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdf8:	e0a2      	b.n	800bf40 <_printf_i+0x1c0>
 800bdfa:	6820      	ldr	r0, [r4, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	f010 0f80 	tst.w	r0, #128	; 0x80
 800be02:	d003      	beq.n	800be0c <_printf_i+0x8c>
 800be04:	1d10      	adds	r0, r2, #4
 800be06:	6018      	str	r0, [r3, #0]
 800be08:	6813      	ldr	r3, [r2, #0]
 800be0a:	e005      	b.n	800be18 <_printf_i+0x98>
 800be0c:	0645      	lsls	r5, r0, #25
 800be0e:	d5f9      	bpl.n	800be04 <_printf_i+0x84>
 800be10:	1d10      	adds	r0, r2, #4
 800be12:	6018      	str	r0, [r3, #0]
 800be14:	f9b2 3000 	ldrsh.w	r3, [r2]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	da3b      	bge.n	800be94 <_printf_i+0x114>
 800be1c:	222d      	movs	r2, #45	; 0x2d
 800be1e:	425b      	negs	r3, r3
 800be20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be24:	e036      	b.n	800be94 <_printf_i+0x114>
 800be26:	6820      	ldr	r0, [r4, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800be2e:	d003      	beq.n	800be38 <_printf_i+0xb8>
 800be30:	1d10      	adds	r0, r2, #4
 800be32:	6018      	str	r0, [r3, #0]
 800be34:	6813      	ldr	r3, [r2, #0]
 800be36:	e004      	b.n	800be42 <_printf_i+0xc2>
 800be38:	0640      	lsls	r0, r0, #25
 800be3a:	d5f9      	bpl.n	800be30 <_printf_i+0xb0>
 800be3c:	1d10      	adds	r0, r2, #4
 800be3e:	6018      	str	r0, [r3, #0]
 800be40:	8813      	ldrh	r3, [r2, #0]
 800be42:	7e22      	ldrb	r2, [r4, #24]
 800be44:	f8df e164 	ldr.w	lr, [pc, #356]	; 800bfac <_printf_i+0x22c>
 800be48:	2a6f      	cmp	r2, #111	; 0x6f
 800be4a:	bf0c      	ite	eq
 800be4c:	2208      	moveq	r2, #8
 800be4e:	220a      	movne	r2, #10
 800be50:	e01c      	b.n	800be8c <_printf_i+0x10c>
 800be52:	2278      	movs	r2, #120	; 0x78
 800be54:	f8df e158 	ldr.w	lr, [pc, #344]	; 800bfb0 <_printf_i+0x230>
 800be58:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800be5c:	6822      	ldr	r2, [r4, #0]
 800be5e:	6818      	ldr	r0, [r3, #0]
 800be60:	f012 0f80 	tst.w	r2, #128	; 0x80
 800be64:	f100 0504 	add.w	r5, r0, #4
 800be68:	601d      	str	r5, [r3, #0]
 800be6a:	d001      	beq.n	800be70 <_printf_i+0xf0>
 800be6c:	6803      	ldr	r3, [r0, #0]
 800be6e:	e002      	b.n	800be76 <_printf_i+0xf6>
 800be70:	0655      	lsls	r5, r2, #25
 800be72:	d5fb      	bpl.n	800be6c <_printf_i+0xec>
 800be74:	8803      	ldrh	r3, [r0, #0]
 800be76:	07d0      	lsls	r0, r2, #31
 800be78:	bf44      	itt	mi
 800be7a:	f042 0220 	orrmi.w	r2, r2, #32
 800be7e:	6022      	strmi	r2, [r4, #0]
 800be80:	b91b      	cbnz	r3, 800be8a <_printf_i+0x10a>
 800be82:	6822      	ldr	r2, [r4, #0]
 800be84:	f022 0220 	bic.w	r2, r2, #32
 800be88:	6022      	str	r2, [r4, #0]
 800be8a:	2210      	movs	r2, #16
 800be8c:	2000      	movs	r0, #0
 800be8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800be92:	e002      	b.n	800be9a <_printf_i+0x11a>
 800be94:	f8df e114 	ldr.w	lr, [pc, #276]	; 800bfac <_printf_i+0x22c>
 800be98:	220a      	movs	r2, #10
 800be9a:	6865      	ldr	r5, [r4, #4]
 800be9c:	60a5      	str	r5, [r4, #8]
 800be9e:	2d00      	cmp	r5, #0
 800bea0:	bfa2      	ittt	ge
 800bea2:	6820      	ldrge	r0, [r4, #0]
 800bea4:	f020 0004 	bicge.w	r0, r0, #4
 800bea8:	6020      	strge	r0, [r4, #0]
 800beaa:	b903      	cbnz	r3, 800beae <_printf_i+0x12e>
 800beac:	b165      	cbz	r5, 800bec8 <_printf_i+0x148>
 800beae:	460d      	mov	r5, r1
 800beb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800beb4:	fb02 3310 	mls	r3, r2, r0, r3
 800beb8:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800bebc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bec0:	4603      	mov	r3, r0
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d1f4      	bne.n	800beb0 <_printf_i+0x130>
 800bec6:	e000      	b.n	800beca <_printf_i+0x14a>
 800bec8:	460d      	mov	r5, r1
 800beca:	2a08      	cmp	r2, #8
 800becc:	d10b      	bne.n	800bee6 <_printf_i+0x166>
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	07da      	lsls	r2, r3, #31
 800bed2:	d508      	bpl.n	800bee6 <_printf_i+0x166>
 800bed4:	6923      	ldr	r3, [r4, #16]
 800bed6:	6862      	ldr	r2, [r4, #4]
 800bed8:	429a      	cmp	r2, r3
 800beda:	bfde      	ittt	le
 800bedc:	2330      	movle	r3, #48	; 0x30
 800bede:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bee6:	1b49      	subs	r1, r1, r5
 800bee8:	6121      	str	r1, [r4, #16]
 800beea:	e02e      	b.n	800bf4a <_printf_i+0x1ca>
 800beec:	6825      	ldr	r5, [r4, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	6960      	ldr	r0, [r4, #20]
 800bef2:	f015 0f80 	tst.w	r5, #128	; 0x80
 800bef6:	d003      	beq.n	800bf00 <_printf_i+0x180>
 800bef8:	1d15      	adds	r5, r2, #4
 800befa:	601d      	str	r5, [r3, #0]
 800befc:	6813      	ldr	r3, [r2, #0]
 800befe:	e008      	b.n	800bf12 <_printf_i+0x192>
 800bf00:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bf04:	f102 0504 	add.w	r5, r2, #4
 800bf08:	601d      	str	r5, [r3, #0]
 800bf0a:	6813      	ldr	r3, [r2, #0]
 800bf0c:	d001      	beq.n	800bf12 <_printf_i+0x192>
 800bf0e:	8018      	strh	r0, [r3, #0]
 800bf10:	e000      	b.n	800bf14 <_printf_i+0x194>
 800bf12:	6018      	str	r0, [r3, #0]
 800bf14:	2300      	movs	r3, #0
 800bf16:	6123      	str	r3, [r4, #16]
 800bf18:	460d      	mov	r5, r1
 800bf1a:	e016      	b.n	800bf4a <_printf_i+0x1ca>
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	1d11      	adds	r1, r2, #4
 800bf20:	6019      	str	r1, [r3, #0]
 800bf22:	6815      	ldr	r5, [r2, #0]
 800bf24:	6862      	ldr	r2, [r4, #4]
 800bf26:	4628      	mov	r0, r5
 800bf28:	2100      	movs	r1, #0
 800bf2a:	f000 f843 	bl	800bfb4 <memchr>
 800bf2e:	b108      	cbz	r0, 800bf34 <_printf_i+0x1b4>
 800bf30:	1b40      	subs	r0, r0, r5
 800bf32:	6060      	str	r0, [r4, #4]
 800bf34:	6863      	ldr	r3, [r4, #4]
 800bf36:	e004      	b.n	800bf42 <_printf_i+0x1c2>
 800bf38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf3c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800bf40:	2301      	movs	r3, #1
 800bf42:	6123      	str	r3, [r4, #16]
 800bf44:	2300      	movs	r3, #0
 800bf46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf4a:	f8cd 8000 	str.w	r8, [sp]
 800bf4e:	4630      	mov	r0, r6
 800bf50:	4621      	mov	r1, r4
 800bf52:	aa03      	add	r2, sp, #12
 800bf54:	463b      	mov	r3, r7
 800bf56:	f7ff fe9d 	bl	800bc94 <_printf_common>
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	d102      	bne.n	800bf64 <_printf_i+0x1e4>
 800bf5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf62:	e01f      	b.n	800bfa4 <_printf_i+0x224>
 800bf64:	4630      	mov	r0, r6
 800bf66:	4639      	mov	r1, r7
 800bf68:	462a      	mov	r2, r5
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	47c0      	blx	r8
 800bf6e:	3001      	adds	r0, #1
 800bf70:	d0f5      	beq.n	800bf5e <_printf_i+0x1de>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	079b      	lsls	r3, r3, #30
 800bf76:	d405      	bmi.n	800bf84 <_printf_i+0x204>
 800bf78:	68e0      	ldr	r0, [r4, #12]
 800bf7a:	9b03      	ldr	r3, [sp, #12]
 800bf7c:	4298      	cmp	r0, r3
 800bf7e:	bfb8      	it	lt
 800bf80:	4618      	movlt	r0, r3
 800bf82:	e00f      	b.n	800bfa4 <_printf_i+0x224>
 800bf84:	2500      	movs	r5, #0
 800bf86:	68e3      	ldr	r3, [r4, #12]
 800bf88:	9a03      	ldr	r2, [sp, #12]
 800bf8a:	1a9b      	subs	r3, r3, r2
 800bf8c:	429d      	cmp	r5, r3
 800bf8e:	daf3      	bge.n	800bf78 <_printf_i+0x1f8>
 800bf90:	4630      	mov	r0, r6
 800bf92:	4639      	mov	r1, r7
 800bf94:	f104 0219 	add.w	r2, r4, #25
 800bf98:	2301      	movs	r3, #1
 800bf9a:	47c0      	blx	r8
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	d0de      	beq.n	800bf5e <_printf_i+0x1de>
 800bfa0:	3501      	adds	r5, #1
 800bfa2:	e7f0      	b.n	800bf86 <_printf_i+0x206>
 800bfa4:	b004      	add	sp, #16
 800bfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfaa:	bf00      	nop
 800bfac:	0800e2df 	.word	0x0800e2df
 800bfb0:	0800e2f0 	.word	0x0800e2f0

0800bfb4 <memchr>:
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	b2c9      	uxtb	r1, r1
 800bfb8:	4402      	add	r2, r0
 800bfba:	4290      	cmp	r0, r2
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	d006      	beq.n	800bfce <memchr+0x1a>
 800bfc0:	781c      	ldrb	r4, [r3, #0]
 800bfc2:	428c      	cmp	r4, r1
 800bfc4:	f100 0001 	add.w	r0, r0, #1
 800bfc8:	d1f7      	bne.n	800bfba <memchr+0x6>
 800bfca:	4618      	mov	r0, r3
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	2000      	movs	r0, #0
 800bfd0:	bd10      	pop	{r4, pc}

0800bfd2 <memmove>:
 800bfd2:	4281      	cmp	r1, r0
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	eb01 0302 	add.w	r3, r1, r2
 800bfda:	d301      	bcc.n	800bfe0 <memmove+0xe>
 800bfdc:	1e42      	subs	r2, r0, #1
 800bfde:	e00b      	b.n	800bff8 <memmove+0x26>
 800bfe0:	4298      	cmp	r0, r3
 800bfe2:	d2fb      	bcs.n	800bfdc <memmove+0xa>
 800bfe4:	1881      	adds	r1, r0, r2
 800bfe6:	1ad2      	subs	r2, r2, r3
 800bfe8:	42d3      	cmn	r3, r2
 800bfea:	d004      	beq.n	800bff6 <memmove+0x24>
 800bfec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bff0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bff4:	e7f8      	b.n	800bfe8 <memmove+0x16>
 800bff6:	bd10      	pop	{r4, pc}
 800bff8:	4299      	cmp	r1, r3
 800bffa:	d004      	beq.n	800c006 <memmove+0x34>
 800bffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c000:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c004:	e7f8      	b.n	800bff8 <memmove+0x26>
 800c006:	bd10      	pop	{r4, pc}

0800c008 <_realloc_r>:
 800c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00a:	4607      	mov	r7, r0
 800c00c:	4615      	mov	r5, r2
 800c00e:	460e      	mov	r6, r1
 800c010:	b921      	cbnz	r1, 800c01c <_realloc_r+0x14>
 800c012:	4611      	mov	r1, r2
 800c014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c018:	f7ff bc24 	b.w	800b864 <_malloc_r>
 800c01c:	b91a      	cbnz	r2, 800c026 <_realloc_r+0x1e>
 800c01e:	f7ff fbdd 	bl	800b7dc <_free_r>
 800c022:	4628      	mov	r0, r5
 800c024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c026:	f000 f815 	bl	800c054 <_malloc_usable_size_r>
 800c02a:	42a8      	cmp	r0, r5
 800c02c:	d20e      	bcs.n	800c04c <_realloc_r+0x44>
 800c02e:	4638      	mov	r0, r7
 800c030:	4629      	mov	r1, r5
 800c032:	f7ff fc17 	bl	800b864 <_malloc_r>
 800c036:	4604      	mov	r4, r0
 800c038:	b150      	cbz	r0, 800c050 <_realloc_r+0x48>
 800c03a:	4631      	mov	r1, r6
 800c03c:	462a      	mov	r2, r5
 800c03e:	f7ff fbab 	bl	800b798 <memcpy>
 800c042:	4638      	mov	r0, r7
 800c044:	4631      	mov	r1, r6
 800c046:	f7ff fbc9 	bl	800b7dc <_free_r>
 800c04a:	e001      	b.n	800c050 <_realloc_r+0x48>
 800c04c:	4630      	mov	r0, r6
 800c04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c050:	4620      	mov	r0, r4
 800c052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c054 <_malloc_usable_size_r>:
 800c054:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800c058:	2800      	cmp	r0, #0
 800c05a:	bfbe      	ittt	lt
 800c05c:	1809      	addlt	r1, r1, r0
 800c05e:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800c062:	18c0      	addlt	r0, r0, r3
 800c064:	3804      	subs	r0, #4
 800c066:	4770      	bx	lr

0800c068 <CSWTCH.37>:
 800c068:	0000 0202 0c0c 0c0c 0a08                    ..........

0800c072 <CSWTCH.38>:
 800c072:	0003 0003 000c 000c 3000 3000 3000 3000     .........0.0.0.0
 800c082:	0300 0c00 0000                              ......

0800c088 <Driver_USBD0>:
 800c088:	0e35 0800 13b9 0800 10c1 0800 0e51 0800     5...........Q...
 800c098:	0e69 0800 1369 0800 0ec1 0800 10e5 0800     i...i...........
 800c0a8:	0fa5 0800 0ed9 0800 0e81 0800 12a9 0800     ................
 800c0b8:	12e1 0800 0f55 0800 1095 0800 10a9 0800     ....U...........

0800c0c8 <product_string>:
 800c0c8:	0310 0049 0046 0058 0020 0043 0044 0043     ..I.F.X. .C.D.C.
	...

0800c12e <device_descriptor>:
 800c12e:	0112 0110 0002 4000 058b 0058 0001 0201     .......@..X.....
 800c13e:	0100                                        ..

0800c140 <language_string>:
 800c140:	0304 0409 0000 0000 0000 0000 0000 0000     ................
	...

0800c1a6 <manufacturer_string>:
 800c1a6:	0312 0049 006e 0066 0069 006e 0065 006f     ..I.n.f.i.n.e.o.
 800c1b6:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
	...

0800c20c <CSWTCH.1>:
 800c20c:	c140 0800 c1a6 0800 c0c8 0800               @...........

0800c218 <CSWTCH.2>:
 800c218:	1204 0910                                        ...

0800c21b <configuration_descriptor>:
 800c21b:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 800c22b:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 800c23b:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 800c24b:	0507 0203 0040 0701 8205 4002 0100 0000     ....@......@....
	...

0800c25c <cunit_logger_config>:
 800c25c:	c28c 0800 2ec5 0800 40e1 0800 40ed 0800     .........@...@..
	...
 800c280:	c298 0800 0000 0400 0304 0000               ............

0800c28c <cunit_logger_channel_config>:
 800c28c:	2580 0000 0808 1001 0000 0000               .%..........

0800c298 <cunit_logger_tx_pin>:
 800c298:	8500 4802 0001 0000 c2a4 0800               ...H........

0800c2a4 <cunit_logger_tx_pin_config>:
 800c2a4:	0088 0000 0001 0000 0002 0000               ............

0800c2b0 <cunit_logger_rx_pin_config>:
 800c2b0:	0000 0000 0001 0000 0002 0000               ............

0800c2bc <scheduler_timer_intr>:
 800c2bc:	3d39 0100                                   9=..

0800c2c0 <tick_timer_intr>:
 800c2c0:	3f31 0100                                   1?..

0800c2c4 <i2c_master_0_sda_pin_config>:
 800c2c4:	00d0 0000 0001 0000 0000 0000               ............

0800c2d0 <i2c_master_0_scl_pin_config>:
 800c2d0:	00d0 0000 0001 0000 0000 0000               ............

0800c2dc <i2c_master_0_config>:
 800c2dc:	c308 0800 3a21 0800 39d9 0800 39b5 0800     ....!:...9...9..
 800c2ec:	3f91 0800 3fa1 0800 4001 0800 4005 0800     .?...?...@...@..
 800c2fc:	3fb1 0800 0000 0505 5a5b 0000               .?......[Z..

0800c308 <i2c_master_0_channel_config>:
 800c308:	1a80 0006 0000 0000                         ........

0800c310 <reset_pin>:
 800c310:	8100 4802 0080 0000 0001 0000 0000 0000     ...H............
 800c320:	000b 0000                                   ....

0800c324 <vdd_pin>:
 800c324:	8200 4802 0080 0000 0001 0000 0000 0000     ...H............
 800c334:	000c 0000 0230 0101 0000 0001 0000 0000     ....0...........
 800c344:	0000 0001 0102 0101 6c50 7461 6f66 6d72     ........Platform
 800c354:	4220 6e69 6964 676e 0000                          Binding.

0800c35d <g_pctr_states_table>:
 800c35d:	0400 0400 0201 ffff 0201 ffff ffff 0707     ................
 800c36d:	0a0d 7325 7325 7325 7325 1b00 305b 006d     ..%s%s%s%s..[0m.
 800c37d:	6150 7373 6465 4600 6961 656c 2064 6977     Passed.Failed wi
 800c38d:	6874 7220 7465 7275 206e 6176 756c 2065     th return value 
 800c39d:	202d 2500 3733 0073 654c 676e 6874 6f20     - .%37s.Length o
 800c3ad:	2066 6164 6174 2d20 0020 3225 7335 7325     f data - .%25s%s
 800c3bd:	7325 d200                                        %s.

0800c3c0 <g_optiga_unique_application_identifier>:
 800c3c0:	76d2 0000 4704 6e65 7541 6874 7041 6c70     .v...GenAuthAppl

0800c3d0 <aes_info>:
 800c3d0:	0002 0000 8db9 0800 8db5 0800 8db1 0800     ................
 800c3e0:	8d99 0800 8d87 0800                         ........

0800c3e8 <aes_192_ccm_info>:
 800c3e8:	082c 0000 00c0 0000 c464 0800 000c 0000     ,.......d.......
 800c3f8:	0001 0000 0010 0000 c4a0 0800               ............

0800c404 <mbedtls_cipher_definitions>:
 800c404:	0002 0000 c50c 0800 0003 0000 c4d4 0800     ................
 800c414:	0004 0000 c4f0 0800 002b 0000 c43c 0800     ........+...<...
 800c424:	002c 0000 c3e8 0800 002d 0000 c4b8 0800     ,.......-.......
	...

0800c43c <aes_128_ccm_info>:
 800c43c:	082b 0000 0080 0000 c470 0800 000c 0000     +.......p.......
 800c44c:	0001 0000 0010 0000 c4a0 0800 4541 2d53     ............AES-
 800c45c:	3532 2d36 4343 004d 4541 2d53 3931 2d32     256-CCM.AES-192-
 800c46c:	4343 004d 4541 2d53 3231 2d38 4343 004d     CCM.AES-128-CCM.
 800c47c:	4541 2d53 3532 2d36 4345 0042 4541 2d53     AES-256-ECB.AES-
 800c48c:	3931 2d32 4345 0042 4541 2d53 3231 2d38     192-ECB.AES-128-
 800c49c:	4345 0042                                   ECB.

0800c4a0 <ccm_aes_info>:
 800c4a0:	0002 0000 0000 0000 8d75 0800 8d75 0800     ........u...u...
 800c4b0:	8d5f 0800 8d4d 0800                         _...M...

0800c4b8 <aes_256_ccm_info>:
 800c4b8:	082d 0000 0100 0000 c458 0800 000c 0000     -.......X.......
 800c4c8:	0001 0000 0010 0000 c4a0 0800               ............

0800c4d4 <aes_192_ecb_info>:
 800c4d4:	0103 0000 00c0 0000 c488 0800 0000 0000     ................
 800c4e4:	0000 0000 0010 0000 c3d0 0800               ............

0800c4f0 <aes_256_ecb_info>:
 800c4f0:	0104 0000 0100 0000 c47c 0800 0000 0000     ........|.......
 800c500:	0000 0000 0010 0000 c3d0 0800               ............

0800c50c <aes_128_ecb_info>:
 800c50c:	0102 0000 0080 0000 c494 0800 0000 0000     ................
 800c51c:	0000 0000 0010 0000 c3d0 0800               ............

0800c528 <mbedtls_sha224_info>:
 800c528:	0005 0000 c55f 0800 001c 0000 0040 0000     ...._.......@...
 800c538:	9009 0800 9005 0800 9001 0800 8ff5 0800     ................
 800c548:	8fdf 0800 8fcd 0800 8fc9 0800 8fc5 0800     ................
 800c558:	4853 3241 3635 5300 4148 3232 0034 0000     SHA256.SHA224...

0800c568 <mbedtls_sha256_info>:
 800c568:	0006 0000 c558 0800 0020 0000 0040 0000     ....X... ...@...
 800c578:	900f 0800 9005 0800 9001 0800 8ffb 0800     ................
 800c588:	8fdf 0800 8fcd 0800 8fc9 0800 8fc5 0800     ................

0800c598 <K>:
 800c598:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 800c5a8:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 800c5b8:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 800c5c8:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 800c5d8:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 800c5e8:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 800c5f8:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 800c608:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 800c618:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 800c628:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 800c638:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 800c648:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 800c658:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 800c668:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 800c678:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 800c688:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

0800c698 <E0F1_metadata>:
 800c698:	0620 01d0 d300 0001 6f5b 7470 6769 2061      .......[optiga 
 800c6a8:	7865 6d61 6c70 5d65 2020 203a 1b00 335b     example]  : ..[3
 800c6b8:	6d31 6500                                        1m.

0800c6bb <__FUNCTION__.5943>:
 800c6bb:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
 800c6cb:	7972 7470 655f 6363 675f 6e65 7265 7461     rypt_ecc_generat
 800c6db:	5f65 656b 7079 6961 0072                    e_keypair.

0800c6e5 <digest>:
 800c6e5:	c761 f9de d50f 7acd 7a8b 4136 e004 820d     a......z.z6A....
 800c6f5:	4638 b7bf ee70 8fbf 2540 0a2e 4221 9caf     8F..p...@%..!B..

0800c705 <__FUNCTION__.5866>:
 800c705:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
 800c715:	7972 7470 655f 6463 6173 735f 6769 006e     rypt_ecdsa_sign.

0800c725 <digest>:
 800c725:	5fe9 b1b3 a49f 27dd aefe 33b3 8040 35ce     ._.....'...3@..5
 800c735:	3edf f108 366f 24f3 b00e 2fb3 d0ab ca90     .>..o6.$.../....

0800c745 <ecc_public_key_component>:
 800c745:	888b 1d9c 07d6 2e58 f8d6 c22c bed9 fed0     ......X...,.....
 800c755:	f364 5e24 7d94 cd54 dc20 9858 51cf 4431     d.$^.}T. .X..Q1D
 800c765:	ea22 d401 230b 45b2 427c 3cdf 0dfb 1033     "....#.E|B.<..3.
 800c775:	49b8 aab7 850a e7de f16a 31ac 1e31 4b8c     .I......j..11..K

0800c785 <__FUNCTION__.5873>:
 800c785:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
 800c795:	7972 7470 655f 6463 6173 765f 7265 6669     rypt_ecdsa_verif
 800c7a5:	0079                                        y.

0800c7a7 <signature>:
 800c7a7:	2002 a439 e970 3032 5ff5 dfa4 078a 5836     . 9.p.20._....6X
 800c7b7:	c665 1be6 5107 c6fb 0516 dfeb 6d56 50a9     e....Q......Vm.P
 800c7c7:	243b 1e02 3349 076c d02b 2040 d40f 7ee0     ;$..I3l.+.@ ...~
 800c7d7:	6667 f5c4 987f 38ec efb8 8f44 e16a 1efd     gf.....8..D.j...
 800c7e7:	b492                                        ..

0800c7e9 <__FUNCTION__.5868>:
 800c7e9:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
 800c7f9:	7972 7470 685f 7361 0068 504f 4954 4147     rypt_hash.OPTIGA
 800c809:	202c 6e49 6966 656e 6e6f 5420 6365 6e68     , Infineon Techn
 800c819:	6c6f 676f 6569 2073 4741 6500                    ologies AG.

0800c824 <__FUNCTION__.5887>:
 800c824:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
 800c834:	7972 7470 685f 7361 5f68 6164 6174 6500          rypt_hash_data.

0800c843 <__FUNCTION__.5864>:
 800c843:	7865 6d61 6c70 5f65 706f 6974 6167 635f     example_optiga_c
 800c853:	7972 7470 725f 6e61 6f64 006d               rypt_random.

0800c85f <digest>:
 800c85f:	c761 f9de d50f 7acd 7a8b 4136 e004 820d     a......z.z6A....
 800c86f:	4638 b7bf ee70 8fbf 2540 0a2e 4221 9caf     8F..p...@%..!B..
 800c87f:	6542 6967 206e 6564 6f6d 736e 7274 7461     Begin demonstrat
 800c88f:	6e69 2067 6968 6562 6e72 7461 2065 6566     ing hibernate fe
 800c89f:	7461 7275 2e65 2e2e 000a 6948 6562 6e72     ature.....Hibern
 800c8af:	7461 2065 6566 7461 7275 2065 6564 6f6d     ate feature demo
 800c8bf:	736e 7274 7461 6f69 206e 6f63 706d 656c     nstration comple
 800c8cf:	6574 2e64 2e2e 000a                         ted.....

0800c8d7 <__FUNCTION__.5960>:
 800c8d7:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
 800c8e7:	6974 5f6c 6968 6562 6e72 7461 5f65 6572     til_hibernate_re
 800c8f7:	7473 726f 0065                              store.

0800c8fd <int_final_fragment_array>:
 800c8fd:	2f2e 3130 3332 3534 3736 3938 3b3a 3d3c     ./0123456789:;<=
 800c90d:	3f3e 4241 4443 4645 4847 4a49 4c4b 4e4d     >?ABCDEFGHIJKLMN
 800c91d:	504f 5251 5453 5655 5857 5a59 5c5b 5e5d     OPQRSTUVWXYZ[\]^
 800c92d:	3b5f                                        _;

0800c92f <__FUNCTION__.5907>:
 800c92f:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
 800c93f:	6974 5f6c 7270 746f 6365 6574 5f64 7075     til_protected_up
 800c94f:	6164 6574 8400                                   date.

0800c954 <manifest_int>:
 800c954:	4384 01a1 a126 4204 e3e0 3d58 0186 f6f6     .C..&..B..X=....
 800c964:	2084 0219 0392 0082 8201 2082 2558 1882     . ......... X%..
 800c974:	5829 a020 d2ae 7575 77b8 0fed b6ea 743c     )X ...uu.w....<t
 800c984:	5835 e3ea 26a2 8c4c d5ec 8f8f 124e a0ad     5X...&L.....N...
 800c994:	73db f69a 4082 e042 58e1 8b40 ae87 1123     .s...@B..X@...#.
 800c9a4:	444d e8c4 fa93 9970 32d0 70fe f99d 817c     MD....p..2.p..|.
 800c9b4:	0598 a973 8a61 d73d 8bce c8a4 70c2 8e19     ..s.a.=......p..
 800c9c4:	e874 dc58 6322 389e 8c52 957d 5ee2 c728     t.X."c.8R.}..^(.
 800c9d4:	ed71 fedf c479 7762 c6b8 215c                    q...y.bw..\

0800c9df <int_continue_fragment_array>:
 800c9df:	4021 2322 2524 2726 2928 2b2a 2d2c 2f2e     !@"#$%&'()*+,-./
 800c9ef:	3130 3332 3534 3736 3938 3b3a 3d3c 3f3e     0123456789:;<=>?
 800c9ff:	4241 4443 4645 4847 4a49 4c4b 4e4d 504f     ABCDEFGHIJKLMNOP
 800ca0f:	5251 5453 5655 5857 5a59 5c5b 5e5d 3b5f     QRSTUVWXYZ[\]^_;
 800ca1f:	0a0d 4021 2322 2524 2726 2928 2b2a 2d2c     ..!@"#$%&'()*+,-
 800ca2f:	2f2e 3130 3332 3534 3736 3938 3b3a 3d3c     ./0123456789:;<=
 800ca3f:	3f3e 4241 4443 4645 4847 4a49 4c4b 4e4d     >?ABCDEFGHIJKLMN
 800ca4f:	504f 5251 5453 5655 5857 5a59 5c5b 5e5d     OPQRSTUVWXYZ[\]^
 800ca5f:	3b5f 0a0d 4021 2322 2524 2726 2928 2b2a     _;..!@"#$%&'()*+
 800ca6f:	2d2c 2f2e 3130 3332 3534 3736 3938 3b3a     ,-./0123456789:;
 800ca7f:	3d3c 3f3e 4241 4443 4645 4847 4a49 4c4b     <=>?ABCDEFGHIJKL
 800ca8f:	4e4d 504f 5251 5453 5655 5857 5a59 5c5b     MNOPQRSTUVWXYZ[\
 800ca9f:	5e5d 3b5f 0a0d 4021 2322 2524 2726 2928     ]^_;..!@"#$%&'()
 800caaf:	2b2a 2d2c 2f2e 3130 3332 3534 3736 3938     *+,-./0123456789
 800cabf:	3b3a 3d3c 3f3e 4241 4443 4645 4847 4a49     :;<=>?ABCDEFGHIJ
 800cacf:	4c4b 4e4d 504f 5251 5453 5655 5857 5a59     KLMNOPQRSTUVWXYZ
 800cadf:	5c5b 5e5d 3b5f 0a0d 4021 2322 2524 2726     [\]^_;..!@"#$%&'
 800caef:	2928 2b2a 2d2c 2f2e 3130 3332 3534 3736     ()*+,-./01234567
 800caff:	3938 3b3a 3d3c 3f3e 4241 4443 4645 4847     89:;<=>?ABCDEFGH
 800cb0f:	4a49 4c4b 4e4d 504f 5251 5453 5655 5857     IJKLMNOPQRSTUVWX
 800cb1f:	5a59 5c5b 5e5d 3b5f 0a0d 4021 2322 2524     YZ[\]^_;..!@"#$%
 800cb2f:	2726 2928 2b2a 2d2c 2f2e 3130 3332 3534     &'()*+,-./012345
 800cb3f:	3736 3938 3b3a 3d3c 3f3e 4241 4443 4645     6789:;<=>?ABCDEF
 800cb4f:	4847 4a49 4c4b 4e4d 504f 5251 5453 5655     GHIJKLMNOPQRSTUV
 800cb5f:	5857 5a59 5c5b 5e5d 3b5f 0a0d 4021 2322     WXYZ[\]^_;..!@"#
 800cb6f:	2524 2726 2928 2b2a 2d2c 2f2e 3130 3332     $%&'()*+,-./0123
 800cb7f:	3534 3736 3938 3b3a 3d3c 3f3e 4241 4443     456789:;<=>?ABCD
 800cb8f:	4645 4847 4a49 4c4b 4e4d 504f 5251 5453     EFGHIJKLMNOPQRST
 800cb9f:	5655 5857 5a59 5c5b 5e5d 3b5f 0a0d 4021     UVWXYZ[\]^_;..!@
 800cbaf:	2322 2524 2726 2928 2b2a 2d2c 2f2e 3130     "#$%&'()*+,-./01
 800cbbf:	3332 3534 3736 3938 3b3a 3d3c 3f3e 4241     23456789:;<=>?AB
 800cbcf:	4443 4645 4847 4a49 4c4b 4e4d 504f 5251     CDEFGHIJKLMNOPQR
 800cbdf:	5453 5655 5857 5a59 5c5b 5e5d 3b5f 0a0d     STUVWXYZ[\]^_;..
 800cbef:	4021 2322 2524 2726 2928 2b2a 2d2c 2f2e     !@"#$%&'()*+,-./
 800cbff:	3130 3332 3534 3736 3938 3b3a 3d3c 3f3e     0123456789:;<=>?
 800cc0f:	4241 4443 4645 4847 4a49 4c4b 4e4d 504f     ABCDEFGHIJKLMNOP
 800cc1f:	5251 5453 5655 5857 5a59 5c5b 5e5d 3b5f     QRSTUVWXYZ[\]^_;
 800cc2f:	0a0d 4021 2322 2524 2726 2928 2b2a 2d2c     ..!@"#$%&'()*+,-
 800cc3f:	34df 4257 b8b8 c1b3 cc21 064d 6f88 09fe     .4WB....!.M..o..
 800cc4f:	bc1f 07a0 dad5 b481 dc2d 50e0 bace 131e     ........-..P....

0800cc5f <target_oid_metadata>:
 800cc5f:	0520 03d0 e021 30e3                               ...!..

0800cc66 <trust_anchor>:
 800cc66:	8230 5802 8230 ff01 03a0 0102 0202 2f01     0..X0........../
 800cc76:	0a30 0806 862a ce48 043d 0203 5630 0b31     0...*.H.=...0V1.
 800cc86:	0930 0306 0455 1306 4902 314e 300d 060b     0...U....IN1.0..
 800cc96:	5503 0a04 040c 4649 4e49 0c31 0a30 0306     .U....IFIN1.0...
 800cca6:	0455 0c0b 4303 5343 1331 1130 0306 0455     U....CCS1.0...U.
 800ccb6:	0c03 490a 746e 4143 5020 3532 3136 3015     ...IntCA P2561.0
 800ccc6:	0613 5503 2e04 0c13 7254 7375 2074 6e41     ...U....Trust An
 800ccd6:	6863 726f 1e30 0d17 3631 3530 3632 3830     chor0...16052608
 800cce6:	3130 3733 175a 310d 3037 3036 3035 3038     0137Z..170605080
 800ccf6:	3331 5a37 5a30 0b31 0930 0306 0455 1306     137Z0Z1.0...U...
 800cd06:	4902 314e 300d 060b 5503 0a04 040c 4649     .IN1.0...U....IF
 800cd16:	4e49 0c31 0a30 0306 0455 0c0b 4303 5343     IN1.0...U....CCS
 800cd26:	1731 1530 0306 0455 0c03 650e 646e 6e45     1.0...U....endEn
 800cd36:	6974 7974 5020 3532 3136 3015 0613 5503     tity P2561.0...U
 800cd46:	2e04 0c13 7254 7375 2074 6e41 6863 726f     ....Trust Anchor
 800cd56:	5930 1330 0706 862a ce48 023d 0601 2a08     0Y0...*.H.=....*
 800cd66:	4886 3dce 0103 0307 0042 1904 b2b5 0d17     .H.=....B.......
 800cd76:	98f5 d45e 72d9 ef16 3961 143f af58 025c     ..^..r..a9?.X.\.
 800cd86:	0778 48ca 2a8f 90e3 03b9 d2a1 2046 2109     x..H.*......F .!
 800cd96:	9852 8edc 8488 8e67 d183 0fde e51c 1d19     R.....g.........
 800cda6:	740c 4160 5b58 5536 3df8 a3ab b981 8130     .t`AX[6U.=....0.
 800cdb6:	30b6 0609 5503 131d 0204 0030 1d30 0306     .0...U....0.0...
 800cdc6:	1d55 040e 0416 b514 fd97 36ab a01a 23a2     U..........6...#
 800cdd6:	68a7 2525 82fb d055 cf4f 30b8 067a 5503     .h%%..U.O..0z..U
 800cde6:	231d 7304 7130 1480 bb1a 4456 8c65 4f4d     .#.s0q....VDe.MO
 800cdf6:	29cd 3fa2 c64c a8bc a48b da0a 56a1 54a4     .).?L........V.T
 800ce06:	5230 0b31 0930 0306 0455 1306 4902 314e     0R1.0...U....IN1
 800ce16:	300d 060b 5503 0a04 040c 4649 4e49 0c31     .0...U....IFIN1.
 800ce26:	0a30 0306 0455 0c0b 4303 5343 0f31 0d30     0...U....CCS1.0.
 800ce36:	0306 0455 0c03 5206 6f6f 4374 3141 3015     ..U....RootCA1.0
 800ce46:	0613 5503 2e04 0c13 7254 7375 2074 6e41     ...U....Trust An
 800ce56:	6863 726f 0182 302e 060e 5503 0f1d 0101     chor...0...U....
 800ce66:	04ff 0304 0002 3081 060a 2a08 4886 3dce     .......0...*.H.=
 800ce76:	0304 0302 0047 4430 2002 fd68 8f9c 3335     ....G.0D. h...53
 800ce86:	b80b 8c32 1caf 4e81 2941 cb26 10b7 75a0     ..2....NA)&....u
 800ce96:	89fc c5ae 921d 728e 5cef 2002 c17d 58eb     .......r.\. }..X
 800cea6:	f121 fbfd d75e 06de b4c9 59ff 378d 7a8c     !...^......Y.7.z
 800ceb6:	cd48 992d 7774 9d58 5195 5d8f               H.-.twX..Q.]

0800cec2 <reset_version_tag_metadata>:
 800cec2:	0420 02c1 0000                               .....

0800cec8 <__FUNCTION__.5865>:
 800cec8:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
 800ced8:	6974 5f6c 6572 6461 645f 7461 0061          til_read_data.

0800cee6 <__FUNCTION__.5864>:
 800cee6:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
 800cef6:	6974 5f6c 7075 6164 6574 635f 756f 746e     til_update_count
	...

0800cf07 <initial_counter_object_data>:
 800cf07:	0000 0000 0000 0a00                         ........

0800cf0f <__FUNCTION__.5865>:
 800cf0f:	7865 6d61 6c70 5f65 706f 6974 6167 755f     example_optiga_u
 800cf1f:	6974 5f6c 7277 7469 5f65 6164 6174 2000          til_write_data.

0800cf2e <metadata>:
 800cf2e:	0520 03d1 fbe1 3003                               ......

0800cf35 <trust_anchor>:
 800cf35:	8230 7e02 8230 0502 03a0 0102 0202 0009     0..~0...........
 800cf45:	0c9b b424 7d5e 73e3 0a30 0806 862a ce48     ..$.^}.s0...*.H.
 800cf55:	043d 0203 7430 0b31 0930 0306 0455 1306     =...0t1.0...U...
 800cf65:	4402 3145 3021 061f 5503 0a04 180c 6e49     .DE1!0...U....In
 800cf75:	6966 656e 6e6f 5420 6365 6e68 6c6f 676f     fineon Technolog
 800cf85:	6569 2073 4741 1b31 1930 0306 0455 0c0b     ies AG1.0...U...
 800cf95:	4f12 5450 4749 2841 4d54 2029 7254 7375     .OPTIGA(TM) Trus
 800cfa5:	2074 3158 3025 0623 5503 0304 1c0c 6e49     t X1%0#..U....In
 800cfb5:	6966 656e 6e6f 5420 7365 2074 6553 7672     fineon Test Serv
 800cfc5:	7265 5220 6f6f 2074 4143 1e30 0d17 3631     er Root CA0...16
 800cfd5:	3031 3431 3330 3835 3633 175a 340d 3131     1014035836Z..411
 800cfe5:	3030 3038 3533 3338 5a36 7430 0b31 0930     008035836Z0t1.0.
 800cff5:	0306 0455 1306 4402 3145 3021 061f 5503     ..U....DE1!0...U
 800d005:	0a04 180c 6e49 6966 656e 6e6f 5420 6365     ....Infineon Tec
 800d015:	6e68 6c6f 676f 6569 2073 4741 1b31 1930     hnologies AG1.0.
 800d025:	0306 0455 0c0b 4f12 5450 4749 2841 4d54     ..U....OPTIGA(TM
 800d035:	2029 7254 7375 2074 3158 3025 0623 5503     ) Trust X1%0#..U
 800d045:	0304 1c0c 6e49 6966 656e 6e6f 5420 7365     ....Infineon Tes
 800d055:	2074 6553 7672 7265 5220 6f6f 2074 4143     t Server Root CA
 800d065:	7630 1030 0706 862a ce48 023d 0601 2b05     0v0...*.H.=....+
 800d075:	0481 2200 6203 0400 2e7b fbe6 6fbd 0f40     ...".b..{....o@.
 800d085:	9f41 f0e5 978c b021 b507 d2bb 5ab8 3b14     A.....!......Z.;
 800d095:	5475 ea7e f2fe 5a8d 54b8 c8e0 edad d5f1     uT~....Z.T......
 800d0a5:	978b 02ba d93e e025 8600 3517 e6e6 12d9     ....>.%....5....
 800d0b5:	8a0f 1c21 fa62 f6ce b19e 8cf8 dca3 0452     ..!.b.........R.
 800d0c5:	eb83 b3a0 b0fa 02ca b130 53fe ad4e e0fb     ........0..SN...
 800d0d5:	0588 4e86 675e 7beb 63a3 6130 1d30 0306     ...N^g.{.c0a0...
 800d0e5:	1d55 040e 0416 9114 4b4a 5807 c6b2 374b     U.......JK.X..K7
 800d0f5:	91fd d862 178a aa28 1894 3062 061f 5503     ..b...(...b0...U
 800d105:	231d 1804 1630 1480 4a91 074b b258 4bc6     .#..0....JK.X..K
 800d115:	fd37 6291 8ad8 2817 94aa 6218 0f30 0306     7..b...(...b0...
 800d125:	1d55 0113 ff01 0504 0330 0101 30ff 060e     U.......0....0..
 800d135:	5503 0f1d 0101 04ff 0304 0202 3004 060a     .U...........0..
 800d145:	2a08 4886 3dce 0304 0302 0067 6430 3002     .*.H.=....g.0d.0
 800d155:	1c20 217a 5050 15c9 c51c 8d14 5c46 d3a6      .z!PP......F\..
 800d165:	ce81 0657 ae1a 1039 5127 ef42 64cd 9975     ..W...9.'QB..du.
 800d175:	0dde 013d 6947 93fc 996d f0c7 8cf8 d1aa     ..=.Gi..m.......
 800d185:	3002 c368 d927 520f 3aad dba8 53f8 1d11     .0h.'..R.:...S..
 800d195:	30f1 396b 3ff3 65ef be61 ddc4 1119 831e     .0k9.?.ea.......
 800d1a5:	e8f9 413f 4597 61fc 06e0 e6d0 5cf7 e29f     ..?A.E.a.....\..
 800d1b5:	c257                                        W.

0800d1b7 <platform_binding_shared_secret_metadata_final>:
 800d1b7:	1720 01c0 d001 e107 07fc 20fe 40e1 03d1      .......... .@..
 800d1c7:	fce1 d307 0001 01e8 6522                         ........"

0800d1d0 <__FUNCTION__.5952>:
 800d1d0:	7865 6d61 6c70 5f65 6170 7269 685f 736f     example_pair_hos
 800d1e0:	5f74 6e61 5f64 706f 6974 6167 755f 6973     t_and_optiga_usi
 800d1f0:	676e 705f 6572 735f 6168 6572 5f64 6573     ng_pre_shared_se
 800d200:	7263 7465 4300 706f 6f72 6563 7373 726f     cret.Coprocessor
 800d210:	5520 4449 6320 6d6f 6f70 656e 746e 2073      UID components 
 800d220:	7261 2065 656d 746e 6f69 656e 2064 6562     are mentioned be
 800d230:	6f6c 3a77 000a 4943 204d 6449 6e65 6974     low:..CIM Identi
 800d240:	6966 7265 2020 2020 2020 2020 2020 2020     fier            
 800d250:	2020 2020 2020 2020 2020 3a20 0020 6c50                : .Pl
 800d260:	7461 6f66 6d72 4920 6564 746e 6669 6569     atform Identifie
 800d270:	2072 2020 2020 2020 2020 2020 2020 2020     r               
 800d280:	2020 3a20 0020 6f4d 6564 206c 6449 6e65        : .Model Iden
 800d290:	6974 6966 7265 2020 2020 2020 2020 2020     tifier          
 800d2a0:	2020 2020 2020 2020 2020 3a20 0020 4f52                : .RO
 800d2b0:	204d 616d 6b73 4920 2044 2020 2020 2020     M mask ID       
 800d2c0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800d2d0:	2020 3a20 0020 6843 7069 7420 7079 2065        : .Chip type 
 800d2e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800d2f0:	2020 2020 2020 2020 2020 3a20 0020 6142                : .Ba
 800d300:	6374 2068 756e 626d 7265 2020 2020 2020     tch number      
 800d310:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800d320:	2020 3a20 0020 6843 7069 7020 736f 7469        : .Chip posit
 800d330:	6f69 206e 6e6f 7720 6661 7265 203a 2d58     ion on wafer: X-
 800d340:	6f63 726f 6964 616e 6574 3a20 0020 6843     coordinate : .Ch
 800d350:	7069 7020 736f 7469 6f69 206e 6e6f 7720     ip position on w
 800d360:	6661 7265 203a 2d59 6f63 726f 6964 616e     afer: Y-coordina
 800d370:	6574 3a20 0020 6946 6d72 6177 6572 4920     te : .Firmware I
 800d380:	6564 746e 6669 6569 2072 2020 2020 2020     dentifier       
 800d390:	2020 2020 2020 2020 2020 3a20 0020 5345                : .ES
 800d3a0:	2057 7562 6c69 2064 756e 626d 7265 202c     W build number, 
 800d3b0:	4342 2044 6f63 6564 2064 2020 2020 2020     BCD coded       
 800d3c0:	2020 3a20 0020                                 : .

0800d3c6 <__FUNCTION__.5934>:
 800d3c6:	7865 6d61 6c70 5f65 6572 6461 635f 706f     example_read_cop
 800d3d6:	6f72 6563 7373 726f 695f 0064 7453 7261     rocessor_id.Star
 800d3e6:	6974 676e 7620 7265 6669 6369 7461 6f69     ting verificatio
 800d3f6:	206e 7865 6d61 6c70 2065 6f66 2072 6c45     n example for El
 800d406:	696c 7470 6369 632d 7275 6576 4420 6769     liptic-curve Dig
 800d416:	7469 6c61 5320 6769 616e 7574 6572 4120     ital Signature A
 800d426:	676c 726f 7469 6d68 2820 4345 5344 2941     lgorithm (ECDSA)
 800d436:	5b00 706f 6974 6167 7320 6568 6c6c 205d     .[optiga shell] 
 800d446:	3a20 0020 5b1b 3239 006d 2031 7453 7065      : ..[92m.1 Step
 800d456:	203a 6556 6972 7966 7020 6572 6170 6572     : Verify prepare
 800d466:	2064 6973 6e67 7461 7275 2c65 7720 7469     d signature, wit
 800d476:	2068 7270 7065 7261 6465 7020 6275 696c     h prepared publi
 800d486:	2063 656b 2079 6e61 2064 6964 6567 7473     c key and digest
 800d496:	5300 6174 7472 6e69 2067 6973 6e67 6e69     .Starting signin
 800d4a6:	2067 7865 6d61 6c70 2065 6f66 2072 6c45     g example for El
 800d4b6:	696c 7470 6369 632d 7275 6576 4420 6769     liptic-curve Dig
 800d4c6:	7469 6c61 5320 6769 616e 7574 6572 4120     ital Signature A
 800d4d6:	676c 726f 7469 6d68 2820 4345 5344 2941     lgorithm (ECDSA)
 800d4e6:	3100 5320 6574 3a70 5320 6769 206e 7270     .1 Step: Sign pr
 800d4f6:	7065 7261 6465 4420 7461 2061 6e61 2064     epared Data and 
 800d506:	7865 6f70 7472 7420 6568 7320 6769 616e     export the signa
 800d516:	7574 6572 5300 6174 7472 6e69 2067 6567     ture.Starting ge
 800d526:	656e 6172 6574 4520 4343 4b20 7965 4520     nerate ECC Key E
 800d536:	6178 706d 656c 3100 5320 6574 3a70 4720     xample.1 Step: G
 800d546:	6e65 7265 7461 2065 4345 2043 494e 5453     enerate ECC NIST
 800d556:	5020 322d 3635 4b20 7965 5020 6961 2072      P-256 Key Pair 
 800d566:	6e61 2064 7865 6f70 7472 7420 6568 7020     and export the p
 800d576:	6275 696c 2063 656b 0079 7453 7261 6974     ublic key.Starti
 800d586:	676e 4720 6e65 7265 7461 2065 6152 646e     ng Generate Rand
 800d596:	6d6f 4520 6178 706d 656c 3100 5320 6574     om Example.1 Ste
 800d5a6:	3a70 4720 6e65 7265 7461 2065 3233 6220     p: Generate 32 b
 800d5b6:	7479 7365 7220 6e61 6f64 006d 7453 7261     ytes random.Star
 800d5c6:	6974 676e 6720 6e65 7265 7461 6f69 206e     ting generation 
 800d5d6:	666f 6420 6769 7365 2074 7845 6d61 6c70     of digest Exampl
 800d5e6:	0065 2031 7453 7065 203a 6547 656e 6172     e.1 Step: Genera
 800d5f6:	6574 6820 7361 2068 666f 6720 7669 6e65     te hash of given
 800d606:	7520 6573 2072 6164 6174 0020 7453 7261      user data .Star
 800d616:	6974 676e 4820 7361 2068 7845 6d61 6c70     ting Hash Exampl
 800d626:	0065 2031 7453 7065 203a 6148 6873 6720     e.1 Step: Hash g
 800d636:	7669 6e65 6420 7461 2061 6977 6874 5320     iven data with S
 800d646:	6174 7472 202c 7055 6164 6574 6120 646e     tart, Update and
 800d656:	4620 6e69 6c61 7a69 2065 6163 6c6c 0073      Finalize calls.
 800d666:	7453 7261 6974 676e 5020 6f72 6574 7463     Starting Protect
 800d676:	6465 5520 6470 7461 2065 7845 6d61 6c70     ed Update Exampl
 800d686:	0065 2031 7453 7065 203a 7055 6164 6574     e.1 Step: Update
 800d696:	4d20 7465 6461 7461 2061 6f66 2072 6874      Metadata for th
 800d6a6:	2065 624f 656a 7463 7420 206f 6562 7520     e Object to be u
 800d6b6:	6470 7461 6465 6120 646e 7420 6568 5420     pdated and the T
 800d6c6:	7572 7473 4120 636e 6f68 2072 7375 6465     rust Anchor used
 800d6d6:	7420 206f 6576 6972 7966 7420 6568 7520      to verify the u
 800d6e6:	6470 7461 0065 2032 7453 7065 203a 7257     pdate.2 Step: Wr
 800d6f6:	7469 2065 7254 7375 2074 6e41 6863 726f     ite Trust Anchor
 800d706:	7520 6573 2064 7962 7420 6568 5420 7572      used by the Tru
 800d716:	7473 5120 2069 6f74 7620 7265 6669 2079     st Qi to verify 
 800d726:	6874 2065 7075 6164 6574 3300 5320 6574     the update.3 Ste
 800d736:	3a70 5320 6174 7472 5020 6f72 6574 7463     p: Start Protect
 800d746:	6465 7520 6470 7461 2065 6977 6874 7020     ed update with p
 800d756:	6572 6170 6572 2064 616d 696e 6566 7473     repared manifest
 800d766:	6120 646e 6620 6172 6d67 6e65 7374 5300      and fragments.S
 800d776:	6174 7472 6e69 2067 7055 6164 6574 4320     tarting Update C
 800d786:	756f 746e 7265 4520 6178 706d 656c 3100     ounter Example.1
 800d796:	5320 6574 3a70 5720 6972 6574 4920 696e      Step: Write Ini
 800d7a6:	6974 6c61 4320 756f 746e 7265 5620 6c61     tial Counter Val
 800d7b6:	6575 3200 5320 6574 3a70 4920 636e 6572     ue.2 Step: Incre
 800d7c6:	7361 2065 6f43 6e75 6574 2072 624f 656a     ase Counter Obje
 800d7d6:	7463 5300 6174 7472 6e69 2067 6948 6562     ct.Starting Hibe
 800d7e6:	6e72 7461 2065 6e61 2064 6552 7473 726f     rnate and Restor
 800d7f6:	2065 7845 6d61 6c70 0065 2031 7453 7065     e Example.1 Step
 800d806:	203a 704f 6e65 4120 7070 696c 6163 6974     : Open Applicati
 800d816:	6e6f 6f20 206e 6874 2065 6573 7563 6972     on on the securi
 800d826:	7974 6320 6968 0070 2032 7453 7065 203a     ty chip.2 Step: 
 800d836:	6150 7269 7420 6568 6820 736f 2074 6e61     Pair the host an
 800d846:	2064 6874 2065 6573 7563 6972 7974 6320     d the security c
 800d856:	6968 0070 2033 7453 7065 203a 6553 656c     hip.3 Step: Sele
 800d866:	7463 5020 6f72 6574 7463 6465 4920 4332     ct Protected I2C
 800d876:	4320 6e6f 656e 7463 6f69 006e 2034 7453      Connection.4 St
 800d886:	7065 203a 6547 656e 6172 6574 4520 4343     ep: Generate ECC
 800d896:	4e20 5349 2054 2d50 3532 2036 654b 2079      NIST P-256 Key 
 800d8a6:	6170 7269 6120 646e 7320 6f74 6572 6920     pair and store i
 800d8b6:	2074 6e69 5320 7365 6973 6e6f 4420 7461     t in Session Dat
 800d8c6:	2061 624f 656a 7463 202c 7865 6f70 7472     a Object, export
 800d8d6:	7420 6568 7020 6275 696c 2063 656b 0079      the public key.
 800d8e6:	2035 7453 7065 203a 6843 6365 206b 6553     5 Step: Check Se
 800d8f6:	7563 6972 7974 4520 6576 746e 4320 756f     curity Event Cou
 800d906:	746e 7265 6120 646e 7720 6961 2074 6974     nter and wait ti
 800d916:	6c6c 6920 2074 6572 6361 6568 2073 0030     ll it reaches 0.
 800d926:	2036 7453 7065 203a 6550 6672 726f 206d     6 Step: Perform 
 800d936:	6c43 736f 2065 7061 6c70 6369 7461 6f69     Close applicatio
 800d946:	206e 6977 6874 4820 6269 7265 616e 6574     n with Hibernate
 800d956:	7020 7261 6d61 7465 7265 7320 7465 7420      parameter set t
 800d966:	206f 7254 6575 3700 5320 6574 3a70 4f20     o True.7 Step: O
 800d976:	6570 206e 7041 6c70 6369 7461 6f69 206e     pen Application 
 800d986:	6e6f 7420 6568 7320 6365 7275 7469 2079     on the security 
 800d996:	6863 7069 3800 5320 6574 3a70 5320 6769     chip.8 Step: Sig
 800d9a6:	206e 7270 7065 7261 6465 6420 7461 2061     n prepared data 
 800d9b6:	6977 6874 7020 6972 6176 6574 6b20 7965     with private key
 800d9c6:	7320 6f74 6572 2064 6e69 5320 7365 6973      stored in Sessi
 800d9d6:	6e6f 4420 7461 2061 624f 656a 7463 3900     on Data Object.9
 800d9e6:	5320 6574 3a70 5620 7265 6669 2079 6874      Step: Verify th
 800d9f6:	2065 6973 6e67 7461 7275 2065 6977 6874     e signature with
 800da06:	7420 6568 7020 6275 696c 2063 656b 2079      the public key 
 800da16:	6567 656e 6172 6574 2064 7270 7665 6f69     generated previo
 800da26:	7375 796c 3100 2030 7453 7065 203a 6c43     usly.10 Step: Cl
 800da36:	736f 2065 7041 6c70 6369 7461 6f69 206e     ose Application 
 800da46:	6e6f 7420 6568 6320 6968 0070 6d49 6f70     on the chip.Impo
 800da56:	7472 6e61 2074 6f6e 6574 203a 6f54 6320     rtant note: To c
 800da66:	6e6f 6974 756e 2065 6977 6874 6f20 6874     ontinue with oth
 800da76:	7265 6520 6178 706d 656c 2073 6f79 2075     er examples you 
 800da86:	656e 6465 7420 206f 6163 6c6c 7420 6568     need to call the
 800da96:	6920 696e 2074 6170 6172 656d 6574 2072      init parameter 
 800daa6:	6e6f 6563 6120 6167 6e69 5300 6174 7472     once again.Start
 800dab6:	6e69 2067 6150 7269 6e69 2067 666f 4820     ing Pairing of H
 800dac6:	736f 2074 6e61 2064 7254 7375 2074 6951     ost and Trust Qi
 800dad6:	4520 6178 706d 656c 3100 5320 6574 3a70      Example.1 Step:
 800dae6:	5220 6165 2064 6e61 2064 6843 6365 206b      Read and Check 
 800daf6:	7865 7369 6974 676e 4d20 7465 6461 7461     existing Metadat
 800db06:	2061 6f66 2072 6874 2065 6942 646e 6e69     a for the Bindin
 800db16:	2067 6553 7263 7465 3200 5320 6574 3a70     g Secret.2 Step:
 800db26:	4720 6e65 7265 7461 2065 6152 646e 6d6f      Generate Random
 800db36:	6620 726f 7420 6568 6e20 7765 4220 6e69      for the new Bin
 800db46:	6964 676e 5320 6365 6572 0074 2033 7453     ding Secret.3 St
 800db56:	7065 203a 7257 7469 2065 656e 2077 6942     ep: Write new Bi
 800db66:	646e 6e69 2067 6553 7263 7465 3400 5320     nding Secret.4 S
 800db76:	6574 3a70 5320 6f74 6572 6e20 7765 4220     tep: Store new B
 800db86:	6e69 6964 676e 5320 6365 6572 2074 6e6f     inding Secret on
 800db96:	7420 6568 4820 736f 0074 7453 7261 6974      the Host.Starti
 800dba6:	676e 7220 6165 6964 676e 6f20 2066 6f43     ng reading of Co
 800dbb6:	7270 636f 7365 6f73 2072 4449 6120 646e     processor ID and
 800dbc6:	6420 7369 6c70 7961 6e69 2067 7469 7327      displaying it's
 800dbd6:	6920 646e 7669 6469 6175 206c 6f63 706d      individual comp
 800dbe6:	6e6f 6e65 7374 4520 6178 706d 656c 3100     onents Example.1
 800dbf6:	5320 6574 3a70 5220 6165 2064 6f43 7270      Step: Read Copr
 800dc06:	636f 7365 6f73 2072 4955 2044 7266 6d6f     ocessor UID from
 800dc16:	4f20 4449 3028 4578 4330 2932 0020 7453      OID(0xE0C2) .St
 800dc26:	7261 6974 676e 5720 6972 6574 4420 7461     arting Write Dat
 800dc36:	2f61 654d 6174 6164 6174 4520 6178 706d     a/Metadata Examp
 800dc46:	656c 3100 5320 6574 3a70 5720 6972 6574     le.1 Step: Write
 800dc56:	5320 6d61 6c70 2065 6543 7472 6669 6369      Sample Certific
 800dc66:	7461 2065 6e69 5420 7572 7473 4120 636e     ate in Trust Anc
 800dc76:	6f68 2072 6144 6174 4f20 6a62 6365 2074     hor Data Object 
 800dc86:	3200 5320 6574 3a70 5720 6972 6574 6e20     .2 Step: Write n
 800dc96:	7765 4d20 7465 6461 7461 0061 7453 7261     ew Metadata.Star
 800dca6:	6974 676e 5220 6165 2064 6144 6174 4d2f     ting Read Data/M
 800dcb6:	7465 6461 7461 2061 7845 6d61 6c70 0065     etadata Example.
 800dcc6:	2031 7453 7065 203a 6552 6461 4320 7265     1 Step: Read Cer
 800dcd6:	6974 6966 6163 6574 0020 2032 7453 7065     tificate .2 Step
 800dce6:	203a 6552 6461 4320 7265 6974 6966 6163     : Read Certifica
 800dcf6:	6574 4d20 7465 6461 7461 0061 6e49 7469     te Metadata.Init
 800dd06:	6169 696c 697a 676e 4f20 5450 4749 2041     ializing OPTIGA 
 800dd16:	6f66 2072 7865 6d61 6c70 2065 6564 6f6d     for example demo
 800dd26:	736e 7274 7461 6f69 2e6e 2e2e 000a 6e49     nstration.....In
 800dd36:	7469 6169 696c 697a 676e 4f20 5450 4749     itializing OPTIG
 800dd46:	2041 6f63 706d 656c 6574 2e64 2e2e 0a0a     A completed.....
 800dd56:	4200 6765 6e69 7020 6961 6972 676e 6f20     .Begin pairing o
 800dd66:	2066 6f68 7473 6120 646e 4f20 5450 4749     f host and OPTIG
 800dd76:	2e41 2e2e 5000 6961 6972 676e 6f20 2066     A....Pairing of 
 800dd86:	6f68 7473 6120 646e 4f20 5450 4749 2041     host and OPTIGA 
 800dd96:	6f63 706d 656c 6574 2e64 2e2e 5300 7465     completed....Set
 800dda6:	6974 676e 6320 7275 6572 746e 6c20 6d69     ting current lim
 800ddb6:	7469 7461 6f69 206e 6f74 6d20 7861 6d69     itation to maxim
 800ddc6:	6d75 2e2e 002e 7453 7261 6974 676e 4f20     um....Starting O
 800ddd6:	5450 4749 2041 7865 6d61 6c70 2065 6564     PTIGA example de
 800dde6:	6f6d 736e 7274 7461 6f69 2e6e 0a2e 2000     monstration.... 
 800ddf6:	2020 7520 6173 6567 2020 2020 2020 2020        usage        
 800de06:	2020 2020 2020 2020 203a 706f 6974 6167             : optiga
 800de16:	2d20 3c2d 6d63 3e64 6800 6c65 0070 7845      --<cmd>.help.Ex
 800de26:	6d61 6c70 2065 6174 656b 2073 6425 6d20     ample takes %d m
 800de36:	6573 0063 0024 6f4e 6520 6178 706d 656c     sec.$.No example
 800de46:	6520 6978 7473 2073 6f66 2072 6874 7369      exists for this
 800de56:	7220 7165 6575 7473 4e00 206f 7865 6d61      request.No exam
 800de66:	6c70 2065 7865 7369 7374 6620 726f 7420     ple exists for t
 800de76:	6968 2073 6572 7571 7365 2074 6863 736f     his request chos
 800de86:	2065 6562 6f6c 2077 706f 6974 6e6f 0073     e below options.
 800de96:	7250 7365 2073 6e61 2079 656b 2079 6f74     Press any key to
 800dea6:	7320 6174 7472 6f20 7470 6769 2061 696d      start optiga mi
 800deb6:	696e 7320 6568 6c6c 2000 2020 6920 696e     ni shell.    ini
 800dec6:	6974 6c61 7a69 2065 706f 6974 6167 2020     tialize optiga  
 800ded6:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800dee6:	2020 2020 2020 203a 706f 6974 6167 2d20           : optiga -
 800def6:	002d 2020 2020 6564 692d 696e 6974 6c61     -.    de-initial
 800df06:	7a69 2065 706f 6974 6167 2020 2020 2020     ize optiga      
 800df16:	2020 2020 2020 2020 2020 2020 2020 3a20                    :
 800df26:	6f20 7470 6769 2061 2d2d 6400 6965 696e      optiga --.deini
 800df36:	0074 2020 2020 7572 206e 6c61 206c 6574     t.    run all te
 800df46:	7473 2073 7461 6f20 636e 2065 2020 2020     sts at once     
 800df56:	2020 2020 2020 2020 2020 2020 2020 3a20                    :
 800df66:	6f20 7470 6769 2061 2d2d 7300 6c65 7466      optiga --.selft
 800df76:	7365 0074 2020 2020 6572 6461 6420 7461     est.    read dat
 800df86:	2061 2020 2020 2020 2020 2020 2020 2020     a               
 800df96:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800dfa6:	3a20 6f20 7470 6769 2061 2d2d 7200 6165      : optiga --.rea
 800dfb6:	6464 7461 0061 2020 2020 7277 7469 2065     ddata.    write 
 800dfc6:	6164 6174 2020 2020 2020 2020 2020 2020     data            
 800dfd6:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800dfe6:	2020 3a20 6f20 7470 6769 2061 2d2d 7700        : optiga --.w
 800dff6:	6972 6574 6164 6174 2000 2020 7220 6165     ritedata.    rea
 800e006:	2064 6f63 7270 636f 7365 6f73 2072 6469     d coprocessor id
 800e016:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800e026:	2020 2020 2020 203a 706f 6974 6167 2d20           : optiga -
 800e036:	002d 6f63 7270 636f 6469 2000 2020 6220     -.coprocid.    b
 800e046:	6e69 6964 676e 6820 736f 2074 6977 6874     inding host with
 800e056:	6f20 7470 6769 2061 2020 2020 2020 2020      optiga         
 800e066:	2020 2020 2020 2020 203a 706f 6974 6167             : optiga
 800e076:	2d20 002d 6962 646e 2000 2020 6820 6269      --.bind.    hib
 800e086:	7265 616e 6574 6120 646e 7220 7365 6f74     ernate and resto
 800e096:	6572 2020 2020 2020 2020 2020 2020 2020     re              
 800e0a6:	2020 2020 2020 203a 706f 6974 6167 2d20           : optiga -
 800e0b6:	002d 6968 6562 6e72 7461 0065 2020 2020     -.hibernate.    
 800e0c6:	7075 6164 6574 6320 756f 746e 7265 2020     update counter  
 800e0d6:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800e0e6:	2020 2020 2020 2020 3a20 6f20 7470 6769              : optig
 800e0f6:	2061 2d2d 6300 756f 746e 7265 2000 2020     a --.counter.   
 800e106:	7020 6f72 6574 7463 6465 7520 6470 7461      protected updat
 800e116:	2065 2020 2020 2020 2020 2020 2020 2020     e               
 800e126:	2020 2020 2020 2020 2020 203a 706f 6974               : opti
 800e136:	6167 2d20 002d 7270 746f 6365 6574 0064     ga --.protected.
 800e146:	2020 2020 6168 6873 6e69 2067 666f 6420         hashing of d
 800e156:	7461 2061 2020 2020 2020 2020 2020 2020     ata             
 800e166:	2020 2020 2020 2020 2020 2020 3a20 6f20                  : o
 800e176:	7470 6769 2061 2d2d 6800 7361 0068 2020     ptiga --.hash.  
 800e186:	2020 6168 6873 7320 6e69 6c67 2065 7566       hash single fu
 800e196:	636e 6974 6e6f 2020 2020 2020 2020 2020     nction          
 800e1a6:	2020 2020 2020 2020 2020 3a20 6f20 7470                : opt
 800e1b6:	6769 2061 2d2d 6800 7361 7368 6168 3532     iga --.hashsha25
 800e1c6:	0036 2020 2020 6172 646e 6d6f 6e20 6d75     6.    random num
 800e1d6:	6562 2072 6567 656e 6172 6974 6e6f 2020     ber generation  
 800e1e6:	2020 2020 2020 2020 2020 2020 2020 3a20                    :
 800e1f6:	6f20 7470 6769 2061 2d2d 2000 2020 6520      optiga --.    e
 800e206:	6363 6b20 7965 7020 6961 2072 6567 656e     cc key pair gene
 800e216:	6172 6974 6e6f 2020 2020 2020 2020 2020     ration          
 800e226:	2020 2020 2020 2020 203a 706f 6974 6167             : optiga
 800e236:	2d20 002d 6365 6b63 7965 6567 006e 2020      --.ecckeygen.  
 800e246:	2020 6365 7364 2061 6973 6e67 2020 2020       ecdsa sign    
 800e256:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800e266:	2020 2020 2020 2020 2020 3a20 6f20 7470                : opt
 800e276:	6769 2061 2d2d 6500 6463 6173 6973 6e67     iga --.ecdsasign
 800e286:	2000 2020 6520 6463 6173 7620 7265 6669     .    ecdsa verif
 800e296:	2079 6973 6e67 2020 2020 2020 2020 2020     y sign          
 800e2a6:	2020 2020 2020 2020 2020 2020 2020 203a                   : 
 800e2b6:	706f 6974 6167 2d20 002d 6365 7364 7661     optiga --.ecdsav
 800e2c6:	7265 6669 0079 0043 2d23 2b30 0020 6c68     erify.C.#-0+ .hl
 800e2d6:	004c 6665 4567 4746 3000 3231 3433 3635     L.efgEFG.0123456
 800e2e6:	3837 4139 4342 4544 0046 3130 3332 3534     789ABCDEF.012345
 800e2f6:	3736 3938 6261 6463 6665 0000 0000          6789abcdef....
