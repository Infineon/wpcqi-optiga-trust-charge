   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pal_i2c.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.I2C_MASTER_IsTxBusy,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	I2C_MASTER_IsTxBusy:
  25              	.LFB272:
  26              	 .file 1 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER/i2c_master.h"
   1:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
   2:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @file i2c_master.h
   3:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @date 2017-12-20
   4:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
   5:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * NOTE:
   6:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * regenerated.
   8:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
   9:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
  10:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @cond
  11:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  12:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER v4.1.28 Configures USIC channel to transmit & receive data using I2C protocol.
  13:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  14:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  15:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * All rights reserved.
  16:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  17:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * following conditions are met:
  19:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  20:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  21:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * disclaimer.
  22:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  23:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  24:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * following disclaimer in the documentation and/or other materials provided with the distribution.
  25:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  26:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  27:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * products derived from this software without specific prior written permission.
  28:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  29:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  37:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * with Infineon Technologies AG (dave@infineon.com).
  39:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  40:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  41:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Change History
  42:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * --------------
  43:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  44:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-02-16:
  45:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Initial version<br>
  46:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  47:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-06-10:
  48:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  49:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  50:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-08-31:
  51:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - DMA support APIs added
  52:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2015-10-20:
  53:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Code snippets updated
  54:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2016-08-18:
  55:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Documentation of slave address formatting improved.
  56:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2017-11-17:
  57:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added tx_irqn and rx_irqn to I2C_MASTER_CONFIG_t
  58:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 2017-12-20:
  59:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     - Added I2C_MASTER_FlushTxFifo(), I2C_MASTER_FlushRxFifo(), I2C_MASTER_DisableOutputs(), I2C
  60:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  61:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcond
  62:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
  63:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
  64:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  65:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #ifndef I2C_MASTER_H
  66:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #define I2C_MASTER_H
  67:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  68:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  69:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  70:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
  71:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * HEADER FILES
  72:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  73:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #include <xmc_gpio.h>
  74:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #include <xmc_i2c.h>
  75:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "i2c_master_conf.h"
  76:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  77:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if(UC_FAMILY == XMC4)
  78:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
  79:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #include "GLOBAL_DMA/global_dma.h"
  80:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
  81:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
  82:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  83:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #include <DAVE_Common.h>
  84:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  85:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  86:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef void(*i2c_master_fptr_cbhandler)(void);
  87:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  88:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
  89:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * MACROS
  90:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
  91:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  92:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  93:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  94:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #error "I2C_MASTER requires XMC Peripheral Library v2.0.0 or higher"
  95:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
  96:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
  97:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
  98:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * ENUMS
  99:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
 100:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 101:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_enumerations
 102:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 103:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 104:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 105:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Initialization status.
 106:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 107:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_STATUS
 108:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 109:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_SUCCESS = 0U,           /*!< I2C_MASTER SUCCESS */
 110:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_FAILURE = 1U,           /*!< I2C_MASTER FAILURE */
 111:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_BUSY = 2U,              /*!< I2C_MASTER BUSY */
 112:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_STATUS_UNSUPPORTED_MODE = 3U   /*!< I2C_MASTER UNSUPPORTED MODE */
 113:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_STATUS_t;
 114:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 115:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 116:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Direction
 117:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 118:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_DIRECTION
 119:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 120:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_DIRECTION_TRANSMIT = 0U,   /*!< Direction indicates transmit */
 121:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_DIRECTION_RECEIVE = 1U     /*!< Direction indicates receive */
 122:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_DIRECTION_t;
 123:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 124:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 125:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 126:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 127:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef enum I2C_MASTER_TRANSFER_MODE
 128:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 129:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 130:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 131:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP con
 132:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_TRANSFER_MODE_t;
 133:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 134:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @}
 135:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 136:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
 137:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** * DATA STRUCTURES
 138:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** ***************************************************************************************************
 139:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 140:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 141:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_datastructures
 142:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 143:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 144:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 145:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Structure for DMA configuration.
 146:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 147:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
 148:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_DMA_CONFIG
 149:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 150:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 151:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   GLOBAL_DMA_t * global_dma;                   /**< Global DMA handle */
 152:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 153:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_DMA_CONFIG_t;
 154:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 155:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 156:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Constant structure for holding the configuration parameters of I2C channel.
 157:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 158:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_CONFIG
 159:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 160:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    const XMC_I2C_CH_CONFIG_t *brg_config;             /*!< Basic I2C configuration from the GUI wit
 161:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 162:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel confi
 163:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                                    data transmission.*/
 164:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 165:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 166:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel confi
 167:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                                    data reception.*/
 168:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 169:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_config;         /*!< Function pointer to configure the MUX va
 170:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_enable_io;      /*!< Function pointer to enable SDA/SCL outpu
 171:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_disable_io;     /*!< Function pointer to disable SDA/SCL outp
 172:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 173:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler tx_cbhandler;            /*!< Function pointer to hold the callback fu
 174:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when the transmission is complete
 175:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler rx_cbhandler;            /*!< Function pointer to hold the callback fu
 176:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when the reception is complete*/
 177:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler nack_cbhandler;          /*!< Function pointer to hold the callback fu
 178:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when nack is received*/
 179:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler arbitration_cbhandler;   /*!< Function pointer to hold the callback fu
 180:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when arbitration lost is occured*
 181:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    i2c_master_fptr_cbhandler error_cbhandler;         /*!< Function pointer to hold the callback fu
 182:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            called when error is detected.*/
 183:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t transmit_mode;          /**< Mode used for transmitting data. Data ca
 184:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 185:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t receive_mode;           /**< Mode used for receiving data. Data can b
 186:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 187:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 188:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t txFIFO_size;               /*!< TxFIFO size configuration*/
 189:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t rxFIFO_size;               /*!< RxFIFO size configuration*/
 190:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 191:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    IRQn_Type tx_irqn;
 192:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    IRQn_Type rx_irqn; 
 193:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_CONFIG_t;
 194:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 195:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 196:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Structure to hold the dynamic variables for the I2C_MASTER communication.
 197:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 198:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER_RUNTIME
 199:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 200:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t * tx_data;                     /*!< Pointer to the transmit data buffer*/
 201:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t * rx_data;                     /*!< Pointer to the receive data buffer*/
 202:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t tx_data_count;                /*!< Number of bytes of data to be transmitted*/
 203:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t tx_data_index;       /*!< Index to the byte to be transmitted next in the tx_da
 204:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_data_count;                /*!< Number of bytes of data to be received*/
 205:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 206:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_dma_data_count;            /*!< Number of bytes of data to be received-DMA mode*/
 207:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t rx_dma_data_index;            /*!< Index of bytes of data to be received-DMA mode*/
 208:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 209:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t rx_data_index;       /*!< Indicates the number of bytes currently available in 
 210:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile uint32_t direction;           /*!< Indicates TRANSMIT/RECEIVE */
 211:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t send_stop;                    /*!< Indicates to stop the I2C */
 212:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint32_t send_nack;                    /*!< Indicates to send nack */
 213:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t tx_ack_sr;                         /*!< Service request number assigned to transmit inter
 214:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   uint8_t rx_sr;                         /*!< Service request number assigned to receive interrupts
 215:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool tx_busy;                 /*!< Status flag to indicate busy when a transmission is a
 216:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool rx_busy;                 /*!< Status flag to indicate busy when a reception is assi
 217:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   volatile bool bus_acquired;            /*!< flag to indicate whether bus is acquired or not */
 218:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_RUNTIME_t;
 219:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 220:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 221:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 222:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 223:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 224:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** typedef struct I2C_MASTER
 225:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 226:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_t *channel;                    /*!< USIC channel*/
 227:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   const I2C_MASTER_CONFIG_t * const config;  /*!< I2C configuration structure pointer*/
 228:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   I2C_MASTER_RUNTIME_t * const runtime;      /*!< Pointer to the structure holding all variables,
 229:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****    	                                               that can change at runtime*/
 230:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** } I2C_MASTER_t;
 231:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 232:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 233:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @}
 234:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 235:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 236:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #ifdef __cplusplus
 237:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** extern "C" {
 238:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 239:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 240:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 241:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 242:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @ingroup I2C_MASTER_apidoc
 243:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @{
 244:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 245:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 246:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**************************************************************************************************
 247:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * API PROTOTYPES
 248:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  **************************************************************************************************
 249:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 250:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Get I2C_MASTER APP version.
 251:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return \a DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 252:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 253:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description: </b><br>
 254:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The function can be used to check application software compatibility with a
 255:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * specific version of the APP.
 256:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 257:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 258:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
 259:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 260:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 261:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 262:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_APP_VERSION_t version;
 263:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_Init();
 264:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    version = I2C_MASTER_GetAppVersion();
 265:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(version.major != 4U)
 266:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 267:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 268:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 269:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 270:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 271:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 272:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 273:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 274:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void);
 275:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 276:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief This function initializes the I2C_MASTER APP based on user provided configuration.
 277:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 278:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
 279:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 280:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description: </b><br>
 281:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C configurations like channel selection,baud rate setting,
 282:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * FIFO configuration etc are done in this API.
 283:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Protocol specific interrupts can also be enabled using the I2C_MASTER_Init
 284:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * function.
 285:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 286:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 287:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 288:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 289:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
 290:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 291:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 292:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   // Initializing the modules and the multiplexer
 293:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_Init(); // I2C_MASTER_Init will be called from DAVE_Init()
 294:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1)
 295:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {}
 296:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 297:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 298:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 299:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 300:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 301:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 302:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle);
 303:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 304:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 305:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 306:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief  Receives the data from I2C slave device.
 307:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 308:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start Flag to indicate that the start condition need to be send.
 309:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address I2C slave device address.
 310:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data buffer to receive data.
 311:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  count The number of bytes to be received from slave.
 312:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 313:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_nack The flag to indicate that the NACK condition need to be send for the last byte
 314:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 315:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 316:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_Receive API can be used in Interrupt and Direct modes.\n
 317:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 318:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 319:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 320:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).\n
 321:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 322:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 323:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 324:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 325:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
 326:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 327:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_READ 10
 328:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
 329:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 330:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 331:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 332:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 333:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 334:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 335:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
 336:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 337:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 338:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t data = 0x55;
 339:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_data;
 340:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 341:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 342:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 343:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_STATUS_t init_status;  
 344:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   init_status = DAVE_Init();
 345:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 346:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 347:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
 348:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
 349:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 350:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 351:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 352:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 353:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 354:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 355:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Read data from IO EXPANDER
 356:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 357:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 358:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 359:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 360:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 361:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 362:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1)
 363:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   { }
 364:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  return 0;
 365:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 366:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 367:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 368:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 369:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 370:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 371:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                        uint8_t * data, const uint32_t count, bool send_stop, bool s
 372:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 373:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 374:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Transmits data to I2C slave device.
 375:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 376:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 377:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start The flag to indicate that the start condition need to be send.
 378:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address I2C slave device address.
 379:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data buffer containing the data to transmit.
 380:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size The number of bytes to be send to slave.
 381:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 382:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 383:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 384:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 385:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_Transmit API can be used in Interrupt and Direct modes.\n
 386:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 387:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 388:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 389:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write). \n
 390:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 391:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 
 392:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 393:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 394:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
 395:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 396:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 397:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 398:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 399:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 400:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 401:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
 402:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 403:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 404:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 405:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 406:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 407:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 408:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 409:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 410:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 411:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 412:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
 413:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
 414:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 415:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 416:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 417:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
 418:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 419:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 420:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 421:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 422:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 423:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 424:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 425:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 426:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 427:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 428:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 429:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 430:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                uint8_t *data, const uint32_t size, bool send_stop);
 431:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 432:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 433:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Get the I2C flag status.
 434:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 435:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 436:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 437:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *			 	      bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be used to selec
 438:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    multiple flags.
 439:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 440:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t Flag status.
 441:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 442:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 443:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 444:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 445:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 446:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
 447:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 448:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 449:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 450:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 451:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 452:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 453:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 454:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 455:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 456:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 457:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 458:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
 459:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 460:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 461:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 462:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 463:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 464:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 465:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 466:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 467:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 468:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 469:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 470:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype);
 471:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 472:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 473:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Clear the I2C flag status.
 474:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 475:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 476:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 477:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    The bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be 
 478:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                    multiple flags.
 479:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 480:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None <BR>
 481:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 482:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 483:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 484:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
 485:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 486:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 487:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 488:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 489:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 490:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 491:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 492:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 493:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 494:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 495:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 496:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 497:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
 498:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 499:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 500:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 501:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 502:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {}
 503:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 504:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 0;
 505:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 506:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 507:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 508:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 509:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype);
 510:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 511:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 512:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Aborts the ongoing data transmission.
 513:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 514:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 515:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 516:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 517:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If there is a transmission in progress, it will be stopped. Once the transmission is stopped, 
 518:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * user can start a new transmission without delay.
 519:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 520:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 521:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 522:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 523:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 524:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 525:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 526:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 527:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 528:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buf[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 529:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 530:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 531:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 532:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 533:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 534:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 535:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 536:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 537:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 538:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
 539:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 540:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 541:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 542:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
 543:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 544:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 545:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 546:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 547:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 548:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 549:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 550:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 551:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 552:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle);
 553:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 554:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 555:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** * @brief Stops the active data reception request.
 556:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 557:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 558:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 559:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 560:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a reception is in progress, it will be stopped. When a reception request
 561:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * is active, user will not be able to place a new receive request till the active
 562:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * reception is complete. This API can stop the progressing reception to make
 563:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * a new receive request.
 564:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 565:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 566:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 567:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 568:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 569:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 570:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 571:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 572:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 573:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 574:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t rx_buf[25];
 575:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t tx_buf[2];
 576:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   DAVE_STATUS_t init_status;
 577:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   init_status = DAVE_Init();
 578:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 579:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 580:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //send the address from which data to be transfered
 581:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     tx_buf[0] = 0;
 582:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 583:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 584:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 585:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 586:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_SendStop(&I2C_MASTER_0);
 587:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 588:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 589:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 590:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 591:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 592:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1U)
 593:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
 594:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
 595:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 596:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 1U;
 597:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 598:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 599:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 600:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 601:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 602:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle);
 603:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 604:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 605:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1U) || defined(DOXYGEN)
 606:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 607:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for transmitting data over I2C channel using DMA.
 608:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 609:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 610:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  block_size size of the block
 611:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  addr    address\n
 612:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 613:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 614:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 615:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 616:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 617:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 618:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 619:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * request is registered.
 620:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 621:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 622:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The data transmission is accomplished using DMA. User can configure a callback function in the A
 623:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. The function uses AP
 624:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * structure to store the status of transmission.
 625:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This function only registers a data transmission request, if there is no active transmission in 
 626:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Actual data transmission happens through DMA channel.
 627:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * A maximum of 4095 bytes can be transmitted in one API call. This limit is because of the DMA sin
 628:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Callback function is executed when all the data bytes are transmitted.
 629:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 630:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 631:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the completion of data transmission.
 632:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If data more than the block size of 4095 have to be transmitted, user will have to transmit them
 633:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * calls to this API.
 634:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>
 635:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * I2C_MASTER_StartTransmitDMA API can be used in DMA mode.
 636:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit should be configured as "DMA" mode in advanced settings tab. \n
 637:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 638:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 639:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 640:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 641:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 642:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 643:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 644:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 645:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 646:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 647:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 648:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 649:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 650:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 651:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 652:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 653:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 654:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 655:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 656:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 657:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 658:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 659:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 660:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 661:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
 662:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 663:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 664:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 665:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 666:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 667:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 668:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // trigger the DMA
 669:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitDMA(&I2C_MASTER_0, sizeof(Send_Data), Send_Data);
 670:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 671:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 672:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 673:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 674:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 675:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 676:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 677:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 678:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 679:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 680:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
 681:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 682:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 683:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 684:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
 685:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 686:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 687:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1U) || defined(DOXYGEN)
 688:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 689:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel using DMA.
 690:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 691:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 692:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 693:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param block_size  size of the block
 694:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  addr  address \n
 695:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 696:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 697:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 698:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 699:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 700:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 701:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 702:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 703:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured callback function will be executed.
 704:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 705:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When all the requested number of data bytes are received, the configured callback function will 
 706:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, the user has to poll for the value of the variable, \a
 707:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * handle->runtime->rx_busy to be false. The value is updated to \a false when all the requested nu
 708:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * are received.
 709:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * A maximum of 4095 bytes can be received in one API call. This limit is because of the DMA single
 710:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 711:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveDMA API can be used only in DMA mode
 712:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive should be configured as "DMA" mode in advanced settings tab \n
 713:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 714:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 715:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 716:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 717:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 718:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 719:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 720:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 721:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 722:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 723:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Pre condition:
 724:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Transmit mode and receive mode should be configured to "DMA" in advanced settings tab
 725:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 726:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t ReadData[256];
 727:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 728:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 729:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 730:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 731:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 732:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 733:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 734:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 735:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 736:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 737:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 738:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 739:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 740:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
 741:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 742:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 743:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 744:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 745:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 746:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 747:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
 748:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 749:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    {
 750:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	      // wait for ACK
 751:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *	    }
 752:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 753:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  
 754:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveDMA(&I2C_MASTER_0, 200, ReadData);
 755:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 756:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 757:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 758:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 759:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 760:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 761:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 762:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 763:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 764:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 765:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 766:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  @endcode
 767:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 768:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 769:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t block_siz
 770:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 771:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 772:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1U)
 773:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 774:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for transmitting data over I2C_MASTER channel.
 775:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 776:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 777:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start flag to indicate the start condition
 778:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address slave address
 779:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data    pointer to buffer
 780:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size    number of bytes
 781:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop flag to indicate the stop condition\n
 782:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 783:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 784:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 785:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 786:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 787:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 788:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 789:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * request is registered.
 790:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 791:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 792:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The data transmission is accomplished using transmit interrupt. User can configure a callback fu
 793:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. If transmit FIFO is 
 794:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the trigger limit is set to 1. So the transmit interrupt will be generated when all the data in 
 795:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * from FIFO. The function uses APP handle's runtime structure to store the data pointer, count, da
 796:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * status of transmission. This function only registers a data transmission request if there is no 
 797:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * in progress.
 798:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Actual data transmission happens in the transmit interrupt service routine. A trigger is generat
 799:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interrupt to start loading the data. If transmit FIFO is configured, the data is filled into the
 800:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this point of
 801:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * some more data to be transmitted, it is loaded to the FIFO again. When FIFO is not enabled, data
 802:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * byte at a time. On transmission of each byte an interrupt is generated and the next byte is tran
 803:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interrupt service routine. Callback function is executed when all the data bytes are transmitted
 804:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of t
 805:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * structure( \a handle->runtime->tx_busy ) to check for the completion of data transmission.<br>
 806:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartTransmitIRQ API can be used only in Interrupt mode.
 807:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit should be configured as "Interrupt" mode in advanced settings tab.\n
 808:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 809:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 810:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 811:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).
 812:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 813:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 814:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 815:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
 816:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 817:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 818:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 819:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 820:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 821:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 822:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 823:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 824:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 825:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 826:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 827:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
 828:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 829:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 830:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 831:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,64,true);
 832:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 833:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 834:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 835:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 836:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 837:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 838:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 839:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 840:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 841:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 842:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 843:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 844:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 845:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 846:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 847:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1U)
 848:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 849:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel.
 850:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 851:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 852:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 853:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_start flag to indicate the start condition
 854:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  address slave address
 855:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  data    pointer to buffer
 856:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  count    number of bytes
 857:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_stop flag to indicate the stop condition
 858:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  send_nack flag to indicate the nack condition\n
 859:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 860:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 861:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 862:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 863:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 864:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 865:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 866:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 867:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 868:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured callback function will be executed. Based on the UI configuration, either standard re
 869:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * receive FIFO is used for data reception. An interrupt is configured for reading received data fr
 870:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * function only registers a request to receive a number of data bytes from a USIC channel. If FIFO
 871:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * reception, the FIFO limit is dynamically configured to optimally utilize the CPU load.  When all
 872:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * of data bytes are received, the configured callback function will be executed. If a callback fun
 873:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * configured, the user has to poll for the value of the variable, \a handle->runtime->rx_busy to b
 874:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * is updated to \a false when all the requested number of data bytes are received.<br>
 875:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveIRQ API can be used only in Interrupt mode.
 876:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive should be configured as "Interrupt" mode in advanced settings tab.\n
 877:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 878:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 879:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 880:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).
 881:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 882:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 883:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 884:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
 885:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 886:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_buffer[64];
 887:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 888:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 889:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 890:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 891:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 892:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 893:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 894:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 895:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 896:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
 897:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 898:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 899:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 900:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,rx_buffer,64,true, true);
 901:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 902:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 903:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
 904:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
 905:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
 906:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 907:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 908:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
 909:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 910:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 911:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 912:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****                                                uint8_t * data, const uint32_t count, bool send_stop
 913:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** #endif
 914:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 915:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 916:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 917:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Gets the transmit FIFO event flags.
 918:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 919:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 920:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 921:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
 922:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                      their bit positions.\n
 923:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
 924:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 925:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 926:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer interrupt flag
 927:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * buffer error flag before providing the value.
 928:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * User has to mask the bits of interest before checking the status.
 929:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: Enable transmit fifo in Advanced settings tab. <br>
 930:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 931:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 932:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 933:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 934:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 935:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 936:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
 937:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 938:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 939:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 940:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
 941:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 942:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 943:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 944:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
 945:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
 946:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 947:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 948:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
 949:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
 950:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
 951:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
 952:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
 953:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 954:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
 955:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
 956:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 957:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
 958:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
 959:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
 960:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
 961:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
 962:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
 963:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
 964:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 965:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
 966:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetTXFIFOStatus(const I2C_MASTER_t* const handle)
 967:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
 968:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetTXFIFOStatus: invalid handle", (handle != NULL))
 969:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
 970:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
 971:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
 972:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
 973:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Configures trigger limit for the transmit FIFO.
 974:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 975:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 976:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size   FIFO size
 977:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
 978:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               \bRange: 0 to transmit FIFO size.\n
 979:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
 980:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
 981:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 982:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
 983:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 984:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
 985:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
 986:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
 987:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * below the trigger limit.
 988:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 989:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
 990:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
 991:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 992:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 993:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
 994:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 995:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 996:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
 997:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
 998:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
 999:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1000:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1001:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1002:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1003:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit, draining level as 10
1004:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1005:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // Execution will happen two times in the interrupt handler as the limit is set to 10
1006:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, Send_Data, 16, true);
1007:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1008:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1009:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1010:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1011:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1012:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1013:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1014:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1015:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1016:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1017:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1018:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1019:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1020:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1021:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetTXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1022:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                              const uint32_t limit)
1023:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1024:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetTXFIFOTriggerLimit: invalid handle", (handle != NULL))
1025:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1026:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1027:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1028:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Configures trigger limit for the receive FIFO.
1029:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1030:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1031:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  size   FIFO size
1032:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1033:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               \bRange: 0 to receive FIFO size.\n
1034:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1035:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1036:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1037:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1038:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1039:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1040:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1041:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1042:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * above the trigger limit.
1043:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1044:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1045:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1046:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1047:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1048:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1049:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1050:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1051:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t Rx_Data[256];
1052:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1053:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1054:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1055:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1056:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1057:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1058:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1059:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure receive fifo trigger limit to filling level as 10
1060:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1061:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // Execution will happen two times in the receive interrupt handler as the limit is set to 
1062:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, Rx_Data, 16, true, true);
1063:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
1064:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1065:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1066:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1067:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1068:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1069:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1070:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1071:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1072:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1073:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1074:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1075:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1076:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1077:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1078:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                              const uint32_t limit)
1079:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1080:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
1081:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1082:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1083:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1084:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1085:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Checks if the transmit FIFO is full.
1086:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1087:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1088:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1089:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool Status of transmit FIFO filling level.
1090:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1091:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1092:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1093:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while filling
1094:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * data to the transmit FIFO.
1095:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>NOTE: </b><br>: Transmit should be "Direct" mode in advanced settings tab.<br>
1096:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1097:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1098:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1099:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1100:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1101:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1102:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1103:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1104:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t send_data[] = "Infineon Technologies";
1105:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1106:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1107:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1108:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();           // Initialization of DAVE APPs
1109:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1110:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1111:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1112:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1113:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1114:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1115:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1116:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1117:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1118:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &send_data[0], 10, false);
1119:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  //Wait when Tx FIFO is full
1120:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  while(!I2C_MASTER_IsTXFIFOFull(&I2C_MASTER_0))
1121:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1122:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_Transmit(&I2C_MASTER_0, false, SLAVE_ADDRESS, &send_data[0], 10, false);
1123:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1124:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  while(1U)
1125:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1126:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1127:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * }
1128:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1129:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1130:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
1131:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1132:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
1133:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1134:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1135:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1136:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1137:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Checks if the receive FIFO is empty.
1138:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1139:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1140:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1141:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool Status of receive FIFO filling level.
1142:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1143:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *                       \afalse- if receive FIFO still has data.<br>
1144:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1145:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while reading data from the receive FIFO
1146:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1147:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1148:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1149:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1150:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1151:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1152:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1153:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1154:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1155:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1156:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1157:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1158:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1159:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1160:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1161:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1162:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1163:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1164:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1165:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1166:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1167:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1168:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1169:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1170:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1171:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1172:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1173:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1174:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1175:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1176:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1177:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1178:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1179:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1180:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1181:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1182:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1183:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1184:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1185:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1186:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1187:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1188:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1189:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1190:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   while(1U)
1191:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
1192:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1193:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1194:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1195:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1196:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
1197:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1198:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
1199:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1200:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1201:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1202:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1203:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Gets the status of event flags related to receive FIFO.
1204:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1205:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1206:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1207:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1208:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer event and 
1209:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * error event in their bit positions in TRBSR register.\n
1210:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status c
1211:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * comparison using \a OR operation.
1212:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1213:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1214:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * It provides the status of standard receive buffer event, alternative receive buffer event and re
1215:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * event.
1216:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function masks the TRBSR register with the bitmask of SRBI, ARBI and RBERI flags. User has to ma
1217:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * interest before checking the status.
1218:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1219:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1220:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1221:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1222:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1223:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   #define SLAVE_ADDRESS 0xA0
1224:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   uint8_t mem_address[2];
1225:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   int main(void)
1226:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   {
1227:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     DAVE_STATUS_t init_status;
1228:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1229:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     init_status = DAVE_Init();
1230:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     if(init_status == DAVE_STATUS_SUCCESS)
1231:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1232:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       mem_address[0] = 0x00;//memory which need to be read from slave
1233:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       //Configure receive fifo trigger limit as 10
1234:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1235:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1236:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1237:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1238:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1239:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0
1240:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1241:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1242:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1243:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     else
1244:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1245:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1246:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1247:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1248:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1249:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1250:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      return 1U;
1251:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1252:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1253:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1254:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1255:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetRXFIFOStatus(const I2C_MASTER_t* const handle)
1256:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1257:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetRXFIFOStatus: invalid handle", (handle != NULL))
1258:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1259:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1260:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1261:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1262:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to
1263:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * transmit FIFO.
1264:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1265:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1266:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1267:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register to be cleared.\n
1268:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be combined 
1269:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \a OR operation.
1270:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1271:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return    None
1272:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1273:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1274:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register. But the function does 
1275:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * value with the bit positions restricted to transmit FIFO status bits. User should ensure that th
1276:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * appropriately masked.
1277:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1278:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1279:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1280:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1281:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1282:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1283:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1284:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1285:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1286:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1287:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1288:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1289:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1290:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1291:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00; //memory which need to be read from slave
1292:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
1293:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1294:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1295:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1296:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
1297:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1298:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
1299:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1300:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
1301:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1302:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1303:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1304:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1305:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1306:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1307:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1308:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1309:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1310:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1311:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1312:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1313:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1314:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearTXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1315:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1316:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearTXFIFOStatus: invalid handle", (handle != NULL))
1317:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1318:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1319:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1320:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1321:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to receive FIFO. It should be used 
1322:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * of standard receive buffer interrupt, alternative receive buffer interrupt and receive buffer er
1323:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1324:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1325:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1326:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register to be cleared.\n
1327:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1328:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *             Multiple events can be input by using \a OR operation.
1329:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1330:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return    None
1331:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1332:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1333:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1334:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The function does not mask the input value to clear only receive buffer
1335:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * events. So user should appropriately mask the input value before calling
1336:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * the function.
1337:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1338:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1339:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1340:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1341:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1342:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1343:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1344:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1345:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1346:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1347:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1348:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1349:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1350:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1351:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
1352:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Configure receive fifo trigger limit as 10
1353:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1354:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1355:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1356:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1357:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1358:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0)
1359:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1360:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1361:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1362:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1363:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1364:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1365:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1366:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1367:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1368:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1369:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1370:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1371:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1372:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1373:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1374:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearRXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1375:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1376:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearRXFIFOStatus: invalid handle", (handle != NULL))
1377:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1378:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1379:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1380:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1381:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Provides the received data from receive buffer.
1382:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1383:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1384:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return uint8_t: Data read from RBUF.\n
1385:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1386:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1387:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * This can be used in receive mode "Direct" to read the received data.
1388:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1389:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Otherwise it reads the data from OUTR register.
1390:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1391:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1392:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1393:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1394:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1395:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1396:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1397:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1398:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[10];
1399:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0,loc_index = 0;
1400:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1401:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1402:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1403:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1404:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1405:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1406:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1407:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1408:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1409:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1410:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1411:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1412:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1413:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1414:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1415:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1416:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1417:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1418:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1419:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1420:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        // wait for ACK
1421:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1422:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1423:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1424:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1425:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1426:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         index++;
1427:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1428:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1429:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1430:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1431:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1432:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1433:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1434:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1435:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1436:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1437:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1438:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1439:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1440:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1441:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1442:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1443:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1444:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1445:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1446:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
1447:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
1448:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1449:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
1450:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
1451:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1452:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1453:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1454:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Transmits single byte using I2C protocol.
1455:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1456:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1457:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  byte data byte to transmit. \n
1458:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1459:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 
1460:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1461:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1462:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1463:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1464:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1465:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1466:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1467:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1468:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1469:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1470:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1471:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1472:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1473:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1474:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1475:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1476:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1477:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1478:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1479:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1480:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1481:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1482:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1483:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1484:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1485:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // wait for ACK
1486:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1487:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1488:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1489:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1490:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1491:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // wait for ACK
1492:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1493:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1494:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1495:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1496:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1497:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1498:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1499:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1500:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
1501:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1502:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
1503:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterTransmit(handle->channel, byte);
1504:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1505:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1506:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Enables the selected protocol events for interrupt generation.
1507:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1508:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1509:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  event  Protocol events to be enabled for interrupt generation. \n
1510:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1511:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         combined using the bitwise OR operation.\n
1512:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None\n
1513:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1514:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1515:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1516:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1517:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1518:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * may not yield expected result.
1519:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1520:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1521:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1522:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1523:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1524:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1525:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1526:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1527:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1528:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1529:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1530:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1531:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1532:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1533:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1534:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1535:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1536:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1537:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1538:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1539:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1540:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_EnableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1541:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1542:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1543:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1544:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1545:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1546:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1547:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
1548:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1549:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
1550:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_EnableEvent(handle->channel, event);
1551:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1552:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1553:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Disables selected events from generating interrupt.
1554:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1555:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1556:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param  event  Events to be disabled from generating interrupt. \n
1557:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1558:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *         combined using the bitwise OR operation.\n
1559:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1560:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1561:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1562:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1563:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1564:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1565:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1566:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1567:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1568:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1569:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1570:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1571:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t status;
1572:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1573:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    status = DAVE_Init();
1574:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1575:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1576:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1577:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1578:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1579:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1580:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1581:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1582:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1583:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1584:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    I2C_MASTER_DisableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1585:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1U)
1586:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1587:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1588:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1589:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1590:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1591:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1592:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
1593:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1594:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
1595:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_DisableEvent(handle->channel, event);
1596:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1597:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1598:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1599:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Receives the ACK from slave
1600:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1601:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1602:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1603:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1604:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * After transmitting a byte, master receives the ack from slave.<br>
1605:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1606:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1607:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1608:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1609:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1610:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1611:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1612:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1613:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1614:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1615:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1616:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1617:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1618:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1619:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1620:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1621:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1622:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1623:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1624:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1625:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1626:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1627:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1628:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1629:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1630:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1631:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1632:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1633:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1634:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1635:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1636:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1637:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1638:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1639:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1640:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1641:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1642:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1643:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1644:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1645:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1646:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1647:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1648:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1649:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1650:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1651:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1652:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1653:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1654:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1655:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1656:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1657:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1658:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1659:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1660:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1661:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1662:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
1663:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1664:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
1665:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterReceiveAck(handle->channel);
1666:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1667:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1668:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Receives the NACK from slave
1669:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1670:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1671:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1672:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1673:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * After transmitting a byte, master receives the nack from slave.<br>
1674:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1675:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1676:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1677:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1678:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1679:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1680:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1681:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1682:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1683:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1684:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint32_t index = 0, loc_index = 0;
1685:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rec_data[64];
1686:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1687:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1688:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1689:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1690:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1691:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1692:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1693:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1694:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1695:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // write to address 0
1696:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1697:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1698:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1699:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1700:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1701:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1702:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1703:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1704:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1705:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1706:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1707:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1708:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(index < 16)
1709:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1710:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1711:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        index++;
1712:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1713:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      // only for the last byte
1714:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ReceiveNACK(&I2C_MASTER_0);
1715:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Wait when Rx FIFO is empty
1716:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1717:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1718:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1719:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1720:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1721:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1722:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1723:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1724:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1725:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1726:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1727:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1728:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1729:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1730:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1731:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1732:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
1733:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1734:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
1735:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterReceiveNack(handle->channel);
1736:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1737:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1738:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends stop command to slave
1739:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1740:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1741:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1742:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1743:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * At the end of transmission, sends a stop command to slave <br>
1744:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.<br>
1745:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1746:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1747:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1748:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1749:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1750:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1751:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1752:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1753:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1754:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1755:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1756:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1757:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1758:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1759:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1760:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       // wait for ACK
1761:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1762:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1763:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //send the address to which data to be transfered
1764:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1765:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1766:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1767:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1768:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1769:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1770:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
1771:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1772:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1773:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1774:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1775:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1776:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1777:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1778:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1779:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1780:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1781:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1782:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1783:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
1784:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1785:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
1786:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
1787:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterStop(handle->channel);
1788:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1789:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1790:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends start command to slave
1791:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1792:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param address slave address
1793:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param cmd     command
1794:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1795:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1796:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1797:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Before start of transmission, sends a start command to slave. \n
1798:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1799:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1800:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1801:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1802:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1803:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1804:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1805:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1806:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
1807:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1808:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1809:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1810:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1811:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1812:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1813:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1814:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1815:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1816:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1817:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1818:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1819:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1820:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1821:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //send the address to which data to be transfered
1822:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1823:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1824:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1825:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1826:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1827:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1828:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1829:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1830:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       XMC_DEBUG("main: Application initialization failed");
1831:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       while(1U)
1832:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       {
1833:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *       }
1834:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1835:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 1U;
1836:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   }
1837:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1838:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1839:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
1840:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                  const XMC_I2C_CH_CMD_t cmd)
1841:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1842:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
1843:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
1844:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
1845:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1846:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1847:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends repeated start command to slave
1848:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1849:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param address slave address
1850:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param cmd     command
1851:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return None
1852:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1853:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * \par<b>Description:</b><br>
1854:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Before start of transmission, sends a repeatedstart command to slave if bus acquired is true.\n
1855:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1856:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1857:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1858:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1859:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1860:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * Example Usage:
1861:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1862:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1863:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1864:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1865:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1866:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1867:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1868:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    uint8_t rx_buf[256];
1869:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1870:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1871:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1872:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1873:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_MasterStart(I2C_MASTER_0.channel, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1874:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1875:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1876:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1877:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1878:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1879:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //send the address to which data to be transfered
1880:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1881:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1882:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1883:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1884:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1885:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1886:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1887:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1888:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     {
1889:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
1890:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1891:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1892:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * 	   memset(rx_buf,0,16);
1893:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, false, SLAVE_ADDRESS, rx_buf, 16, true, true);
1894:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1895:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    else
1896:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1897:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1898:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(1U)
1899:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      {
1900:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      }
1901:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1902:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *   return 1U;
1903:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1904:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode
1905:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** */
1906:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t addre
1907:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 		                                          const XMC_I2C_CH_CMD_t cmd)
1908:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
1909:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
1910:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEI
1911:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
1912:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
1913:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1914:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1915:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends the txbusy flag
1916:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1917:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool : status of txbusy flag
1918:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  
1919:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1920:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1921:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
1922:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1923:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
1924:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
1925:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
1926:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
1927:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
1928:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
1929:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1930:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
1931:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1932:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1933:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1934:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1935:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1936:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1937:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1938:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1939:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
1940:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     //Write data to IO EXPANDER
1941:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1942:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1943:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1944:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
1945:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1946:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    }
1947:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    while(1)
1948:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    { }
1949:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1950:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
1951:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
1952:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1953:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
1954:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1955:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
1956:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
1957:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
  27              	 .loc 1 1957 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1958:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
1959:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   return handle->runtime->tx_busy;
  43              	 .loc 1 1959 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 9B68     	 ldr r3,[r3,#8]
  46 000c 93F82630 	 ldrb r3,[r3,#38]
  47 0010 DBB2     	 uxtb r3,r3
1960:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
  48              	 .loc 1 1960 0
  49 0012 1846     	 mov r0,r3
  50 0014 0C37     	 adds r7,r7,#12
  51              	.LCFI3:
  52              	 .cfi_def_cfa_offset 4
  53 0016 BD46     	 mov sp,r7
  54              	.LCFI4:
  55              	 .cfi_def_cfa_register 13
  56              	 
  57 0018 5DF8047B 	 ldr r7,[sp],#4
  58              	.LCFI5:
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 001c 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE272:
  65 001e 00BF     	 .section .text.I2C_MASTER_IsRxBusy,"ax",%progbits
  66              	 .align 2
  67              	 .thumb
  68              	 .thumb_func
  70              	I2C_MASTER_IsRxBusy:
  71              	.LFB273:
1961:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1962:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** /**
1963:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @brief Sends the rxbusy flag
1964:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1965:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @return bool : status of rxbusy flag
1966:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @code
1967:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1968:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #include <DAVE.h>
1969:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1970:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_READ 10
1971:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
1972:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1973:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
1974:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_DIR    = 0xA << 3,
1975:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_STATE  = 0xB << 3,
1976:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_INTE   = 0xC << 3,
1977:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    IO_CTRL   = 0xE << 3
1978:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  } PCA9502_REGADDR_t;
1979:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1980:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t mem_address[2];
1981:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t data = 0x55;
1982:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  uint8_t rx_data;
1983:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1984:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  int main(void)
1985:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  {
1986:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    DAVE_STATUS_t init_status;
1987:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    init_status = DAVE_Init();
1988:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1989:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    {
1990:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
1991:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Write data to IO EXPANDER
1992:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1993:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1994:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
1995:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
1996:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1997:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
1998:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      //Read data from IO EXPANDER
1999:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
2000:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
2001:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2002:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
2003:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
2004:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     }
2005:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     while(1)
2006:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *     { }
2007:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** 
2008:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *    return 0;
2009:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *  }
2010:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2011:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  * @endcode<BR> </p>
2012:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  *
2013:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****  */
2014:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
2015:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** {
  72              	 .loc 1 2015 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 83B0     	 sub sp,sp,#12
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 16
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 7860     	 str r0,[r7,#4]
2016:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
2017:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h ****   return handle->runtime->rx_busy;
  88              	 .loc 1 2017 0
  89 0008 7B68     	 ldr r3,[r7,#4]
  90 000a 9B68     	 ldr r3,[r3,#8]
  91 000c 93F82730 	 ldrb r3,[r3,#39]
  92 0010 DBB2     	 uxtb r3,r3
2018:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/I2C_MASTER\i2c_master.h **** }
  93              	 .loc 1 2018 0
  94 0012 1846     	 mov r0,r3
  95 0014 0C37     	 adds r7,r7,#12
  96              	.LCFI9:
  97              	 .cfi_def_cfa_offset 4
  98 0016 BD46     	 mov sp,r7
  99              	.LCFI10:
 100              	 .cfi_def_cfa_register 13
 101              	 
 102 0018 5DF8047B 	 ldr r7,[sp],#4
 103              	.LCFI11:
 104              	 .cfi_restore 7
 105              	 .cfi_def_cfa_offset 0
 106 001c 7047     	 bx lr
 107              	 .cfi_endproc
 108              	.LFE273:
 110 001e 00BF     	 .section .bss.g_entry_count,"aw",%nobits
 111              	 .align 2
 114              	g_entry_count:
 115 0000 00000000 	 .space 4
 116              	 .section .bss.gp_pal_i2c_current_ctx,"aw",%nobits
 117              	 .align 2
 120              	gp_pal_i2c_current_ctx:
 121 0000 00000000 	 .space 4
 122              	 .section .text.pal_i2c_acquire,"ax",%progbits
 123              	 .align 2
 124              	 .thumb
 125              	 .thumb_func
 127              	pal_i2c_acquire:
 128              	.LFB387:
 129              	 .file 2 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700/pal_i2c.c"
   1:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** /**
   2:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * \copyright
   3:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * MIT License
   4:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
   5:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * Copyright (c) 2020 Infineon Technologies AG
   6:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
   7:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * Permission is hereby granted, free of charge, to any person obtaining a copy
   8:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * of this software and associated documentation files (the "Software"), to deal
   9:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * in the Software without restriction, including without limitation the rights
  10:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * copies of the Software, and to permit persons to whom the Software is
  12:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * furnished to do so, subject to the following conditions:
  13:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
  14:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * The above copyright notice and this permission notice shall be included in all
  15:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * copies or substantial portions of the Software.
  16:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
  17:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  23:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * SOFTWARE
  24:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
  25:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * \endcopyright
  26:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
  27:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * \author Infineon Technologies AG
  28:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
  29:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * \file pal_i2c.c
  30:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
  31:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * \brief   This file implements the platform abstraction layer(pal) APIs for I2C.
  32:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
  33:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * \ingroup  grPAL
  34:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** *
  35:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** * @{
  36:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** */
  37:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  38:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  39:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  40:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** #include <DAVE.h>
  41:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** #include "optiga/pal/pal_i2c.h"
  42:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  43:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //#define PAL_I2C_MASTER_MAX_BITRATE  (400U)
  44:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** /// @cond hidden
  45:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  46:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** _STATIC_H volatile uint32_t g_entry_count = 0;
  47:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** _STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;
  48:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  49:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //lint --e{715} suppress "This is implemented for overall completion of API"
  50:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** _STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
  51:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 130              	 .loc 2 51 0
 131              	 .cfi_startproc
 132              	 
 133              	 
 134              	 
 135 0000 80B4     	 push {r7}
 136              	.LCFI12:
 137              	 .cfi_def_cfa_offset 4
 138              	 .cfi_offset 7,-4
 139 0002 83B0     	 sub sp,sp,#12
 140              	.LCFI13:
 141              	 .cfi_def_cfa_offset 16
 142 0004 00AF     	 add r7,sp,#0
 143              	.LCFI14:
 144              	 .cfi_def_cfa_register 7
 145 0006 7860     	 str r0,[r7,#4]
  52:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     if (0 == g_entry_count)
 146              	 .loc 2 52 0
 147 0008 0A4B     	 ldr r3,.L8
 148 000a 1B68     	 ldr r3,[r3]
 149 000c 002B     	 cmp r3,#0
 150 000e 0AD1     	 bne .L6
  53:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
  54:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         g_entry_count++;
 151              	 .loc 2 54 0
 152 0010 084B     	 ldr r3,.L8
 153 0012 1B68     	 ldr r3,[r3]
 154 0014 0133     	 adds r3,r3,#1
 155 0016 074A     	 ldr r2,.L8
 156 0018 1360     	 str r3,[r2]
  55:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         if (1 == g_entry_count)
 157              	 .loc 2 55 0
 158 001a 064B     	 ldr r3,.L8
 159 001c 1B68     	 ldr r3,[r3]
 160 001e 012B     	 cmp r3,#1
 161 0020 01D1     	 bne .L6
  56:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         {
  57:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             return PAL_STATUS_SUCCESS;
 162              	 .loc 2 57 0
 163 0022 0023     	 movs r3,#0
 164 0024 00E0     	 b .L7
 165              	.L6:
  58:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         }
  59:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
  60:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     return PAL_STATUS_FAILURE;
 166              	 .loc 2 60 0
 167 0026 0123     	 movs r3,#1
 168              	.L7:
  61:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 169              	 .loc 2 61 0
 170 0028 1846     	 mov r0,r3
 171 002a 0C37     	 adds r7,r7,#12
 172              	.LCFI15:
 173              	 .cfi_def_cfa_offset 4
 174 002c BD46     	 mov sp,r7
 175              	.LCFI16:
 176              	 .cfi_def_cfa_register 13
 177              	 
 178 002e 5DF8047B 	 ldr r7,[sp],#4
 179              	.LCFI17:
 180              	 .cfi_restore 7
 181              	 .cfi_def_cfa_offset 0
 182 0032 7047     	 bx lr
 183              	.L9:
 184              	 .align 2
 185              	.L8:
 186 0034 00000000 	 .word g_entry_count
 187              	 .cfi_endproc
 188              	.LFE387:
 190              	 .section .text.pal_i2c_release,"ax",%progbits
 191              	 .align 2
 192              	 .thumb
 193              	 .thumb_func
 195              	pal_i2c_release:
 196              	.LFB388:
  62:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  63:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
  64:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** _STATIC_H void pal_i2c_release(const void * p_i2c_context)
  65:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 197              	 .loc 2 65 0
 198              	 .cfi_startproc
 199              	 
 200              	 
 201              	 
 202 0000 80B4     	 push {r7}
 203              	.LCFI18:
 204              	 .cfi_def_cfa_offset 4
 205              	 .cfi_offset 7,-4
 206 0002 83B0     	 sub sp,sp,#12
 207              	.LCFI19:
 208              	 .cfi_def_cfa_offset 16
 209 0004 00AF     	 add r7,sp,#0
 210              	.LCFI20:
 211              	 .cfi_def_cfa_register 7
 212 0006 7860     	 str r0,[r7,#4]
  66:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     g_entry_count = 0;
 213              	 .loc 2 66 0
 214 0008 034B     	 ldr r3,.L11
 215 000a 0022     	 movs r2,#0
 216 000c 1A60     	 str r2,[r3]
  67:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 217              	 .loc 2 67 0
 218 000e 0C37     	 adds r7,r7,#12
 219              	.LCFI21:
 220              	 .cfi_def_cfa_offset 4
 221 0010 BD46     	 mov sp,r7
 222              	.LCFI22:
 223              	 .cfi_def_cfa_register 13
 224              	 
 225 0012 5DF8047B 	 ldr r7,[sp],#4
 226              	.LCFI23:
 227              	 .cfi_restore 7
 228              	 .cfi_def_cfa_offset 0
 229 0016 7047     	 bx lr
 230              	.L12:
 231              	 .align 2
 232              	.L11:
 233 0018 00000000 	 .word g_entry_count
 234              	 .cfi_endproc
 235              	.LFE388:
 237              	 .section .text.invoke_upper_layer_callback,"ax",%progbits
 238              	 .align 2
 239              	 .global invoke_upper_layer_callback
 240              	 .thumb
 241              	 .thumb_func
 243              	invoke_upper_layer_callback:
 244              	.LFB389:
  68:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** /// @endcond
  69:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  70:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** void invoke_upper_layer_callback (const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
  71:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 245              	 .loc 2 71 0
 246              	 .cfi_startproc
 247              	 
 248              	 
 249 0000 80B5     	 push {r7,lr}
 250              	.LCFI24:
 251              	 .cfi_def_cfa_offset 8
 252              	 .cfi_offset 7,-8
 253              	 .cfi_offset 14,-4
 254 0002 84B0     	 sub sp,sp,#16
 255              	.LCFI25:
 256              	 .cfi_def_cfa_offset 24
 257 0004 00AF     	 add r7,sp,#0
 258              	.LCFI26:
 259              	 .cfi_def_cfa_register 7
 260 0006 7860     	 str r0,[r7,#4]
 261 0008 0B46     	 mov r3,r1
 262 000a 7B80     	 strh r3,[r7,#2]
  72:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     upper_layer_callback_t upper_layer_handler;
  73:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
  74:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;
 263              	 .loc 2 74 0
 264 000c 7B68     	 ldr r3,[r7,#4]
 265 000e DB68     	 ldr r3,[r3,#12]
 266 0010 FB60     	 str r3,[r7,#12]
  75:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  76:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 267              	 .loc 2 76 0
 268 0012 7B68     	 ldr r3,[r7,#4]
 269 0014 9968     	 ldr r1,[r3,#8]
 270 0016 7A88     	 ldrh r2,[r7,#2]
 271 0018 FB68     	 ldr r3,[r7,#12]
 272 001a 0846     	 mov r0,r1
 273 001c 1146     	 mov r1,r2
 274 001e 9847     	 blx r3
  77:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  78:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     //Release I2C Bus
  79:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 275              	 .loc 2 79 0
 276 0020 7B68     	 ldr r3,[r7,#4]
 277 0022 9B68     	 ldr r3,[r3,#8]
 278 0024 1846     	 mov r0,r3
 279 0026 FFF7FEFF 	 bl pal_i2c_release
  80:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 280              	 .loc 2 80 0
 281 002a 1037     	 adds r7,r7,#16
 282              	.LCFI27:
 283              	 .cfi_def_cfa_offset 8
 284 002c BD46     	 mov sp,r7
 285              	.LCFI28:
 286              	 .cfi_def_cfa_register 13
 287              	 
 288 002e 80BD     	 pop {r7,pc}
 289              	 .cfi_endproc
 290              	.LFE389:
 292              	 .section .text.i2c_master_end_of_transmit_callback,"ax",%progbits
 293              	 .align 2
 294              	 .global i2c_master_end_of_transmit_callback
 295              	 .thumb
 296              	 .thumb_func
 298              	i2c_master_end_of_transmit_callback:
 299              	.LFB390:
  81:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  82:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** /// @cond hidden
  83:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** void i2c_master_end_of_transmit_callback(void)
  84:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 300              	 .loc 2 84 0
 301              	 .cfi_startproc
 302              	 
 303              	 
 304 0000 80B5     	 push {r7,lr}
 305              	.LCFI29:
 306              	 .cfi_def_cfa_offset 8
 307              	 .cfi_offset 7,-8
 308              	 .cfi_offset 14,-4
 309 0002 00AF     	 add r7,sp,#0
 310              	.LCFI30:
 311              	 .cfi_def_cfa_register 7
  85:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 312              	 .loc 2 85 0
 313 0004 034B     	 ldr r3,.L15
 314 0006 1B68     	 ldr r3,[r3]
 315 0008 1846     	 mov r0,r3
 316 000a 0021     	 movs r1,#0
 317 000c FFF7FEFF 	 bl invoke_upper_layer_callback
  86:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 318              	 .loc 2 86 0
 319 0010 80BD     	 pop {r7,pc}
 320              	.L16:
 321 0012 00BF     	 .align 2
 322              	.L15:
 323 0014 00000000 	 .word gp_pal_i2c_current_ctx
 324              	 .cfi_endproc
 325              	.LFE390:
 327              	 .section .text.i2c_master_end_of_receive_callback,"ax",%progbits
 328              	 .align 2
 329              	 .global i2c_master_end_of_receive_callback
 330              	 .thumb
 331              	 .thumb_func
 333              	i2c_master_end_of_receive_callback:
 334              	.LFB391:
  87:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  88:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** void i2c_master_end_of_receive_callback(void)
  89:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 335              	 .loc 2 89 0
 336              	 .cfi_startproc
 337              	 
 338              	 
 339 0000 80B5     	 push {r7,lr}
 340              	.LCFI31:
 341              	 .cfi_def_cfa_offset 8
 342              	 .cfi_offset 7,-8
 343              	 .cfi_offset 14,-4
 344 0002 00AF     	 add r7,sp,#0
 345              	.LCFI32:
 346              	 .cfi_def_cfa_register 7
  90:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 347              	 .loc 2 90 0
 348 0004 034B     	 ldr r3,.L18
 349 0006 1B68     	 ldr r3,[r3]
 350 0008 1846     	 mov r0,r3
 351 000a 0021     	 movs r1,#0
 352 000c FFF7FEFF 	 bl invoke_upper_layer_callback
  91:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 353              	 .loc 2 91 0
 354 0010 80BD     	 pop {r7,pc}
 355              	.L19:
 356 0012 00BF     	 .align 2
 357              	.L18:
 358 0014 00000000 	 .word gp_pal_i2c_current_ctx
 359              	 .cfi_endproc
 360              	.LFE391:
 362              	 .section .text.i2c_master_error_detected_callback,"ax",%progbits
 363              	 .align 2
 364              	 .global i2c_master_error_detected_callback
 365              	 .thumb
 366              	 .thumb_func
 368              	i2c_master_error_detected_callback:
 369              	.LFB392:
  92:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  93:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** void i2c_master_error_detected_callback(void)
  94:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 370              	 .loc 2 94 0
 371              	 .cfi_startproc
 372              	 
 373              	 
 374 0000 80B5     	 push {r7,lr}
 375              	.LCFI33:
 376              	 .cfi_def_cfa_offset 8
 377              	 .cfi_offset 7,-8
 378              	 .cfi_offset 14,-4
 379 0002 82B0     	 sub sp,sp,#8
 380              	.LCFI34:
 381              	 .cfi_def_cfa_offset 16
 382 0004 00AF     	 add r7,sp,#0
 383              	.LCFI35:
 384              	 .cfi_def_cfa_register 7
  95:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     I2C_MASTER_t * p_i2c_master;
  96:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
  97:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 385              	 .loc 2 97 0
 386 0006 164B     	 ldr r3,.L25
 387 0008 1B68     	 ldr r3,[r3]
 388 000a 1B68     	 ldr r3,[r3]
 389 000c 7B60     	 str r3,[r7,#4]
  98:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 390              	 .loc 2 98 0
 391 000e 7868     	 ldr r0,[r7,#4]
 392 0010 FFF7FEFF 	 bl I2C_MASTER_IsTxBusy
 393 0014 0346     	 mov r3,r0
 394 0016 002B     	 cmp r3,#0
 395 0018 09D0     	 beq .L21
  99:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 100:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         //lint --e{534} suppress "Error handling is not required so return value is not checked"
 101:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         I2C_MASTER_AbortTransmit(p_i2c_master);
 396              	 .loc 2 101 0
 397 001a 7868     	 ldr r0,[r7,#4]
 398 001c FFF7FEFF 	 bl I2C_MASTER_AbortTransmit
 102:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 399              	 .loc 2 102 0
 400 0020 00BF     	 nop
 401              	.L22:
 402              	 .loc 2 102 0 is_stmt 0 discriminator 1
 403 0022 7868     	 ldr r0,[r7,#4]
 404 0024 FFF7FEFF 	 bl I2C_MASTER_IsTxBusy
 405 0028 0346     	 mov r3,r0
 406 002a 002B     	 cmp r3,#0
 407 002c F9D1     	 bne .L22
 408              	.L21:
 103:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 104:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 105:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 409              	 .loc 2 105 0 is_stmt 1
 410 002e 7868     	 ldr r0,[r7,#4]
 411 0030 FFF7FEFF 	 bl I2C_MASTER_IsRxBusy
 412 0034 0346     	 mov r3,r0
 413 0036 002B     	 cmp r3,#0
 414 0038 09D0     	 beq .L23
 106:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 107:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         //lint --e{534} suppress "Error handling is not required so return value is not checked"
 108:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         I2C_MASTER_AbortReceive(p_i2c_master);
 415              	 .loc 2 108 0
 416 003a 7868     	 ldr r0,[r7,#4]
 417 003c FFF7FEFF 	 bl I2C_MASTER_AbortReceive
 109:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 418              	 .loc 2 109 0
 419 0040 00BF     	 nop
 420              	.L24:
 421              	 .loc 2 109 0 is_stmt 0 discriminator 1
 422 0042 7868     	 ldr r0,[r7,#4]
 423 0044 FFF7FEFF 	 bl I2C_MASTER_IsRxBusy
 424 0048 0346     	 mov r3,r0
 425 004a 002B     	 cmp r3,#0
 426 004c F9D1     	 bne .L24
 427              	.L23:
 110:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 111:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 112:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 428              	 .loc 2 112 0 is_stmt 1
 429 004e 044B     	 ldr r3,.L25
 430 0050 1B68     	 ldr r3,[r3]
 431 0052 1846     	 mov r0,r3
 432 0054 0121     	 movs r1,#1
 433 0056 FFF7FEFF 	 bl invoke_upper_layer_callback
 113:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 434              	 .loc 2 113 0
 435 005a 0837     	 adds r7,r7,#8
 436              	.LCFI36:
 437              	 .cfi_def_cfa_offset 8
 438 005c BD46     	 mov sp,r7
 439              	.LCFI37:
 440              	 .cfi_def_cfa_register 13
 441              	 
 442 005e 80BD     	 pop {r7,pc}
 443              	.L26:
 444              	 .align 2
 445              	.L25:
 446 0060 00000000 	 .word gp_pal_i2c_current_ctx
 447              	 .cfi_endproc
 448              	.LFE392:
 450              	 .section .text.i2c_master_nack_received_callback,"ax",%progbits
 451              	 .align 2
 452              	 .global i2c_master_nack_received_callback
 453              	 .thumb
 454              	 .thumb_func
 456              	i2c_master_nack_received_callback:
 457              	.LFB393:
 114:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 115:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** void i2c_master_nack_received_callback(void)
 116:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 458              	 .loc 2 116 0
 459              	 .cfi_startproc
 460              	 
 461              	 
 462 0000 80B5     	 push {r7,lr}
 463              	.LCFI38:
 464              	 .cfi_def_cfa_offset 8
 465              	 .cfi_offset 7,-8
 466              	 .cfi_offset 14,-4
 467 0002 00AF     	 add r7,sp,#0
 468              	.LCFI39:
 469              	 .cfi_def_cfa_register 7
 117:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     i2c_master_error_detected_callback();
 470              	 .loc 2 117 0
 471 0004 FFF7FEFF 	 bl i2c_master_error_detected_callback
 118:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 472              	 .loc 2 118 0
 473 0008 80BD     	 pop {r7,pc}
 474              	 .cfi_endproc
 475              	.LFE393:
 477 000a 00BF     	 .section .text.i2c_master_arbitration_lost_callback,"ax",%progbits
 478              	 .align 2
 479              	 .global i2c_master_arbitration_lost_callback
 480              	 .thumb
 481              	 .thumb_func
 483              	i2c_master_arbitration_lost_callback:
 484              	.LFB394:
 119:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 120:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** void i2c_master_arbitration_lost_callback(void)
 121:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 485              	 .loc 2 121 0
 486              	 .cfi_startproc
 487              	 
 488              	 
 489 0000 80B5     	 push {r7,lr}
 490              	.LCFI40:
 491              	 .cfi_def_cfa_offset 8
 492              	 .cfi_offset 7,-8
 493              	 .cfi_offset 14,-4
 494 0002 00AF     	 add r7,sp,#0
 495              	.LCFI41:
 496              	 .cfi_def_cfa_register 7
 122:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     i2c_master_error_detected_callback();
 497              	 .loc 2 122 0
 498 0004 FFF7FEFF 	 bl i2c_master_error_detected_callback
 123:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 499              	 .loc 2 123 0
 500 0008 80BD     	 pop {r7,pc}
 501              	 .cfi_endproc
 502              	.LFE394:
 504 000a 00BF     	 .section .text.pal_i2c_init,"ax",%progbits
 505              	 .align 2
 506              	 .global pal_i2c_init
 507              	 .thumb
 508              	 .thumb_func
 510              	pal_i2c_init:
 511              	.LFB395:
 124:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** /// @endcond
 125:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 126:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
 127:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 512              	 .loc 2 127 0
 513              	 .cfi_startproc
 514              	 
 515              	 
 516              	 
 517 0000 80B4     	 push {r7}
 518              	.LCFI42:
 519              	 .cfi_def_cfa_offset 4
 520              	 .cfi_offset 7,-4
 521 0002 83B0     	 sub sp,sp,#12
 522              	.LCFI43:
 523              	 .cfi_def_cfa_offset 16
 524 0004 00AF     	 add r7,sp,#0
 525              	.LCFI44:
 526              	 .cfi_def_cfa_register 7
 527 0006 7860     	 str r0,[r7,#4]
 128:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     return PAL_STATUS_SUCCESS;
 528              	 .loc 2 128 0
 529 0008 0023     	 movs r3,#0
 129:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 530              	 .loc 2 129 0
 531 000a 1846     	 mov r0,r3
 532 000c 0C37     	 adds r7,r7,#12
 533              	.LCFI45:
 534              	 .cfi_def_cfa_offset 4
 535 000e BD46     	 mov sp,r7
 536              	.LCFI46:
 537              	 .cfi_def_cfa_register 13
 538              	 
 539 0010 5DF8047B 	 ldr r7,[sp],#4
 540              	.LCFI47:
 541              	 .cfi_restore 7
 542              	 .cfi_def_cfa_offset 0
 543 0014 7047     	 bx lr
 544              	 .cfi_endproc
 545              	.LFE395:
 547 0016 00BF     	 .section .text.pal_i2c_deinit,"ax",%progbits
 548              	 .align 2
 549              	 .global pal_i2c_deinit
 550              	 .thumb
 551              	 .thumb_func
 553              	pal_i2c_deinit:
 554              	.LFB396:
 130:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 131:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
 132:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 555              	 .loc 2 132 0
 556              	 .cfi_startproc
 557              	 
 558              	 
 559              	 
 560 0000 80B4     	 push {r7}
 561              	.LCFI48:
 562              	 .cfi_def_cfa_offset 4
 563              	 .cfi_offset 7,-4
 564 0002 83B0     	 sub sp,sp,#12
 565              	.LCFI49:
 566              	 .cfi_def_cfa_offset 16
 567 0004 00AF     	 add r7,sp,#0
 568              	.LCFI50:
 569              	 .cfi_def_cfa_register 7
 570 0006 7860     	 str r0,[r7,#4]
 133:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     return PAL_STATUS_SUCCESS;
 571              	 .loc 2 133 0
 572 0008 0023     	 movs r3,#0
 134:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 573              	 .loc 2 134 0
 574 000a 1846     	 mov r0,r3
 575 000c 0C37     	 adds r7,r7,#12
 576              	.LCFI51:
 577              	 .cfi_def_cfa_offset 4
 578 000e BD46     	 mov sp,r7
 579              	.LCFI52:
 580              	 .cfi_def_cfa_register 13
 581              	 
 582 0010 5DF8047B 	 ldr r7,[sp],#4
 583              	.LCFI53:
 584              	 .cfi_restore 7
 585              	 .cfi_def_cfa_offset 0
 586 0014 7047     	 bx lr
 587              	 .cfi_endproc
 588              	.LFE396:
 590 0016 00BF     	 .section .text.pal_i2c_write,"ax",%progbits
 591              	 .align 2
 592              	 .global pal_i2c_write
 593              	 .thumb
 594              	 .thumb_func
 596              	pal_i2c_write:
 597              	.LFB397:
 135:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 136:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
 137:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 598              	 .loc 2 137 0
 599              	 .cfi_startproc
 600              	 
 601              	 
 602 0000 90B5     	 push {r4,r7,lr}
 603              	.LCFI54:
 604              	 .cfi_def_cfa_offset 12
 605              	 .cfi_offset 4,-12
 606              	 .cfi_offset 7,-8
 607              	 .cfi_offset 14,-4
 608 0002 89B0     	 sub sp,sp,#36
 609              	.LCFI55:
 610              	 .cfi_def_cfa_offset 48
 611 0004 02AF     	 add r7,sp,#8
 612              	.LCFI56:
 613              	 .cfi_def_cfa 7,40
 614 0006 F860     	 str r0,[r7,#12]
 615 0008 B960     	 str r1,[r7,#8]
 616 000a 1346     	 mov r3,r2
 617 000c FB80     	 strh r3,[r7,#6]
 138:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     pal_status_t status = PAL_STATUS_FAILURE;
 618              	 .loc 2 138 0
 619 000e 0123     	 movs r3,#1
 620 0010 FB82     	 strh r3,[r7,#22]
 139:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 140:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     //Acquire the I2C bus before read/write
 141:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 621              	 .loc 2 141 0
 622 0012 F868     	 ldr r0,[r7,#12]
 623 0014 FFF7FEFF 	 bl pal_i2c_acquire
 624 0018 0346     	 mov r3,r0
 625 001a 002B     	 cmp r3,#0
 626 001c 24D1     	 bne .L34
 142:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 143:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         gp_pal_i2c_current_ctx = p_i2c_context;
 627              	 .loc 2 143 0
 628 001e 1A4A     	 ldr r2,.L39
 629 0020 FB68     	 ldr r3,[r7,#12]
 630 0022 1360     	 str r3,[r2]
 144:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         //Invoke the low level i2c master driver API to write to the bus
 145:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
 631              	 .loc 2 145 0
 632 0024 FB68     	 ldr r3,[r7,#12]
 633 0026 1A68     	 ldr r2,[r3]
 146:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                              (bool)TRUE,
 147:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                              (p_i2c_context->slave_address << 1),
 634              	 .loc 2 147 0
 635 0028 FB68     	 ldr r3,[r7,#12]
 636 002a 1B79     	 ldrb r3,[r3,#4]
 637 002c 5B00     	 lsls r3,r3,#1
 145:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                              (bool)TRUE,
 638              	 .loc 2 145 0
 639 002e 1C46     	 mov r4,r3
 640 0030 FB88     	 ldrh r3,[r7,#6]
 641 0032 0093     	 str r3,[sp]
 642 0034 0123     	 movs r3,#1
 643 0036 0193     	 str r3,[sp,#4]
 644 0038 1046     	 mov r0,r2
 645 003a 0121     	 movs r1,#1
 646 003c 2246     	 mov r2,r4
 647 003e BB68     	 ldr r3,[r7,#8]
 648 0040 FFF7FEFF 	 bl I2C_MASTER_Transmit
 649 0044 0346     	 mov r3,r0
 650 0046 002B     	 cmp r3,#0
 651 0048 0BD0     	 beq .L35
 148:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                              p_data,
 149:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                              length,
 150:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                              (bool)TRUE))
 151:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         {
 152:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             //If I2C Master fails to invoke the write operation, invoke upper layer event handler w
 153:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 154:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback
 155:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 652              	 .loc 2 155 0
 653 004a FB68     	 ldr r3,[r7,#12]
 654 004c DB68     	 ldr r3,[r3,#12]
 655 004e 1A46     	 mov r2,r3
 656 0050 FB68     	 ldr r3,[r7,#12]
 657 0052 9B68     	 ldr r3,[r3,#8]
 658 0054 1846     	 mov r0,r3
 659 0056 0121     	 movs r1,#1
 660 0058 9047     	 blx r2
 156:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_
 157:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             
 158:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             //Release I2C Bus
 159:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             pal_i2c_release((void * )p_i2c_context);
 661              	 .loc 2 159 0
 662 005a F868     	 ldr r0,[r7,#12]
 663 005c FFF7FEFF 	 bl pal_i2c_release
 664 0060 0CE0     	 b .L37
 665              	.L35:
 160:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         }
 161:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         else
 162:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         {
 163:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             status = PAL_STATUS_SUCCESS;
 666              	 .loc 2 163 0
 667 0062 0023     	 movs r3,#0
 668 0064 FB82     	 strh r3,[r7,#22]
 669 0066 09E0     	 b .L37
 670              	.L34:
 164:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         }
 165:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 166:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     else
 167:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 168:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         status = PAL_STATUS_I2C_BUSY;
 671              	 .loc 2 168 0
 672 0068 0223     	 movs r3,#2
 673 006a FB82     	 strh r3,[r7,#22]
 169:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t t
 170:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 674              	 .loc 2 170 0
 675 006c FB68     	 ldr r3,[r7,#12]
 676 006e DB68     	 ldr r3,[r3,#12]
 677 0070 1A46     	 mov r2,r3
 678 0072 FB68     	 ldr r3,[r7,#12]
 679 0074 9B68     	 ldr r3,[r3,#8]
 680 0076 1846     	 mov r0,r3
 681 0078 0221     	 movs r1,#2
 682 007a 9047     	 blx r2
 683              	.L37:
 171:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                         (p_i2c_context->p_upper_layer_ctx , PAL_I2C
 172:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 173:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     
 174:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     return status;
 684              	 .loc 2 174 0
 685 007c FB8A     	 ldrh r3,[r7,#22]
 175:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 686              	 .loc 2 175 0
 687 007e 1846     	 mov r0,r3
 688 0080 1C37     	 adds r7,r7,#28
 689              	.LCFI57:
 690              	 .cfi_def_cfa_offset 12
 691 0082 BD46     	 mov sp,r7
 692              	.LCFI58:
 693              	 .cfi_def_cfa_register 13
 694              	 
 695 0084 90BD     	 pop {r4,r7,pc}
 696              	.L40:
 697 0086 00BF     	 .align 2
 698              	.L39:
 699 0088 00000000 	 .word gp_pal_i2c_current_ctx
 700              	 .cfi_endproc
 701              	.LFE397:
 703              	 .section .text.pal_i2c_read,"ax",%progbits
 704              	 .align 2
 705              	 .global pal_i2c_read
 706              	 .thumb
 707              	 .thumb_func
 709              	pal_i2c_read:
 710              	.LFB398:
 176:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 177:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
 178:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 711              	 .loc 2 178 0
 712              	 .cfi_startproc
 713              	 
 714              	 
 715 0000 90B5     	 push {r4,r7,lr}
 716              	.LCFI59:
 717              	 .cfi_def_cfa_offset 12
 718              	 .cfi_offset 4,-12
 719              	 .cfi_offset 7,-8
 720              	 .cfi_offset 14,-4
 721 0002 8BB0     	 sub sp,sp,#44
 722              	.LCFI60:
 723              	 .cfi_def_cfa_offset 56
 724 0004 04AF     	 add r7,sp,#16
 725              	.LCFI61:
 726              	 .cfi_def_cfa 7,40
 727 0006 F860     	 str r0,[r7,#12]
 728 0008 B960     	 str r1,[r7,#8]
 729 000a 1346     	 mov r3,r2
 730 000c FB80     	 strh r3,[r7,#6]
 179:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     pal_status_t status = PAL_STATUS_FAILURE;
 731              	 .loc 2 179 0
 732 000e 0123     	 movs r3,#1
 733 0010 FB82     	 strh r3,[r7,#22]
 180:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 181:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     //Acquire the I2C bus before read/write
 182:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 734              	 .loc 2 182 0
 735 0012 F868     	 ldr r0,[r7,#12]
 736 0014 FFF7FEFF 	 bl pal_i2c_acquire
 737 0018 0346     	 mov r3,r0
 738 001a 002B     	 cmp r3,#0
 739 001c 26D1     	 bne .L42
 183:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 184:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         gp_pal_i2c_current_ctx = p_i2c_context;
 740              	 .loc 2 184 0
 741 001e 1B4A     	 ldr r2,.L47
 742 0020 FB68     	 ldr r3,[r7,#12]
 743 0022 1360     	 str r3,[r2]
 185:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 186:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         //Invoke the low level i2c master driver API to read from the bus
 187:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
 744              	 .loc 2 187 0
 745 0024 FB68     	 ldr r3,[r7,#12]
 746 0026 1A68     	 ldr r2,[r3]
 188:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                             (bool)TRUE,
 189:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                             (p_i2c_context->slave_address << 1),
 747              	 .loc 2 189 0
 748 0028 FB68     	 ldr r3,[r7,#12]
 749 002a 1B79     	 ldrb r3,[r3,#4]
 750 002c 5B00     	 lsls r3,r3,#1
 187:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                             (bool)TRUE,
 751              	 .loc 2 187 0
 752 002e 1C46     	 mov r4,r3
 753 0030 FB88     	 ldrh r3,[r7,#6]
 754 0032 0093     	 str r3,[sp]
 755 0034 0123     	 movs r3,#1
 756 0036 0193     	 str r3,[sp,#4]
 757 0038 0123     	 movs r3,#1
 758 003a 0293     	 str r3,[sp,#8]
 759 003c 1046     	 mov r0,r2
 760 003e 0121     	 movs r1,#1
 761 0040 2246     	 mov r2,r4
 762 0042 BB68     	 ldr r3,[r7,#8]
 763 0044 FFF7FEFF 	 bl I2C_MASTER_Receive
 764 0048 0346     	 mov r3,r0
 765 004a 002B     	 cmp r3,#0
 766 004c 0BD0     	 beq .L43
 190:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                             p_data,
 191:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                             length,
 192:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                             (bool)TRUE,
 193:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                             (bool)TRUE))
 194:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         {
 195:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             //If I2C Master fails to invoke the read operation, invoke upper layer event handler wi
 196:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 197:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback
 198:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 767              	 .loc 2 198 0
 768 004e FB68     	 ldr r3,[r7,#12]
 769 0050 DB68     	 ldr r3,[r3,#12]
 770 0052 1A46     	 mov r2,r3
 771 0054 FB68     	 ldr r3,[r7,#12]
 772 0056 9B68     	 ldr r3,[r3,#8]
 773 0058 1846     	 mov r0,r3
 774 005a 0121     	 movs r1,#1
 775 005c 9047     	 blx r2
 199:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_
 200:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 201:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             //Release I2C Bus
 202:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             pal_i2c_release((void * )p_i2c_context);
 776              	 .loc 2 202 0
 777 005e F868     	 ldr r0,[r7,#12]
 778 0060 FFF7FEFF 	 bl pal_i2c_release
 779 0064 0CE0     	 b .L45
 780              	.L43:
 203:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         }
 204:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         else
 205:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         {
 206:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             status = PAL_STATUS_SUCCESS;
 781              	 .loc 2 206 0
 782 0066 0023     	 movs r3,#0
 783 0068 FB82     	 strh r3,[r7,#22]
 784 006a 09E0     	 b .L45
 785              	.L42:
 207:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         }
 208:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 209:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     else
 210:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 211:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         status = PAL_STATUS_I2C_BUSY;
 786              	 .loc 2 211 0
 787 006c 0223     	 movs r3,#2
 788 006e FB82     	 strh r3,[r7,#22]
 212:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t t
 213:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 789              	 .loc 2 213 0
 790 0070 FB68     	 ldr r3,[r7,#12]
 791 0072 DB68     	 ldr r3,[r3,#12]
 792 0074 1A46     	 mov r2,r3
 793 0076 FB68     	 ldr r3,[r7,#12]
 794 0078 9B68     	 ldr r3,[r3,#8]
 795 007a 1846     	 mov r0,r3
 796 007c 0221     	 movs r1,#2
 797 007e 9047     	 blx r2
 798              	.L45:
 214:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****                                                         (p_i2c_context->p_upper_layer_ctx , PAL_I2C
 215:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 216:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     
 217:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     return status;
 799              	 .loc 2 217 0
 800 0080 FB8A     	 ldrh r3,[r7,#22]
 218:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 801              	 .loc 2 218 0
 802 0082 1846     	 mov r0,r3
 803 0084 1C37     	 adds r7,r7,#28
 804              	.LCFI62:
 805              	 .cfi_def_cfa_offset 12
 806 0086 BD46     	 mov sp,r7
 807              	.LCFI63:
 808              	 .cfi_def_cfa_register 13
 809              	 
 810 0088 90BD     	 pop {r4,r7,pc}
 811              	.L48:
 812 008a 00BF     	 .align 2
 813              	.L47:
 814 008c 00000000 	 .word gp_pal_i2c_current_ctx
 815              	 .cfi_endproc
 816              	.LFE398:
 818              	 .section .text.pal_i2c_set_bitrate,"ax",%progbits
 819              	 .align 2
 820              	 .global pal_i2c_set_bitrate
 821              	 .thumb
 822              	 .thumb_func
 824              	pal_i2c_set_bitrate:
 825              	.LFB399:
 219:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 220:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
 221:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** {
 826              	 .loc 2 221 0
 827              	 .cfi_startproc
 828              	 
 829              	 
 830 0000 80B5     	 push {r7,lr}
 831              	.LCFI64:
 832              	 .cfi_def_cfa_offset 8
 833              	 .cfi_offset 7,-8
 834              	 .cfi_offset 14,-4
 835 0002 84B0     	 sub sp,sp,#16
 836              	.LCFI65:
 837              	 .cfi_def_cfa_offset 24
 838 0004 00AF     	 add r7,sp,#0
 839              	.LCFI66:
 840              	 .cfi_def_cfa_register 7
 841 0006 7860     	 str r0,[r7,#4]
 842 0008 0B46     	 mov r3,r1
 843 000a 7B80     	 strh r3,[r7,#2]
 222:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     pal_status_t return_status = PAL_STATUS_FAILURE;
 844              	 .loc 2 222 0
 845 000c 0123     	 movs r3,#1
 846 000e FB81     	 strh r3,[r7,#14]
 223:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     optiga_lib_status_t event = PAL_I2C_EVENT_ERROR;
 847              	 .loc 2 223 0
 848 0010 0123     	 movs r3,#1
 849 0012 BB81     	 strh r3,[r7,#12]
 224:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** 
 225:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     //Acquire the I2C bus before setting the bitrate
 226:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 850              	 .loc 2 226 0
 851 0014 7868     	 ldr r0,[r7,#4]
 852 0016 FFF7FEFF 	 bl pal_i2c_acquire
 853 001a 0346     	 mov r3,r0
 854 001c 002B     	 cmp r3,#0
 855 001e 04D1     	 bne .L50
 227:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 228:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         // If the user provided bitrate is greater than the I2C master hardware maximum supported v
 229:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         // set the I2C master to its maximum supported value.
 230:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
 231:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        {
 232:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
 233:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        }
 234:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        if (XMC_I2C_CH_STATUS_OK != XMC_I2C_CH_SetBaudrate(((I2C_MASTER_t * )p_i2c_context->p_i2c
 235:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //                                                            bitrate * 1000))
 236:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        {
 237:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //            return_status = PAL_STATUS_FAILURE;
 238:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        }
 239:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        else
 240:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        {
 241:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             return_status = PAL_STATUS_SUCCESS;
 856              	 .loc 2 241 0
 857 0020 0023     	 movs r3,#0
 858 0022 FB81     	 strh r3,[r7,#14]
 242:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****             event = PAL_I2C_EVENT_SUCCESS;
 859              	 .loc 2 242 0
 860 0024 0023     	 movs r3,#0
 861 0026 BB81     	 strh r3,[r7,#12]
 862 0028 03E0     	 b .L51
 863              	.L50:
 243:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** //        }
 244:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 245:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     else
 246:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 247:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         return_status = PAL_STATUS_I2C_BUSY;
 864              	 .loc 2 247 0
 865 002a 0223     	 movs r3,#2
 866 002c FB81     	 strh r3,[r7,#14]
 248:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         event = PAL_I2C_EVENT_BUSY;
 867              	 .loc 2 248 0
 868 002e 0223     	 movs r3,#2
 869 0030 BB81     	 strh r3,[r7,#12]
 870              	.L51:
 249:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 250:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     if (0 != p_i2c_context->upper_layer_event_handler)
 871              	 .loc 2 250 0
 872 0032 7B68     	 ldr r3,[r7,#4]
 873 0034 DB68     	 ldr r3,[r3,#12]
 874 0036 002B     	 cmp r3,#0
 875 0038 08D0     	 beq .L52
 251:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 252:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t t
 253:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_lay
 876              	 .loc 2 253 0
 877 003a 7B68     	 ldr r3,[r7,#4]
 878 003c DB68     	 ldr r3,[r3,#12]
 879 003e 1A46     	 mov r2,r3
 880 0040 7B68     	 ldr r3,[r7,#4]
 881 0042 9968     	 ldr r1,[r3,#8]
 882 0044 BB89     	 ldrh r3,[r7,#12]
 883 0046 0846     	 mov r0,r1
 884 0048 1946     	 mov r1,r3
 885 004a 9047     	 blx r2
 886              	.L52:
 254:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 255:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     //Release I2C Bus if its acquired 
 256:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     if (PAL_STATUS_I2C_BUSY != return_status)
 887              	 .loc 2 256 0
 888 004c FB89     	 ldrh r3,[r7,#14]
 889 004e 022B     	 cmp r3,#2
 890 0050 02D0     	 beq .L53
 257:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     {
 258:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****         pal_i2c_release((void * )p_i2c_context);
 891              	 .loc 2 258 0
 892 0052 7868     	 ldr r0,[r7,#4]
 893 0054 FFF7FEFF 	 bl pal_i2c_release
 894              	.L53:
 259:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     }
 260:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c ****     return return_status;
 895              	 .loc 2 260 0
 896 0058 FB89     	 ldrh r3,[r7,#14]
 261:C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/pal/xmc4700\pal_i2c.c **** }
 897              	 .loc 2 261 0
 898 005a 1846     	 mov r0,r3
 899 005c 1037     	 adds r7,r7,#16
 900              	.LCFI67:
 901              	 .cfi_def_cfa_offset 8
 902 005e BD46     	 mov sp,r7
 903              	.LCFI68:
 904              	 .cfi_def_cfa_register 13
 905              	 
 906 0060 80BD     	 pop {r7,pc}
 907              	 .cfi_endproc
 908              	.LFE399:
 910 0062 00BF     	 .text
 911              	.Letext0:
 912              	 .file 3 "c:\\users\\yushev\\dave_4-4-2_32bit_2018-02-23\\dave-ide-4.4.2-32bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 913              	 .file 4 "c:\\users\\yushev\\dave_4-4-2_32bit_2018-02-23\\dave-ide-4.4.2-32bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 914              	 .file 5 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 915              	 .file 6 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Libraries/XMCLib/inc/xmc_usic.h"
 916              	 .file 7 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Libraries/XMCLib/inc/xmc_i2c.h"
 917              	 .file 8 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Libraries/XMCLib/inc/xmc_usbd_regs.h"
 918              	 .file 9 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Libraries/XMCLib/inc/xmc_usbd.h"
 919              	 .file 10 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/USBD/usbd.h"
 920              	 .file 11 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/optiga/include/optiga/common/optiga_lib_types.h"
 921              	 .file 12 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/optiga/include/optiga/pal/pal.h"
 922              	 .file 13 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/optiga/optiga/include/optiga/pal/pal_i2c.h"
 923              	 .file 14 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Libraries/CMSIS/Include/core_cm4.h"
 924              	 .file 15 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
 925              	 .file 16 "C:/Users/Yushev/git/wpcqi-optiga-trust-charge/projects/xmc4700_relax_kit_qi_auth_example/common/Dave/Generated/USBD/usbd_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pal_i2c.c
    {standard input}:20     .text.I2C_MASTER_IsTxBusy:00000000 $t
    {standard input}:24     .text.I2C_MASTER_IsTxBusy:00000000 I2C_MASTER_IsTxBusy
    {standard input}:66     .text.I2C_MASTER_IsRxBusy:00000000 $t
    {standard input}:70     .text.I2C_MASTER_IsRxBusy:00000000 I2C_MASTER_IsRxBusy
    {standard input}:111    .bss.g_entry_count:00000000 $d
    {standard input}:114    .bss.g_entry_count:00000000 g_entry_count
    {standard input}:117    .bss.gp_pal_i2c_current_ctx:00000000 $d
    {standard input}:120    .bss.gp_pal_i2c_current_ctx:00000000 gp_pal_i2c_current_ctx
    {standard input}:123    .text.pal_i2c_acquire:00000000 $t
    {standard input}:127    .text.pal_i2c_acquire:00000000 pal_i2c_acquire
    {standard input}:186    .text.pal_i2c_acquire:00000034 $d
    {standard input}:191    .text.pal_i2c_release:00000000 $t
    {standard input}:195    .text.pal_i2c_release:00000000 pal_i2c_release
    {standard input}:233    .text.pal_i2c_release:00000018 $d
    {standard input}:238    .text.invoke_upper_layer_callback:00000000 $t
    {standard input}:243    .text.invoke_upper_layer_callback:00000000 invoke_upper_layer_callback
    {standard input}:293    .text.i2c_master_end_of_transmit_callback:00000000 $t
    {standard input}:298    .text.i2c_master_end_of_transmit_callback:00000000 i2c_master_end_of_transmit_callback
    {standard input}:323    .text.i2c_master_end_of_transmit_callback:00000014 $d
    {standard input}:328    .text.i2c_master_end_of_receive_callback:00000000 $t
    {standard input}:333    .text.i2c_master_end_of_receive_callback:00000000 i2c_master_end_of_receive_callback
    {standard input}:358    .text.i2c_master_end_of_receive_callback:00000014 $d
    {standard input}:363    .text.i2c_master_error_detected_callback:00000000 $t
    {standard input}:368    .text.i2c_master_error_detected_callback:00000000 i2c_master_error_detected_callback
    {standard input}:446    .text.i2c_master_error_detected_callback:00000060 $d
    {standard input}:451    .text.i2c_master_nack_received_callback:00000000 $t
    {standard input}:456    .text.i2c_master_nack_received_callback:00000000 i2c_master_nack_received_callback
    {standard input}:478    .text.i2c_master_arbitration_lost_callback:00000000 $t
    {standard input}:483    .text.i2c_master_arbitration_lost_callback:00000000 i2c_master_arbitration_lost_callback
    {standard input}:505    .text.pal_i2c_init:00000000 $t
    {standard input}:510    .text.pal_i2c_init:00000000 pal_i2c_init
    {standard input}:548    .text.pal_i2c_deinit:00000000 $t
    {standard input}:553    .text.pal_i2c_deinit:00000000 pal_i2c_deinit
    {standard input}:591    .text.pal_i2c_write:00000000 $t
    {standard input}:596    .text.pal_i2c_write:00000000 pal_i2c_write
    {standard input}:699    .text.pal_i2c_write:00000088 $d
    {standard input}:704    .text.pal_i2c_read:00000000 $t
    {standard input}:709    .text.pal_i2c_read:00000000 pal_i2c_read
    {standard input}:814    .text.pal_i2c_read:0000008c $d
    {standard input}:819    .text.pal_i2c_set_bitrate:00000000 $t
    {standard input}:824    .text.pal_i2c_set_bitrate:00000000 pal_i2c_set_bitrate
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
I2C_MASTER_AbortTransmit
I2C_MASTER_AbortReceive
I2C_MASTER_Transmit
I2C_MASTER_Receive
