
xmc4700_qi_auth_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013ef0  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08013ef0  0c013ef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  08013ef0  0c013ef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00005000  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  4 .data         000005e0  1ffed000  0c013ef8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000dd8  1ffed5e0  0c0144d8  0001d5e0  2**2
                  ALLOC
  6 USB_RAM       00000e00  20000000  20000000  00020000  2**2
                  ALLOC
  7 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  8 .stab         0000009c  00000000  00000000  0001d5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .stabstr      0000014d  00000000  00000000  0001d67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020d8  00000000  00000000  0001d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00043151  00000000  00000000  0001f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007ad8  00000000  00000000  000629f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015f78  00000000  00000000  0006a4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000916c  00000000  00000000  0008044c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000123f5  00000000  00000000  000895b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00010ead  00000000  00000000  0009b9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c40  00000000  00000000  000ac85a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 000017ea  00000000  00000000  000ae49a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 d0 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 95 99 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 81 98 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	31 72 00 08 99 02 00 08 41 72 00 08 19 8e 00 08     1r......Ar......
 80001ac:	09 8e 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	65 60 00 08 99 02 00 08 00 00 00 00 99 02 00 08     e`..............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c013ef8 	.word	0x0c013ef8
 800024c:	1ffed000 	.word	0x1ffed000
 8000250:	000005e0 	.word	0x000005e0
 8000254:	0c013ef8 	.word	0x0c013ef8
 8000258:	1ffed000 	.word	0x1ffed000
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffed5e0 	.word	0x1ffed5e0
 8000264:	00000dd8 	.word	0x00000dd8
 8000268:	20000000 	.word	0x20000000
 800026c:	00000e00 	.word	0x00000e00
 8000270:	20000e00 	.word	0x20000e00
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffed000 	.word	0x1ffed000

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08004c89 	.word	0x08004c89
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	080124a9 	.word	0x080124a9
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08011eb1 	.word	0x08011eb1

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <qi_auth_ptx_digests>:

    return return_status;
}

uint16_t qi_auth_ptx_digests(uint8_t slot, uint8_t* p_digest, uint16_t* digest_size)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
 80002a8:	73fb      	strb	r3, [r7, #15]
    uint16_t return_status = CRYPT_LIB_ERROR;
 80002aa:	2301      	movs	r3, #1
 80002ac:	82fb      	strh	r3, [r7, #22]

    do {
        if (NULL == p_digest)
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d100      	bne.n	80002b6 <qi_auth_ptx_digests+0x1a>
            break;
 80002b4:	e01c      	b.n	80002f0 <qi_auth_ptx_digests+0x54>

        if (0 == digest_size)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d100      	bne.n	80002be <qi_auth_ptx_digests+0x22>
            break;
 80002bc:	e018      	b.n	80002f0 <qi_auth_ptx_digests+0x54>

        if (0 != slot)
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d000      	beq.n	80002c6 <qi_auth_ptx_digests+0x2a>
            break;
 80002c4:	e014      	b.n	80002f0 <qi_auth_ptx_digests+0x54>

        // Version and Message type
        p_digest[0] = (QI_AUTH_PROTO_VER << 4) | MSGTYPE_RESP_DIGESTS;
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	2211      	movs	r2, #17
 80002ca:	701a      	strb	r2, [r3, #0]

        // Slots Populated Mask and Slots Returned Mask
        p_digest[1] = 0x1 | 0x1;
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	3301      	adds	r3, #1
 80002d0:	2201      	movs	r2, #1
 80002d2:	701a      	strb	r2, [r3, #0]

        return_status = qi_auth_ptx_crypt_certchain_sha256(&p_digest[2]);
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	3302      	adds	r3, #2
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fac5 	bl	8000868 <qi_auth_ptx_crypt_certchain_sha256>
 80002de:	4603      	mov	r3, r0
 80002e0:	82fb      	strh	r3, [r7, #22]
        if (return_status != CRYPT_LIB_OK)
 80002e2:	8afb      	ldrh	r3, [r7, #22]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d000      	beq.n	80002ea <qi_auth_ptx_digests+0x4e>
            break;
 80002e8:	e002      	b.n	80002f0 <qi_auth_ptx_digests+0x54>

        *digest_size = 34;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2222      	movs	r2, #34	; 0x22
 80002ee:	801a      	strh	r2, [r3, #0]

    }while(0);

    return return_status;
 80002f0:	8afb      	ldrh	r3, [r7, #22]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3718      	adds	r7, #24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop

080002fc <qi_auth_ptx_certificate>:

uint16_t qi_auth_ptx_certificate(uint8_t slot, uint8_t* p_certchain, uint16_t* certchain_size)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
 8000308:	73fb      	strb	r3, [r7, #15]
    uint16_t  return_status = CRYPT_LIB_ERROR;
 800030a:	2301      	movs	r3, #1
 800030c:	82fb      	strh	r3, [r7, #22]

    do {

        if ((0 != slot) || (NULL == p_certchain) || (0 == certchain_size))
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d11a      	bne.n	800034a <qi_auth_ptx_certificate+0x4e>
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d017      	beq.n	800034a <qi_auth_ptx_certificate+0x4e>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d014      	beq.n	800034a <qi_auth_ptx_certificate+0x4e>
            break;

        // Version and Message type
        p_certchain[0] = (QI_AUTH_PROTO_VER << 4) | MSGTYPE_RESP_CERTIFICATE;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	2212      	movs	r2, #18
 8000324:	701a      	strb	r2, [r3, #0]

        return_status = qi_auth_ptx_crypt_certchain(p_certchain+1, certchain_size);
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	3301      	adds	r3, #1
 800032a:	4618      	mov	r0, r3
 800032c:	6879      	ldr	r1, [r7, #4]
 800032e:	f000 fbf3 	bl	8000b18 <qi_auth_ptx_crypt_certchain>
 8000332:	4603      	mov	r3, r0
 8000334:	82fb      	strh	r3, [r7, #22]
        if (return_status != CRYPT_LIB_OK)
 8000336:	8afb      	ldrh	r3, [r7, #22]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d000      	beq.n	800033e <qi_auth_ptx_certificate+0x42>
            break;
 800033c:	e005      	b.n	800034a <qi_auth_ptx_certificate+0x4e>

        *certchain_size += 1;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	3301      	adds	r3, #1
 8000344:	b29a      	uxth	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	801a      	strh	r2, [r3, #0]

    }while(0);

    return return_status;
 800034a:	8afb      	ldrh	r3, [r7, #22]
}
 800034c:	4618      	mov	r0, r3
 800034e:	3718      	adds	r7, #24
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <qi_auth_ptx_challenge_auth>:

uint16_t qi_auth_ptx_challenge_auth(uint8_t slot, uint8_t* p_challreq, uint8_t challreq_size,
                                            uint8_t* p_challresp, uint8_t* challresp_size)
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b0b4      	sub	sp, #208	; 0xd0
 8000358:	af00      	add	r7, sp, #0
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	4603      	mov	r3, r0
 8000360:	73fb      	strb	r3, [r7, #15]
 8000362:	4613      	mov	r3, r2
 8000364:	73bb      	strb	r3, [r7, #14]
    uint16_t return_status = CRYPT_LIB_ERROR;
 8000366:	2301      	movs	r3, #1
 8000368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    uint8_t certchain_hash[32];
    // To Be Signed data
    uint8_t tbs_auth[54] = {0x41};
 800036c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	3304      	adds	r3, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	3304      	adds	r3, #4
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	3304      	adds	r3, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	3304      	adds	r3, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	3304      	adds	r3, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	3304      	adds	r3, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	3304      	adds	r3, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	3304      	adds	r3, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	3304      	adds	r3, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	3304      	adds	r3, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	3304      	adds	r3, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	3304      	adds	r3, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	3304      	adds	r3, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	801a      	strh	r2, [r3, #0]
 80003c2:	3302      	adds	r3, #2
 80003c4:	2341      	movs	r3, #65	; 0x41
 80003c6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
    uint8_t digest_tbs_auth[32];
    //Signature
    uint8_t signature[64];
    uint16_t signature_len = 64;
 80003ca:	2340      	movs	r3, #64	; 0x40
 80003cc:	827b      	strh	r3, [r7, #18]

    do {
        if ((0 != slot) ||
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	f040 809a 	bne.w	800050a <qi_auth_ptx_challenge_auth+0x1b6>
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	f000 8096 	beq.w	800050a <qi_auth_ptx_challenge_auth+0x1b6>
            (NULL == p_challreq) || (0 == challreq_size) ||
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	f000 8092 	beq.w	800050a <qi_auth_ptx_challenge_auth+0x1b6>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	f000 808e 	beq.w	800050a <qi_auth_ptx_challenge_auth+0x1b6>
            (NULL == p_challresp) || (NULL == challresp_size) || (0 == *challresp_size))
 80003ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f000 8089 	beq.w	800050a <qi_auth_ptx_challenge_auth+0x1b6>
 80003f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	f000 8083 	beq.w	800050a <qi_auth_ptx_challenge_auth+0x1b6>
            break;

        *challresp_size = 0;
 8000404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]

        // Version and Message type
        p_challresp[0] = (QI_AUTH_PROTO_VER << 4) | MSGTYPE_RESP_CHALLENGE_AUTH;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2213      	movs	r2, #19
 8000410:	701a      	strb	r2, [r3, #0]
        *challresp_size += 1;
 8000412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	b2da      	uxtb	r2, r3
 800041c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000420:	701a      	strb	r2, [r3, #0]

        // Maximum Qi Authentication Certificate Structure Version
        p_challresp[1] = 0x1 | 0x1;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
        *challresp_size += 1;
 800042a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	3301      	adds	r3, #1
 8000432:	b2da      	uxtb	r2, r3
 8000434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000438:	701a      	strb	r2, [r3, #0]

        //Certificate Chain Hash LSB
        return_status = qi_auth_ptx_crypt_certchain_sha256(certchain_hash);
 800043a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fa12 	bl	8000868 <qi_auth_ptx_crypt_certchain_sha256>
 8000444:	4603      	mov	r3, r0
 8000446:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        if (return_status != CRYPT_LIB_OK)
 800044a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800044e:	2b00      	cmp	r3, #0
 8000450:	d000      	beq.n	8000454 <qi_auth_ptx_challenge_auth+0x100>
            break;
 8000452:	e05a      	b.n	800050a <qi_auth_ptx_challenge_auth+0x1b6>

        p_challresp[2] = certchain_hash[31];
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3302      	adds	r3, #2
 8000458:	f897 20cb 	ldrb.w	r2, [r7, #203]	; 0xcb
 800045c:	701a      	strb	r2, [r3, #0]
        *challresp_size += 1;
 800045e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	b2da      	uxtb	r2, r3
 8000468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800046c:	701a      	strb	r2, [r3, #0]

        memcpy(&tbs_auth[1], certchain_hash, 32);
 800046e:	f107 0475 	add.w	r4, r7, #117	; 0x75
 8000472:	f107 05ac 	add.w	r5, r7, #172	; 0xac
 8000476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000478:	6020      	str	r0, [r4, #0]
 800047a:	6061      	str	r1, [r4, #4]
 800047c:	60a2      	str	r2, [r4, #8]
 800047e:	60e3      	str	r3, [r4, #12]
 8000480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000482:	6120      	str	r0, [r4, #16]
 8000484:	6161      	str	r1, [r4, #20]
 8000486:	61a2      	str	r2, [r4, #24]
 8000488:	61e3      	str	r3, [r4, #28]

        // Table 15. B0 to B17 of the Challenge Request Message to which the CHALLENGE_AUTH is a response
        memcpy(&tbs_auth[1 + 32], p_challreq, 18);
 800048a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800048e:	3321      	adds	r3, #33	; 0x21
 8000490:	4618      	mov	r0, r3
 8000492:	68b9      	ldr	r1, [r7, #8]
 8000494:	2212      	movs	r2, #18
 8000496:	f012 f835 	bl	8012504 <memcpy>

        // Table 15. B0 to B2 of the Challenge Auth Response (Without the signature)
        memcpy(&tbs_auth[1 + 32 + 18], p_challresp, 3);
 800049a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800049e:	3333      	adds	r3, #51	; 0x33
 80004a0:	4618      	mov	r0, r3
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	2203      	movs	r2, #3
 80004a6:	f012 f82d 	bl	8012504 <memcpy>

        // We need to hash TBS Auth Data and sign it afterwards
        qi_auth_ptx_crypt_generate_sha256(tbs_auth, 54, digest_tbs_auth);
 80004aa:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80004ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004b2:	4610      	mov	r0, r2
 80004b4:	2136      	movs	r1, #54	; 0x36
 80004b6:	461a      	mov	r2, r3
 80004b8:	f000 f8f0 	bl	800069c <qi_auth_ptx_crypt_generate_sha256>

        return_status = qi_auth_ptx_crypt_sign(digest_tbs_auth, 32, signature, &signature_len);
 80004bc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80004c0:	f107 0214 	add.w	r2, r7, #20
 80004c4:	f107 0312 	add.w	r3, r7, #18
 80004c8:	4608      	mov	r0, r1
 80004ca:	2120      	movs	r1, #32
 80004cc:	f000 fab2 	bl	8000a34 <qi_auth_ptx_crypt_sign>
 80004d0:	4603      	mov	r3, r0
 80004d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        if (return_status != CRYPT_LIB_OK)
 80004d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d000      	beq.n	80004e0 <qi_auth_ptx_challenge_auth+0x18c>
            break;
 80004de:	e014      	b.n	800050a <qi_auth_ptx_challenge_auth+0x1b6>

        memcpy(&p_challresp[3], signature, signature_len);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	1cda      	adds	r2, r3, #3
 80004e4:	8a7b      	ldrh	r3, [r7, #18]
 80004e6:	461c      	mov	r4, r3
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	4610      	mov	r0, r2
 80004ee:	4619      	mov	r1, r3
 80004f0:	4622      	mov	r2, r4
 80004f2:	f012 f807 	bl	8012504 <memcpy>

        *challresp_size += signature_len;
 80004f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	8a7b      	ldrh	r3, [r7, #18]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	4413      	add	r3, r2
 8000502:	b2da      	uxtb	r2, r3
 8000504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000508:	701a      	strb	r2, [r3, #0]

    }while(0);

    return return_status;
 800050a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
}
 800050e:	4618      	mov	r0, r3
 8000510:	37d0      	adds	r7, #208	; 0xd0
 8000512:	46bd      	mov	sp, r7
 8000514:	bdb0      	pop	{r4, r5, r7, pc}
 8000516:	bf00      	nop

08000518 <qi_auth_ptx_init>:

int32_t qi_auth_ptx_init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	return (qi_auth_ptx_crypt_init(0));
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fb4f 	bl	8000bc0 <qi_auth_ptx_crypt_init>
 8000522:	4603      	mov	r3, r0
}
 8000524:	4618      	mov	r0, r3
 8000526:	bd80      	pop	{r7, pc}

08000528 <optiga_callback>:

/**
 * Callback when optiga_util_xxxx operation is completed asynchronously
 */
static void optiga_callback(void * context, optiga_lib_status_t return_status)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <optiga_callback+0x1c>)
 8000536:	887b      	ldrh	r3, [r7, #2]
 8000538:	8013      	strh	r3, [r2, #0]
}
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	1ffed5e0 	.word	0x1ffed5e0

08000548 <optiga_init>:



static uint16_t optiga_init(uint8_t restore_from_hibernate)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	uint16_t return_status = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	81fb      	strh	r3, [r7, #14]

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		p_util = optiga_util_create(0, optiga_callback, NULL);
 8000556:	2000      	movs	r0, #0
 8000558:	494b      	ldr	r1, [pc, #300]	; (8000688 <optiga_init+0x140>)
 800055a:	2200      	movs	r2, #0
 800055c:	f009 fb00 	bl	8009b60 <optiga_util_create>
 8000560:	4602      	mov	r2, r0
 8000562:	4b4a      	ldr	r3, [pc, #296]	; (800068c <optiga_init+0x144>)
 8000564:	601a      	str	r2, [r3, #0]

		//Create an instance of optiga_crypt to perform crypto operations on OPTIGA.
		p_crypt = optiga_crypt_create(0, optiga_callback, NULL);
 8000566:	2000      	movs	r0, #0
 8000568:	4947      	ldr	r1, [pc, #284]	; (8000688 <optiga_init+0x140>)
 800056a:	2200      	movs	r2, #0
 800056c:	f009 fda6 	bl	800a0bc <optiga_crypt_create>
 8000570:	4602      	mov	r2, r0
 8000572:	4b47      	ldr	r3, [pc, #284]	; (8000690 <optiga_init+0x148>)
 8000574:	601a      	str	r2, [r3, #0]

		if ((NULL == p_util) || (NULL == p_crypt))
 8000576:	4b45      	ldr	r3, [pc, #276]	; (800068c <optiga_init+0x144>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d07e      	beq.n	800067c <optiga_init+0x134>
 800057e:	4b44      	ldr	r3, [pc, #272]	; (8000690 <optiga_init+0x148>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d07a      	beq.n	800067c <optiga_init+0x134>

		/**
		 * Open the application on OPTIGA which is a precondition to perform any other operations
		 * using optiga_util_open_application
		 */
		CHECK_RESULT(optiga_util_open_application(p_util, restore_from_hibernate));
 8000586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800058a:	81fb      	strh	r3, [r7, #14]
 800058c:	4b41      	ldr	r3, [pc, #260]	; (8000694 <optiga_init+0x14c>)
 800058e:	2201      	movs	r2, #1
 8000590:	801a      	strh	r2, [r3, #0]
 8000592:	4b3e      	ldr	r3, [pc, #248]	; (800068c <optiga_init+0x144>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4610      	mov	r0, r2
 800059a:	4619      	mov	r1, r3
 800059c:	f009 fb3a 	bl	8009c14 <optiga_util_open_application>
 80005a0:	4603      	mov	r3, r0
 80005a2:	81fb      	strh	r3, [r7, #14]
 80005a4:	89fb      	ldrh	r3, [r7, #14]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d000      	beq.n	80005ac <optiga_init+0x64>
 80005aa:	e067      	b.n	800067c <optiga_init+0x134>
 80005ac:	e002      	b.n	80005b4 <optiga_init+0x6c>
 80005ae:	2001      	movs	r0, #1
 80005b0:	f009 fa1c 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 80005b4:	4b37      	ldr	r3, [pc, #220]	; (8000694 <optiga_init+0x14c>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d0f7      	beq.n	80005ae <optiga_init+0x66>
 80005be:	4b35      	ldr	r3, [pc, #212]	; (8000694 <optiga_init+0x14c>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d017      	beq.n	80005f8 <optiga_init+0xb0>
 80005c8:	4b32      	ldr	r3, [pc, #200]	; (8000694 <optiga_init+0x14c>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	81fb      	strh	r3, [r7, #14]
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <optiga_init+0x14c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	4830      	ldr	r0, [pc, #192]	; (8000698 <optiga_init+0x150>)
 80005d6:	4619      	mov	r1, r3
 80005d8:	f012 f850 	bl	801267c <iprintf>
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <optiga_init+0x144>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f009 faf5 	bl	8009bd0 <optiga_util_destroy>
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <optiga_init+0x148>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f009 fd9e 	bl	800a12c <optiga_crypt_destroy>
 80005f0:	2000      	movs	r0, #0
 80005f2:	f009 f983 	bl	80098fc <pal_os_event_destroy>
 80005f6:	e041      	b.n	800067c <optiga_init+0x134>

		// Maximum Power, Minimum Current limitation
		uint8_t current_limit = 15;
 80005f8:	230f      	movs	r3, #15
 80005fa:	737b      	strb	r3, [r7, #13]
		CHECK_RESULT(optiga_util_write_data(p_util,
 80005fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000600:	81fb      	strh	r3, [r7, #14]
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <optiga_init+0x14c>)
 8000604:	2201      	movs	r2, #1
 8000606:	801a      	strh	r2, [r3, #0]
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <optiga_init+0x144>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	f107 030d 	add.w	r3, r7, #13
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	4610      	mov	r0, r2
 8000618:	f24e 01c4 	movw	r1, #57540	; 0xe0c4
 800061c:	2200      	movs	r2, #0
 800061e:	2300      	movs	r3, #0
 8000620:	f009 fb92 	bl	8009d48 <optiga_util_write_data>
 8000624:	4603      	mov	r3, r0
 8000626:	81fb      	strh	r3, [r7, #14]
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d000      	beq.n	8000630 <optiga_init+0xe8>
 800062e:	e024      	b.n	800067a <optiga_init+0x132>
 8000630:	e002      	b.n	8000638 <optiga_init+0xf0>
 8000632:	2001      	movs	r0, #1
 8000634:	f009 f9da 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <optiga_init+0x14c>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b01      	cmp	r3, #1
 8000640:	d0f7      	beq.n	8000632 <optiga_init+0xea>
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <optiga_init+0x14c>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b29b      	uxth	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d017      	beq.n	800067c <optiga_init+0x134>
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <optiga_init+0x14c>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	81fb      	strh	r3, [r7, #14]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <optiga_init+0x14c>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	b29b      	uxth	r3, r3
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <optiga_init+0x150>)
 800065a:	4619      	mov	r1, r3
 800065c:	f012 f80e 	bl	801267c <iprintf>
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <optiga_init+0x144>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f009 fab3 	bl	8009bd0 <optiga_util_destroy>
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <optiga_init+0x148>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f009 fd5c 	bl	800a12c <optiga_crypt_destroy>
 8000674:	2000      	movs	r0, #0
 8000676:	f009 f941 	bl	80098fc <pal_os_event_destroy>
 800067a:	bf00      	nop
		example_pair_host_and_optiga_using_pre_shared_secret();
#endif

	}while (FALSE);

	return return_status;
 800067c:	89fb      	ldrh	r3, [r7, #14]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	08000529 	.word	0x08000529
 800068c:	1ffed5e8 	.word	0x1ffed5e8
 8000690:	1ffed5e4 	.word	0x1ffed5e4
 8000694:	1ffed5e0 	.word	0x1ffed5e0
 8000698:	0801379c 	.word	0x0801379c

0800069c <qi_auth_ptx_crypt_generate_sha256>:

/**
 * \brief Generate a SHA256 hash on the message.
 */
uint16_t qi_auth_ptx_crypt_generate_sha256(const uint8_t* p_input, uint16_t inlen, uint8_t* p_digest)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0ac      	sub	sp, #176	; 0xb0
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	460b      	mov	r3, r1
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	817b      	strh	r3, [r7, #10]
	uint16_t  return_status = CRYPT_LIB_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	optiga_hash_context_t hash_ctx;
	uint8_t hash_context_buffer [130];

    do
    {
    	hash_ctx.hash_algo = OPTIGA_HASH_TYPE_SHA_256;
 80006b0:	23e2      	movs	r3, #226	; 0xe2
 80006b2:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		hash_ctx.context_buffer = hash_context_buffer;
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		hash_ctx.context_buffer_length = sizeof(hash_context_buffer);
 80006be:	2382      	movs	r3, #130	; 0x82
 80006c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    	hash_data_host.buffer = p_input;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		hash_data_host.length = inlen;
 80006ca:	897b      	ldrh	r3, [r7, #10]
 80006cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		CHECK_RESULT(optiga_crypt_hash_start(p_crypt, &hash_ctx));
 80006d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80006d8:	4b5f      	ldr	r3, [pc, #380]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 80006da:	2201      	movs	r2, #1
 80006dc:	801a      	strh	r2, [r3, #0]
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <qi_auth_ptx_crypt_generate_sha256+0x1c0>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006e6:	4610      	mov	r0, r2
 80006e8:	4619      	mov	r1, r3
 80006ea:	f009 fd6f 	bl	800a1cc <optiga_crypt_hash_start>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80006f4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d000      	beq.n	80006fe <qi_auth_ptx_crypt_generate_sha256+0x62>
 80006fc:	e0a6      	b.n	800084c <qi_auth_ptx_crypt_generate_sha256+0x1b0>
 80006fe:	e002      	b.n	8000706 <qi_auth_ptx_crypt_generate_sha256+0x6a>
 8000700:	2001      	movs	r0, #1
 8000702:	f009 f973 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000706:	4b54      	ldr	r3, [pc, #336]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b29b      	uxth	r3, r3
 800070c:	2b01      	cmp	r3, #1
 800070e:	d0f7      	beq.n	8000700 <qi_auth_ptx_crypt_generate_sha256+0x64>
 8000710:	4b51      	ldr	r3, [pc, #324]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	b29b      	uxth	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d018      	beq.n	800074c <qi_auth_ptx_crypt_generate_sha256+0xb0>
 800071a:	4b4f      	ldr	r3, [pc, #316]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8000722:	4b4d      	ldr	r3, [pc, #308]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	b29b      	uxth	r3, r3
 8000728:	484d      	ldr	r0, [pc, #308]	; (8000860 <qi_auth_ptx_crypt_generate_sha256+0x1c4>)
 800072a:	4619      	mov	r1, r3
 800072c:	f011 ffa6 	bl	801267c <iprintf>
 8000730:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <qi_auth_ptx_crypt_generate_sha256+0x1c8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f009 fa4b 	bl	8009bd0 <optiga_util_destroy>
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <qi_auth_ptx_crypt_generate_sha256+0x1c0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f009 fcf4 	bl	800a12c <optiga_crypt_destroy>
 8000744:	2000      	movs	r0, #0
 8000746:	f009 f8d9 	bl	80098fc <pal_os_event_destroy>
 800074a:	e07f      	b.n	800084c <qi_auth_ptx_crypt_generate_sha256+0x1b0>
		CHECK_RESULT(optiga_crypt_hash_update(p_crypt, &hash_ctx, OPTIGA_CRYPT_HOST_DATA, &hash_data_host));
 800074c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000750:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8000754:	4b40      	ldr	r3, [pc, #256]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 8000756:	2201      	movs	r2, #1
 8000758:	801a      	strh	r2, [r3, #0]
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <qi_auth_ptx_crypt_generate_sha256+0x1c0>)
 800075c:	6819      	ldr	r1, [r3, #0]
 800075e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000762:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000766:	4608      	mov	r0, r1
 8000768:	4611      	mov	r1, r2
 800076a:	2201      	movs	r2, #1
 800076c:	f009 fd5e 	bl	800a22c <optiga_crypt_hash_update>
 8000770:	4603      	mov	r3, r0
 8000772:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8000776:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800077a:	2b00      	cmp	r3, #0
 800077c:	d000      	beq.n	8000780 <qi_auth_ptx_crypt_generate_sha256+0xe4>
 800077e:	e065      	b.n	800084c <qi_auth_ptx_crypt_generate_sha256+0x1b0>
 8000780:	e002      	b.n	8000788 <qi_auth_ptx_crypt_generate_sha256+0xec>
 8000782:	2001      	movs	r0, #1
 8000784:	f009 f932 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000788:	4b33      	ldr	r3, [pc, #204]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	2b01      	cmp	r3, #1
 8000790:	d0f7      	beq.n	8000782 <qi_auth_ptx_crypt_generate_sha256+0xe6>
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b29b      	uxth	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d018      	beq.n	80007ce <qi_auth_ptx_crypt_generate_sha256+0x132>
 800079c:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	482d      	ldr	r0, [pc, #180]	; (8000860 <qi_auth_ptx_crypt_generate_sha256+0x1c4>)
 80007ac:	4619      	mov	r1, r3
 80007ae:	f011 ff65 	bl	801267c <iprintf>
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <qi_auth_ptx_crypt_generate_sha256+0x1c8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f009 fa0a 	bl	8009bd0 <optiga_util_destroy>
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <qi_auth_ptx_crypt_generate_sha256+0x1c0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f009 fcb3 	bl	800a12c <optiga_crypt_destroy>
 80007c6:	2000      	movs	r0, #0
 80007c8:	f009 f898 	bl	80098fc <pal_os_event_destroy>
 80007cc:	e03e      	b.n	800084c <qi_auth_ptx_crypt_generate_sha256+0x1b0>
		CHECK_RESULT(optiga_crypt_hash_finalize(p_crypt, &hash_ctx, p_digest));
 80007ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 80007d8:	2201      	movs	r2, #1
 80007da:	801a      	strh	r2, [r3, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <qi_auth_ptx_crypt_generate_sha256+0x1c0>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007e4:	4610      	mov	r0, r2
 80007e6:	4619      	mov	r1, r3
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	f009 fd55 	bl	800a298 <optiga_crypt_hash_finalize>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80007f4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d000      	beq.n	80007fe <qi_auth_ptx_crypt_generate_sha256+0x162>
 80007fc:	e025      	b.n	800084a <qi_auth_ptx_crypt_generate_sha256+0x1ae>
 80007fe:	e002      	b.n	8000806 <qi_auth_ptx_crypt_generate_sha256+0x16a>
 8000800:	2001      	movs	r0, #1
 8000802:	f009 f8f3 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b29b      	uxth	r3, r3
 800080c:	2b01      	cmp	r3, #1
 800080e:	d0f7      	beq.n	8000800 <qi_auth_ptx_crypt_generate_sha256+0x164>
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b29b      	uxth	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d018      	beq.n	800084c <qi_auth_ptx_crypt_generate_sha256+0x1b0>
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <qi_auth_ptx_crypt_generate_sha256+0x1bc>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b29b      	uxth	r3, r3
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <qi_auth_ptx_crypt_generate_sha256+0x1c4>)
 800082a:	4619      	mov	r1, r3
 800082c:	f011 ff26 	bl	801267c <iprintf>
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <qi_auth_ptx_crypt_generate_sha256+0x1c8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f009 f9cb 	bl	8009bd0 <optiga_util_destroy>
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <qi_auth_ptx_crypt_generate_sha256+0x1c0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f009 fc74 	bl	800a12c <optiga_crypt_destroy>
 8000844:	2000      	movs	r0, #0
 8000846:	f009 f859 	bl	80098fc <pal_os_event_destroy>
 800084a:	bf00      	nop
    }while(FALSE);

	return CRYPT_LIB_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	37b0      	adds	r7, #176	; 0xb0
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	1ffed5e0 	.word	0x1ffed5e0
 800085c:	1ffed5e4 	.word	0x1ffed5e4
 8000860:	0801379c 	.word	0x0801379c
 8000864:	1ffed5e8 	.word	0x1ffed5e8

08000868 <qi_auth_ptx_crypt_certchain_sha256>:

uint16_t qi_auth_ptx_crypt_certchain_sha256(uint8_t* p_digest)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0aa      	sub	sp, #168	; 0xa8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	uint16_t  return_status = CRYPT_LIB_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	optiga_hash_context_t hash_ctx;
    uint8_t hash_context_buffer [130];

    do
    {
		hash_ctx.hash_algo = OPTIGA_HASH_TYPE_SHA_256;
 8000876:	23e2      	movs	r3, #226	; 0xe2
 8000878:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		hash_ctx.context_buffer = hash_context_buffer;
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		hash_ctx.context_buffer_length = sizeof(hash_context_buffer);
 8000884:	2382      	movs	r3, #130	; 0x82
 8000886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		hash_data_in_optiga_t optiga_hash = {
 800088a:	4a65      	ldr	r2, [pc, #404]	; (8000a20 <qi_auth_ptx_crypt_certchain_sha256+0x1b8>)
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	6810      	ldr	r0, [r2, #0]
 8000892:	6018      	str	r0, [r3, #0]
 8000894:	8892      	ldrh	r2, [r2, #4]
 8000896:	809a      	strh	r2, [r3, #4]
				.oid = QI_AUTH_CERTCAIN_OID,
				.offset = 0x03,
				.length = QI_AUTH_CRT_ROOTHASH_LEN + 2 + QI_AUTH_CRT_LEN + QI_AUTH_CRT_LEN  // 32 bytes Root Hash + 121 bytes Interm Cert + 120 bytes Leaf Cert
		};
		CHECK_RESULT(optiga_crypt_hash_start(p_crypt, &hash_ctx));
 8000898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800089c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80008a0:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	801a      	strh	r2, [r3, #0]
 80008a6:	4b60      	ldr	r3, [pc, #384]	; (8000a28 <qi_auth_ptx_crypt_certchain_sha256+0x1c0>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	f009 fc8b 	bl	800a1cc <optiga_crypt_hash_start>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80008bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d000      	beq.n	80008c6 <qi_auth_ptx_crypt_certchain_sha256+0x5e>
 80008c4:	e0a6      	b.n	8000a14 <qi_auth_ptx_crypt_certchain_sha256+0x1ac>
 80008c6:	e002      	b.n	80008ce <qi_auth_ptx_crypt_certchain_sha256+0x66>
 80008c8:	2001      	movs	r0, #1
 80008ca:	f009 f88f 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 80008ce:	4b55      	ldr	r3, [pc, #340]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d0f7      	beq.n	80008c8 <qi_auth_ptx_crypt_certchain_sha256+0x60>
 80008d8:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d018      	beq.n	8000914 <qi_auth_ptx_crypt_certchain_sha256+0xac>
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80008ea:	4b4e      	ldr	r3, [pc, #312]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	484e      	ldr	r0, [pc, #312]	; (8000a2c <qi_auth_ptx_crypt_certchain_sha256+0x1c4>)
 80008f2:	4619      	mov	r1, r3
 80008f4:	f011 fec2 	bl	801267c <iprintf>
 80008f8:	4b4d      	ldr	r3, [pc, #308]	; (8000a30 <qi_auth_ptx_crypt_certchain_sha256+0x1c8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f009 f967 	bl	8009bd0 <optiga_util_destroy>
 8000902:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <qi_auth_ptx_crypt_certchain_sha256+0x1c0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f009 fc10 	bl	800a12c <optiga_crypt_destroy>
 800090c:	2000      	movs	r0, #0
 800090e:	f008 fff5 	bl	80098fc <pal_os_event_destroy>
 8000912:	e07f      	b.n	8000a14 <qi_auth_ptx_crypt_certchain_sha256+0x1ac>
		CHECK_RESULT(optiga_crypt_hash_update(p_crypt, &hash_ctx, OPTIGA_CRYPT_OID_DATA, &optiga_hash));
 8000914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000918:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800091c:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 800091e:	2201      	movs	r2, #1
 8000920:	801a      	strh	r2, [r3, #0]
 8000922:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <qi_auth_ptx_crypt_certchain_sha256+0x1c0>)
 8000924:	6819      	ldr	r1, [r3, #0]
 8000926:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4608      	mov	r0, r1
 8000930:	4611      	mov	r1, r2
 8000932:	2200      	movs	r2, #0
 8000934:	f009 fc7a 	bl	800a22c <optiga_crypt_hash_update>
 8000938:	4603      	mov	r3, r0
 800093a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800093e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8000942:	2b00      	cmp	r3, #0
 8000944:	d000      	beq.n	8000948 <qi_auth_ptx_crypt_certchain_sha256+0xe0>
 8000946:	e065      	b.n	8000a14 <qi_auth_ptx_crypt_certchain_sha256+0x1ac>
 8000948:	e002      	b.n	8000950 <qi_auth_ptx_crypt_certchain_sha256+0xe8>
 800094a:	2001      	movs	r0, #1
 800094c:	f009 f84e 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000950:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b29b      	uxth	r3, r3
 8000956:	2b01      	cmp	r3, #1
 8000958:	d0f7      	beq.n	800094a <qi_auth_ptx_crypt_certchain_sha256+0xe2>
 800095a:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b29b      	uxth	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d018      	beq.n	8000996 <qi_auth_ptx_crypt_certchain_sha256+0x12e>
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	b29b      	uxth	r3, r3
 8000972:	482e      	ldr	r0, [pc, #184]	; (8000a2c <qi_auth_ptx_crypt_certchain_sha256+0x1c4>)
 8000974:	4619      	mov	r1, r3
 8000976:	f011 fe81 	bl	801267c <iprintf>
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <qi_auth_ptx_crypt_certchain_sha256+0x1c8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f009 f926 	bl	8009bd0 <optiga_util_destroy>
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <qi_auth_ptx_crypt_certchain_sha256+0x1c0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f009 fbcf 	bl	800a12c <optiga_crypt_destroy>
 800098e:	2000      	movs	r0, #0
 8000990:	f008 ffb4 	bl	80098fc <pal_os_event_destroy>
 8000994:	e03e      	b.n	8000a14 <qi_auth_ptx_crypt_certchain_sha256+0x1ac>
		CHECK_RESULT(optiga_crypt_hash_finalize(p_crypt, &hash_ctx, p_digest));
 8000996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800099a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	801a      	strh	r2, [r3, #0]
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <qi_auth_ptx_crypt_certchain_sha256+0x1c0>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009ac:	4610      	mov	r0, r2
 80009ae:	4619      	mov	r1, r3
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	f009 fc71 	bl	800a298 <optiga_crypt_hash_finalize>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80009bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d000      	beq.n	80009c6 <qi_auth_ptx_crypt_certchain_sha256+0x15e>
 80009c4:	e025      	b.n	8000a12 <qi_auth_ptx_crypt_certchain_sha256+0x1aa>
 80009c6:	e002      	b.n	80009ce <qi_auth_ptx_crypt_certchain_sha256+0x166>
 80009c8:	2001      	movs	r0, #1
 80009ca:	f009 f80f 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d0f7      	beq.n	80009c8 <qi_auth_ptx_crypt_certchain_sha256+0x160>
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d018      	beq.n	8000a14 <qi_auth_ptx_crypt_certchain_sha256+0x1ac>
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <qi_auth_ptx_crypt_certchain_sha256+0x1bc>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <qi_auth_ptx_crypt_certchain_sha256+0x1c4>)
 80009f2:	4619      	mov	r1, r3
 80009f4:	f011 fe42 	bl	801267c <iprintf>
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <qi_auth_ptx_crypt_certchain_sha256+0x1c8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f009 f8e7 	bl	8009bd0 <optiga_util_destroy>
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <qi_auth_ptx_crypt_certchain_sha256+0x1c0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f009 fb90 	bl	800a12c <optiga_crypt_destroy>
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f008 ff75 	bl	80098fc <pal_os_event_destroy>
 8000a12:	bf00      	nop

    }while(FALSE);

	return return_status;
 8000a14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	37a8      	adds	r7, #168	; 0xa8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	080137b0 	.word	0x080137b0
 8000a24:	1ffed5e0 	.word	0x1ffed5e0
 8000a28:	1ffed5e4 	.word	0x1ffed5e4
 8000a2c:	0801379c 	.word	0x0801379c
 8000a30:	1ffed5e8 	.word	0x1ffed5e8

08000a34 <qi_auth_ptx_crypt_sign>:

uint16_t qi_auth_ptx_crypt_sign(uint8_t* p_digest_tbs, uint16_t digest_tbs_size, uint8_t* p_signature, uint16_t* p_signature_len)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b09b      	sub	sp, #108	; 0x6c
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	460b      	mov	r3, r1
 8000a42:	817b      	strh	r3, [r7, #10]
	uint16_t  return_status = CRYPT_LIB_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	// OPTIGA uses DER encoded signatures
	uint8_t der_signature[70];
	uint16_t der_signature_len = sizeof(der_signature);
 8000a4a:	2346      	movs	r3, #70	; 0x46
 8000a4c:	82fb      	strh	r3, [r7, #22]
    do
    {
    	if (NULL == p_signature_len)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d100      	bne.n	8000a56 <qi_auth_ptx_crypt_sign+0x22>
    		break;
 8000a54:	e052      	b.n	8000afc <qi_auth_ptx_crypt_sign+0xc8>

    	// Sign the resulting digest of nthe TBS Auth Data
    	CHECK_RESULT(optiga_crypt_ecdsa_sign(p_crypt, p_digest_tbs, digest_tbs_size, QI_AUTH_DEVICE_PRIKEY_OID, der_signature, &der_signature_len));
 8000a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a5a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <qi_auth_ptx_crypt_sign+0xd4>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	801a      	strh	r2, [r3, #0]
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <qi_auth_ptx_crypt_sign+0xd8>)
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	897b      	ldrh	r3, [r7, #10]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	f107 0316 	add.w	r3, r7, #22
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	4608      	mov	r0, r1
 8000a7a:	68f9      	ldr	r1, [r7, #12]
 8000a7c:	f24e 03f0 	movw	r3, #57584	; 0xe0f0
 8000a80:	f009 fc3e 	bl	800a300 <optiga_crypt_ecdsa_sign>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000a8a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d000      	beq.n	8000a94 <qi_auth_ptx_crypt_sign+0x60>
 8000a92:	e033      	b.n	8000afc <qi_auth_ptx_crypt_sign+0xc8>
 8000a94:	e002      	b.n	8000a9c <qi_auth_ptx_crypt_sign+0x68>
 8000a96:	2001      	movs	r0, #1
 8000a98:	f008 ffa8 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <qi_auth_ptx_crypt_sign+0xd4>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d0f7      	beq.n	8000a96 <qi_auth_ptx_crypt_sign+0x62>
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <qi_auth_ptx_crypt_sign+0xd4>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d018      	beq.n	8000ae2 <qi_auth_ptx_crypt_sign+0xae>
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <qi_auth_ptx_crypt_sign+0xd4>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <qi_auth_ptx_crypt_sign+0xd4>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	4814      	ldr	r0, [pc, #80]	; (8000b10 <qi_auth_ptx_crypt_sign+0xdc>)
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f011 fddb 	bl	801267c <iprintf>
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <qi_auth_ptx_crypt_sign+0xe0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f009 f880 	bl	8009bd0 <optiga_util_destroy>
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <qi_auth_ptx_crypt_sign+0xd8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f009 fb29 	bl	800a12c <optiga_crypt_destroy>
 8000ada:	2000      	movs	r0, #0
 8000adc:	f008 ff0e 	bl	80098fc <pal_os_event_destroy>
 8000ae0:	e00c      	b.n	8000afc <qi_auth_ptx_crypt_sign+0xc8>

    	asn1_to_ecdsa_rs(der_signature, der_signature_len, p_signature, *p_signature_len);
 8000ae2:	8afb      	ldrh	r3, [r7, #22]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	461c      	mov	r4, r3
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	4618      	mov	r0, r3
 8000af2:	4611      	mov	r1, r2
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4623      	mov	r3, r4
 8000af8:	f00d fe20 	bl	800e73c <asn1_to_ecdsa_rs>

    }while(FALSE);

    return return_status;
 8000afc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3764      	adds	r7, #100	; 0x64
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	1ffed5e0 	.word	0x1ffed5e0
 8000b0c:	1ffed5e4 	.word	0x1ffed5e4
 8000b10:	0801379c 	.word	0x0801379c
 8000b14:	1ffed5e8 	.word	0x1ffed5e8

08000b18 <qi_auth_ptx_crypt_certchain>:

uint16_t qi_auth_ptx_crypt_certchain(uint8_t* p_certchain, uint16_t* p_certchain_size)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	uint16_t  return_status = CRYPT_LIB_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	81fb      	strh	r3, [r7, #14]
	uint16_t  optiga_oid = QI_AUTH_CERTCAIN_OID;
 8000b26:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
 8000b2a:	81bb      	strh	r3, [r7, #12]
		/**
		 * 1. Read data from a data object (e.g. certificate data object)
		 *    using optiga_util_read_data.
		 */

		CHECK_RESULT(optiga_util_read_data(p_util, optiga_oid, 0x03, p_certchain, p_certchain_size));
 8000b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b30:	81fb      	strh	r3, [r7, #14]
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <qi_auth_ptx_crypt_certchain+0x98>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	801a      	strh	r2, [r3, #0]
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <qi_auth_ptx_crypt_certchain+0x9c>)
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	89ba      	ldrh	r2, [r7, #12]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	4608      	mov	r0, r1
 8000b44:	4611      	mov	r1, r2
 8000b46:	2203      	movs	r2, #3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f009 f89b 	bl	8009c84 <optiga_util_read_data>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	81fb      	strh	r3, [r7, #14]
 8000b52:	89fb      	ldrh	r3, [r7, #14]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d000      	beq.n	8000b5a <qi_auth_ptx_crypt_certchain+0x42>
 8000b58:	e024      	b.n	8000ba4 <qi_auth_ptx_crypt_certchain+0x8c>
 8000b5a:	e002      	b.n	8000b62 <qi_auth_ptx_crypt_certchain+0x4a>
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f008 ff45 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <qi_auth_ptx_crypt_certchain+0x98>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d0f7      	beq.n	8000b5c <qi_auth_ptx_crypt_certchain+0x44>
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <qi_auth_ptx_crypt_certchain+0x98>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d017      	beq.n	8000ba6 <qi_auth_ptx_crypt_certchain+0x8e>
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <qi_auth_ptx_crypt_certchain+0x98>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	81fb      	strh	r3, [r7, #14]
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <qi_auth_ptx_crypt_certchain+0x98>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <qi_auth_ptx_crypt_certchain+0xa0>)
 8000b84:	4619      	mov	r1, r3
 8000b86:	f011 fd79 	bl	801267c <iprintf>
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <qi_auth_ptx_crypt_certchain+0x9c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f009 f81e 	bl	8009bd0 <optiga_util_destroy>
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <qi_auth_ptx_crypt_certchain+0xa4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f009 fac7 	bl	800a12c <optiga_crypt_destroy>
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f008 feac 	bl	80098fc <pal_os_event_destroy>
 8000ba4:	bf00      	nop
	}while(0);

	return return_status;
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	1ffed5e0 	.word	0x1ffed5e0
 8000bb4:	1ffed5e8 	.word	0x1ffed5e8
 8000bb8:	0801379c 	.word	0x0801379c
 8000bbc:	1ffed5e4 	.word	0x1ffed5e4

08000bc0 <qi_auth_ptx_crypt_init>:

int32_t qi_auth_ptx_crypt_init(uint8_t restore_from_hibernate)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	uint16_t return_status  = CRYPT_LIB_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	81fb      	strh	r3, [r7, #14]

	return_status = optiga_init(restore_from_hibernate);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fcb9 	bl	8000548 <optiga_init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	81fb      	strh	r3, [r7, #14]
	if (CRYPT_LIB_OK != return_status)
 8000bda:	89fb      	ldrh	r3, [r7, #14]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <qi_auth_ptx_crypt_init+0x26>
	{
		printf("Error #1: optiga_init\r\n");
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <qi_auth_ptx_crypt_init+0x30>)
 8000be2:	f011 fdc1 	bl	8012768 <puts>
	}

	return return_status;
 8000be6:	89fb      	ldrh	r3, [r7, #14]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	080137b8 	.word	0x080137b8

08000bf4 <qi_auth_prx_get_digests>:

#define MAX_CERTIFICATE_OFFSET              (3*256 + 1023)
#define MAX_CERTIFICATE_LENGTH              (3*256 + 1023)

uint16_t qi_auth_prx_get_digests(uint8_t ptx, uint8_t slot, uint8_t* p_req, uint16_t* req_size)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60ba      	str	r2, [r7, #8]
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	460b      	mov	r3, r1
 8000c04:	73bb      	strb	r3, [r7, #14]
    uint16_t return_status = CRYPT_LIB_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	82fb      	strh	r3, [r7, #22]

    do {
        if (0 != slot)
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d000      	beq.n	8000c12 <qi_auth_prx_get_digests+0x1e>
            break;
 8000c10:	e01c      	b.n	8000c4c <qi_auth_prx_get_digests+0x58>

        if (NULL == p_req)
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d100      	bne.n	8000c1a <qi_auth_prx_get_digests+0x26>
            break;
 8000c18:	e018      	b.n	8000c4c <qi_auth_prx_get_digests+0x58>

        if (0 == req_size)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d100      	bne.n	8000c22 <qi_auth_prx_get_digests+0x2e>
            break;
 8000c20:	e014      	b.n	8000c4c <qi_auth_prx_get_digests+0x58>

        // Version and Message type
        p_req[0] = (QI_AUTH_PROTO_VER << 4) | MSGTYPE_REQ_GET_DIGESTS;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	2219      	movs	r2, #25
 8000c26:	701a      	strb	r2, [r3, #0]

        //Reserved [3] + PTX[1] + Slot Mask[4]
        p_req[1] = (ptx << 4) | (0xf & slot) ;
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d1      	uxtb	r1, r2
 8000c32:	7bba      	ldrb	r2, [r7, #14]
 8000c34:	f002 020f 	and.w	r2, r2, #15
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	701a      	strb	r2, [r3, #0]

        *req_size = 2;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2202      	movs	r2, #2
 8000c46:	801a      	strh	r2, [r3, #0]

        return_status = CRYPT_LIB_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	82fb      	strh	r3, [r7, #22]

    }while(0);

    return return_status;
 8000c4c:	8afb      	ldrh	r3, [r7, #22]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	371c      	adds	r7, #28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <qi_auth_prx_get_certificate>:

uint16_t qi_auth_prx_get_certificate(uint32_t offset, uint32_t length, uint8_t ptx, uint8_t slot,
                                            uint8_t* p_req, uint16_t* req_size)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4611      	mov	r1, r2
 8000c68:	461a      	mov	r2, r3
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	71bb      	strb	r3, [r7, #6]
    uint16_t  return_status = CRYPT_LIB_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	82fb      	strh	r3, [r7, #22]
    uint8_t offset98 = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	757b      	strb	r3, [r7, #21]
    uint8_t offset70 = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	753b      	strb	r3, [r7, #20]
    uint8_t length98 = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	74fb      	strb	r3, [r7, #19]
    uint8_t length70 = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	74bb      	strb	r3, [r7, #18]

    do {

        if ((offset > MAX_CERTIFICATE_OFFSET) || (length > MAX_CERTIFICATE_OFFSET) ||
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000c8c:	d241      	bcs.n	8000d12 <qi_auth_prx_get_certificate+0xb6>
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000c94:	d23d      	bcs.n	8000d12 <qi_auth_prx_get_certificate+0xb6>
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d13a      	bne.n	8000d12 <qi_auth_prx_get_certificate+0xb6>
            (0 != slot) || (NULL == p_req) || (0 == req_size))
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d037      	beq.n	8000d12 <qi_auth_prx_get_certificate+0xb6>
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d034      	beq.n	8000d12 <qi_auth_prx_get_certificate+0xb6>
            break;

        offset98 = offset >> 8;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	757b      	strb	r3, [r7, #21]
        offset70 = offset - (offset98 << 8);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	753b      	strb	r3, [r7, #20]

        length98 = length >> 8;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	74fb      	strb	r3, [r7, #19]
        length70 = length - (length98 << 8);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	74bb      	strb	r3, [r7, #18]

        // Version and Message type
        p_req[0] = (QI_AUTH_PROTO_VER << 4) | MSGTYPE_REQ_GET_CERTIFICATE;
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	221a      	movs	r2, #26
 8000cc0:	701a      	strb	r2, [r3, #0]

        // Offset98[2]+ Length98[2] + Reserved[1] + PTx[1] + Slot Number [2]
        p_req[1] = ((0x3 & offset98) << 6) | ((0x3 & length98) << 4) |
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	7d7a      	ldrb	r2, [r7, #21]
 8000cc8:	0192      	lsls	r2, r2, #6
 8000cca:	b2d1      	uxtb	r1, r2
 8000ccc:	7cfa      	ldrb	r2, [r7, #19]
 8000cce:	f002 0203 	and.w	r2, r2, #3
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	b2d1      	uxtb	r1, r2
                    (0 << 3) | ((0x1 & ptx) << 3) | (0x3 & slot);
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	f002 0201 	and.w	r2, r2, #1
 8000ce0:	00d2      	lsls	r2, r2, #3

        // Version and Message type
        p_req[0] = (QI_AUTH_PROTO_VER << 4) | MSGTYPE_REQ_GET_CERTIFICATE;

        // Offset98[2]+ Length98[2] + Reserved[1] + PTx[1] + Slot Number [2]
        p_req[1] = ((0x3 & offset98) << 6) | ((0x3 & length98) << 4) |
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	b2d1      	uxtb	r1, r2
 8000ce8:	79ba      	ldrb	r2, [r7, #6]
 8000cea:	f002 0203 	and.w	r2, r2, #3
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	701a      	strb	r2, [r3, #0]
                    (0 << 3) | ((0x1 & ptx) << 3) | (0x3 & slot);

        // Offset70
        p_req[2] =  offset70;
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	7d3a      	ldrb	r2, [r7, #20]
 8000cfe:	701a      	strb	r2, [r3, #0]

        // Length70
        p_req[3] =  length70;
 8000d00:	6a3b      	ldr	r3, [r7, #32]
 8000d02:	3303      	adds	r3, #3
 8000d04:	7cba      	ldrb	r2, [r7, #18]
 8000d06:	701a      	strb	r2, [r3, #0]

        *req_size = 4;
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	801a      	strh	r2, [r3, #0]

        return_status = CRYPT_LIB_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	82fb      	strh	r3, [r7, #22]

    }while(0);

    return return_status;
 8000d12:	8afb      	ldrh	r3, [r7, #22]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <qi_auth_prx_challenge>:

uint16_t qi_auth_prx_challenge(uint8_t ptx, uint8_t slot, uint8_t* p_req, uint16_t* req_size)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60ba      	str	r2, [r7, #8]
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	73bb      	strb	r3, [r7, #14]
    uint16_t return_status = CRYPT_LIB_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	82fb      	strh	r3, [r7, #22]

    do {
        if (0 != slot)
 8000d36:	7bbb      	ldrb	r3, [r7, #14]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d000      	beq.n	8000d3e <qi_auth_prx_challenge+0x1e>
            break;
 8000d3c:	e02e      	b.n	8000d9c <qi_auth_prx_challenge+0x7c>

        if (NULL == p_req)
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d100      	bne.n	8000d46 <qi_auth_prx_challenge+0x26>
            break;
 8000d44:	e02a      	b.n	8000d9c <qi_auth_prx_challenge+0x7c>

        if ((NULL == req_size) || ( 2 > *req_size))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d027      	beq.n	8000d9c <qi_auth_prx_challenge+0x7c>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d923      	bls.n	8000d9c <qi_auth_prx_challenge+0x7c>
            break;

        // Version and Message type
        p_req[0] = (QI_AUTH_PROTO_VER << 4) | MSGTYPE_REQ_CHALLENGE;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	221b      	movs	r2, #27
 8000d58:	701a      	strb	r2, [r3, #0]

        //Reserved [3] + PTX[1] + Slot Mask[4]
        p_req[1] = (ptx << 4) | (0xf & slot) ;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d1      	uxtb	r1, r2
 8000d64:	7bba      	ldrb	r2, [r7, #14]
 8000d66:	f002 020f 	and.w	r2, r2, #15
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]

        //128bit Nonce
        return_status = qi_auth_prx_crypt_get_random(16, &p_req[2], *req_size - 2);
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c9a      	adds	r2, r3, #2
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	2010      	movs	r0, #16
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	f000 fcb7 	bl	80016f8 <qi_auth_prx_crypt_get_random>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	82fb      	strh	r3, [r7, #22]
        if (return_status != CRYPT_LIB_OK)
 8000d8e:	8afb      	ldrh	r3, [r7, #22]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d000      	beq.n	8000d96 <qi_auth_prx_challenge+0x76>
            break;
 8000d94:	e002      	b.n	8000d9c <qi_auth_prx_challenge+0x7c>

        *req_size = 18;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2212      	movs	r2, #18
 8000d9a:	801a      	strh	r2, [r3, #0]

    }while(0);

    return return_status;
 8000d9c:	8afb      	ldrh	r3, [r7, #22]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop

08000da8 <qi_auth_prx_verify_chall_auth>:
}

uint16_t qi_auth_prx_verify_chall_auth(uint8_t* p_certchain, uint16_t certchain_size,
                                          uint8_t* p_chall, uint16_t chall_size,
                                          uint8_t* p_challauth, uint16_t challauth_size)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b09a      	sub	sp, #104	; 0x68
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	461a      	mov	r2, r3
 8000db4:	460b      	mov	r3, r1
 8000db6:	817b      	strh	r3, [r7, #10]
 8000db8:	4613      	mov	r3, r2
 8000dba:	813b      	strh	r3, [r7, #8]
    uint16_t return_status = CRYPT_LIB_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    signature_container_t sign_vector;
    uint8_t signed_msg[54] = {0x41};
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	3304      	adds	r3, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	3304      	adds	r3, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	3304      	adds	r3, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	3304      	adds	r3, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	3304      	adds	r3, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	801a      	strh	r2, [r3, #0]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	2341      	movs	r3, #65	; 0x41
 8000e1c:	753b      	strb	r3, [r7, #20]
    //uint8_t digest_signed_msg[32];

    do {

        if ((NULL == p_certchain) || (0 == certchain_size) ||
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d04a      	beq.n	8000eba <qi_auth_prx_verify_chall_auth+0x112>
 8000e24:	897b      	ldrh	r3, [r7, #10]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d047      	beq.n	8000eba <qi_auth_prx_verify_chall_auth+0x112>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d044      	beq.n	8000eba <qi_auth_prx_verify_chall_auth+0x112>
            (NULL == p_chall) || (0 == chall_size) ||
 8000e30:	893b      	ldrh	r3, [r7, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d041      	beq.n	8000eba <qi_auth_prx_verify_chall_auth+0x112>
 8000e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d03e      	beq.n	8000eba <qi_auth_prx_verify_chall_auth+0x112>
            (NULL == p_challauth) || (0 == challauth_size))
 8000e3c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d03a      	beq.n	8000eba <qi_auth_prx_verify_chall_auth+0x112>
            break;

        //Getting the signature
        sign_vector.p_signature = &p_challauth[3];
 8000e44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e46:	3303      	adds	r3, #3
 8000e48:	657b      	str	r3, [r7, #84]	; 0x54
        sign_vector.signature_size = 64;
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

        //Getting the Public key
        sign_vector.p_public_key = &p_certchain[QI_AUTH_CRT_ROOTHASH_LEN + QI_AUTH_CRT_LEN + QI_AUTH_CRT_PUBKEY_OFF+2];
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	33b3      	adds	r3, #179	; 0xb3
 8000e54:	64fb      	str	r3, [r7, #76]	; 0x4c
        sign_vector.public_key_size = 33;
 8000e56:	2321      	movs	r3, #33	; 0x21
 8000e58:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

        //Calculating hash of the chain
        qi_auth_prx_crypt_generate_sha256(p_certchain, certchain_size, &signed_msg[1]);
 8000e5c:	897a      	ldrh	r2, [r7, #10]
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	3301      	adds	r3, #1
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	4611      	mov	r1, r2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f000 fb07 	bl	800147c <qi_auth_prx_crypt_generate_sha256>

        // Copy Challenge Request
        memcpy(&signed_msg[1 + 32], p_chall, 18);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	3321      	adds	r3, #33	; 0x21
 8000e74:	4618      	mov	r0, r3
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2212      	movs	r2, #18
 8000e7a:	f011 fb43 	bl	8012504 <memcpy>

        // Copy Challenge Auth response
        memcpy(&signed_msg[1 + 32 + 18], p_challauth, 3);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	3333      	adds	r3, #51	; 0x33
 8000e84:	4618      	mov	r0, r3
 8000e86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000e88:	2203      	movs	r2, #3
 8000e8a:	f011 fb3b 	bl	8012504 <memcpy>

        sign_vector.p_message = signed_msg;
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	65fb      	str	r3, [r7, #92]	; 0x5c
        sign_vector.message_size = sizeof(signed_msg);
 8000e94:	2336      	movs	r3, #54	; 0x36
 8000e96:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

        return_status = qi_auth_prx_crypt_verify_signature(&sign_vector);
 8000e9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fbd2 	bl	8001648 <qi_auth_prx_crypt_verify_signature>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        if(CRYPT_LIB_OK != return_status)
 8000eaa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d000      	beq.n	8000eb4 <qi_auth_prx_verify_chall_auth+0x10c>
        {
            break;
 8000eb2:	e002      	b.n	8000eba <qi_auth_prx_verify_chall_auth+0x112>
        }
        return_status = CRYPT_LIB_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    }while(0);

    return return_status;
 8000eba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3768      	adds	r7, #104	; 0x68
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop

08000ec8 <qi_auth_prx_init>:

    return return_status;
}

int32_t qi_auth_prx_init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	return (qi_auth_prx_crypt_init(0));
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 fbf9 	bl	80016c4 <qi_auth_prx_crypt_init>
 8000ed2:	4603      	mov	r3, r0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <optiga_callback>:

/**
 * Callback when optiga_util_xxxx operation is completed asynchronously
 */
static void optiga_callback(void * context, optiga_lib_status_t return_status)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <optiga_callback+0x1c>)
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	8013      	strh	r3, [r2, #0]
}
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	1ffed5ec 	.word	0x1ffed5ec

08000ef8 <optiga_init>:


static uint16_t optiga_init(uint8_t restore_from_hibernate)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
	uint16_t return_status = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	81fb      	strh	r3, [r7, #14]

	do
	{
		//Create an instance of optiga_util to open the application on OPTIGA.
		p_util = optiga_util_create(0, optiga_callback, NULL);
 8000f06:	2000      	movs	r0, #0
 8000f08:	494b      	ldr	r1, [pc, #300]	; (8001038 <optiga_init+0x140>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f008 fe28 	bl	8009b60 <optiga_util_create>
 8000f10:	4602      	mov	r2, r0
 8000f12:	4b4a      	ldr	r3, [pc, #296]	; (800103c <optiga_init+0x144>)
 8000f14:	601a      	str	r2, [r3, #0]

		//Create an instance of optiga_crypt to perform crypto operations on OPTIGA.
		p_crypt = optiga_crypt_create(0, optiga_callback, NULL);
 8000f16:	2000      	movs	r0, #0
 8000f18:	4947      	ldr	r1, [pc, #284]	; (8001038 <optiga_init+0x140>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f009 f8ce 	bl	800a0bc <optiga_crypt_create>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b47      	ldr	r3, [pc, #284]	; (8001040 <optiga_init+0x148>)
 8000f24:	601a      	str	r2, [r3, #0]

		if ((NULL == p_util) || (NULL == p_crypt))
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <optiga_init+0x144>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d07e      	beq.n	800102c <optiga_init+0x134>
 8000f2e:	4b44      	ldr	r3, [pc, #272]	; (8001040 <optiga_init+0x148>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d07a      	beq.n	800102c <optiga_init+0x134>

		/**
		 * Open the application on OPTIGA which is a precondition to perform any other operations
		 * using optiga_util_open_application
		 */
		CHECK_RESULT(optiga_util_open_application(p_util, restore_from_hibernate));
 8000f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3a:	81fb      	strh	r3, [r7, #14]
 8000f3c:	4b41      	ldr	r3, [pc, #260]	; (8001044 <optiga_init+0x14c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	801a      	strh	r2, [r3, #0]
 8000f42:	4b3e      	ldr	r3, [pc, #248]	; (800103c <optiga_init+0x144>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f008 fe62 	bl	8009c14 <optiga_util_open_application>
 8000f50:	4603      	mov	r3, r0
 8000f52:	81fb      	strh	r3, [r7, #14]
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d000      	beq.n	8000f5c <optiga_init+0x64>
 8000f5a:	e067      	b.n	800102c <optiga_init+0x134>
 8000f5c:	e002      	b.n	8000f64 <optiga_init+0x6c>
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f008 fd44 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <optiga_init+0x14c>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d0f7      	beq.n	8000f5e <optiga_init+0x66>
 8000f6e:	4b35      	ldr	r3, [pc, #212]	; (8001044 <optiga_init+0x14c>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d017      	beq.n	8000fa8 <optiga_init+0xb0>
 8000f78:	4b32      	ldr	r3, [pc, #200]	; (8001044 <optiga_init+0x14c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	81fb      	strh	r3, [r7, #14]
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <optiga_init+0x14c>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4830      	ldr	r0, [pc, #192]	; (8001048 <optiga_init+0x150>)
 8000f86:	4619      	mov	r1, r3
 8000f88:	f011 fb78 	bl	801267c <iprintf>
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <optiga_init+0x144>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f008 fe1d 	bl	8009bd0 <optiga_util_destroy>
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <optiga_init+0x148>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f009 f8c6 	bl	800a12c <optiga_crypt_destroy>
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f008 fcab 	bl	80098fc <pal_os_event_destroy>
 8000fa6:	e041      	b.n	800102c <optiga_init+0x134>

		// Maximum Power, Minimum Current limitation
		uint8_t current_limit = 15;
 8000fa8:	230f      	movs	r3, #15
 8000faa:	737b      	strb	r3, [r7, #13]
		CHECK_RESULT(optiga_util_write_data(p_util,
 8000fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb0:	81fb      	strh	r3, [r7, #14]
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <optiga_init+0x14c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	801a      	strh	r2, [r3, #0]
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <optiga_init+0x144>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f107 030d 	add.w	r3, r7, #13
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f24e 01c4 	movw	r1, #57540	; 0xe0c4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f008 feba 	bl	8009d48 <optiga_util_write_data>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	81fb      	strh	r3, [r7, #14]
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d000      	beq.n	8000fe0 <optiga_init+0xe8>
 8000fde:	e024      	b.n	800102a <optiga_init+0x132>
 8000fe0:	e002      	b.n	8000fe8 <optiga_init+0xf0>
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f008 fd02 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <optiga_init+0x14c>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d0f7      	beq.n	8000fe2 <optiga_init+0xea>
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <optiga_init+0x14c>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d017      	beq.n	800102c <optiga_init+0x134>
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <optiga_init+0x14c>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	81fb      	strh	r3, [r7, #14]
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <optiga_init+0x14c>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <optiga_init+0x150>)
 800100a:	4619      	mov	r1, r3
 800100c:	f011 fb36 	bl	801267c <iprintf>
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <optiga_init+0x144>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f008 fddb 	bl	8009bd0 <optiga_util_destroy>
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <optiga_init+0x148>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f009 f884 	bl	800a12c <optiga_crypt_destroy>
 8001024:	2000      	movs	r0, #0
 8001026:	f008 fc69 	bl	80098fc <pal_os_event_destroy>
 800102a:	bf00      	nop
		example_pair_host_and_optiga_using_pre_shared_secret();
#endif

	}while (FALSE);

	return return_status;
 800102c:	89fb      	ldrh	r3, [r7, #14]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	08000ed9 	.word	0x08000ed9
 800103c:	1ffed5f4 	.word	0x1ffed5f4
 8001040:	1ffed5f0 	.word	0x1ffed5f0
 8001044:	1ffed5ec 	.word	0x1ffed5ec
 8001048:	080137ec 	.word	0x080137ec

0800104c <mbedtls_ecp_decompress>:
 */


static int mbedtls_ecp_decompress( const mbedtls_ecp_group *grp, const unsigned char *input, size_t ilen,
								   unsigned char *output, size_t *olen, size_t osize )
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b093      	sub	sp, #76	; 0x4c
 8001050:	af02      	add	r7, sp, #8
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
    size_t plen;
    mbedtls_mpi r;
    mbedtls_mpi x;
    mbedtls_mpi n;

    plen = mbedtls_mpi_size( &grp->P );
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3304      	adds	r3, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f00d fd2a 	bl	800eab8 <mbedtls_mpi_size>
 8001064:	63b8      	str	r0, [r7, #56]	; 0x38

    *olen = 2 * plen + 1;
 8001066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800106e:	601a      	str	r2, [r3, #0]

    if( osize < *olen )
 8001070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001076:	429a      	cmp	r2, r3
 8001078:	d901      	bls.n	800107e <mbedtls_ecp_decompress+0x32>
        return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800107a:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <mbedtls_ecp_decompress+0x21c>)
 800107c:	e0ef      	b.n	800125e <mbedtls_ecp_decompress+0x212>

    if( ilen != plen + 1 )
 800107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <mbedtls_ecp_decompress+0x40>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <mbedtls_ecp_decompress+0x220>)
 800108a:	e0e8      	b.n	800125e <mbedtls_ecp_decompress+0x212>

    if( input[0] != 0x02 && input[0] != 0x03 )
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d005      	beq.n	80010a0 <mbedtls_ecp_decompress+0x54>
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d001      	beq.n	80010a0 <mbedtls_ecp_decompress+0x54>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800109c:	4b73      	ldr	r3, [pc, #460]	; (800126c <mbedtls_ecp_decompress+0x220>)
 800109e:	e0de      	b.n	800125e <mbedtls_ecp_decompress+0x212>

    // output will consist of 0x04|X|Y
    memcpy( output, input, ilen );
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	f011 fa2d 	bl	8012504 <memcpy>
    output[0] = 0x04;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2204      	movs	r2, #4
 80010ae:	701a      	strb	r2, [r3, #0]

    mbedtls_mpi_init( &r );
 80010b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00d fb81 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &x );
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4618      	mov	r0, r3
 80010c0:	f00d fb7c 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &n );
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00d fb77 	bl	800e7bc <mbedtls_mpi_init>

    // x <= input
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &x, input + 1, plen ) );
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3301      	adds	r3, #1
 80010d2:	f107 0220 	add.w	r2, r7, #32
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010dc:	f00d fcfa 	bl	800ead4 <mbedtls_mpi_read_binary>
 80010e0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80010e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <mbedtls_ecp_decompress+0x9e>
 80010e8:	e0a9      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>

    // r = x^2
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &r, &x, &x ) );
 80010ea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80010ee:	f107 0220 	add.w	r2, r7, #32
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	4608      	mov	r0, r1
 80010f8:	4611      	mov	r1, r2
 80010fa:	461a      	mov	r2, r3
 80010fc:	f00f fc66 	bl	80109cc <mbedtls_mpi_mul_mpi>
 8001100:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001104:	2b00      	cmp	r3, #0
 8001106:	d000      	beq.n	800110a <mbedtls_ecp_decompress+0xbe>
 8001108:	e099      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>

    // r = x^2 + a
    // AY: r = r - 3
    if( grp->A.p == NULL ) {
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <mbedtls_ecp_decompress+0xe2>
        // Special case where a is -3
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &r, &r, 3 ) );
 8001112:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	2203      	movs	r2, #3
 8001120:	f00e fa2e 	bl	800f580 <mbedtls_mpi_sub_int>
 8001124:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001128:	2b00      	cmp	r3, #0
 800112a:	d010      	beq.n	800114e <mbedtls_ecp_decompress+0x102>
 800112c:	e087      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>
    } else {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &r, &r, &grp->A ) );
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3310      	adds	r3, #16
 8001132:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001136:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800113a:	4608      	mov	r0, r1
 800113c:	4611      	mov	r1, r2
 800113e:	461a      	mov	r2, r3
 8001140:	f00e f96a 	bl	800f418 <mbedtls_mpi_add_mpi>
 8001144:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d000      	beq.n	800114e <mbedtls_ecp_decompress+0x102>
 800114c:	e077      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>
    }

    // r = x^3 + ax
    // AY: r = r * x
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &r, &r, &x ) );
 800114e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001152:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	4608      	mov	r0, r1
 800115c:	4611      	mov	r1, r2
 800115e:	461a      	mov	r2, r3
 8001160:	f00f fc34 	bl	80109cc <mbedtls_mpi_mul_mpi>
 8001164:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001168:	2b00      	cmp	r3, #0
 800116a:	d000      	beq.n	800116e <mbedtls_ecp_decompress+0x122>
 800116c:	e067      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>
		BYTES_TO_T_UINT_8( 0xF6, 0xB0, 0x53, 0xCC, 0xB0, 0x06, 0x1D, 0x65 ),
		BYTES_TO_T_UINT_8( 0xBC, 0x86, 0x98, 0x76, 0x55, 0xBD, 0xEB, 0xB3 ),
		BYTES_TO_T_UINT_8( 0xE7, 0x93, 0x3A, 0xAA, 0xD8, 0x35, 0xC6, 0x5A ),
	};
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &r, &r, &grp->B ) );
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	331c      	adds	r3, #28
 8001172:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001176:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800117a:	4608      	mov	r0, r1
 800117c:	4611      	mov	r1, r2
 800117e:	461a      	mov	r2, r3
 8001180:	f00e f94a 	bl	800f418 <mbedtls_mpi_add_mpi>
 8001184:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001188:	2b00      	cmp	r3, #0
 800118a:	d000      	beq.n	800118e <mbedtls_ecp_decompress+0x142>
 800118c:	e057      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>
		BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),
		BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),
		BYTES_TO_T_UINT_8( 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),
	};
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &n, &grp->P, 1 ) );
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3304      	adds	r3, #4
 8001192:	f107 0214 	add.w	r2, r7, #20
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	2201      	movs	r2, #1
 800119c:	f00e f9cc 	bl	800f538 <mbedtls_mpi_add_int>
 80011a0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80011a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d000      	beq.n	80011aa <mbedtls_ecp_decompress+0x15e>
 80011a8:	e049      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>

    // n = (P + 1) / 4
    // AY: n = n / 2
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &n, 2 ) );
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4618      	mov	r0, r3
 80011b0:	2102      	movs	r1, #2
 80011b2:	f00d fdef 	bl	800ed94 <mbedtls_mpi_shift_r>
 80011b6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80011b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d000      	beq.n	80011c0 <mbedtls_ecp_decompress+0x174>
 80011be:	e03e      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>

    // r ^ ((P + 1) / 4) (mod p)
    // Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
    // mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR
    // AY: r = (r ^ n) mod p
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &r, &r, &n, &grp->P, NULL ) );
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1d1c      	adds	r4, r3, #4
 80011c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80011c8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80011cc:	f107 0214 	add.w	r2, r7, #20
 80011d0:	2300      	movs	r3, #0
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4623      	mov	r3, r4
 80011d6:	f010 f8e9 	bl	80113ac <mbedtls_mpi_exp_mod>
 80011da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80011dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d000      	beq.n	80011e4 <mbedtls_ecp_decompress+0x198>
 80011e2:	e02c      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>
    // Select solution that has the correct "sign" (equals odd/even solution in finite group)
    // (input == 3): 0 == r[0] & 0x01
    //                  -> True: r = p - r
    // (input == 2): 1 ==  r[0] & 0x01
    //				    -> True: r = p - r
    if( (input[0] == 0x03) != mbedtls_mpi_get_bit( &r, 0 ) ) {
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461c      	mov	r4, r3
 80011f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f8:	4618      	mov	r0, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f00d fbe6 	bl	800e9cc <mbedtls_mpi_get_bit>
 8001200:	4603      	mov	r3, r0
 8001202:	429c      	cmp	r4, r3
 8001204:	d00f      	beq.n	8001226 <mbedtls_ecp_decompress+0x1da>
        // r = p - r
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &r, &grp->P, &r ) );
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1d1a      	adds	r2, r3, #4
 800120a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	4608      	mov	r0, r1
 8001214:	4611      	mov	r1, r2
 8001216:	461a      	mov	r2, r3
 8001218:	f00e f946 	bl	800f4a8 <mbedtls_mpi_sub_mpi>
 800121c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800121e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001220:	2b00      	cmp	r3, #0
 8001222:	d000      	beq.n	8001226 <mbedtls_ecp_decompress+0x1da>
 8001224:	e00b      	b.n	800123e <mbedtls_ecp_decompress+0x1f2>
    }

    // y => output
    ret = mbedtls_mpi_write_binary( &r, output + 1 + plen, plen );
 8001226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001228:	3301      	adds	r3, #1
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001238:	f00d fca8 	bl	800eb8c <mbedtls_mpi_write_binary>
 800123c:	63f8      	str	r0, [r7, #60]	; 0x3c

cleanup:
    mbedtls_mpi_free( &r );
 800123e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001242:	4618      	mov	r0, r3
 8001244:	f00d facc 	bl	800e7e0 <mbedtls_mpi_free>
    mbedtls_mpi_free( &x );
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4618      	mov	r0, r3
 800124e:	f00d fac7 	bl	800e7e0 <mbedtls_mpi_free>
    mbedtls_mpi_free( &n );
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4618      	mov	r0, r3
 8001258:	f00d fac2 	bl	800e7e0 <mbedtls_mpi_free>

    return( ret );
 800125c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800125e:	4618      	mov	r0, r3
 8001260:	3744      	adds	r7, #68	; 0x44
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
 8001266:	bf00      	nop
 8001268:	ffffb100 	.word	0xffffb100
 800126c:	ffffb080 	.word	0xffffb080

08001270 <qi_auth_crypt_verify_ecc_signature>:
 * \brief Verifies the ECC signature using the given public key.
 */
static uint16_t qi_auth_crypt_verify_ecc_signature(const uint8_t* p_pubkey, uint8_t pubkey_size,
		                                      const uint8_t* p_data, uint16_t data_size,
											  const uint8_t* p_sign, uint8_t sign_size)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b0e8      	sub	sp, #416	; 0x1a0
 8001274:	af04      	add	r7, sp, #16
 8001276:	f107 040c 	add.w	r4, r7, #12
 800127a:	6020      	str	r0, [r4, #0]
 800127c:	4608      	mov	r0, r1
 800127e:	1d39      	adds	r1, r7, #4
 8001280:	600a      	str	r2, [r1, #0]
 8001282:	4619      	mov	r1, r3
 8001284:	f107 030b 	add.w	r3, r7, #11
 8001288:	4602      	mov	r2, r0
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	460a      	mov	r2, r1
 8001292:	801a      	strh	r2, [r3, #0]
	uint16_t return_status = (int32_t)CRYPT_LIB_VERIFY_SIGN_FAIL;
 8001294:	2303      	movs	r3, #3
 8001296:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
    uint8_t p_digest[32];
    uint8_t decompr_pubkey[70];
    uint8_t asn1_signature[71];
    size_t asn1_signature_len = 71;
 800129a:	2347      	movs	r3, #71	; 0x47
 800129c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    size_t pubkey_len = 65;
 80012a0:	2341      	movs	r3, #65	; 0x41
 80012a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    uint8_t* p_pk = NULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    // Public Key
    mbedtls_ecp_point Q;
    mbedtls_mpi r;
    mbedtls_mpi s;

    mbedtls_ecp_point_init( &Q );
 80012ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012b0:	4618      	mov	r0, r3
 80012b2:	f010 fc79 	bl	8011ba8 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &r );
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00d fa7e 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00d fa79 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_ecp_group_init( &grp );
 80012ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ce:	4618      	mov	r0, r3
 80012d0:	f010 fc80 	bl	8011bd4 <mbedtls_ecp_group_init>

    mbedtls_ecp_group_load(&grp, MBEDTLS_ECP_DP_SECP256R1);
 80012d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d8:	4618      	mov	r0, r3
 80012da:	2103      	movs	r1, #3
 80012dc:	f010 fd9a 	bl	8011e14 <mbedtls_ecp_group_load>

    do
    {
        if((NULL == p_pubkey)||(NULL == p_data)||(NULL == p_sign))
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80b9 	beq.w	800145e <qi_auth_crypt_verify_ecc_signature+0x1ee>
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80b4 	beq.w	800145e <qi_auth_crypt_verify_ecc_signature+0x1ee>
 80012f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80af 	beq.w	800145e <qi_auth_crypt_verify_ecc_signature+0x1ee>
        {
            break;
        }

        if (p_pubkey[0] != 0x04) {
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d03c      	beq.n	8001386 <qi_auth_crypt_verify_ecc_signature+0x116>
            mbedtls_ecp_decompress(&grp, p_pubkey, pubkey_size, decompr_pubkey + 3, &pubkey_len, 65);
 800130c:	f107 030b 	add.w	r3, r7, #11
 8001310:	781d      	ldrb	r5, [r3, #0]
 8001312:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800131e:	1cd4      	adds	r4, r2, #3
 8001320:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001324:	9200      	str	r2, [sp, #0]
 8001326:	2241      	movs	r2, #65	; 0x41
 8001328:	9201      	str	r2, [sp, #4]
 800132a:	4608      	mov	r0, r1
 800132c:	6819      	ldr	r1, [r3, #0]
 800132e:	462a      	mov	r2, r5
 8001330:	4623      	mov	r3, r4
 8001332:	f7ff fe8b 	bl	800104c <mbedtls_ecp_decompress>
            p_pk = decompr_pubkey;
 8001336:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800133a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            p_pk[0] = 0x03;
 800133e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001342:	2203      	movs	r2, #3
 8001344:	701a      	strb	r2, [r3, #0]
            p_pk[1] = 0x42;
 8001346:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800134a:	3301      	adds	r3, #1
 800134c:	2242      	movs	r2, #66	; 0x42
 800134e:	701a      	strb	r2, [r3, #0]
            p_pk[2] = 0x00;
 8001350:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001354:	3302      	adds	r3, #2
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
            pubkey_len += 3;
 800135a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800135e:	3303      	adds	r3, #3
 8001360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        } else {
        	// WPC specifies so far only compressed public keys
        	break;
        }

        return_status = qi_auth_prx_crypt_generate_sha256(p_data, data_size, p_digest);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	f107 0208 	add.w	r2, r7, #8
 800136a:	8811      	ldrh	r1, [r2, #0]
 800136c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	f000 f883 	bl	800147c <qi_auth_prx_crypt_generate_sha256>
 8001376:	4603      	mov	r3, r0
 8001378:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
        if(CRYPT_LIB_OK != return_status)
 800137c:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <qi_auth_crypt_verify_ecc_signature+0x11a>
 8001384:	e000      	b.n	8001388 <qi_auth_crypt_verify_ecc_signature+0x118>
            p_pk[1] = 0x42;
            p_pk[2] = 0x00;
            pubkey_len += 3;
        } else {
        	// WPC specifies so far only compressed public keys
        	break;
 8001386:	e06a      	b.n	800145e <qi_auth_crypt_verify_ecc_signature+0x1ee>
        }

        return_status = qi_auth_prx_crypt_generate_sha256(p_data, data_size, p_digest);
        if(CRYPT_LIB_OK != return_status)
        {
            break;
 8001388:	e069      	b.n	800145e <qi_auth_crypt_verify_ecc_signature+0x1ee>
        }

        ecdsa_rs_to_asn1_integers(p_sign, p_sign + 32, 32, asn1_signature, &asn1_signature_len);
 800138a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800138e:	f103 0220 	add.w	r2, r3, #32
 8001392:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8001396:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80013a0:	4611      	mov	r1, r2
 80013a2:	2220      	movs	r2, #32
 80013a4:	4623      	mov	r3, r4
 80013a6:	f00d f8cd 	bl	800e544 <ecdsa_rs_to_asn1_integers>

        public_key_from_host_t pkey_details = {
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	809a      	strh	r2, [r3, #4]
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2203      	movs	r2, #3
 80013c6:	719a      	strb	r2, [r3, #6]
        		                               p_pk,
                                               pubkey_len,
                                               (uint8_t)OPTIGA_ECC_CURVE_NIST_P_256
                                               };
        CHECK_RESULT(optiga_crypt_ecdsa_verify (p_crypt,
 80013c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013cc:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <qi_auth_crypt_verify_ecc_signature+0x1fc>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <qi_auth_crypt_verify_ecc_signature+0x200>)
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013de:	b29b      	uxth	r3, r3
 80013e0:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80013e4:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	2220      	movs	r2, #32
 80013fa:	4623      	mov	r3, r4
 80013fc:	f008 ffa0 	bl	800a340 <optiga_crypt_ecdsa_verify>
 8001400:	4603      	mov	r3, r0
 8001402:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001406:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 800140a:	2b00      	cmp	r3, #0
 800140c:	d000      	beq.n	8001410 <qi_auth_crypt_verify_ecc_signature+0x1a0>
 800140e:	e025      	b.n	800145c <qi_auth_crypt_verify_ecc_signature+0x1ec>
 8001410:	e002      	b.n	8001418 <qi_auth_crypt_verify_ecc_signature+0x1a8>
 8001412:	2001      	movs	r0, #1
 8001414:	f008 faea 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <qi_auth_crypt_verify_ecc_signature+0x1fc>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d0f7      	beq.n	8001412 <qi_auth_crypt_verify_ecc_signature+0x1a2>
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <qi_auth_crypt_verify_ecc_signature+0x1fc>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d018      	beq.n	800145e <qi_auth_crypt_verify_ecc_signature+0x1ee>
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <qi_auth_crypt_verify_ecc_signature+0x1fc>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <qi_auth_crypt_verify_ecc_signature+0x1fc>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	480e      	ldr	r0, [pc, #56]	; (8001474 <qi_auth_crypt_verify_ecc_signature+0x204>)
 800143c:	4619      	mov	r1, r3
 800143e:	f011 f91d 	bl	801267c <iprintf>
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <qi_auth_crypt_verify_ecc_signature+0x208>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f008 fbc2 	bl	8009bd0 <optiga_util_destroy>
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <qi_auth_crypt_verify_ecc_signature+0x200>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f008 fe6b 	bl	800a12c <optiga_crypt_destroy>
 8001456:	2000      	movs	r0, #0
 8001458:	f008 fa50 	bl	80098fc <pal_os_event_destroy>
 800145c:	bf00      	nop
												asn1_signature_len,
												OPTIGA_CRYPT_HOST_DATA,
												&pkey_details))
    }while(FALSE);

    return return_status;
 800145e:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
}
 8001462:	4618      	mov	r0, r3
 8001464:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001468:	46bd      	mov	sp, r7
 800146a:	bdb0      	pop	{r4, r5, r7, pc}
 800146c:	1ffed5ec 	.word	0x1ffed5ec
 8001470:	1ffed5f0 	.word	0x1ffed5f0
 8001474:	080137ec 	.word	0x080137ec
 8001478:	1ffed5f4 	.word	0x1ffed5f4

0800147c <qi_auth_prx_crypt_generate_sha256>:

/**
 * \brief Generate a SHA256 hash on the message.
 */
uint16_t qi_auth_prx_crypt_generate_sha256(const uint8_t* p_input, uint16_t inlen, uint8_t* p_digest)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ac      	sub	sp, #176	; 0xb0
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	460b      	mov	r3, r1
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	817b      	strh	r3, [r7, #10]
	uint16_t  return_status = CRYPT_LIB_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	optiga_hash_context_t hash_ctx;
	uint8_t hash_context_buffer [130];

    do
    {
    	hash_ctx.hash_algo = OPTIGA_HASH_TYPE_SHA_256;
 8001490:	23e2      	movs	r3, #226	; 0xe2
 8001492:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		hash_ctx.context_buffer = hash_context_buffer;
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		hash_ctx.context_buffer_length = sizeof(hash_context_buffer);
 800149e:	2382      	movs	r3, #130	; 0x82
 80014a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    	hash_data_host.buffer = p_input;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		hash_data_host.length = inlen;
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		CHECK_RESULT(optiga_crypt_hash_start(p_crypt, &hash_ctx));
 80014b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80014b8:	4b5f      	ldr	r3, [pc, #380]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	4b5f      	ldr	r3, [pc, #380]	; (800163c <qi_auth_prx_crypt_generate_sha256+0x1c0>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f008 fe7f 	bl	800a1cc <optiga_crypt_hash_start>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80014d4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d000      	beq.n	80014de <qi_auth_prx_crypt_generate_sha256+0x62>
 80014dc:	e0a6      	b.n	800162c <qi_auth_prx_crypt_generate_sha256+0x1b0>
 80014de:	e002      	b.n	80014e6 <qi_auth_prx_crypt_generate_sha256+0x6a>
 80014e0:	2001      	movs	r0, #1
 80014e2:	f008 fa83 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 80014e6:	4b54      	ldr	r3, [pc, #336]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d0f7      	beq.n	80014e0 <qi_auth_prx_crypt_generate_sha256+0x64>
 80014f0:	4b51      	ldr	r3, [pc, #324]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d018      	beq.n	800152c <qi_auth_prx_crypt_generate_sha256+0xb0>
 80014fa:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	484d      	ldr	r0, [pc, #308]	; (8001640 <qi_auth_prx_crypt_generate_sha256+0x1c4>)
 800150a:	4619      	mov	r1, r3
 800150c:	f011 f8b6 	bl	801267c <iprintf>
 8001510:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <qi_auth_prx_crypt_generate_sha256+0x1c8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f008 fb5b 	bl	8009bd0 <optiga_util_destroy>
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <qi_auth_prx_crypt_generate_sha256+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f008 fe04 	bl	800a12c <optiga_crypt_destroy>
 8001524:	2000      	movs	r0, #0
 8001526:	f008 f9e9 	bl	80098fc <pal_os_event_destroy>
 800152a:	e07f      	b.n	800162c <qi_auth_prx_crypt_generate_sha256+0x1b0>
		CHECK_RESULT(optiga_crypt_hash_update(p_crypt, &hash_ctx, OPTIGA_CRYPT_HOST_DATA, &hash_data_host));
 800152c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001530:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001534:	4b40      	ldr	r3, [pc, #256]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 8001536:	2201      	movs	r2, #1
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <qi_auth_prx_crypt_generate_sha256+0x1c0>)
 800153c:	6819      	ldr	r1, [r3, #0]
 800153e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001542:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001546:	4608      	mov	r0, r1
 8001548:	4611      	mov	r1, r2
 800154a:	2201      	movs	r2, #1
 800154c:	f008 fe6e 	bl	800a22c <optiga_crypt_hash_update>
 8001550:	4603      	mov	r3, r0
 8001552:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001556:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800155a:	2b00      	cmp	r3, #0
 800155c:	d000      	beq.n	8001560 <qi_auth_prx_crypt_generate_sha256+0xe4>
 800155e:	e065      	b.n	800162c <qi_auth_prx_crypt_generate_sha256+0x1b0>
 8001560:	e002      	b.n	8001568 <qi_auth_prx_crypt_generate_sha256+0xec>
 8001562:	2001      	movs	r0, #1
 8001564:	f008 fa42 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8001568:	4b33      	ldr	r3, [pc, #204]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d0f7      	beq.n	8001562 <qi_auth_prx_crypt_generate_sha256+0xe6>
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d018      	beq.n	80015ae <qi_auth_prx_crypt_generate_sha256+0x132>
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	482d      	ldr	r0, [pc, #180]	; (8001640 <qi_auth_prx_crypt_generate_sha256+0x1c4>)
 800158c:	4619      	mov	r1, r3
 800158e:	f011 f875 	bl	801267c <iprintf>
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <qi_auth_prx_crypt_generate_sha256+0x1c8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f008 fb1a 	bl	8009bd0 <optiga_util_destroy>
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <qi_auth_prx_crypt_generate_sha256+0x1c0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 fdc3 	bl	800a12c <optiga_crypt_destroy>
 80015a6:	2000      	movs	r0, #0
 80015a8:	f008 f9a8 	bl	80098fc <pal_os_event_destroy>
 80015ac:	e03e      	b.n	800162c <qi_auth_prx_crypt_generate_sha256+0x1b0>
		CHECK_RESULT(optiga_crypt_hash_finalize(p_crypt, &hash_ctx, p_digest));
 80015ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	801a      	strh	r2, [r3, #0]
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <qi_auth_prx_crypt_generate_sha256+0x1c0>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f008 fe65 	bl	800a298 <optiga_crypt_hash_finalize>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80015d4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d000      	beq.n	80015de <qi_auth_prx_crypt_generate_sha256+0x162>
 80015dc:	e025      	b.n	800162a <qi_auth_prx_crypt_generate_sha256+0x1ae>
 80015de:	e002      	b.n	80015e6 <qi_auth_prx_crypt_generate_sha256+0x16a>
 80015e0:	2001      	movs	r0, #1
 80015e2:	f008 fa03 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d0f7      	beq.n	80015e0 <qi_auth_prx_crypt_generate_sha256+0x164>
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d018      	beq.n	800162c <qi_auth_prx_crypt_generate_sha256+0x1b0>
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <qi_auth_prx_crypt_generate_sha256+0x1bc>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <qi_auth_prx_crypt_generate_sha256+0x1c4>)
 800160a:	4619      	mov	r1, r3
 800160c:	f011 f836 	bl	801267c <iprintf>
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <qi_auth_prx_crypt_generate_sha256+0x1c8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f008 fadb 	bl	8009bd0 <optiga_util_destroy>
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <qi_auth_prx_crypt_generate_sha256+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f008 fd84 	bl	800a12c <optiga_crypt_destroy>
 8001624:	2000      	movs	r0, #0
 8001626:	f008 f969 	bl	80098fc <pal_os_event_destroy>
 800162a:	bf00      	nop
    }while(FALSE);

	return CRYPT_LIB_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	37b0      	adds	r7, #176	; 0xb0
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	1ffed5ec 	.word	0x1ffed5ec
 800163c:	1ffed5f0 	.word	0x1ffed5f0
 8001640:	080137ec 	.word	0x080137ec
 8001644:	1ffed5f4 	.word	0x1ffed5f4

08001648 <qi_auth_prx_crypt_verify_signature>:
    return return_status;
}


uint16_t  qi_auth_prx_crypt_verify_signature(const signature_container_t *p_signature_c)
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af02      	add	r7, sp, #8
 800164e:	6078      	str	r0, [r7, #4]
	uint16_t return_status  = CRYPT_LIB_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	81fb      	strh	r3, [r7, #14]
    do
    {
        if((NULL == p_signature_c)||
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d02e      	beq.n	80016b8 <qi_auth_prx_crypt_verify_signature+0x70>
            (NULL == p_signature_c->p_message)||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
uint16_t  qi_auth_prx_crypt_verify_signature(const signature_container_t *p_signature_c)
{
	uint16_t return_status  = CRYPT_LIB_ERROR;
    do
    {
        if((NULL == p_signature_c)||
 800165e:	2b00      	cmp	r3, #0
 8001660:	d02a      	beq.n	80016b8 <qi_auth_prx_crypt_verify_signature+0x70>
            (NULL == p_signature_c->p_message)||
            (NULL == p_signature_c->p_signature)||
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
{
	uint16_t return_status  = CRYPT_LIB_ERROR;
    do
    {
        if((NULL == p_signature_c)||
            (NULL == p_signature_c->p_message)||
 8001666:	2b00      	cmp	r3, #0
 8001668:	d026      	beq.n	80016b8 <qi_auth_prx_crypt_verify_signature+0x70>
            (NULL == p_signature_c->p_signature)||
            (NULL == p_signature_c->p_public_key))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
	uint16_t return_status  = CRYPT_LIB_ERROR;
    do
    {
        if((NULL == p_signature_c)||
            (NULL == p_signature_c->p_message)||
            (NULL == p_signature_c->p_signature)||
 800166e:	2b00      	cmp	r3, #0
 8001670:	d022      	beq.n	80016b8 <qi_auth_prx_crypt_verify_signature+0x70>
            (NULL == p_signature_c->p_public_key))
        {
            break;
        }
        //check if length is equal to zero
        if((ZERO_LENGTH == p_signature_c->message_size)||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8a9b      	ldrh	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <qi_auth_prx_crypt_verify_signature+0x42>
            (ZERO_LENGTH == p_signature_c->signature_size)||
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b1b      	ldrb	r3, [r3, #12]
            (NULL == p_signature_c->p_public_key))
        {
            break;
        }
        //check if length is equal to zero
        if((ZERO_LENGTH == p_signature_c->message_size)||
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <qi_auth_prx_crypt_verify_signature+0x42>
            (ZERO_LENGTH == p_signature_c->signature_size)||
            (ZERO_LENGTH == p_signature_c->public_key_size))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	791b      	ldrb	r3, [r3, #4]
        {
            break;
        }
        //check if length is equal to zero
        if((ZERO_LENGTH == p_signature_c->message_size)||
            (ZERO_LENGTH == p_signature_c->signature_size)||
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <qi_auth_prx_crypt_verify_signature+0x48>
            (ZERO_LENGTH == p_signature_c->public_key_size))
        {
        	return_status = (int32_t)CRYPT_LIB_LENZERO_ERROR;
 800168a:	2304      	movs	r3, #4
 800168c:	81fb      	strh	r3, [r7, #14]
            break;
 800168e:	e013      	b.n	80016b8 <qi_auth_prx_crypt_verify_signature+0x70>
        }
        //mbedtls_memory_buffer_alloc_init(mbedtls_memmory_buffer, MBEDTLS_BUFFER_SIZE);
        return_status = qi_auth_crypt_verify_ecc_signature(p_signature_c->p_public_key, p_signature_c->public_key_size,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7919      	ldrb	r1, [r3, #4]
                                                  p_signature_c->p_message, p_signature_c->message_size,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691d      	ldr	r5, [r3, #16]
        {
        	return_status = (int32_t)CRYPT_LIB_LENZERO_ERROR;
            break;
        }
        //mbedtls_memory_buffer_alloc_init(mbedtls_memmory_buffer, MBEDTLS_BUFFER_SIZE);
        return_status = qi_auth_crypt_verify_ecc_signature(p_signature_c->p_public_key, p_signature_c->public_key_size,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	8a9c      	ldrh	r4, [r3, #20]
                                                  p_signature_c->p_message, p_signature_c->message_size,
                                                  p_signature_c->p_signature, p_signature_c->signature_size);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
        {
        	return_status = (int32_t)CRYPT_LIB_LENZERO_ERROR;
            break;
        }
        //mbedtls_memory_buffer_alloc_init(mbedtls_memmory_buffer, MBEDTLS_BUFFER_SIZE);
        return_status = qi_auth_crypt_verify_ecc_signature(p_signature_c->p_public_key, p_signature_c->public_key_size,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7b1b      	ldrb	r3, [r3, #12]
 80016a8:	9200      	str	r2, [sp, #0]
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	462a      	mov	r2, r5
 80016ae:	4623      	mov	r3, r4
 80016b0:	f7ff fdde 	bl	8001270 <qi_auth_crypt_verify_ecc_signature>
 80016b4:	4603      	mov	r3, r0
 80016b6:	81fb      	strh	r3, [r7, #14]
                                                  p_signature_c->p_message, p_signature_c->message_size,
                                                  p_signature_c->p_signature, p_signature_c->signature_size);
    }while(FALSE);
    return return_status;
 80016b8:	89fb      	ldrh	r3, [r7, #14]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	bf00      	nop

080016c4 <qi_auth_prx_crypt_init>:

int32_t qi_auth_prx_crypt_init(uint8_t restore_from_hibernate)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	uint16_t return_status  = CRYPT_LIB_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	81fb      	strh	r3, [r7, #14]

	return_status = optiga_init(restore_from_hibernate);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fc0f 	bl	8000ef8 <optiga_init>
 80016da:	4603      	mov	r3, r0
 80016dc:	81fb      	strh	r3, [r7, #14]
	if (CRYPT_LIB_OK != return_status)
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <qi_auth_prx_crypt_init+0x26>
	{
		printf("Error #1: optiga_init\r\n");
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <qi_auth_prx_crypt_init+0x30>)
 80016e6:	f011 f83f 	bl	8012768 <puts>
	}

	return return_status;
 80016ea:	89fb      	ldrh	r3, [r7, #14]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	08013814 	.word	0x08013814

080016f8 <qi_auth_prx_crypt_get_random>:
	return return_status;
}


uint16_t  qi_auth_prx_crypt_get_random(uint16_t random_len, uint8_t *p_random, uint16_t random_size)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
 8001704:	4613      	mov	r3, r2
 8001706:	80bb      	strh	r3, [r7, #4]
	uint16_t return_status = CRYPT_LIB_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	81fb      	strh	r3, [r7, #14]

    do
    {
        if((NULL == p_random)||(0 == random_size))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03c      	beq.n	800178c <qi_auth_prx_crypt_get_random+0x94>
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d039      	beq.n	800178c <qi_auth_prx_crypt_get_random+0x94>
        {
            break;
        }

        CHECK_RESULT(optiga_crypt_random(p_crypt, OPTIGA_RNG_TYPE_TRNG, p_random, random_len));
 8001718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800171c:	81fb      	strh	r3, [r7, #14]
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <qi_auth_prx_crypt_get_random+0xa0>)
 8001720:	2201      	movs	r2, #1
 8001722:	801a      	strh	r2, [r3, #0]
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <qi_auth_prx_crypt_get_random+0xa4>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	4610      	mov	r0, r2
 800172c:	2100      	movs	r1, #0
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	f008 fd1e 	bl	800a170 <optiga_crypt_random>
 8001734:	4603      	mov	r3, r0
 8001736:	81fb      	strh	r3, [r7, #14]
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d000      	beq.n	8001740 <qi_auth_prx_crypt_get_random+0x48>
 800173e:	e024      	b.n	800178a <qi_auth_prx_crypt_get_random+0x92>
 8001740:	e002      	b.n	8001748 <qi_auth_prx_crypt_get_random+0x50>
 8001742:	2001      	movs	r0, #1
 8001744:	f008 f952 	bl	80099ec <pal_os_timer_delay_in_milliseconds>
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <qi_auth_prx_crypt_get_random+0xa0>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d0f7      	beq.n	8001742 <qi_auth_prx_crypt_get_random+0x4a>
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <qi_auth_prx_crypt_get_random+0xa0>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d017      	beq.n	800178c <qi_auth_prx_crypt_get_random+0x94>
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <qi_auth_prx_crypt_get_random+0xa0>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	81fb      	strh	r3, [r7, #14]
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <qi_auth_prx_crypt_get_random+0xa0>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <qi_auth_prx_crypt_get_random+0xa8>)
 800176a:	4619      	mov	r1, r3
 800176c:	f010 ff86 	bl	801267c <iprintf>
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <qi_auth_prx_crypt_get_random+0xac>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f008 fa2b 	bl	8009bd0 <optiga_util_destroy>
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <qi_auth_prx_crypt_get_random+0xa4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f008 fcd4 	bl	800a12c <optiga_crypt_destroy>
 8001784:	2000      	movs	r0, #0
 8001786:	f008 f8b9 	bl	80098fc <pal_os_event_destroy>
 800178a:	bf00      	nop

    }while(FALSE);
    return return_status;
 800178c:	89fb      	ldrh	r3, [r7, #14]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	1ffed5ec 	.word	0x1ffed5ec
 800179c:	1ffed5f0 	.word	0x1ffed5f0
 80017a0:	080137ec 	.word	0x080137ec
 80017a4:	1ffed5f4 	.word	0x1ffed5f4

080017a8 <qi_auth_ptx_prx_test>:
#include "qi_auth_fixtures.h"
#include "optiga/common/optiga_lib_logger.h"


int qi_auth_ptx_prx_test(void)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	f5ad 6dfd 	sub.w	sp, sp, #2024	; 0x7e8
 80017ae:	af02      	add	r7, sp, #8
    uint8_t req[500];
    uint16_t req_size = 500;
 80017b0:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 80017b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017b8:	801a      	strh	r2, [r3, #0]
    uint8_t resp[500];
    uint16_t resp_size = 500;
 80017ba:	f207 33ee 	addw	r3, r7, #1006	; 0x3ee
 80017be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017c2:	801a      	strh	r2, [r3, #0]

    uint8_t certchain[1000];
    uint16_t certchain_size = 1000;
 80017c4:	1cbb      	adds	r3, r7, #2
 80017c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ca:	801a      	strh	r2, [r3, #0]
    int status = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc

    optiga_lib_print_string_with_newline("Start WPC Qi Auth testing routines\r\n");
 80017d2:	4873      	ldr	r0, [pc, #460]	; (80019a0 <qi_auth_ptx_prx_test+0x1f8>)
 80017d4:	f00a fdfe 	bl	800c3d4 <optiga_lib_print_string_with_newline>

    qi_auth_ptx_init();
 80017d8:	f7fe fe9e 	bl	8000518 <qi_auth_ptx_init>
    qi_auth_prx_init();
 80017dc:	f7ff fb74 	bl	8000ec8 <qi_auth_prx_init>

    do
    {
        // Test API
    	// Prepare GET_DIGESTS message
        if (0 != qi_auth_prx_get_digests(0, 0, req, &req_size))
 80017e0:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80017e4:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 80017e8:	2000      	movs	r0, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	f7ff fa02 	bl	8000bf4 <qi_auth_prx_get_digests>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <qi_auth_ptx_prx_test+0x56>
        {
            optiga_lib_print_string_with_newline("Error #1: Get Digest\r\n");
 80017f6:	486b      	ldr	r0, [pc, #428]	; (80019a4 <qi_auth_ptx_prx_test+0x1fc>)
 80017f8:	f00a fdec 	bl	800c3d4 <optiga_lib_print_string_with_newline>
 80017fc:	e00c      	b.n	8001818 <qi_auth_ptx_prx_test+0x70>
        }
        else
        {
            optiga_lib_print_string_with_newline("Test #1: Get Digest OK\r\n");
 80017fe:	486a      	ldr	r0, [pc, #424]	; (80019a8 <qi_auth_ptx_prx_test+0x200>)
 8001800:	f00a fde8 	bl	800c3d4 <optiga_lib_print_string_with_newline>
            optiga_lib_print_array_hex_format(req, req_size, OPTIGA_LIB_LOGGER_COLOR_GREEN);
 8001804:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	4a66      	ldr	r2, [pc, #408]	; (80019ac <qi_auth_ptx_prx_test+0x204>)
 8001814:	f00a fe02 	bl	800c41c <optiga_lib_print_array_hex_format>
        }

        // Prepare DIGESTS message
        if (0 != qi_auth_ptx_digests(0, resp, &resp_size))
 8001818:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800181c:	f207 33ee 	addw	r3, r7, #1006	; 0x3ee
 8001820:	2000      	movs	r0, #0
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	f7fe fd39 	bl	800029c <qi_auth_ptx_digests>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <qi_auth_ptx_prx_test+0x90>
        {
            optiga_lib_print_string_with_newline("Error #2: Get Digest response\r\n");
 8001830:	485f      	ldr	r0, [pc, #380]	; (80019b0 <qi_auth_ptx_prx_test+0x208>)
 8001832:	f00a fdcf 	bl	800c3d4 <optiga_lib_print_string_with_newline>
 8001836:	e00c      	b.n	8001852 <qi_auth_ptx_prx_test+0xaa>
        }
        else
        {
            optiga_lib_print_string_with_newline("Test #2: Get Digest response OK\r\n");
 8001838:	485e      	ldr	r0, [pc, #376]	; (80019b4 <qi_auth_ptx_prx_test+0x20c>)
 800183a:	f00a fdcb 	bl	800c3d4 <optiga_lib_print_string_with_newline>
            optiga_lib_print_array_hex_format(resp, resp_size, OPTIGA_LIB_LOGGER_COLOR_GREEN);
 800183e:	f207 33ee 	addw	r3, r7, #1006	; 0x3ee
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <qi_auth_ptx_prx_test+0x204>)
 800184e:	f00a fde5 	bl	800c41c <optiga_lib_print_array_hex_format>
        }

        // Prepare GET_CERTIFICATE message
        if (0 != qi_auth_prx_get_certificate(0, 277, 0, 0, req, &req_size))
 8001852:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	2000      	movs	r0, #0
 8001860:	f240 1115 	movw	r1, #277	; 0x115
 8001864:	2200      	movs	r2, #0
 8001866:	2300      	movs	r3, #0
 8001868:	f7ff f9f8 	bl	8000c5c <qi_auth_prx_get_certificate>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <qi_auth_ptx_prx_test+0xd2>
        {
            optiga_lib_print_string_with_newline("Error #3: Get Certificate\r\n");
 8001872:	4851      	ldr	r0, [pc, #324]	; (80019b8 <qi_auth_ptx_prx_test+0x210>)
 8001874:	f00a fdae 	bl	800c3d4 <optiga_lib_print_string_with_newline>
 8001878:	e00c      	b.n	8001894 <qi_auth_ptx_prx_test+0xec>
        }
        else
        {
            optiga_lib_print_string_with_newline("Test #3: Get Certificate OK\r\n");
 800187a:	4850      	ldr	r0, [pc, #320]	; (80019bc <qi_auth_ptx_prx_test+0x214>)
 800187c:	f00a fdaa 	bl	800c3d4 <optiga_lib_print_string_with_newline>
            optiga_lib_print_array_hex_format(req, req_size, OPTIGA_LIB_LOGGER_COLOR_GREEN);
 8001880:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	4a47      	ldr	r2, [pc, #284]	; (80019ac <qi_auth_ptx_prx_test+0x204>)
 8001890:	f00a fdc4 	bl	800c41c <optiga_lib_print_array_hex_format>
        }

        // Prepare CERTIFICATE message
        if (0 != qi_auth_ptx_certificate(0, certchain, &certchain_size))
 8001894:	1d3a      	adds	r2, r7, #4
 8001896:	1cbb      	adds	r3, r7, #2
 8001898:	2000      	movs	r0, #0
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	f7fe fd2d 	bl	80002fc <qi_auth_ptx_certificate>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <qi_auth_ptx_prx_test+0x118>
        {
            optiga_lib_print_string_with_newline("Error #4:  Get Certificate response\r\n");
 80018a8:	4845      	ldr	r0, [pc, #276]	; (80019c0 <qi_auth_ptx_prx_test+0x218>)
 80018aa:	f00a fd93 	bl	800c3d4 <optiga_lib_print_string_with_newline>
            optiga_lib_print_array_hex_format(certchain, certchain_size, OPTIGA_LIB_LOGGER_COLOR_GREEN);
 80018ae:	1cbb      	adds	r3, r7, #2
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	1d3a      	adds	r2, r7, #4
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <qi_auth_ptx_prx_test+0x204>)
 80018ba:	f00a fdaf 	bl	800c41c <optiga_lib_print_array_hex_format>
 80018be:	e002      	b.n	80018c6 <qi_auth_ptx_prx_test+0x11e>
        }
        else
        {
            optiga_lib_print_string_with_newline("Test #4: Get Certificate response OK\r\n");
 80018c0:	4840      	ldr	r0, [pc, #256]	; (80019c4 <qi_auth_ptx_prx_test+0x21c>)
 80018c2:	f00a fd87 	bl	800c3d4 <optiga_lib_print_string_with_newline>
//        {
//            optiga_lib_print_string_with_newline("Test #5: Verify Certificate response OK\r\n");
//        }

        // Prepare CHALLENGE message
        req_size = sizeof(req);
 80018c6:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 80018ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018ce:	801a      	strh	r2, [r3, #0]
        if (0 != qi_auth_prx_challenge(0, 0, req, &req_size))
 80018d0:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80018d4:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 80018d8:	2000      	movs	r0, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	f7ff fa20 	bl	8000d20 <qi_auth_prx_challenge>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <qi_auth_ptx_prx_test+0x146>
        {
            optiga_lib_print_string_with_newline("Error #6: Get Challenge Request\r\n");
 80018e6:	4838      	ldr	r0, [pc, #224]	; (80019c8 <qi_auth_ptx_prx_test+0x220>)
 80018e8:	f00a fd74 	bl	800c3d4 <optiga_lib_print_string_with_newline>
 80018ec:	e00c      	b.n	8001908 <qi_auth_ptx_prx_test+0x160>
        }
        else
        {
            optiga_lib_print_string_with_newline("Test #6: Get Challenge Request OK\r\n");
 80018ee:	4837      	ldr	r0, [pc, #220]	; (80019cc <qi_auth_ptx_prx_test+0x224>)
 80018f0:	f00a fd70 	bl	800c3d4 <optiga_lib_print_string_with_newline>
            optiga_lib_print_array_hex_format(req, req_size, OPTIGA_LIB_LOGGER_COLOR_GREEN);
 80018f4:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <qi_auth_ptx_prx_test+0x204>)
 8001904:	f00a fd8a 	bl	800c41c <optiga_lib_print_array_hex_format>
        }

        // Feed the CHALLENGE message and prepare the CHALLENGE_AUTH message
        uint8_t resp_len;
        if (0 != qi_auth_ptx_challenge_auth(0, req, req_size, resp, &resp_len))
 8001908:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8001914:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 8001918:	1c7b      	adds	r3, r7, #1
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2000      	movs	r0, #0
 800191e:	4623      	mov	r3, r4
 8001920:	f7fe fd18 	bl	8000354 <qi_auth_ptx_challenge_auth>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <qi_auth_ptx_prx_test+0x18a>
        {
            optiga_lib_print_string_with_newline("Error #7: Get Challenge Auth Response\r\n");
 800192a:	4829      	ldr	r0, [pc, #164]	; (80019d0 <qi_auth_ptx_prx_test+0x228>)
 800192c:	f00a fd52 	bl	800c3d4 <optiga_lib_print_string_with_newline>
 8001930:	e00c      	b.n	800194c <qi_auth_ptx_prx_test+0x1a4>
        }
        else
        {
            optiga_lib_print_string_with_newline("Test #7: Get Challenge Auth Response OK\r\n");
 8001932:	4828      	ldr	r0, [pc, #160]	; (80019d4 <qi_auth_ptx_prx_test+0x22c>)
 8001934:	f00a fd4e 	bl	800c3d4 <optiga_lib_print_string_with_newline>
            optiga_lib_print_array_hex_format(resp, resp_len, OPTIGA_LIB_LOGGER_COLOR_GREEN);
 8001938:	1c7b      	adds	r3, r7, #1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <qi_auth_ptx_prx_test+0x204>)
 8001948:	f00a fd68 	bl	800c41c <optiga_lib_print_array_hex_format>
        }

        // Feed the CERTIFICATE, CHALLENGE used previously, and CHALLENGE_AUTH messages and verify the latter
        if (0 != qi_auth_prx_verify_chall_auth(certchain+1, certchain_size-1, req, req_size, resp, resp_len))
 800194c:	1cbb      	adds	r3, r7, #2
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	3b01      	subs	r3, #1
 8001952:	b299      	uxth	r1, r3
 8001954:	f207 53e6 	addw	r3, r7, #1510	; 0x5e6
 8001958:	881c      	ldrh	r4, [r3, #0]
 800195a:	1c7b      	adds	r3, r7, #1
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	1d3a      	adds	r2, r7, #4
 8001962:	1c50      	adds	r0, r2, #1
 8001964:	f507 65bd 	add.w	r5, r7, #1512	; 0x5e8
 8001968:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800196c:	9200      	str	r2, [sp, #0]
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	462a      	mov	r2, r5
 8001972:	4623      	mov	r3, r4
 8001974:	f7ff fa18 	bl	8000da8 <qi_auth_prx_verify_chall_auth>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <qi_auth_ptx_prx_test+0x1de>
        {
            optiga_lib_print_string_with_newline("Error #8: Verify Challenge Auth Response\r\n");
 800197e:	4816      	ldr	r0, [pc, #88]	; (80019d8 <qi_auth_ptx_prx_test+0x230>)
 8001980:	f00a fd28 	bl	800c3d4 <optiga_lib_print_string_with_newline>
 8001984:	e002      	b.n	800198c <qi_auth_ptx_prx_test+0x1e4>
        }
        else
        {
            optiga_lib_print_string_with_newline("Test #8: Verify Challenge Auth Response OK\r\n");
 8001986:	4815      	ldr	r0, [pc, #84]	; (80019dc <qi_auth_ptx_prx_test+0x234>)
 8001988:	f00a fd24 	bl	800c3d4 <optiga_lib_print_string_with_newline>
//        else
//        {
//            optiga_lib_print_string_with_newline("Test #10: Verify Challenge Auth OK\r\n");
//        }

        status = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
    }while(0);

    return status;
 8001992:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
}
 8001996:	4618      	mov	r0, r3
 8001998:	f507 67fc 	add.w	r7, r7, #2016	; 0x7e0
 800199c:	46bd      	mov	sp, r7
 800199e:	bdb0      	pop	{r4, r5, r7, pc}
 80019a0:	08013848 	.word	0x08013848
 80019a4:	08013870 	.word	0x08013870
 80019a8:	08013888 	.word	0x08013888
 80019ac:	080138a4 	.word	0x080138a4
 80019b0:	080138ac 	.word	0x080138ac
 80019b4:	080138cc 	.word	0x080138cc
 80019b8:	080138f0 	.word	0x080138f0
 80019bc:	0801390c 	.word	0x0801390c
 80019c0:	0801392c 	.word	0x0801392c
 80019c4:	08013954 	.word	0x08013954
 80019c8:	0801397c 	.word	0x0801397c
 80019cc:	080139a0 	.word	0x080139a0
 80019d0:	080139c4 	.word	0x080139c4
 80019d4:	080139ec 	.word	0x080139ec
 80019d8:	08013a18 	.word	0x08013a18
 80019dc:	08013a44 	.word	0x08013a44

080019e0 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	460b      	mov	r3, r1
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3204      	adds	r2, #4
 8001a02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	23f8      	movs	r3, #248	; 0xf8
 8001a12:	408b      	lsls	r3, r1
 8001a14:	43db      	mvns	r3, r3
 8001a16:	ea02 0103 	and.w	r1, r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1d02      	adds	r2, r0, #4
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	408b      	lsls	r3, r1
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <XMC_GPIO_Init+0x144>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d003      	beq.n	8001a48 <XMC_GPIO_Init+0x68>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a39      	ldr	r2, [pc, #228]	; (8001b28 <XMC_GPIO_Init+0x148>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d10a      	bne.n	8001a5e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60
 8001a5c:	e042      	b.n	8001ae4 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da3c      	bge.n	8001ae4 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
 8001a70:	409a      	lsls	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8001a76:	7afb      	ldrb	r3, [r7, #11]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	08db      	lsrs	r3, r3, #3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3210      	adds	r2, #16
 8001a8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4619      	mov	r1, r3
 8001a98:	2307      	movs	r3, #7
 8001a9a:	408b      	lsls	r3, r1
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	ea02 0103 	and.w	r1, r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f100 0210 	add.w	r2, r0, #16
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8001aac:	7afb      	ldrb	r3, [r7, #11]
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3210      	adds	r2, #16
 8001ac0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7a1b      	ldrb	r3, [r3, #8]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	ea42 0103 	orr.w	r1, r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f100 0210 	add.w	r2, r0, #16
 8001ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3204      	adds	r2, #4
 8001af8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	ea42 0103 	orr.w	r1, r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1d02      	adds	r2, r0, #4
 8001b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	48028e00 	.word	0x48028e00
 8001b28:	48028f00 	.word	0x48028f00

08001b2c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2003ffc0 	.word	0x2003ffc0

08001b44 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <XMC_SCU_GetMirrorStatus+0x14>)
 8001b4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	50004000 	.word	0x50004000

08001b5c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8001b64:	f003 f8a0 	bl	8004ca8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <XMC_SCU_lDelay+0x3c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <XMC_SCU_lDelay+0x40>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0c9a      	lsrs	r2, r3, #18
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e003      	b.n	8001b8a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8001b82:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3f7      	bcc.n	8001b82 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2003ffc0 	.word	0x2003ffc0
 8001b9c:	431bde83 	.word	0x431bde83

08001ba0 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	50004074 	.word	0x50004074

08001bb8 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60d3      	str	r3, [r2, #12]
}
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	50004074 	.word	0x50004074

08001bd4 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f000 f8b7 	bl	8001d50 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8001be2:	f000 fa99 	bl	8002118 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	79db      	ldrb	r3, [r3, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8001bee:	f000 fad1 	bl	8002194 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8001bf2:	bf00      	nop
 8001bf4:	f000 fabc 	bl	8002170 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f7      	bne.n	8001bf4 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7a5b      	ldrb	r3, [r3, #9]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f91b 	bl	8001e44 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ff98 	bl	8001b44 <XMC_SCU_GetMirrorStatus>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1fa      	bne.n	8001c10 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7a1b      	ldrb	r3, [r3, #8]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fa3c 	bl	800209c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7c1b      	ldrb	r3, [r3, #16]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f929 	bl	8001e80 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7c5b      	ldrb	r3, [r3, #17]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f94c 	bl	8001ed0 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7c9b      	ldrb	r3, [r3, #18]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f933 	bl	8001ea8 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7cdb      	ldrb	r3, [r3, #19]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f956 	bl	8001ef8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	799b      	ldrb	r3, [r3, #6]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00a      	beq.n	8001c6a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8001c54:	f000 fad6 	bl	8002204 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8001c58:	bf00      	nop
 8001c5a:	f000 fafb 	bl	8002254 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f083 0301 	eor.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f7      	bne.n	8001c5a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	78db      	ldrb	r3, [r3, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8001c72:	f000 fb13 	bl	800229c <XMC_SCU_CLOCK_DisableSystemPll>
 8001c76:	e014      	b.n	8001ca2 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8001c78:	f000 fb00 	bl	800227c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8899      	ldrh	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001c88:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001c8e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4608      	mov	r0, r1
 8001c98:	4611      	mov	r1, r2
 8001c9a:	462a      	mov	r2, r5
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	f000 fb0d 	bl	80022bc <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d103      	bne.n	8001cb4 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8001cac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001cb0:	f000 f84e 	bl	8001d50 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8001cb4:	f002 fff8 	bl	8004ca8 <SystemCoreClockUpdate>
}
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbe:	bf00      	nop

08001cc0 <XMC_SCU_RESET_AssertPeripheralReset>:
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0f1b      	lsrs	r3, r3, #28
 8001ccc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001cd4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <XMC_SCU_RESET_AssertPeripheralReset+0x34>)
 8001ce4:	4413      	add	r3, r2
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	50004410 	.word	0x50004410

08001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0f1b      	lsrs	r3, r3, #28
 8001d04:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d0c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8001d1c:	4413      	add	r3, r2
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	50004414 	.word	0x50004414

08001d30 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001d34:	f7ff fefa 	bl	8001b2c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001d38:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	50004600 	.word	0x50004600

08001d50 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	50004600 	.word	0x50004600

08001d78 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8001d80:	4906      	ldr	r1, [pc, #24]	; (8001d9c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	50004600 	.word	0x50004600

08001da0 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001da8:	4906      	ldr	r1, [pc, #24]	; (8001dc4 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	50004600 	.word	0x50004600

08001dc8 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	60d3      	str	r3, [r2, #12]
 8001de8:	e007      	b.n	8001dfa <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001dea:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	60d3      	str	r3, [r2, #12]
  }
}
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	50004710 	.word	0x50004710

08001e08 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e12:	bf00      	nop
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8001e16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f8      	bne.n	8001e14 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001e22:	4907      	ldr	r1, [pc, #28]	; (8001e40 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	50004000 	.word	0x50004000
 8001e40:	50004300 	.word	0x50004300

08001e44 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e4e:	bf00      	nop
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8001e52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f8      	bne.n	8001e50 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001e5e:	4907      	ldr	r1, [pc, #28]	; (8001e7c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8001e68:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	50004000 	.word	0x50004000
 8001e7c:	50004300 	.word	0x50004300

08001e80 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001e88:	4906      	ldr	r1, [pc, #24]	; (8001ea4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	50004600 	.word	0x50004600

08001ea8 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001eb0:	4906      	ldr	r1, [pc, #24]	; (8001ecc <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	50004600 	.word	0x50004600

08001ed0 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001ed8:	4906      	ldr	r1, [pc, #24]	; (8001ef4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	50004600 	.word	0x50004600

08001ef8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	50004600 	.word	0x50004600

08001f20 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001f28:	4906      	ldr	r1, [pc, #24]	; (8001f44 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001f36:	4313      	orrs	r3, r2
 8001f38:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	50004600 	.word	0x50004600

08001f48 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001f50:	4906      	ldr	r1, [pc, #24]	; (8001f6c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	50004600 	.word	0x50004600

08001f70 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001f78:	4906      	ldr	r1, [pc, #24]	; (8001f94 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001f86:	4313      	orrs	r3, r2
 8001f88:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	50004600 	.word	0x50004600

08001f98 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	6053      	str	r3, [r2, #4]
}
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	50004600 	.word	0x50004600

08001fb8 <XMC_SCU_CLOCK_GatePeripheralClock>:
}

#if defined(CLOCK_GATING_SUPPORTED)
/* API to gate a given module clock */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0f1b      	lsrs	r3, r3, #28
 8001fc4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001fcc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <XMC_SCU_CLOCK_GatePeripheralClock+0x34>)
 8001fdc:	4413      	add	r3, r2
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	601a      	str	r2, [r3, #0]
}
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	50004644 	.word	0x50004644

08001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>:

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	0f1b      	lsrs	r3, r3, #28
 8001ffc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002004:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	461a      	mov	r2, r3
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8002014:	4413      	add	r3, r2
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	601a      	str	r2, [r3, #0]
}
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	50004648 	.word	0x50004648

08002028 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8002032:	4a19      	ldr	r2, [pc, #100]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800203e:	4a16      	ldr	r2, [pc, #88]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800204a:	4913      	ldr	r1, [pc, #76]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	3b01      	subs	r3, #1
 8002050:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3b01      	subs	r3, #1
 8002056:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8002058:	4313      	orrs	r3, r2
 800205a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002066:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f023 0310 	bic.w	r3, r3, #16
 8002072:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8002074:	4a08      	ldr	r2, [pc, #32]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8002080:	bf00      	nop
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f9      	beq.n	8002082 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	50004710 	.word	0x50004710

0800209c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80020a6:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d10e      	bne.n	80020d6 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020c2:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80020c4:	2064      	movs	r0, #100	; 0x64
 80020c6:	f7ff fd49 	bl	8001b5c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80020ca:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020d4:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80020d6:	2064      	movs	r0, #100	; 0x64
 80020d8:	f7ff fd40 	bl	8001b5c <XMC_SCU_lDelay>
}
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	50004710 	.word	0x50004710

080020e8 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <XMC_SCU_POWER_EnableUsb+0x14>)
 80020ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020f2:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	50004200 	.word	0x50004200

08002100 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <XMC_SCU_POWER_DisableUsb+0x14>)
 8002106:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800210a:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	50004200 	.word	0x50004200

08002118 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800212a:	2201      	movs	r2, #1
 800212c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800212e:	bf00      	nop
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f9      	beq.n	8002130 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800214a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8002150:	bf00      	nop
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	50004200 	.word	0x50004200
 800216c:	50004400 	.word	0x50004400

08002170 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	50004300 	.word	0x50004300

08002194 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8002198:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800219c:	f7ff fd0c 	bl	8001bb8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80021a0:	4a17      	ldr	r2, [pc, #92]	; (8002200 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021aa:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80021ac:	bf00      	nop
 80021ae:	f7ff fcf7 	bl	8001ba0 <XMC_SCU_INTERUPT_GetEventStatus>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f8      	beq.n	80021ae <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 80021bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021c0:	f7ff fcfa 	bl	8001bb8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80021c6:	2208      	movs	r2, #8
 80021c8:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80021ca:	bf00      	nop
 80021cc:	f7ff fce8 	bl	8001ba0 <XMC_SCU_INTERUPT_GetEventStatus>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f8      	beq.n	80021cc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 80021da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021de:	f7ff fceb 	bl	8001bb8 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80021e2:	4a07      	ldr	r2, [pc, #28]	; (8002200 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 80021ee:	bf00      	nop
 80021f0:	f7ff fcd6 	bl	8001ba0 <XMC_SCU_INTERUPT_GetEventStatus>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f8      	beq.n	80021f0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	50004300 	.word	0x50004300

08002204 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002204:	b5b0      	push	{r4, r5, r7, lr}
 8002206:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002208:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002214:	4d0d      	ldr	r5, [pc, #52]	; (800224c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 800221e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002222:	f006 fed5 	bl	8008fd0 <OSCHP_GetFrequency>
 8002226:	4602      	mov	r2, r0
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 800222a:	fba3 2302 	umull	r2, r3, r3, r2
 800222e:	0d1b      	lsrs	r3, r3, #20
 8002230:	3b01      	subs	r3, #1
 8002232:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002234:	4323      	orrs	r3, r4
 8002236:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002238:	4a03      	ldr	r2, [pc, #12]	; (8002248 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800223a:	4b03      	ldr	r3, [pc, #12]	; (8002248 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002242:	6053      	str	r3, [r2, #4]
}
 8002244:	bdb0      	pop	{r4, r5, r7, pc}
 8002246:	bf00      	nop
 8002248:	50004710 	.word	0x50004710
 800224c:	50004700 	.word	0x50004700
 8002250:	6b5fca6b 	.word	0x6b5fca6b

08002254 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002260:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002264:	bf0c      	ite	eq
 8002266:	2301      	moveq	r3, #1
 8002268:	2300      	movne	r3, #0
 800226a:	b2db      	uxtb	r3, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	50004710 	.word	0x50004710

0800227c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002280:	4a05      	ldr	r2, [pc, #20]	; (8002298 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	f023 0302 	bic.w	r3, r3, #2
 800228e:	6053      	str	r3, [r2, #4]
}
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	50004710 	.word	0x50004710

0800229c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80022a0:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	6053      	str	r3, [r2, #4]
}
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	50004710 	.word	0x50004710

080022bc <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60ba      	str	r2, [r7, #8]
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	4603      	mov	r3, r0
 80022c8:	81fb      	strh	r3, [r7, #14]
 80022ca:	460b      	mov	r3, r1
 80022cc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80022ce:	89fb      	ldrh	r3, [r7, #14]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fd79 	bl	8001dc8 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80022d6:	7b7b      	ldrb	r3, [r7, #13]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 8084 	bne.w	80023e6 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80022e4:	f006 fe74 	bl	8008fd0 <OSCHP_GetFrequency>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b4b      	ldr	r3, [pc, #300]	; (8002418 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 80022ec:	fba3 2302 	umull	r2, r3, r3, r2
 80022f0:	0c9b      	lsrs	r3, r3, #18
 80022f2:	059b      	lsls	r3, r3, #22
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e002      	b.n	80022fe <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80022f8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80022fc:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	fb02 f203 	mul.w	r2, r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a42      	ldr	r2, [pc, #264]	; (800241c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	0d9b      	lsrs	r3, r3, #22
 800231a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800231c:	4a40      	ldr	r2, [pc, #256]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800231e:	4b40      	ldr	r3, [pc, #256]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002328:	4a3d      	ldr	r2, [pc, #244]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002334:	493a      	ldr	r1, [pc, #232]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002336:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800233c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	3a01      	subs	r2, #1
 8002342:	0212      	lsls	r2, r2, #8
 8002344:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	3b01      	subs	r3, #1
 800234a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800234c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3b01      	subs	r3, #1
 8002352:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002358:	4a31      	ldr	r2, [pc, #196]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002364:	4a2e      	ldr	r2, [pc, #184]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f023 0310 	bic.w	r3, r3, #16
 800236e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002370:	4a2b      	ldr	r2, [pc, #172]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002372:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800237c:	bf00      	nop
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f9      	beq.n	800237e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800238a:	4a25      	ldr	r2, [pc, #148]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800238c:	4b24      	ldr	r3, [pc, #144]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002396:	bf00      	nop
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f9      	bne.n	8002398 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	0d9b      	lsrs	r3, r3, #22
 80023b0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80023b2:	6a3a      	ldr	r2, [r7, #32]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d202      	bcs.n	80023c0 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80023ba:	6938      	ldr	r0, [r7, #16]
 80023bc:	f000 f838 	bl	8002430 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	4a19      	ldr	r2, [pc, #100]	; (800242c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	0d9b      	lsrs	r3, r3, #22
 80023ce:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d202      	bcs.n	80023de <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80023d8:	6938      	ldr	r0, [r7, #16]
 80023da:	f000 f829 	bl	8002430 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80023de:	6a38      	ldr	r0, [r7, #32]
 80023e0:	f000 f826 	bl	8002430 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80023e4:	e015      	b.n	8002412 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80023e6:	490e      	ldr	r1, [pc, #56]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80023f8:	4a09      	ldr	r2, [pc, #36]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002404:	bf00      	nop
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f9      	beq.n	8002406 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	431bde83 	.word	0x431bde83
 800241c:	aaaaaaab 	.word	0xaaaaaaab
 8002420:	50004710 	.word	0x50004710
 8002424:	f08080ff 	.word	0xf08080ff
 8002428:	88888889 	.word	0x88888889
 800242c:	b60b60b7 	.word	0xb60b60b7

08002430 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002438:	4907      	ldr	r1, [pc, #28]	; (8002458 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3b01      	subs	r3, #1
 8002446:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 800244c:	2032      	movs	r0, #50	; 0x32
 800244e:	f7ff fb85 	bl	8001b5c <XMC_SCU_lDelay>
}
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	50004710 	.word	0x50004710

0800245c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	60da      	str	r2, [r3, #12]
}
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop

0800247c <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <XMC_CCU4_lDeassertReset+0x4c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d103      	bne.n	8002494 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800248c:	2004      	movs	r0, #4
 800248e:	f7ff fc33 	bl	8001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8002492:	e016      	b.n	80024c2 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <XMC_CCU4_lDeassertReset+0x50>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d103      	bne.n	80024a4 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 800249c:	2008      	movs	r0, #8
 800249e:	f7ff fc2b 	bl	8001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>
 80024a2:	e00e      	b.n	80024c2 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <XMC_CCU4_lDeassertReset+0x54>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d103      	bne.n	80024b4 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80024ac:	2010      	movs	r0, #16
 80024ae:	f7ff fc23 	bl	8001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>
 80024b2:	e006      	b.n	80024c2 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <XMC_CCU4_lDeassertReset+0x58>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80024bc:	4806      	ldr	r0, [pc, #24]	; (80024d8 <XMC_CCU4_lDeassertReset+0x5c>)
 80024be:	f7ff fc1b 	bl	8001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	4000c000 	.word	0x4000c000
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40014000 	.word	0x40014000
 80024d4:	48004000 	.word	0x48004000
 80024d8:	10000001 	.word	0x10000001

080024dc <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a10      	ldr	r2, [pc, #64]	; (8002528 <XMC_CCU4_lUngateClock+0x4c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d103      	bne.n	80024f4 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80024ec:	2004      	movs	r0, #4
 80024ee:	f7ff fd7f 	bl	8001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80024f2:	e016      	b.n	8002522 <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a0d      	ldr	r2, [pc, #52]	; (800252c <XMC_CCU4_lUngateClock+0x50>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d103      	bne.n	8002504 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80024fc:	2008      	movs	r0, #8
 80024fe:	f7ff fd77 	bl	8001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8002502:	e00e      	b.n	8002522 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <XMC_CCU4_lUngateClock+0x54>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d103      	bne.n	8002514 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 800250c:	2010      	movs	r0, #16
 800250e:	f7ff fd6f 	bl	8001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8002512:	e006      	b.n	8002522 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a07      	ldr	r2, [pc, #28]	; (8002534 <XMC_CCU4_lUngateClock+0x58>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d102      	bne.n	8002522 <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 800251c:	4806      	ldr	r0, [pc, #24]	; (8002538 <XMC_CCU4_lUngateClock+0x5c>)
 800251e:	f7ff fd67 	bl	8001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	4000c000 	.word	0x4000c000
 800252c:	40010000 	.word	0x40010000
 8002530:	40014000 	.word	0x40014000
 8002534:	48004000 	.word	0x48004000
 8002538:	10000001 	.word	0x10000001

0800253c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8002544:	2010      	movs	r0, #16
 8002546:	f7ff fd27 	bl	8001f98 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffc6 	bl	80024dc <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff93 	bl	800247c <XMC_CCU4_lDeassertReset>
#endif
}
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ffe7 	bl	800253c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff74 	bl	800245c <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002580:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	039b      	lsls	r3, r3, #14
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	601a      	str	r2, [r3, #0]
}
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	795b      	ldrb	r3, [r3, #5]
 80025ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	051a      	lsls	r2, r3, #20
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	791b      	ldrb	r3, [r3, #4]
 80025be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	795b      	ldrb	r3, [r3, #5]
 80025ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	795b      	ldrb	r3, [r3, #5]
 80025de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800261c:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]
 800264c:	4613      	mov	r3, r2
 800264e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002656:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	2b09      	cmp	r3, #9
 800265c:	d82c      	bhi.n	80026b8 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	0800268d 	.word	0x0800268d
 8002668:	0800268d 	.word	0x0800268d
 800266c:	08002697 	.word	0x08002697
 8002670:	08002697 	.word	0x08002697
 8002674:	080026b9 	.word	0x080026b9
 8002678:	080026b9 	.word	0x080026b9
 800267c:	080026b9 	.word	0x080026b9
 8002680:	080026b9 	.word	0x080026b9
 8002684:	080026a1 	.word	0x080026a1
 8002688:	080026ad 	.word	0x080026ad
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 800268c:	2303      	movs	r3, #3
 800268e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
      break;
 8002694:	e016      	b.n	80026c4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8002696:	230c      	movs	r3, #12
 8002698:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800269a:	2302      	movs	r3, #2
 800269c:	617b      	str	r3, [r7, #20]
      break;
 800269e:	e011      	b.n	80026c4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80026a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026a4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80026a6:	2308      	movs	r3, #8
 80026a8:	617b      	str	r3, [r7, #20]
      break;
 80026aa:	e00b      	b.n	80026c4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80026ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026b0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80026b2:	230a      	movs	r3, #10
 80026b4:	617b      	str	r3, [r7, #20]
      break;
 80026b6:	e005      	b.n	80026c4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80026b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026bc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80026be:	230c      	movs	r3, #12
 80026c0:	617b      	str	r3, [r7, #20]
      break;
 80026c2:	bf00      	nop
  }
  
  srs &= ~mask; 
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80026ce:	78ba      	ldrb	r2, [r7, #2]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop

080026f0 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
 80026fc:	4613      	mov	r3, r2
 80026fe:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4618      	mov	r0, r3
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3204      	adds	r2, #4
 8002714:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4619      	mov	r1, r3
 8002722:	23f8      	movs	r3, #248	; 0xf8
 8002724:	408b      	lsls	r3, r1
 8002726:	43db      	mvns	r3, r3
 8002728:	ea02 0103 	and.w	r1, r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1d02      	adds	r2, r0, #4
 8002730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3204      	adds	r2, #4
 8002748:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800274c:	78bb      	ldrb	r3, [r7, #2]
 800274e:	78f9      	ldrb	r1, [r7, #3]
 8002750:	f001 0103 	and.w	r1, r1, #3
 8002754:	00c9      	lsls	r1, r1, #3
 8002756:	408b      	lsls	r3, r1
 8002758:	ea42 0103 	orr.w	r1, r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	1d02      	adds	r2, r0, #4
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
 800277c:	4613      	mov	r3, r2
 800277e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4619      	mov	r1, r3
 800278a:	2303      	movs	r3, #3
 800278c:	408b      	lsls	r3, r1
 800278e:	43db      	mvns	r3, r3
 8002790:	401a      	ands	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800279a:	78bb      	ldrb	r3, [r7, #2]
 800279c:	78f9      	ldrb	r1, [r7, #3]
 800279e:	0049      	lsls	r1, r1, #1
 80027a0:	408b      	lsls	r3, r1
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop

080027b4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027c6:	b2db      	uxtb	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f002 f886 	bl	8004910 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <XMC_I2C_CH_Init+0x4c>)
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	889b      	ldrh	r3, [r3, #4]
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4619      	mov	r1, r3
 8002812:	f000 f817 	bl	8002844 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4619      	mov	r1, r3
 800281e:	f000 f831 	bl	8002884 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	073f0303 	.word	0x073f0303

08002844 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002856:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800285a:	d109      	bne.n	8002870 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c
 800286e:	e003      	b.n	8002878 <XMC_I2C_CH_SetSlaveAddress+0x34>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	021a      	lsls	r2, r3, #8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <XMC_I2C_CH_SetBaudrate+0x70>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d810      	bhi.n	80028bc <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	220a      	movs	r2, #10
 80028ac:	f002 f87c 	bl	80049a8 <XMC_USIC_CH_SetBaudrate>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d119      	bne.n	80028ea <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	e016      	b.n	80028ea <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <XMC_I2C_CH_SetBaudrate+0x74>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d810      	bhi.n	80028e6 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	2219      	movs	r2, #25
 80028d6:	f002 f867 	bl	80049a8 <XMC_USIC_CH_SetBaudrate>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d104      	bne.n	80028ea <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	e001      	b.n	80028ea <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	000186a0 	.word	0x000186a0
 80028f8:	00061a80 	.word	0x00061a80

080028fc <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002912:	b29b      	uxth	r3, r3
 8002914:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002916:	787b      	ldrb	r3, [r7, #1]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d103      	bne.n	8002924 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800292a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d110      	bne.n	8002954 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002932:	bf00      	nop
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff3d 	bl	80027b4 <XMC_USIC_CH_GetTransmitBufferStatus>
 800293a:	4603      	mov	r3, r0
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d0f9      	beq.n	8002934 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002946:	f7ff ff45 	bl	80027d4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002952:	e003      	b.n	800295c <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop

08002964 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	4613      	mov	r3, r2
 8002972:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800297a:	b29b      	uxth	r3, r3
 800297c:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800297e:	787b      	ldrb	r3, [r7, #1]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d103      	bne.n	800298c <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002992:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d110      	bne.n	80029bc <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800299a:	bf00      	nop
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff09 	bl	80027b4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d0f9      	beq.n	800299c <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ae:	f7ff ff11 	bl	80027d4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80029ba:	e003      	b.n	80029c4 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop

080029cc <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d111      	bne.n	8002a06 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80029e2:	bf00      	nop
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fee5 	bl	80027b4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d0f9      	beq.n	80029e4 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f6:	f7ff feed 	bl	80027d4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002a04:	e004      	b.n	8002a10 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002a0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop

08002a18 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a2a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d110      	bne.n	8002a54 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002a32:	bf00      	nop
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff febd 	bl	80027b4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d0f9      	beq.n	8002a34 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a46:	f7ff fec5 	bl	80027d4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002a52:	e003      	b.n	8002a5c <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop

08002a64 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d111      	bne.n	8002a9e <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002a7a:	bf00      	nop
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fe99 	bl	80027b4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	d0f9      	beq.n	8002a7c <XMC_I2C_CH_MasterReceiveAck+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a8e:	f7ff fea1 	bl	80027d4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002a9c:	e004      	b.n	8002aa8 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop

08002ab0 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002abe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d111      	bne.n	8002aea <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002ac6:	bf00      	nop
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fe73 	bl	80027b4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d0f9      	beq.n	8002ac8 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ada:	f7ff fe7b 	bl	80027d4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002ae8:	e004      	b.n	8002af4 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002af0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop

08002afc <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002b0a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e003      	b.n	8002b22 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002b20:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <XMC_I2C_CH_EnableEvent>:
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <XMC_I2C_CH_EnableEvent+0x34>)
 8002b52:	400b      	ands	r3, r1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	41fc0000 	.word	0x41fc0000

08002b68 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b88:	6839      	ldr	r1, [r7, #0]
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <XMC_I2C_CH_DisableEvent+0x38>)
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	401a      	ands	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	41fc0000 	.word	0x41fc0000

08002ba4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8002bea:	2310      	movs	r3, #16
 8002bec:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f001 fe8e 	bl	8004910 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	79db      	ldrb	r3, [r3, #7]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	79db      	ldrb	r3, [r3, #7]
 8002c00:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	f001 fecc 	bl	80049a8 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	799b      	ldrb	r3, [r3, #6]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	791b      	ldrb	r3, [r3, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	795b      	ldrb	r3, [r3, #5]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	795b      	ldrb	r3, [r3, #5]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	635a      	str	r2, [r3, #52]	; 0x34
 8002c58:	e008      	b.n	8002c6c <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	791b      	ldrb	r3, [r3, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	891b      	ldrh	r3, [r3, #8]
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c9e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d110      	bne.n	8002cc8 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002ca6:	bf00      	nop
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff7b 	bl	8002ba4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b80      	cmp	r3, #128	; 0x80
 8002cb2:	d0f9      	beq.n	8002ca8 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cba:	f7ff ff83 	bl	8002bc4 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002cc6:	e003      	b.n	8002cd0 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8002cc8:	887a      	ldrh	r2, [r7, #2]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop

08002cd8 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002ce6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	81fb      	strh	r3, [r7, #14]
 8002cf4:	e003      	b.n	8002cfe <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002cfc:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e01e      	b.n	8002d5c <XMC_USBD_lDeviceActive+0x50>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <XMC_USBD_lDeviceActive+0x68>)
 8002d22:	2134      	movs	r1, #52	; 0x34
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10c      	bne.n	8002d52 <XMC_USBD_lDeviceActive+0x46>
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <XMC_USBD_lDeviceActive+0x68>)
 8002d3c:	2134      	movs	r1, #52	; 0x34
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <XMC_USBD_lDeviceActive+0x4a>
    {
      result = 1U;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73bb      	strb	r3, [r7, #14]
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7b1b      	ldrb	r3, [r3, #12]
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d3db      	bcc.n	8002d1e <XMC_USBD_lDeviceActive+0x12>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
    }
  }
  return result;
 8002d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	1ffedd28 	.word	0x1ffedd28

08002d78 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b08b      	sub	sp, #44	; 0x2c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2234      	movs	r2, #52	; 0x34
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	4a34      	ldr	r2, [pc, #208]	; (8002e5c <XMC_USBD_lReadFifo+0xe4>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8002d90:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <XMC_USBD_lReadFifo+0xe4>)
 8002d92:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8002d98:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <XMC_USBD_lReadFifo+0xe4>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3370      	adds	r3, #112	; 0x70
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8002db4:	7b7b      	ldrb	r3, [r7, #13]
 8002db6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d048      	beq.n	8002e52 <XMC_USBD_lReadFifo+0xda>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d044      	beq.n	8002e52 <XMC_USBD_lReadFifo+0xda>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
 8002dcc:	e00a      	b.n	8002de4 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	601a      	str	r2, [r3, #0]
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	3301      	adds	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3f0      	bcc.n	8002dce <XMC_USBD_lReadFifo+0x56>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d022      	beq.n	8002e3a <XMC_USBD_lReadFifo+0xc2>
    {
      temp_data = *fifo;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	e016      	b.n	8002e2e <XMC_USBD_lReadFifo+0xb6>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	0099      	lsls	r1, r3, #2
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	440b      	add	r3, r1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	00d2      	lsls	r2, r2, #3
 8002e12:	4611      	mov	r1, r2
 8002e14:	22ff      	movs	r2, #255	; 0xff
 8002e16:	fa02 f101 	lsl.w	r1, r2, r1
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e20:	00c9      	lsls	r1, r1, #3
 8002e22:	40ca      	lsrs	r2, r1
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	701a      	strb	r2, [r3, #0]
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	441a      	add	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d3e2      	bcc.n	8002e00 <XMC_USBD_lReadFifo+0x88>
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	441a      	add	r2, r3
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	441a      	add	r2, r3
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002e52:	372c      	adds	r7, #44	; 0x2c
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	1ffedd28 	.word	0x1ffedd28

08002e60 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <XMC_USBD_lWriteFifo+0xa0>)
 8002e74:	3378      	adds	r3, #120	; 0x78
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <XMC_USBD_lWriteFifo+0xa0>)
 8002e88:	336a      	adds	r3, #106	; 0x6a
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e023      	b.n	8002ef2 <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3303      	adds	r3, #3
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8002eb2:	893b      	ldrh	r3, [r7, #8]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d204      	bcs.n	8002ec6 <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8002ebc:	893b      	ldrh	r3, [r7, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	e00c      	b.n	8002ee6 <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]
      i++;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1d1a      	adds	r2, r3, #4
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3ee      	bcc.n	8002ecc <XMC_USBD_lWriteFifo+0x6c>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
      i++;
    }
    result=byte_count;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	617b      	str	r3, [r7, #20]
  }
  return result;
 8002ef2:	697b      	ldr	r3, [r7, #20]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3724      	adds	r7, #36	; 0x24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	1ffedd28 	.word	0x1ffedd28

08002f04 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f043 0320 	orr.w	r3, r3, #32
 8002f18:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	019b      	lsls	r3, r3, #6
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <XMC_USBD_lFlushTXFifo+0x80>)
 8002f34:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	e002      	b.n	8002f48 <XMC_USBD_lFlushTXFifo+0x44>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f4e:	d3f8      	bcc.n	8002f42 <XMC_USBD_lFlushTXFifo+0x3e>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <XMC_USBD_lFlushTXFifo+0x80>)
 8002f52:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f3      	bne.n	8002f50 <XMC_USBD_lFlushTXFifo+0x4c>
    count = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 8002f6c:	bf00      	nop
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	60fa      	str	r2, [r7, #12]
 8002f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f78:	d3f9      	bcc.n	8002f6e <XMC_USBD_lFlushTXFifo+0x6a>
  {
    /* wait 3 phy clocks */
  }
}
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	1ffedd28 	.word	0x1ffedd28

08002f88 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f043 0310 	orr.w	r3, r3, #16
 8002f98:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <XMC_USBD_lFlushRXFifo+0x64>)
 8002f9c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	e002      	b.n	8002fb0 <XMC_USBD_lFlushRXFifo+0x28>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3301      	adds	r3, #1
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fb6:	d3f8      	bcc.n	8002faa <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <XMC_USBD_lFlushRXFifo+0x64>)
 8002fba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e9      	bne.n	8002fa4 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 8002fd4:	bf00      	nop
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe0:	d3f9      	bcc.n	8002fd6 <XMC_USBD_lFlushRXFifo+0x4e>
  {
    /* wait 3 phy clocks */
  }
}
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	1ffedd28 	.word	0x1ffedd28

08002ff0 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8003002:	e005      	b.n	8003010 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	80fb      	strh	r3, [r7, #6]
    i++;
 800300a:	797b      	ldrb	r3, [r7, #5]
 800300c:	3301      	adds	r3, #1
 800300e:	717b      	strb	r3, [r7, #5]
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8003010:	797b      	ldrb	r3, [r7, #5]
 8003012:	2b06      	cmp	r3, #6
 8003014:	d807      	bhi.n	8003026 <XMC_USBD_lAssignTXFifo+0x36>
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <XMC_USBD_lAssignTXFifo+0x6c>)
 8003018:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	4013      	ands	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ee      	bne.n	8003004 <XMC_USBD_lAssignTXFifo+0x14>
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <XMC_USBD_lAssignTXFifo+0x6c>)
 8003028:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <XMC_USBD_lAssignTXFifo+0x6c>)
 8003038:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	4313      	orrs	r3, r2
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <XMC_USBD_lAssignTXFifo+0x6c>)
 8003044:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8003048:	797b      	ldrb	r3, [r7, #5]
 800304a:	713b      	strb	r3, [r7, #4]
  }
  return result;
 800304c:	793b      	ldrb	r3, [r7, #4]
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	1ffedd28 	.word	0x1ffedd28

08003060 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <XMC_USBD_lUnassignFifo+0x34>)
 800306c:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	b29b      	uxth	r3, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	b29b      	uxth	r3, r3
 800307e:	4013      	ands	r3, r2
 8003080:	b29a      	uxth	r2, r3
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <XMC_USBD_lUnassignFifo+0x34>)
 8003084:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	1ffedd28 	.word	0x1ffedd28

08003098 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6892      	ldr	r2, [r2, #8]
 80030b2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d909      	bls.n	80030ce <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80030c6:	441a      	add	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
 80030cc:	e003      	b.n	80030d6 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d119      	bne.n	8003118 <XMC_USBD_lStartReadXfer+0x80>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	7893      	ldrb	r3, [r2, #2]
 80030ee:	2101      	movs	r1, #1
 80030f0:	f361 03c4 	bfi	r3, r1, #3, #2
 80030f4:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	78d3      	ldrb	r3, [r2, #3]
 80030fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030fe:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800310a:	b2d9      	uxtb	r1, r3
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	7813      	ldrb	r3, [r2, #0]
 8003110:	f361 0306 	bfi	r3, r1, #0, #7
 8003114:	7013      	strb	r3, [r2, #0]
 8003116:	e033      	b.n	8003180 <XMC_USBD_lStartReadXfer+0xe8>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <XMC_USBD_lStartReadXfer+0x9c>
    {
      data.b.xfersize = 0U;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f36f 0312 	bfc	r3, #0, #19
 8003126:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8003128:	8a7b      	ldrh	r3, [r7, #18]
 800312a:	2201      	movs	r2, #1
 800312c:	f362 03cc 	bfi	r3, r2, #3, #10
 8003130:	827b      	strh	r3, [r7, #18]
 8003132:	e025      	b.n	8003180 <XMC_USBD_lStartReadXfer+0xe8>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6852      	ldr	r2, [r2, #4]
 8003142:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	4413      	add	r3, r2
 800314a:	3b01      	subs	r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	fbb3 f3f2 	udiv	r3, r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003160:	b29a      	uxth	r2, r3
 8003162:	8a7b      	ldrh	r3, [r7, #18]
 8003164:	f362 03cc 	bfi	r3, r2, #3, #10
 8003168:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f362 0312 	bfi	r3, r2, #0, #19
 800317e:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <XMC_USBD_lStartReadXfer+0x170>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	7b5b      	ldrb	r3, [r3, #13]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <XMC_USBD_lStartReadXfer+0x10c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <XMC_USBD_lStartReadXfer+0x174>)
 8003196:	3370      	adds	r3, #112	; 0x70
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a2:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	4a17      	ldr	r2, [pc, #92]	; (800320c <XMC_USBD_lStartReadXfer+0x174>)
 80031b0:	3370      	adds	r3, #112	; 0x70
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	4a11      	ldr	r2, [pc, #68]	; (800320c <XMC_USBD_lStartReadXfer+0x174>)
 80031c8:	3370      	adds	r3, #112	; 0x70
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e2:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4a07      	ldr	r2, [pc, #28]	; (800320c <XMC_USBD_lStartReadXfer+0x174>)
 80031f0:	3370      	adds	r3, #112	; 0x70
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]
}
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	1ffedd24 	.word	0x1ffedd24
 800320c:	1ffedd28 	.word	0x1ffedd28

08003210 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4a5d      	ldr	r2, [pc, #372]	; (800339c <XMC_USBD_lStartWriteXfer+0x18c>)
 8003228:	336a      	adds	r3, #106	; 0x6a
 800322a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003244:	4293      	cmp	r3, r2
 8003246:	d204      	bcs.n	8003252 <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	629a      	str	r2, [r3, #40]	; 0x28
 8003250:	e008      	b.n	8003264 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f36f 0312 	bfc	r3, #0, #19
 8003272:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 8003274:	89fb      	ldrh	r3, [r7, #14]
 8003276:	2201      	movs	r2, #1
 8003278:	f362 03cc 	bfi	r3, r2, #3, #10
 800327c:	81fb      	strh	r3, [r7, #14]
 800327e:	e06a      	b.n	8003356 <XMC_USBD_lStartWriteXfer+0x146>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d110      	bne.n	80032b0 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 800328e:	89fb      	ldrh	r3, [r7, #14]
 8003290:	2201      	movs	r2, #1
 8003292:	f362 03cc 	bfi	r3, r2, #3, #10
 8003296:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f362 0312 	bfi	r3, r2, #0, #19
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e02b      	b.n	8003308 <XMC_USBD_lStartWriteXfer+0xf8>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f362 0312 	bfi	r3, r2, #0, #19
 80032c4:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6852      	ldr	r2, [r2, #4]
 80032ee:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 80032f2:	b2d2      	uxtb	r2, r2
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80032f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032fe:	b29a      	uxth	r2, r3
 8003300:	89fb      	ldrh	r3, [r7, #14]
 8003302:	f362 03cc 	bfi	r3, r2, #3, #10
 8003306:	81fb      	strh	r3, [r7, #14]
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <XMC_USBD_lStartWriteXfer+0x190>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	7b5b      	ldrb	r3, [r3, #13]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10b      	bne.n	800332a <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800331a:	b2db      	uxtb	r3, r3
 800331c:	4a1f      	ldr	r2, [pc, #124]	; (800339c <XMC_USBD_lStartWriteXfer+0x18c>)
 800331e:	336a      	adds	r3, #106	; 0x6a
 8003320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003328:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <XMC_USBD_lStartWriteXfer+0x190>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	7b5b      	ldrb	r3, [r3, #13]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d110      	bne.n	8003356 <XMC_USBD_lStartWriteXfer+0x146>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <XMC_USBD_lStartWriteXfer+0x18c>)
 8003336:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800333a:	4a18      	ldr	r2, [pc, #96]	; (800339c <XMC_USBD_lStartWriteXfer+0x18c>)
 800333c:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8003340:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	4610      	mov	r0, r2
 800334e:	2201      	movs	r2, #1
 8003350:	4082      	lsls	r2, r0
 8003352:	430a      	orrs	r2, r1
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4a0e      	ldr	r2, [pc, #56]	; (800339c <XMC_USBD_lStartWriteXfer+0x18c>)
 8003362:	336a      	adds	r3, #106	; 0x6a
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003372:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 8003374:	7afb      	ldrb	r3, [r7, #11]
 8003376:	f043 0304 	orr.w	r3, r3, #4
 800337a:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4a05      	ldr	r2, [pc, #20]	; (800339c <XMC_USBD_lStartWriteXfer+0x18c>)
 8003388:	336a      	adds	r3, #106	; 0x6a
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	601a      	str	r2, [r3, #0]
}
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	1ffedd28 	.word	0x1ffedd28
 80033a0:	1ffedd24 	.word	0x1ffedd24

080033a4 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 80033ac:	4b4f      	ldr	r3, [pc, #316]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80033ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 80033b6:	7d3b      	ldrb	r3, [r7, #20]
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 80033be:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80033c0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	e01a      	b.n	8003404 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 80033ce:	4a47      	ldr	r2, [pc, #284]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	3370      	adds	r3, #112	; 0x70
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 80033de:	7efb      	ldrb	r3, [r7, #27]
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 80033e6:	7ebb      	ldrb	r3, [r7, #26]
 80033e8:	f36f 1345 	bfc	r3, #5, #1
 80033ec:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3370      	adds	r3, #112	; 0x70
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	601a      	str	r2, [r3, #0]
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d9e1      	bls.n	80033ce <XMC_USBD_lHandleUSBReset+0x2a>
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 800340a:	4b38      	ldr	r3, [pc, #224]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 800340c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003410:	2240      	movs	r2, #64	; 0x40
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 8003418:	2310      	movs	r3, #16
 800341a:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 800341c:	2340      	movs	r3, #64	; 0x40
 800341e:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 8003422:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800342a:	2301      	movs	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e011      	b.n	8003454 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8003430:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 8003432:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3b01      	subs	r3, #1
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	3204      	adds	r2, #4
 800343e:	0192      	lsls	r2, r2, #6
 8003440:	0892      	lsrs	r2, r2, #2
 8003442:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003446:	3340      	adds	r3, #64	; 0x40
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	605a      	str	r2, [r3, #4]
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d9ea      	bls.n	8003430 <XMC_USBD_lHandleUSBReset+0x8c>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 800345a:	2010      	movs	r0, #16
 800345c:	f7ff fd52 	bl	8002f04 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff fd4f 	bl	8002f04 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8003466:	f7ff fd8f 	bl	8002f88 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 800346e:	7b3b      	ldrb	r3, [r7, #12]
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 8003480:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8003488:	200f      	movs	r0, #15
 800348a:	f000 fbf1 	bl	8003c70 <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 800348e:	200f      	movs	r0, #15
 8003490:	f000 fc06 	bl	8003ca0 <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 8003496:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 800349e:	893b      	ldrh	r3, [r7, #8]
 80034a0:	f36f 130a 	bfc	r3, #4, #7
 80034a4:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80034a8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7b5b      	ldrb	r3, [r3, #13]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d104      	bne.n	80034c2 <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80034ba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80034be:	2200      	movs	r2, #0
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	f022 0210 	bic.w	r2, r2, #16
 80034ca:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	f022 0208 	bic.w	r2, r2, #8
 80034d4:	605a      	str	r2, [r3, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <XMC_USBD_lHandleUSBReset+0x148>)
 80034d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034dc:	2004      	movs	r0, #4
 80034de:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 80034e0:	2004      	movs	r0, #4
 80034e2:	f000 fb1f 	bl	8003b24 <XMC_USBD_ClearEvent>
}
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	1ffedd28 	.word	0x1ffedd28

080034f0 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <XMC_USBD_lHandleOTGInt+0x44>)
 80034f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8003500:	793b      	ldrb	r3, [r7, #4]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 800350c:	4a09      	ldr	r2, [pc, #36]	; (8003534 <XMC_USBD_lHandleOTGInt+0x44>)
 800350e:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8003512:	f36f 0382 	bfc	r3, #2, #1
 8003516:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <XMC_USBD_lHandleOTGInt+0x44>)
 800351c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003520:	2001      	movs	r0, #1
 8003522:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fb60 	bl	8003bec <XMC_USBD_lClearEventOTG>

}
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	1ffedd28 	.word	0x1ffedd28

08003538 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <XMC_USBD_lHandleEnumDone+0x74>)
 8003540:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8003548:	88bb      	ldrh	r3, [r7, #4]
 800354a:	f36f 030a 	bfc	r3, #0, #11
 800354e:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <XMC_USBD_lHandleEnumDone+0x74>)
 8003552:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 800355a:	4a14      	ldr	r2, [pc, #80]	; (80035ac <XMC_USBD_lHandleEnumDone+0x74>)
 800355c:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8003568:	4a10      	ldr	r2, [pc, #64]	; (80035ac <XMC_USBD_lHandleEnumDone+0x74>)
 800356a:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <XMC_USBD_lHandleEnumDone+0x74>)
 8003578:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800357c:	2002      	movs	r0, #2
 800357e:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <XMC_USBD_lHandleEnumDone+0x74>)
 8003582:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 800358a:	787b      	ldrb	r3, [r7, #1]
 800358c:	2209      	movs	r2, #9
 800358e:	f362 0385 	bfi	r3, r2, #2, #4
 8003592:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <XMC_USBD_lHandleEnumDone+0x74>)
 8003596:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 800359e:	200b      	movs	r0, #11
 80035a0:	f000 fac0 	bl	8003b24 <XMC_USBD_ClearEvent>
}
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	1ffedd28 	.word	0x1ffedd28

080035b0 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	; 0x30
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 80035b8:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80035ba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 80035c2:	4b68      	ldr	r3, [pc, #416]	; (8003764 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80035c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 80035cc:	4b65      	ldr	r3, [pc, #404]	; (8003764 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80035ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 80035d6:	8bfa      	ldrh	r2, [r7, #30]
 80035d8:	8b7b      	ldrh	r3, [r7, #26]
 80035da:	4013      	ands	r3, r2
 80035dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 80035e8:	e0ae      	b.n	8003748 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 80035ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80035ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035f0:	fa42 f303 	asr.w	r3, r2, r3
 80035f4:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 80035f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 80035fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 809c 	beq.w	800373e <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8003606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800360a:	2234      	movs	r2, #52	; 0x34
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	4a54      	ldr	r2, [pc, #336]	; (8003764 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8003612:	4413      	add	r3, r2
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8003616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800361a:	4a52      	ldr	r2, [pc, #328]	; (8003764 <XMC_USBD_lHandleOEPInt+0x1b4>)
 800361c:	3370      	adds	r3, #112	; 0x70
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7b5b      	ldrb	r3, [r3, #13]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d108      	bne.n	8003646 <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8003634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003638:	4a4a      	ldr	r2, [pc, #296]	; (8003764 <XMC_USBD_lHandleOEPInt+0x1b4>)
 800363a:	3370      	adds	r3, #112	; 0x70
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8003646:	7c3b      	ldrb	r3, [r7, #16]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d033      	beq.n	80036ba <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	7913      	ldrb	r3, [r2, #4]
 8003656:	f36f 1345 	bfc	r3, #5, #1
 800365a:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7b5b      	ldrb	r3, [r3, #13]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10e      	bne.n	8003682 <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8003664:	f107 030c 	add.w	r3, r7, #12
 8003668:	78db      	ldrb	r3, [r3, #3]
 800366a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8003672:	4613      	mov	r3, r2
 8003674:	075b      	lsls	r3, r3, #29
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f103 0218 	add.w	r2, r3, #24
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	611a      	str	r2, [r3, #16]
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7b5b      	ldrb	r3, [r3, #13]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d106      	bne.n	8003698 <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	441a      	add	r2, r3
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	f022 0210 	bic.w	r2, r2, #16
 80036a0:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80036a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80036a8:	2000      	movs	r0, #0
 80036aa:	2100      	movs	r1, #0
 80036ac:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 80036ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036b2:	2008      	movs	r0, #8
 80036b4:	4619      	mov	r1, r3
 80036b6:	f000 fac3 	bl	8003c40 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 80036ba:	7c3b      	ldrb	r3, [r7, #16]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d034      	beq.n	8003730 <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7b5b      	ldrb	r3, [r3, #13]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d115      	bne.n	80036fa <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	441a      	add	r2, r3
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	441a      	add	r2, r3
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	429a      	cmp	r2, r3
 8003704:	d111      	bne.n	800372a <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	f022 0210 	bic.w	r2, r2, #16
 8003716:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <XMC_USBD_lHandleOEPInt+0x1b4>)
 800371a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800371e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003722:	4610      	mov	r0, r2
 8003724:	2101      	movs	r1, #1
 8003726:	4798      	blx	r3
 8003728:	e002      	b.n	8003730 <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 800372a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800372c:	f7ff fcb4 	bl	8003098 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	f000 fa81 	bl	8003c40 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 800373e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003742:	3301      	adds	r3, #1
 8003744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 8003748:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800374a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800374e:	fa42 f303 	asr.w	r3, r2, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	f47f af49 	bne.w	80035ea <XMC_USBD_lHandleOEPInt+0x3a>
    }
    ep_num++;
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8003758:	200d      	movs	r0, #13
 800375a:	f000 f9e3 	bl	8003b24 <XMC_USBD_ClearEvent>
}
 800375e:	3730      	adds	r7, #48	; 0x30
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	1ffedd28 	.word	0x1ffedd28

08003768 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08c      	sub	sp, #48	; 0x30
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8003770:	4b6a      	ldr	r3, [pc, #424]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 8003772:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 800377a:	4b68      	ldr	r3, [pc, #416]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 800377c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8003788:	8abb      	ldrh	r3, [r7, #20]
 800378a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 8003792:	e0b5      	b.n	8003900 <XMC_USBD_lHandleIEPInt+0x198>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8003794:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800379a:	fa42 f303 	asr.w	r3, r2, r3
 800379e:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 80037a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 80037a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a3 	beq.w	80038f6 <XMC_USBD_lHandleIEPInt+0x18e>
    {
      ep = &xmc_device.ep[ep_num];
 80037b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037b4:	2234      	movs	r2, #52	; 0x34
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	4a58      	ldr	r2, [pc, #352]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 80037bc:	4413      	add	r3, r2
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 80037c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037c4:	4a55      	ldr	r2, [pc, #340]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 80037c6:	336a      	adds	r3, #106	; 0x6a
 80037c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 80037d0:	4b52      	ldr	r3, [pc, #328]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 80037d2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 80037e4:	01db      	lsls	r3, r3, #7
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	431a      	orrs	r2, r3
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	4013      	ands	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7b5b      	ldrb	r3, [r3, #13]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <XMC_USBD_lHandleIEPInt+0xa2>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 80037fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037fe:	4a47      	ldr	r2, [pc, #284]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 8003800:	336a      	adds	r3, #106	; 0x6a
 8003802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	7b5b      	ldrb	r3, [r3, #13]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d115      	bne.n	800383e <XMC_USBD_lHandleIEPInt+0xd6>
      {
        if (diepint.b.emptyintr)
 8003812:	7b3b      	ldrb	r3, [r7, #12]
 8003814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00f      	beq.n	800383e <XMC_USBD_lHandleIEPInt+0xd6>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 800381e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003820:	f7ff fb1e 	bl	8002e60 <XMC_USBD_lWriteFifo>
 8003824:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	441a      	add	r2, r3
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	441a      	add	r2, r3
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 800383e:	7b3b      	ldrb	r3, [r7, #12]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d04e      	beq.n	80038e8 <XMC_USBD_lHandleIEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	7b5b      	ldrb	r3, [r3, #13]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11d      	bne.n	800388e <XMC_USBD_lHandleIEPInt+0x126>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8003852:	897a      	ldrh	r2, [r7, #10]
 8003854:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8003858:	4013      	ands	r3, r2
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <XMC_USBD_lHandleIEPInt+0x126>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	2b00      	cmp	r3, #0
 8003868:	d111      	bne.n	800388e <XMC_USBD_lHandleIEPInt+0x126>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	441a      	add	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	441a      	add	r2, r3
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	429a      	cmp	r2, r3
 8003898:	d123      	bne.n	80038e2 <XMC_USBD_lHandleIEPInt+0x17a>
        {
          ep->inInUse = 0U;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	f022 0208 	bic.w	r2, r2, #8
 80038a2:	605a      	str	r2, [r3, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7b5b      	ldrb	r3, [r3, #13]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10e      	bne.n	80038ca <XMC_USBD_lHandleIEPInt+0x162>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 80038ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 80038b4:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 80038b8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80038ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80038be:	2001      	movs	r0, #1
 80038c0:	fa00 f202 	lsl.w	r2, r0, r2
 80038c4:	43d2      	mvns	r2, r2
 80038c6:	400a      	ands	r2, r1
        {
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 80038c8:	635a      	str	r2, [r3, #52]	; 0x34
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <XMC_USBD_lHandleIEPInt+0x1b4>)
 80038cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80038d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80038d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	4610      	mov	r0, r2
 80038dc:	2102      	movs	r1, #2
 80038de:	4798      	blx	r3
 80038e0:	e002      	b.n	80038e8 <XMC_USBD_lHandleIEPInt+0x180>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 80038e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038e4:	f7ff fc94 	bl	8003210 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	f000 f98f 	bl	8003c14 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 80038f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038fa:	3301      	adds	r3, #1
 80038fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 8003900:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003906:	fa42 f303 	asr.w	r3, r2, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	f47f af42 	bne.w	8003794 <XMC_USBD_lHandleIEPInt+0x2c>

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
    }
    ep_num++;
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 8003910:	200e      	movs	r0, #14
 8003912:	f000 f907 	bl	8003b24 <XMC_USBD_ClearEvent>
}
 8003916:	3730      	adds	r7, #48	; 0x30
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	1ffedd28 	.word	0x1ffedd28

08003920 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <XMC_USBD_lHandleRxFLvl+0x7c>)
 8003928:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 8003930:	79bb      	ldrb	r3, [r7, #6]
 8003932:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	2b05      	cmp	r3, #5
 800393c:	d82a      	bhi.n	8003994 <XMC_USBD_lHandleRxFLvl+0x74>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <XMC_USBD_lHandleRxFLvl+0x24>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003995 	.word	0x08003995
 8003948:	0800395d 	.word	0x0800395d
 800394c:	08003995 	.word	0x08003995
 8003950:	08003995 	.word	0x08003995
 8003954:	08003995 	.word	0x08003995
 8003958:	08003979 	.word	0x08003979
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 800395c:	793b      	ldrb	r3, [r7, #4]
 800395e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003962:	b2db      	uxtb	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	88bb      	ldrh	r3, [r7, #4]
 8003968:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800396c:	b29b      	uxth	r3, r3
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	f7ff fa01 	bl	8002d78 <XMC_USBD_lReadFifo>
      break;
 8003976:	e00e      	b.n	8003996 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8003978:	793b      	ldrb	r3, [r7, #4]
 800397a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	88bb      	ldrh	r3, [r7, #4]
 8003984:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8003988:	b29b      	uxth	r3, r3
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	f7ff f9f3 	bl	8002d78 <XMC_USBD_lReadFifo>
      break;
 8003992:	e000      	b.n	8003996 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8003994:	bf00      	nop
	}
  /* no need to clear */
}
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	1ffedd28 	.word	0x1ffedd28

080039a0 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 80039a8:	4b4f      	ldr	r3, [pc, #316]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 80039aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 80039b2:	4b4d      	ldr	r3, [pc, #308]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 80039b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4013      	ands	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 80039c0:	7a3b      	ldrb	r3, [r7, #8]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 80039cc:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 80039ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039d2:	2009      	movs	r0, #9
 80039d4:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 80039d6:	2009      	movs	r0, #9
 80039d8:	f000 f8a4 	bl	8003b24 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7b5b      	ldrb	r3, [r3, #13]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d119      	bne.n	8003a18 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 80039e4:	7a3b      	ldrb	r3, [r7, #8]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 80039f0:	7b3b      	ldrb	r3, [r7, #12]
 80039f2:	f36f 1304 	bfc	r3, #4, #1
 80039f6:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80039f8:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 80039fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8003a02:	f7ff ff8d 	bl	8003920 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8003a06:	7b3b      	ldrb	r3, [r7, #12]
 8003a08:	f043 0310 	orr.w	r3, r3, #16
 8003a0c:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 8003a10:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8003a18:	7a7b      	ldrb	r3, [r7, #9]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8003a24:	200a      	movs	r0, #10
 8003a26:	f000 f87d 	bl	8003b24 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 8003a2a:	7a7b      	ldrb	r3, [r7, #9]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8003a36:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 8003a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a3c:	2006      	movs	r0, #6
 8003a3e:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8003a40:	2006      	movs	r0, #6
 8003a42:	f000 f86f 	bl	8003b24 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8003a46:	7afb      	ldrb	r3, [r7, #11]
 8003a48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 8003a54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a58:	2008      	movs	r0, #8
 8003a5a:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8003a5c:	2008      	movs	r0, #8
 8003a5e:	f000 f861 	bl	8003b24 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00e      	beq.n	8003a8c <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 8003a70:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <XMC_USBD_IRQHandler+0x148>)
 8003a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a82:	2000      	movs	r0, #0
 8003a84:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8003a86:	2000      	movs	r0, #0
 8003a88:	f000 f84c 	bl	8003b24 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8003a8c:	7a7b      	ldrb	r3, [r7, #9]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fc83 	bl	80033a4 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 8003a9e:	7a7b      	ldrb	r3, [r7, #9]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8003aaa:	f7ff fd45 	bl	8003538 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8003aae:	7abb      	ldrb	r3, [r7, #10]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fe54 	bl	8003768 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8003ac0:	7abb      	ldrb	r3, [r7, #10]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fd6f 	bl	80035b0 <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 8003ad2:	7a3b      	ldrb	r3, [r7, #8]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 8003ade:	f7ff fd07 	bl	80034f0 <XMC_USBD_lHandleOTGInt>
  }

}
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	1ffedd28 	.word	0x1ffedd28

08003aec <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 8003af0:	4804      	ldr	r0, [pc, #16]	; (8003b04 <XMC_USBD_Enable+0x18>)
 8003af2:	f7fe fa7d 	bl	8001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8003af6:	4803      	ldr	r0, [pc, #12]	; (8003b04 <XMC_USBD_Enable+0x18>)
 8003af8:	f7fe f8fe 	bl	8001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8003afc:	f7fe faf4 	bl	80020e8 <XMC_SCU_POWER_EnableUsb>
}
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000080 	.word	0x20000080

08003b08 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8003b0c:	4804      	ldr	r0, [pc, #16]	; (8003b20 <XMC_USBD_Disable+0x18>)
 8003b0e:	f7fe f8d7 	bl	8001cc0 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
 8003b12:	4803      	ldr	r0, [pc, #12]	; (8003b20 <XMC_USBD_Disable+0x18>)
 8003b14:	f7fe fa50 	bl	8001fb8 <XMC_SCU_CLOCK_GatePeripheralClock>
#endif
  XMC_SCU_POWER_DisableUsb();
 8003b18:	f7fe faf2 	bl	8002100 <XMC_SCU_POWER_DisableUsb>
}
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000080 	.word	0x20000080

08003b24 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
  switch(event)
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	2b0d      	cmp	r3, #13
 8003b36:	d84c      	bhi.n	8003bd2 <XMC_USBD_ClearEvent+0xae>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <XMC_USBD_ClearEvent+0x1c>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003bd3 	.word	0x08003bd3
 8003b48:	08003bd3 	.word	0x08003bd3
 8003b4c:	08003bd3 	.word	0x08003bd3
 8003b50:	08003b83 	.word	0x08003b83
 8003b54:	08003bd3 	.word	0x08003bd3
 8003b58:	08003b8d 	.word	0x08003b8d
 8003b5c:	08003b97 	.word	0x08003b97
 8003b60:	08003ba1 	.word	0x08003ba1
 8003b64:	08003bab 	.word	0x08003bab
 8003b68:	08003bb5 	.word	0x08003bb5
 8003b6c:	08003bbf 	.word	0x08003bbf
 8003b70:	08003bd3 	.word	0x08003bd3
 8003b74:	08003bc9 	.word	0x08003bc9
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7e:	73fb      	strb	r3, [r7, #15]
	  break;
 8003b80:	e028      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8003b82:	7b7b      	ldrb	r3, [r7, #13]
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	737b      	strb	r3, [r7, #13]
	  break;
 8003b8a:	e023      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8003b8c:	7b7b      	ldrb	r3, [r7, #13]
 8003b8e:	f043 0308 	orr.w	r3, r3, #8
 8003b92:	737b      	strb	r3, [r7, #13]
	  break;
 8003b94:	e01e      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9c:	73fb      	strb	r3, [r7, #15]
	  break;
 8003b9e:	e019      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba6:	73fb      	strb	r3, [r7, #15]
	  break;
 8003ba8:	e014      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8003baa:	7b3b      	ldrb	r3, [r7, #12]
 8003bac:	f043 0308 	orr.w	r3, r3, #8
 8003bb0:	733b      	strb	r3, [r7, #12]
	  break;
 8003bb2:	e00f      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8003bb4:	7b7b      	ldrb	r3, [r7, #13]
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	737b      	strb	r3, [r7, #13]
	  break;
 8003bbc:	e00a      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 8003bbe:	7b7b      	ldrb	r3, [r7, #13]
 8003bc0:	f043 0320 	orr.w	r3, r3, #32
 8003bc4:	737b      	strb	r3, [r7, #13]
	  break;
 8003bc6:	e005      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8003bc8:	7bbb      	ldrb	r3, [r7, #14]
 8003bca:	f043 0308 	orr.w	r3, r3, #8
 8003bce:	73bb      	strb	r3, [r7, #14]
	  break;
 8003bd0:	e000      	b.n	8003bd4 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 8003bd2:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <XMC_USBD_ClearEvent+0xc4>)
 8003bd6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	615a      	str	r2, [r3, #20]
}
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	1ffedd28 	.word	0x1ffedd28

08003bec <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <XMC_USBD_lClearEventOTG+0x24>)
 8003bfe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]
}
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	1ffedd28 	.word	0x1ffedd28

08003c14 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <XMC_USBD_ClearEventINEP+0x28>)
 8003c28:	336a      	adds	r3, #106	; 0x6a
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	609a      	str	r2, [r3, #8]
}
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	1ffedd28 	.word	0x1ffedd28

08003c40 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	4a06      	ldr	r2, [pc, #24]	; (8003c6c <XMC_USBD_ClearEventOUTEP+0x2c>)
 8003c54:	3370      	adds	r3, #112	; 0x70
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	1ffedd28 	.word	0x1ffedd28

08003c70 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <XMC_USBD_EnableEventOUTEP+0x2c>)
 8003c7e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003c82:	4a06      	ldr	r2, [pc, #24]	; (8003c9c <XMC_USBD_EnableEventOUTEP+0x2c>)
 8003c84:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8003c88:	6951      	ldr	r1, [r2, #20]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	615a      	str	r2, [r3, #20]
}
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	1ffedd28 	.word	0x1ffedd28

08003ca0 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <XMC_USBD_EnableEventINEP+0x2c>)
 8003cae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003cb2:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <XMC_USBD_EnableEventINEP+0x2c>)
 8003cb4:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8003cb8:	6911      	ldr	r1, [r2, #16]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	611a      	str	r2, [r3, #16]
}
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	1ffedd28 	.word	0x1ffedd28

08003cd0 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8003cda:	793b      	ldrb	r3, [r7, #4]
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 8003ce2:	793b      	ldrb	r3, [r7, #4]
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
  cap.event_power_on = 1U;
#else
  cap.event_power_off = 0U;
 8003cea:	793b      	ldrb	r3, [r7, #4]
 8003cec:	f36f 0341 	bfc	r3, #1, #1
 8003cf0:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 0U;
 8003cf2:	793b      	ldrb	r3, [r7, #4]
 8003cf4:	f36f 0300 	bfc	r3, #0, #1
 8003cf8:	713b      	strb	r3, [r7, #4]
#endif
  cap.event_high_speed = 0U;
 8003cfa:	793b      	ldrb	r3, [r7, #4]
 8003cfc:	f36f 1345 	bfc	r3, #5, #1
 8003d00:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 8003d02:	797b      	ldrb	r3, [r7, #5]
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8003d0a:	793b      	ldrb	r3, [r7, #4]
 8003d0c:	f043 0310 	orr.w	r3, r3, #16
 8003d10:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 8003d12:	793b      	ldrb	r3, [r7, #4]
 8003d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d18:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8003d1a:	793b      	ldrb	r3, [r7, #4]
 8003d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d20:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f36f 235f 	bfc	r3, #9, #23
 8003d28:	607b      	str	r3, [r7, #4]
  return cap;
 8003d2a:	687b      	ldr	r3, [r7, #4]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 8003d40:	f7ff fed4 	bl	8003aec <XMC_USBD_Enable>
  
  usbd_init = obj;
 8003d44:	4a87      	ldr	r2, [pc, #540]	; (8003f64 <XMC_USBD_Init+0x22c>)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4e:	e00c      	b.n	8003d6a <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8003d50:	4a85      	ldr	r2, [pc, #532]	; (8003f68 <XMC_USBD_Init+0x230>)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	2140      	movs	r1, #64	; 0x40
 8003d56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8003d5a:	4a84      	ldr	r2, [pc, #528]	; (8003f6c <XMC_USBD_Init+0x234>)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  XMC_USBD_Enable();
  
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	3301      	adds	r3, #1
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d9ef      	bls.n	8003d50 <XMC_USBD_Init+0x18>
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8003d70:	487f      	ldr	r0, [pc, #508]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003d72:	2100      	movs	r1, #0
 8003d74:	f44f 7202 	mov.w	r2, #520	; 0x208
 8003d78:	f00e fbcf 	bl	801251a <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a7b      	ldr	r2, [pc, #492]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003d82:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4a79      	ldr	r2, [pc, #484]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003d8c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a75      	ldr	r2, [pc, #468]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003d9c:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da6:	4a72      	ldr	r2, [pc, #456]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003da8:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
 8003db0:	e00c      	b.n	8003dcc <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	3348      	adds	r3, #72	; 0x48
 8003db6:	015b      	lsls	r3, r3, #5
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	441a      	add	r2, r3
 8003dbc:	496c      	ldr	r1, [pc, #432]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	336a      	adds	r3, #106	; 0x6a
 8003dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	3301      	adds	r3, #1
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d9ef      	bls.n	8003db2 <XMC_USBD_Init+0x7a>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	e00d      	b.n	8003df4 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	3358      	adds	r3, #88	; 0x58
 8003ddc:	015b      	lsls	r3, r3, #5
 8003dde:	6a3a      	ldr	r2, [r7, #32]
 8003de0:	441a      	add	r2, r3
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8003de2:	4963      	ldr	r1, [pc, #396]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	3370      	adds	r3, #112	; 0x70
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d9ee      	bls.n	8003dd8 <XMC_USBD_Init+0xa0>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	e00c      	b.n	8003e1a <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	3301      	adds	r3, #1
 8003e04:	031b      	lsls	r3, r3, #12
 8003e06:	6a3a      	ldr	r2, [r7, #32]
 8003e08:	441a      	add	r2, r3
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8003e0a:	4959      	ldr	r1, [pc, #356]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	3378      	adds	r3, #120	; 0x78
 8003e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	3301      	adds	r3, #1
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	2b06      	cmp	r3, #6
 8003e1e:	d9ef      	bls.n	8003e00 <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003e22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8003e2a:	7f3b      	ldrb	r3, [r7, #28]
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8003e32:	7f3b      	ldrb	r3, [r7, #28]
 8003e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e38:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7b5b      	ldrb	r3, [r3, #13]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d104      	bne.n	8003e4c <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8003e42:	7f3b      	ldrb	r3, [r7, #28]
 8003e44:	f043 0320 	orr.w	r3, r3, #32
 8003e48:	773b      	strb	r3, [r7, #28]
 8003e4a:	e003      	b.n	8003e54 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8003e4c:	7f3b      	ldrb	r3, [r7, #28]
 8003e4e:	f36f 1345 	bfc	r3, #5, #1
 8003e52:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8003e54:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003e56:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8003e5e:	4b44      	ldr	r3, [pc, #272]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003e60:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8003e68:	7efb      	ldrb	r3, [r7, #27]
 8003e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e6e:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8003e70:	7e7b      	ldrb	r3, [r7, #25]
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8003e78:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003e7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003e84:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8003e8c:	7d3b      	ldrb	r3, [r7, #20]
 8003e8e:	f043 0303 	orr.w	r3, r3, #3
 8003e92:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8003e94:	7dbb      	ldrb	r3, [r7, #22]
 8003e96:	f36f 13c7 	bfc	r3, #7, #1
 8003e9a:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8003e9c:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003e9e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8003ea6:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003ea8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8003eb0:	7c3b      	ldrb	r3, [r7, #16]
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003eba:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8003ec2:	2010      	movs	r0, #16
 8003ec4:	f7ff f81e 	bl	8002f04 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8003ec8:	f7ff f85e 	bl	8002f88 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8003ecc:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003ece:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8003ed6:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003ed8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 8003ee6:	7b3b      	ldrb	r3, [r7, #12]
 8003ee8:	f043 0302 	orr.w	r3, r3, #2
 8003eec:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 8003eee:	7b3b      	ldrb	r3, [r7, #12]
 8003ef0:	f043 0304 	orr.w	r3, r3, #4
 8003ef4:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003efc:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 8003efe:	7b7b      	ldrb	r3, [r7, #13]
 8003f00:	f043 0310 	orr.w	r3, r3, #16
 8003f04:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 8003f06:	7b7b      	ldrb	r3, [r7, #13]
 8003f08:	f043 0320 	orr.w	r3, r3, #32
 8003f0c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 8003f0e:	7b7b      	ldrb	r3, [r7, #13]
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 8003f16:	7b7b      	ldrb	r3, [r7, #13]
 8003f18:	f043 0308 	orr.w	r3, r3, #8
 8003f1c:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f24:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 8003f26:	7b3b      	ldrb	r3, [r7, #12]
 8003f28:	f043 0308 	orr.w	r3, r3, #8
 8003f2c:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7b5b      	ldrb	r3, [r3, #13]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d103      	bne.n	8003f3e <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 8003f36:	7b3b      	ldrb	r3, [r7, #12]
 8003f38:	f043 0310 	orr.w	r3, r3, #16
 8003f3c:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 8003f46:	7bbb      	ldrb	r3, [r7, #14]
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <XMC_USBD_Init+0x238>)
 8003f50:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	1ffedd24 	.word	0x1ffedd24
 8003f68:	1ffed5f8 	.word	0x1ffed5f8
 8003f6c:	1ffed614 	.word	0x1ffed614
 8003f70:	1ffedd28 	.word	0x1ffedd28

08003f74 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <XMC_USBD_Uninitialize+0x38>)
 8003f7c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8003f84:	793b      	ldrb	r3, [r7, #4]
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <XMC_USBD_Uninitialize+0x38>)
 8003f8e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8003f96:	4805      	ldr	r0, [pc, #20]	; (8003fac <XMC_USBD_Uninitialize+0x38>)
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f44f 7202 	mov.w	r2, #520	; 0x208
 8003f9e:	f00e fabc 	bl	801251a <memset>
  return XMC_USBD_STATUS_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	1ffedd28 	.word	0x1ffedd28

08003fb0 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <XMC_USBD_DeviceConnect+0x30>)
 8003fb8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 8003fc0:	793b      	ldrb	r3, [r7, #4]
 8003fc2:	f36f 0341 	bfc	r3, #1, #1
 8003fc6:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <XMC_USBD_DeviceConnect+0x30>)
 8003fca:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	1ffedd28 	.word	0x1ffedd28

08003fe4 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <XMC_USBD_DeviceDisconnect+0x30>)
 8003fec:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8003ff4:	793b      	ldrb	r3, [r7, #4]
 8003ff6:	f043 0302 	orr.w	r3, r3, #2
 8003ffa:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <XMC_USBD_DeviceDisconnect+0x30>)
 8003ffe:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	1ffedd28 	.word	0x1ffedd28

08004018 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 8004024:	7b3b      	ldrb	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f362 03c4 	bfi	r3, r2, #3, #2
 800402c:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <XMC_USBD_DeviceGetState+0x60>)
 8004030:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004034:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004038:	b2da      	uxtb	r2, r3
 800403a:	7b3b      	ldrb	r3, [r7, #12]
 800403c:	f362 0341 	bfi	r3, r2, #1, #1
 8004040:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fe fe62 	bl	8002d0c <XMC_USBD_lDeviceActive>
 8004048:	4603      	mov	r3, r0
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	7b3b      	ldrb	r3, [r7, #12]
 8004052:	f362 0382 	bfi	r3, r2, #2, #1
 8004056:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <XMC_USBD_DeviceGetState+0x60>)
 800405a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800405e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	7b3b      	ldrb	r3, [r7, #12]
 8004066:	f362 0300 	bfi	r3, r2, #0, #1
 800406a:	733b      	strb	r3, [r7, #12]
  return state;
 800406c:	68fb      	ldr	r3, [r7, #12]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	1ffedd28 	.word	0x1ffedd28

0800407c <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	6039      	str	r1, [r7, #0]
 8004086:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	2234      	movs	r2, #52	; 0x34
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <XMC_USBD_EndpointReadStart+0x88>)
 8004096:	4413      	add	r3, r2
 8004098:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <XMC_USBD_EndpointReadStart+0x3c>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	791b      	ldrb	r3, [r3, #4]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <XMC_USBD_EndpointReadStart+0x42>
  {
    result = XMC_USBD_STATUS_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e01c      	b.n	80040f8 <XMC_USBD_EndpointReadStart+0x7c>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d202      	bcs.n	80040ce <XMC_USBD_EndpointReadStart+0x52>
    {
      size = ep->outBufferSize;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2200      	movs	r2, #0
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 80040ee:	68b8      	ldr	r0, [r7, #8]
 80040f0:	f7fe ffd2 	bl	8003098 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	1ffedd28 	.word	0x1ffedd28

08004108 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2234      	movs	r2, #52	; 0x34
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <XMC_USBD_EndpointRead+0x74>)
 8004120:	4413      	add	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d202      	bcs.n	8004134 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	4413      	add	r3, r2
 800413e:	68b8      	ldr	r0, [r7, #8]
 8004140:	4619      	mov	r1, r3
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	f00e f9de 	bl	8012504 <memcpy>
  ep->outBytesAvailable -= length;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1ad2      	subs	r2, r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d006      	beq.n	800416a <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	441a      	add	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	619a      	str	r2, [r3, #24]
 8004168:	e002      	b.n	8004170 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 8004170:	687b      	ldr	r3, [r7, #4]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	1ffedd28 	.word	0x1ffedd28

08004180 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	2234      	movs	r2, #52	; 0x34
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	4a22      	ldr	r2, [pc, #136]	; (8004224 <XMC_USBD_EndpointWrite+0xa4>)
 800419c:	4413      	add	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	791b      	ldrb	r3, [r3, #4]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e031      	b.n	8004218 <XMC_USBD_EndpointWrite+0x98>
  }
  else if (ep->inInUse == 1U)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	08db      	lsrs	r3, r3, #3
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <XMC_USBD_EndpointWrite+0x4a>
  {
    result=(int32_t)0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e026      	b.n	8004218 <XMC_USBD_EndpointWrite+0x98>
  }
  else
  {
    if (length > ep->inBufferSize)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d202      	bcs.n	80041da <XMC_USBD_EndpointWrite+0x5a>
    {
      length = ep->inBufferSize;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4618      	mov	r0, r3
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	f00e f98e 	bl	8012504 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2200      	movs	r2, #0
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2200      	movs	r2, #0
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	f042 0208 	orr.w	r2, r2, #8
 800420a:	605a      	str	r2, [r3, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 800420c:	6938      	ldr	r0, [r7, #16]
 800420e:	f7fe ffff 	bl	8003210 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	617b      	str	r3, [r7, #20]
  }
  return result;
 8004218:	697b      	ldr	r3, [r7, #20]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	1ffedd28 	.word	0x1ffedd28

08004228 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	460a      	mov	r2, r1
 8004232:	71fb      	strb	r3, [r7, #7]
 8004234:	4613      	mov	r3, r2
 8004236:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <XMC_USBD_DeviceSetAddress+0x48>)
 800423a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8004242:	79bb      	ldrb	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10c      	bne.n	8004262 <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800424e:	b2da      	uxtb	r2, r3
 8004250:	89bb      	ldrh	r3, [r7, #12]
 8004252:	f362 130a 	bfi	r3, r2, #4, #7
 8004256:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <XMC_USBD_DeviceSetAddress+0x48>)
 800425a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	1ffedd28 	.word	0x1ffedd28

08004274 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	460a      	mov	r2, r1
 800427e:	71fb      	strb	r3, [r7, #7]
 8004280:	4613      	mov	r3, r2
 8004282:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	2234      	movs	r2, #52	; 0x34
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	4a4a      	ldr	r2, [pc, #296]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 8004292:	4413      	add	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  if (stall)
 8004296:	79bb      	ldrb	r3, [r7, #6]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d040      	beq.n	800431e <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	b25b      	sxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	da1a      	bge.n	80042da <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	4a43      	ldr	r2, [pc, #268]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 80042b0:	336a      	adds	r3, #106	; 0x6a
 80042b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80042ba:	7abb      	ldrb	r3, [r7, #10]
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4a3b      	ldr	r2, [pc, #236]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 80042ce:	336a      	adds	r3, #106	; 0x6a
 80042d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e01b      	b.n	8004312 <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	4a35      	ldr	r2, [pc, #212]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 80042e6:	3370      	adds	r3, #112	; 0x70
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80042f2:	7abb      	ldrb	r3, [r7, #10]
 80042f4:	f043 0320 	orr.w	r3, r3, #32
 80042f8:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4a2d      	ldr	r2, [pc, #180]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 8004306:	3370      	adds	r3, #112	; 0x70
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	7913      	ldrb	r3, [r2, #4]
 8004316:	f043 0320 	orr.w	r3, r3, #32
 800431a:	7113      	strb	r3, [r2, #4]
 800431c:	e047      	b.n	80043ae <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	b25b      	sxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	da1e      	bge.n	8004364 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800432e:	b2db      	uxtb	r3, r3
 8004330:	4a22      	ldr	r2, [pc, #136]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 8004332:	336a      	adds	r3, #106	; 0x6a
 8004334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 800433c:	7abb      	ldrb	r3, [r7, #10]
 800433e:	f36f 1345 	bfc	r3, #5, #1
 8004342:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8004344:	7afb      	ldrb	r3, [r7, #11]
 8004346:	f043 0310 	orr.w	r3, r3, #16
 800434a:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4a19      	ldr	r2, [pc, #100]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 8004358:	336a      	adds	r3, #106	; 0x6a
 800435a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e01f      	b.n	80043a4 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800436c:	b2db      	uxtb	r3, r3
 800436e:	4a13      	ldr	r2, [pc, #76]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 8004370:	3370      	adds	r3, #112	; 0x70
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 800437c:	7abb      	ldrb	r3, [r7, #10]
 800437e:	f36f 1345 	bfc	r3, #5, #1
 8004382:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8004384:	7afb      	ldrb	r3, [r7, #11]
 8004386:	f043 0310 	orr.w	r3, r3, #16
 800438a:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004394:	b2db      	uxtb	r3, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <XMC_USBD_EndpointStall+0x148>)
 8004398:	3370      	adds	r3, #112	; 0x70
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	7913      	ldrb	r3, [r2, #4]
 80043a8:	f36f 1345 	bfc	r3, #5, #1
 80043ac:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	1ffedd28 	.word	0x1ffedd28

080043c0 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	2234      	movs	r2, #52	; 0x34
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <XMC_USBD_EndpointAbort+0x84>)
 80043d8:	4413      	add	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	f022 0208 	bic.w	r2, r2, #8
 80043f2:	605a      	str	r2, [r3, #4]
  }
  if (!ep->address_u.address_st.direction)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	f022 0210 	bic.w	r2, r2, #16
 800440a:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	7913      	ldrb	r3, [r2, #4]
 8004410:	f36f 1345 	bfc	r3, #5, #1
 8004414:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	1ffedd28 	.word	0x1ffedd28

08004448 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
 8004452:	460b      	mov	r3, r1
 8004454:	71bb      	strb	r3, [r7, #6]
 8004456:	4613      	mov	r3, r2
 8004458:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800445a:	4b98      	ldr	r3, [pc, #608]	; (80046bc <XMC_USBD_EndpointConfigure+0x274>)
 800445c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	2234      	movs	r2, #52	; 0x34
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	4a92      	ldr	r2, [pc, #584]	; (80046bc <XMC_USBD_EndpointConfigure+0x274>)
 8004472:	4413      	add	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	2100      	movs	r1, #0
 800447a:	2234      	movs	r2, #52	; 0x34
 800447c:	f00e f84d 	bl	801251a <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	79fa      	ldrb	r2, [r7, #7]
 8004484:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	7913      	ldrb	r3, [r2, #4]
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8004490:	88bb      	ldrh	r3, [r7, #4]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004498:	b2d9      	uxtb	r1, r3
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	6853      	ldr	r3, [r2, #4]
 800449e:	f361 23d1 	bfi	r3, r1, #11, #7
 80044a2:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <XMC_USBD_EndpointConfigure+0x74>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	6893      	ldr	r3, [r2, #8]
 80044b0:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80044b4:	f361 0312 	bfi	r3, r1, #0, #19
 80044b8:	6093      	str	r3, [r2, #8]
 80044ba:	e005      	b.n	80044c8 <XMC_USBD_EndpointConfigure+0x80>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	6893      	ldr	r3, [r2, #8]
 80044c0:	2140      	movs	r1, #64	; 0x40
 80044c2:	f361 0312 	bfi	r3, r1, #0, #19
 80044c6:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	4a7a      	ldr	r2, [pc, #488]	; (80046c0 <XMC_USBD_EndpointConfigure+0x278>)
 80044d6:	441a      	add	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	4a76      	ldr	r2, [pc, #472]	; (80046c4 <XMC_USBD_EndpointConfigure+0x27c>)
 80044ea:	441a      	add	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	4b72      	ldr	r3, [pc, #456]	; (80046c8 <XMC_USBD_EndpointConfigure+0x280>)
 80044fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	4b6e      	ldr	r3, [pc, #440]	; (80046cc <XMC_USBD_EndpointConfigure+0x284>)
 8004514:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <XMC_USBD_EndpointConfigure+0xe8>
 800452a:	79bb      	ldrb	r3, [r7, #6]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d17a      	bne.n	8004626 <XMC_USBD_EndpointConfigure+0x1de>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4a60      	ldr	r2, [pc, #384]	; (80046bc <XMC_USBD_EndpointConfigure+0x274>)
 800453c:	336a      	adds	r3, #106	; 0x6a
 800453e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8004546:	7b7b      	ldrb	r3, [r7, #13]
 8004548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454c:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800454e:	79bb      	ldrb	r3, [r7, #6]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	b2da      	uxtb	r2, r3
 8004556:	7bbb      	ldrb	r3, [r7, #14]
 8004558:	f362 0383 	bfi	r3, r2, #2, #2
 800455c:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800455e:	79bb      	ldrb	r3, [r7, #6]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d124      	bne.n	80045ae <XMC_USBD_EndpointConfigure+0x166>
    {
			switch(ep_max_packet_size)
 8004564:	88bb      	ldrh	r3, [r7, #4]
 8004566:	2b10      	cmp	r3, #16
 8004568:	d014      	beq.n	8004594 <XMC_USBD_EndpointConfigure+0x14c>
 800456a:	2b10      	cmp	r3, #16
 800456c:	dc02      	bgt.n	8004574 <XMC_USBD_EndpointConfigure+0x12c>
 800456e:	2b08      	cmp	r3, #8
 8004570:	d016      	beq.n	80045a0 <XMC_USBD_EndpointConfigure+0x158>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8004572:	e01b      	b.n	80045ac <XMC_USBD_EndpointConfigure+0x164>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 8004574:	2b20      	cmp	r3, #32
 8004576:	d007      	beq.n	8004588 <XMC_USBD_EndpointConfigure+0x140>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d000      	beq.n	800457e <XMC_USBD_EndpointConfigure+0x136>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 800457c:	e016      	b.n	80045ac <XMC_USBD_EndpointConfigure+0x164>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
			{
				case (64U):
				data.b.mps = 0x0U;
 800457e:	89bb      	ldrh	r3, [r7, #12]
 8004580:	f36f 030a 	bfc	r3, #0, #11
 8004584:	81bb      	strh	r3, [r7, #12]
				break;
 8004586:	e011      	b.n	80045ac <XMC_USBD_EndpointConfigure+0x164>
				case (32U):
				data.b.mps = 0x1U;
 8004588:	89bb      	ldrh	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f362 030a 	bfi	r3, r2, #0, #11
 8004590:	81bb      	strh	r3, [r7, #12]
				break;
 8004592:	e00b      	b.n	80045ac <XMC_USBD_EndpointConfigure+0x164>
				case (16U):
				data.b.mps = 0x2U;
 8004594:	89bb      	ldrh	r3, [r7, #12]
 8004596:	2202      	movs	r2, #2
 8004598:	f362 030a 	bfi	r3, r2, #0, #11
 800459c:	81bb      	strh	r3, [r7, #12]
				break;
 800459e:	e005      	b.n	80045ac <XMC_USBD_EndpointConfigure+0x164>
				case (8U):
				data.b.mps = 0x3U;
 80045a0:	89bb      	ldrh	r3, [r7, #12]
 80045a2:	2203      	movs	r2, #3
 80045a4:	f362 030a 	bfi	r3, r2, #0, #11
 80045a8:	81bb      	strh	r3, [r7, #12]
				break;
 80045aa:	bf00      	nop
 80045ac:	e007      	b.n	80045be <XMC_USBD_EndpointConfigure+0x176>
				break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80045ae:	88bb      	ldrh	r3, [r7, #4]
 80045b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	89bb      	ldrh	r3, [r7, #12]
 80045b8:	f362 030a 	bfi	r3, r2, #0, #11
 80045bc:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	f043 0310 	orr.w	r3, r3, #16
 80045c4:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 80045c6:	7bbb      	ldrb	r3, [r7, #14]
 80045c8:	f36f 1345 	bfc	r3, #5, #1
 80045cc:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 80045ce:	f7fe fd0f 	bl	8002ff0 <XMC_USBD_lAssignTXFifo>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	b2d9      	uxtb	r1, r3
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	8893      	ldrh	r3, [r2, #4]
 80045de:	f361 1389 	bfi	r3, r1, #6, #4
 80045e2:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	889b      	ldrh	r3, [r3, #4]
 80045e8:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	89fb      	ldrh	r3, [r7, #14]
 80045f0:	f362 1389 	bfi	r3, r2, #6, #4
 80045f4:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4a2e      	ldr	r2, [pc, #184]	; (80046bc <XMC_USBD_EndpointConfigure+0x274>)
 8004602:	336a      	adds	r3, #106	; 0x6a
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800460c:	8a3a      	ldrh	r2, [r7, #16]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004616:	b2db      	uxtb	r3, r3
 8004618:	4619      	mov	r1, r3
 800461a:	2301      	movs	r3, #1
 800461c:	408b      	lsls	r3, r1
 800461e:	b29b      	uxth	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <XMC_USBD_EndpointConfigure+0x1f2>
 8004634:	79bb      	ldrb	r3, [r7, #6]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d173      	bne.n	8004722 <XMC_USBD_EndpointConfigure+0x2da>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <XMC_USBD_EndpointConfigure+0x274>)
 8004646:	3370      	adds	r3, #112	; 0x70
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8004652:	7a7b      	ldrb	r3, [r7, #9]
 8004654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004658:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800465a:	79bb      	ldrb	r3, [r7, #6]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	b2da      	uxtb	r2, r3
 8004662:	7abb      	ldrb	r3, [r7, #10]
 8004664:	f362 0383 	bfi	r3, r2, #2, #2
 8004668:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800466a:	79bb      	ldrb	r3, [r7, #6]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d12f      	bne.n	80046d0 <XMC_USBD_EndpointConfigure+0x288>
		{
			switch(ep_max_packet_size)
 8004670:	88bb      	ldrh	r3, [r7, #4]
 8004672:	2b10      	cmp	r3, #16
 8004674:	d014      	beq.n	80046a0 <XMC_USBD_EndpointConfigure+0x258>
 8004676:	2b10      	cmp	r3, #16
 8004678:	dc02      	bgt.n	8004680 <XMC_USBD_EndpointConfigure+0x238>
 800467a:	2b08      	cmp	r3, #8
 800467c:	d016      	beq.n	80046ac <XMC_USBD_EndpointConfigure+0x264>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 800467e:	e01b      	b.n	80046b8 <XMC_USBD_EndpointConfigure+0x270>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 8004680:	2b20      	cmp	r3, #32
 8004682:	d007      	beq.n	8004694 <XMC_USBD_EndpointConfigure+0x24c>
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d000      	beq.n	800468a <XMC_USBD_EndpointConfigure+0x242>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8004688:	e016      	b.n	80046b8 <XMC_USBD_EndpointConfigure+0x270>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
			{
				case (64U):
					data.b.mps = 0x0U;
 800468a:	893b      	ldrh	r3, [r7, #8]
 800468c:	f36f 030a 	bfc	r3, #0, #11
 8004690:	813b      	strh	r3, [r7, #8]
					break;
 8004692:	e011      	b.n	80046b8 <XMC_USBD_EndpointConfigure+0x270>
				case (32U):
					data.b.mps = 0x1U;
 8004694:	893b      	ldrh	r3, [r7, #8]
 8004696:	2201      	movs	r2, #1
 8004698:	f362 030a 	bfi	r3, r2, #0, #11
 800469c:	813b      	strh	r3, [r7, #8]
					break;
 800469e:	e00b      	b.n	80046b8 <XMC_USBD_EndpointConfigure+0x270>
				case (16U):
					data.b.mps = 0x2U;
 80046a0:	893b      	ldrh	r3, [r7, #8]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f362 030a 	bfi	r3, r2, #0, #11
 80046a8:	813b      	strh	r3, [r7, #8]
					break;
 80046aa:	e005      	b.n	80046b8 <XMC_USBD_EndpointConfigure+0x270>
				case (8U):
					data.b.mps = 0x3U;
 80046ac:	893b      	ldrh	r3, [r7, #8]
 80046ae:	2203      	movs	r2, #3
 80046b0:	f362 030a 	bfi	r3, r2, #0, #11
 80046b4:	813b      	strh	r3, [r7, #8]
					break;
 80046b6:	bf00      	nop
 80046b8:	e012      	b.n	80046e0 <XMC_USBD_EndpointConfigure+0x298>
 80046ba:	bf00      	nop
 80046bc:	1ffedd28 	.word	0x1ffedd28
 80046c0:	20000700 	.word	0x20000700
 80046c4:	20000000 	.word	0x20000000
 80046c8:	1ffed614 	.word	0x1ffed614
 80046cc:	1ffed5f8 	.word	0x1ffed5f8
					break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 80046d0:	88bb      	ldrh	r3, [r7, #4]
 80046d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	f362 030a 	bfi	r3, r2, #0, #11
 80046de:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 80046e0:	7afb      	ldrb	r3, [r7, #11]
 80046e2:	f043 0310 	orr.w	r3, r3, #16
 80046e6:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 80046e8:	7abb      	ldrb	r3, [r7, #10]
 80046ea:	f36f 1345 	bfc	r3, #5, #1
 80046ee:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	4a0f      	ldr	r2, [pc, #60]	; (8004738 <XMC_USBD_EndpointConfigure+0x2f0>)
 80046fc:	3370      	adds	r3, #112	; 0x70
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 8004708:	8a7a      	ldrh	r2, [r7, #18]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004712:	b2db      	uxtb	r3, r3
 8004714:	4619      	mov	r1, r3
 8004716:	2301      	movs	r3, #1
 8004718:	408b      	lsls	r3, r1
 800471a:	b29b      	uxth	r3, r3
 800471c:	4313      	orrs	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <XMC_USBD_EndpointConfigure+0x2f0>)
 8004724:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	1ffedd28 	.word	0x1ffedd28

0800473c <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	2234      	movs	r2, #52	; 0x34
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	4a54      	ldr	r2, [pc, #336]	; (80048a4 <XMC_USBD_EndpointUnconfigure+0x168>)
 8004754:	4413      	add	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800475c:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <XMC_USBD_EndpointUnconfigure+0x168>)
 800475e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	2301      	movs	r3, #1
 8004774:	4093      	lsls	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	791b      	ldrb	r3, [r3, #4]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e085      	b.n	8004898 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 800478c:	7c7b      	ldrb	r3, [r7, #17]
 800478e:	f36f 13c7 	bfc	r3, #7, #1
 8004792:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479a:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 80047a4:	7cbb      	ldrb	r3, [r7, #18]
 80047a6:	f36f 1345 	bfc	r3, #5, #1
 80047aa:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	7913      	ldrb	r3, [r2, #4]
 80047b0:	f36f 0382 	bfc	r3, #2, #1
 80047b4:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	7913      	ldrb	r3, [r2, #4]
 80047ba:	f36f 1345 	bfc	r3, #5, #1
 80047be:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	f022 0210 	bic.w	r2, r2, #16
 80047c8:	605a      	str	r2, [r3, #4]
    ep->inInUse =  0U;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	f022 0208 	bic.w	r2, r2, #8
 80047d2:	605a      	str	r2, [r3, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <XMC_USBD_EndpointUnconfigure+0xb4>
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d112      	bne.n	8004816 <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	4a2a      	ldr	r2, [pc, #168]	; (80048a4 <XMC_USBD_EndpointUnconfigure+0x168>)
 80047fc:	336a      	adds	r3, #106	; 0x6a
 80047fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8004806:	89ba      	ldrh	r2, [r7, #12]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	b29b      	uxth	r3, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	b29b      	uxth	r3, r3
 8004810:	4013      	ands	r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d006      	beq.n	8004832 <XMC_USBD_EndpointUnconfigure+0xf6>
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	791b      	ldrb	r3, [r3, #4]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d123      	bne.n	800487a <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <XMC_USBD_EndpointUnconfigure+0x168>)
 800483e:	3370      	adds	r3, #112	; 0x70
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 800484a:	89fa      	ldrh	r2, [r7, #14]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	b29b      	uxth	r3, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	4013      	ands	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <XMC_USBD_EndpointUnconfigure+0x16c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	7b5b      	ldrb	r3, [r3, #13]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10a      	bne.n	800487a <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <XMC_USBD_EndpointUnconfigure+0x168>)
 8004866:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800486a:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <XMC_USBD_EndpointUnconfigure+0x168>)
 800486c:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8004870:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	43d2      	mvns	r2, r2
 8004876:	400a      	ands	r2, r1
 8004878:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <XMC_USBD_EndpointUnconfigure+0x168>)
 800487c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	889b      	ldrh	r3, [r3, #4]
 8004888:	f3c3 1383 	ubfx	r3, r3, #6, #4
 800488c:	b2db      	uxtb	r3, r3
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fbe6 	bl	8003060 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8004898:	7ffb      	ldrb	r3, [r7, #31]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	1ffedd28 	.word	0x1ffedd28
 80048a8:	1ffedd24 	.word	0x1ffedd24

080048ac <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <XMC_USBD_GetFrameNumber+0x28>)
 80048b4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	80fb      	strh	r3, [r7, #6]
  return result;
 80048c6:	88fb      	ldrh	r3, [r7, #6]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	1ffedd28 	.word	0x1ffedd28

080048d8 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <XMC_USBD_IsEnumDone+0x34>)
 80048de:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <XMC_USBD_IsEnumDone+0x28>
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <XMC_USBD_IsEnumDone+0x34>)
 80048ee:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <XMC_USBD_IsEnumDone+0x28>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <XMC_USBD_IsEnumDone+0x2a>
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	1ffedd28 	.word	0x1ffedd28

08004910 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1a      	ldr	r2, [pc, #104]	; (8004984 <XMC_USIC_CH_Enable+0x74>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <XMC_USIC_CH_Enable+0x18>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a19      	ldr	r2, [pc, #100]	; (8004988 <XMC_USIC_CH_Enable+0x78>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d103      	bne.n	8004930 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8004928:	4818      	ldr	r0, [pc, #96]	; (800498c <XMC_USIC_CH_Enable+0x7c>)
 800492a:	f000 f979 	bl	8004c20 <XMC_USIC_Enable>
 800492e:	e016      	b.n	800495e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a17      	ldr	r2, [pc, #92]	; (8004990 <XMC_USIC_CH_Enable+0x80>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <XMC_USIC_CH_Enable+0x30>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a16      	ldr	r2, [pc, #88]	; (8004994 <XMC_USIC_CH_Enable+0x84>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d103      	bne.n	8004948 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8004940:	4815      	ldr	r0, [pc, #84]	; (8004998 <XMC_USIC_CH_Enable+0x88>)
 8004942:	f000 f96d 	bl	8004c20 <XMC_USIC_Enable>
 8004946:	e00a      	b.n	800495e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a14      	ldr	r2, [pc, #80]	; (800499c <XMC_USIC_CH_Enable+0x8c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <XMC_USIC_CH_Enable+0x48>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <XMC_USIC_CH_Enable+0x90>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d102      	bne.n	800495e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8004958:	4812      	ldr	r0, [pc, #72]	; (80049a4 <XMC_USIC_CH_Enable+0x94>)
 800495a:	f000 f961 	bl	8004c20 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2203      	movs	r2, #3
 8004962:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8004964:	bf00      	nop
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f9      	beq.n	8004966 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f023 020f 	bic.w	r2, r3, #15
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40030000 	.word	0x40030000
 8004988:	40030200 	.word	0x40030200
 800498c:	40030008 	.word	0x40030008
 8004990:	48020000 	.word	0x48020000
 8004994:	48020200 	.word	0x48020200
 8004998:	48020008 	.word	0x48020008
 800499c:	48024000 	.word	0x48024000
 80049a0:	48024200 	.word	0x48024200
 80049a4:	48024008 	.word	0x48024008

080049a8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08e      	sub	sp, #56	; 0x38
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b63      	cmp	r3, #99	; 0x63
 80049b8:	d958      	bls.n	8004a6c <XMC_USIC_CH_SetBaudrate+0xc4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d055      	beq.n	8004a6c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80049c0:	f7fd f9b6 	bl	8001d30 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80049c8:	fba3 2302 	umull	r2, r3, r3, r2
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4a2b      	ldr	r2, [pc, #172]	; (8004a80 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80049dc:	2301      	movs	r3, #1
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80049e0:	2301      	movs	r3, #1
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80049e4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80049ea:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30
 80049f0:	e022      	b.n	8004a38 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f6:	fb02 f203 	mul.w	r2, r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	0a9b      	lsrs	r3, r3, #10
 8004a0c:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a14:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1c:	d209      	bcs.n	8004a32 <XMC_USIC_CH_SetBaudrate+0x8a>
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d205      	bcs.n	8004a32 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	3b01      	subs	r3, #1
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1d9      	bne.n	80049f2 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8004a4e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	3a01      	subs	r2, #1
 8004a54:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8004a56:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004a5e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004a6a:	e002      	b.n	8004a72 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8004a72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3738      	adds	r7, #56	; 0x38
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	51eb851f 	.word	0x51eb851f
 8004a84:	fc0080ef 	.word	0xfc0080ef

08004a88 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a9e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8004ab0:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	0211      	lsls	r1, r2, #8
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8004aba:	79fa      	ldrb	r2, [r7, #7]
 8004abc:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004abe:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8004ac0:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	f8ffc0c0 	.word	0xf8ffc0c0

08004ad8 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004aee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004afe:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8004b00:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	0211      	lsls	r1, r2, #8
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8004b0a:	79fa      	ldrb	r2, [r7, #7]
 8004b0c:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8004b0e:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	efffc0c0 	.word	0xefffc0c0

08004b2c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	460b      	mov	r3, r1
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004b40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004b50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8004b58:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	7afb      	ldrb	r3, [r7, #11]
 8004b84:	2107      	movs	r1, #7
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004b96:	431a      	orrs	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop

08004ba8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004bbc:	7afb      	ldrb	r3, [r7, #11]
 8004bbe:	2107      	movs	r1, #7
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	460b      	mov	r3, r1
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	2107      	movs	r1, #7
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8004c04:	7afb      	ldrb	r3, [r7, #11]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop

08004c20 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <XMC_USIC_Enable+0x54>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d108      	bne.n	8004c42 <XMC_USIC_Enable+0x22>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8004c30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c34:	f7fd f9dc 	bl	8001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8004c38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c3c:	f7fd f85c 	bl	8001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8004c40:	e014      	b.n	8004c6c <XMC_USIC_Enable+0x4c>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <XMC_USIC_Enable+0x58>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d106      	bne.n	8004c58 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8004c4a:	480c      	ldr	r0, [pc, #48]	; (8004c7c <XMC_USIC_Enable+0x5c>)
 8004c4c:	f7fd f9d0 	bl	8001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8004c50:	480a      	ldr	r0, [pc, #40]	; (8004c7c <XMC_USIC_Enable+0x5c>)
 8004c52:	f7fd f851 	bl	8001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8004c56:	e009      	b.n	8004c6c <XMC_USIC_Enable+0x4c>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <XMC_USIC_Enable+0x60>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d105      	bne.n	8004c6c <XMC_USIC_Enable+0x4c>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8004c60:	4808      	ldr	r0, [pc, #32]	; (8004c84 <XMC_USIC_Enable+0x64>)
 8004c62:	f7fd f9c5 	bl	8001ff0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8004c66:	4807      	ldr	r0, [pc, #28]	; (8004c84 <XMC_USIC_Enable+0x64>)
 8004c68:	f7fd f846 	bl	8001cf8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40030008 	.word	0x40030008
 8004c78:	48020008 	.word	0x48020008
 8004c7c:	10000080 	.word	0x10000080
 8004c80:	48024008 	.word	0x48024008
 8004c84:	10000100 	.word	0x10000100

08004c88 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8004c88:	b598      	push	{r3, r4, r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8004c8c:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <SystemInit+0x1c>)
 8004c8e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004c92:	4614      	mov	r4, r2
 8004c94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 8004c9a:	f004 f939 	bl	8008f10 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8004c9e:	f004 f9a1 	bl	8008fe4 <SystemCoreClockSetup>
}
 8004ca2:	bd98      	pop	{r3, r4, r7, pc}
 8004ca4:	2003ffc4 	.word	0x2003ffc4

08004ca8 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8004cae:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <SystemCoreClockUpdate+0xc4>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d03e      	beq.n	8004d38 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8004cba:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <SystemCoreClockUpdate+0xc8>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8004cc6:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <SystemCoreClockUpdate+0xcc>)
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e002      	b.n	8004cd2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8004ccc:	f004 f980 	bl	8008fd0 <OSCHP_GetFrequency>
 8004cd0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <SystemCoreClockUpdate+0xc8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d020      	beq.n	8004d20 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8004cde:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <SystemCoreClockUpdate+0xc8>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004ce6:	0e1b      	lsrs	r3, r3, #24
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8004cec:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <SystemCoreClockUpdate+0xc8>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8004cf4:	0a1b      	lsrs	r3, r3, #8
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <SystemCoreClockUpdate+0xc8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	3301      	adds	r3, #1
 8004d06:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e00d      	b.n	8004d3c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8004d20:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <SystemCoreClockUpdate+0xc8>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d28:	3301      	adds	r3, #1
 8004d2a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e001      	b.n	8004d3c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <SystemCoreClockUpdate+0xcc>)
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <SystemCoreClockUpdate+0xc4>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8004d4c:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <SystemCoreClockUpdate+0xc4>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	3301      	adds	r3, #1
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8004d5e:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <SystemCoreClockUpdate+0xd0>)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6013      	str	r3, [r2, #0]
}
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	50004600 	.word	0x50004600
 8004d70:	50004710 	.word	0x50004710
 8004d74:	016e3600 	.word	0x016e3600
 8004d78:	2003ffc0 	.word	0x2003ffc0

08004d7c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8004d84:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <_sbrk+0x5c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8004d8c:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <_sbrk+0x5c>)
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <_sbrk+0x60>)
 8004d90:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <_sbrk+0x5c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3303      	adds	r3, #3
 8004d9c:	f023 0303 	bic.w	r3, r3, #3
 8004da0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <_sbrk+0x5c>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <_sbrk+0x64>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d207      	bcs.n	8004dc0 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <_sbrk+0x5c>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <_sbrk+0x5c>)
 8004dba:	6013      	str	r3, [r2, #0]
    return (base);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	e006      	b.n	8004dce <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8004dc0:	f00d fb6c 	bl	801249c <__errno>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8004dca:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	1ffed630 	.word	0x1ffed630
 8004ddc:	20000e00 	.word	0x20000e00
 8004de0:	2003ffc0 	.word	0x2003ffc0

08004de4 <_init>:

/* Init */
void _init(void)
{}
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <USBD_VCOM_Event_GetDescriptor>:
 *   host.
 */
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	603a      	str	r2, [r7, #0]
 8004dfa:	80fb      	strh	r3, [r7, #6]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	80bb      	strh	r3, [r7, #4]
	const uint8_t  descriptor_type   = (w_value >> 8);
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	727b      	strb	r3, [r7, #9]
	const uint8_t  descriptor_number = (w_value & 0xFF);
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	723b      	strb	r3, [r7, #8]
	const void* address = NULL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
	uint16_t    size    = NO_DESCRIPTOR;
 8004e10:	2300      	movs	r3, #0
 8004e12:	817b      	strh	r3, [r7, #10]

	switch (descriptor_type)
 8004e14:	7a7b      	ldrb	r3, [r7, #9]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d008      	beq.n	8004e2c <USBD_VCOM_Event_GetDescriptor+0x3c>
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d00b      	beq.n	8004e36 <USBD_VCOM_Event_GetDescriptor+0x46>
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d121      	bne.n	8004e66 <USBD_VCOM_Event_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			address = &device_descriptor;
 8004e22:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <USBD_VCOM_Event_GetDescriptor+0x8c>)
 8004e24:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Device_t);
 8004e26:	2312      	movs	r3, #18
 8004e28:	817b      	strh	r3, [r7, #10]
			break;
 8004e2a:	e01c      	b.n	8004e66 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 8004e2c:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <USBD_VCOM_Event_GetDescriptor+0x90>)
 8004e2e:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Configuration_t);
 8004e30:	233e      	movs	r3, #62	; 0x3e
 8004e32:	817b      	strh	r3, [r7, #10]
			break;
 8004e34:	e017      	b.n	8004e66 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_String:
			switch (descriptor_number)
 8004e36:	7a3b      	ldrb	r3, [r7, #8]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d009      	beq.n	8004e50 <USBD_VCOM_Event_GetDescriptor+0x60>
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d00c      	beq.n	8004e5a <USBD_VCOM_Event_GetDescriptor+0x6a>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d000      	beq.n	8004e46 <USBD_VCOM_Event_GetDescriptor+0x56>
				case 0x02:
					address = &product_string;
					size    = product_string.Header.Size;
					break;
			}
			break;
 8004e44:	e00e      	b.n	8004e64 <USBD_VCOM_Event_GetDescriptor+0x74>
			break;
		case DTYPE_String:
			switch (descriptor_number)
			{
				case 0x00:
					address = &language_string;
 8004e46:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <USBD_VCOM_Event_GetDescriptor+0x94>)
 8004e48:	60fb      	str	r3, [r7, #12]
					size    = language_string.Header.Size;
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	817b      	strh	r3, [r7, #10]
					break;
 8004e4e:	e009      	b.n	8004e64 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x01:
					address = &manufacturer_string;
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <USBD_VCOM_Event_GetDescriptor+0x98>)
 8004e52:	60fb      	str	r3, [r7, #12]
					size    = manufacturer_string.Header.Size;
 8004e54:	2312      	movs	r3, #18
 8004e56:	817b      	strh	r3, [r7, #10]
					break;
 8004e58:	e004      	b.n	8004e64 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x02:
					address = &product_string;
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <USBD_VCOM_Event_GetDescriptor+0x9c>)
 8004e5c:	60fb      	str	r3, [r7, #12]
					size    = product_string.Header.Size;
 8004e5e:	2310      	movs	r3, #16
 8004e60:	817b      	strh	r3, [r7, #10]
					break;
 8004e62:	bf00      	nop
			}
			break;
 8004e64:	bf00      	nop
	}

	(void)w_index;
	*descriptor_address = address;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]
	return size;
 8004e6c:	897b      	ldrh	r3, [r7, #10]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	08013ab4 	.word	0x08013ab4
 8004e80:	08013ac8 	.word	0x08013ac8
 8004e84:	08013b08 	.word	0x08013b08
 8004e88:	08013b70 	.word	0x08013b70
 8004e8c:	08013bd8 	.word	0x08013bd8

08004e90 <Endpoint_SelectEndpoint>:
	 *
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address);
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <Endpoint_SelectEndpoint+0x30>)
 8004ea4:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <Endpoint_SelectEndpoint+0x30>)
 8004eb2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	1ffee220 	.word	0x1ffee220

08004ec4 <Endpoint_IsSETUPReceived>:
	 *  \return Boolean \c true if the selected endpoint has received a SETUP
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
		return device.IsSetupRecieved;
 8004ec8:	4b08      	ldr	r3, [pc, #32]	; (8004eec <Endpoint_IsSETUPReceived+0x28>)
 8004eca:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
	}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	1ffee220 	.word	0x1ffee220

08004ef0 <Endpoint_ClearSETUP>:
	 *
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
		device.IsSetupRecieved = 0;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <Endpoint_ClearSETUP+0x1c>)
 8004ef6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8004efa:	f022 0202 	bic.w	r2, r2, #2
 8004efe:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	}
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	1ffee220 	.word	0x1ffee220

08004f10 <Endpoint_ClearStatusStage>:
	/** Nothing done in this function
	 *
	 */
	static inline void Endpoint_ClearStatusStage(void);
	static inline void Endpoint_ClearStatusStage(void)
	{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0

	}
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <Endpoint_IsINReady+0x54>)
 8004f24:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004f28:	461a      	mov	r2, r3
 8004f2a:	232c      	movs	r3, #44	; 0x2c
 8004f2c:	fb03 f302 	mul.w	r3, r3, r2
 8004f30:	4a0f      	ldr	r2, [pc, #60]	; (8004f70 <Endpoint_IsINReady+0x54>)
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <Endpoint_IsINReady+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <Endpoint_IsINReady+0x40>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <Endpoint_IsINReady+0x42>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	b2db      	uxtb	r3, r3
	}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	1ffee220 	.word	0x1ffee220

08004f74 <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8004f7a:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <Endpoint_IsOUTReceived+0x40>)
 8004f7c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004f80:	461a      	mov	r2, r3
 8004f82:	232c      	movs	r3, #44	; 0x2c
 8004f84:	fb03 f302 	mul.w	r3, r3, r2
 8004f88:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <Endpoint_IsOUTReceived+0x40>)
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
	}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	1ffee220 	.word	0x1ffee220

08004fb8 <Endpoint_BytesInEndpoint>:
	 *  \return Total number of bytes in the currently selected Endpoint's FIFO
	 *  buffer.
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void);
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <Endpoint_BytesInEndpoint+0x44>)
 8004fc0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	232c      	movs	r3, #44	; 0x2c
 8004fc8:	fb03 f302 	mul.w	r3, r3, r2
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <Endpoint_BytesInEndpoint+0x44>)
 8004fce:	4413      	add	r3, r2
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	607b      	str	r3, [r7, #4]
		if (ep->Direction)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <Endpoint_BytesInEndpoint+0x32>
			return (uint16_t)(ep->InBytesAvailable);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	e002      	b.n	8004ff0 <Endpoint_BytesInEndpoint+0x38>
		else
			return (uint16_t)(ep->OutBytesAvailable);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	b29b      	uxth	r3, r3
	}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	1ffee220 	.word	0x1ffee220

08005000 <CDC_Device_ProcessControlRequest>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 8005008:	f7ff ff5c 	bl	8004ec4 <Endpoint_IsSETUPReceived>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80ae 	beq.w	8005170 <CDC_Device_ProcessControlRequest+0x170>
 8005014:	4b58      	ldr	r3, [pc, #352]	; (8005178 <CDC_Device_ProcessControlRequest+0x178>)
 8005016:	889b      	ldrh	r3, [r3, #4]
 8005018:	b29a      	uxth	r2, r3
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	7c9b      	ldrb	r3, [r3, #18]
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 800501e:	b29b      	uxth	r3, r3
 8005020:	429a      	cmp	r2, r3
 8005022:	f040 80a5 	bne.w	8005170 <CDC_Device_ProcessControlRequest+0x170>
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 8005026:	4b54      	ldr	r3, [pc, #336]	; (8005178 <CDC_Device_ProcessControlRequest+0x178>)
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	3b20      	subs	r3, #32
 800502e:	2b03      	cmp	r3, #3
 8005030:	f200 809e 	bhi.w	8005170 <CDC_Device_ProcessControlRequest+0x170>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <CDC_Device_ProcessControlRequest+0x3c>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	080050a1 	.word	0x080050a1
 8005040:	0800504d 	.word	0x0800504d
 8005044:	08005113 	.word	0x08005113
 8005048:	08005143 	.word	0x08005143
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 800504c:	4b4a      	ldr	r3, [pc, #296]	; (8005178 <CDC_Device_ProcessControlRequest+0x178>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2ba1      	cmp	r3, #161	; 0xa1
 8005054:	d123      	bne.n	800509e <CDC_Device_ProcessControlRequest+0x9e>
				{
					Endpoint_ClearSETUP();
 8005056:	f7ff ff4b 	bl	8004ef0 <Endpoint_ClearSETUP>

					while (!(Endpoint_IsINReady()));
 800505a:	bf00      	nop
 800505c:	f7ff ff5e 	bl	8004f1c <Endpoint_IsINReady>
 8005060:	4603      	mov	r3, r0
 8005062:	f083 0301 	eor.w	r3, r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f7      	bne.n	800505c <CDC_Device_ProcessControlRequest+0x5c>

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fd37 	bl	8005ae4 <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7f1b      	ldrb	r3, [r3, #28]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fcc6 	bl	8005a0c <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7f5b      	ldrb	r3, [r3, #29]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fcc1 	bl	8005a0c <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	7f9b      	ldrb	r3, [r3, #30]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fcbc 	bl	8005a0c <Endpoint_Write_8>

					Endpoint_ClearIN();
 8005094:	f000 fc36 	bl	8005904 <Endpoint_ClearIN>
					Endpoint_ClearStatusStage();
 8005098:	f7ff ff3a 	bl	8004f10 <Endpoint_ClearStatusStage>
				}

				break;
 800509c:	e068      	b.n	8005170 <CDC_Device_ProcessControlRequest+0x170>
 800509e:	e067      	b.n	8005170 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 80050a0:	4b35      	ldr	r3, [pc, #212]	; (8005178 <CDC_Device_ProcessControlRequest+0x178>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b21      	cmp	r3, #33	; 0x21
 80050a8:	d132      	bne.n	8005110 <CDC_Device_ProcessControlRequest+0x110>
				{
					Endpoint_ClearSETUP();
 80050aa:	f7ff ff21 	bl	8004ef0 <Endpoint_ClearSETUP>

					while (!(Endpoint_IsOUTReceived()))
 80050ae:	e005      	b.n	80050bc <CDC_Device_ProcessControlRequest+0xbc>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <CDC_Device_ProcessControlRequest+0x17c>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d100      	bne.n	80050bc <CDC_Device_ProcessControlRequest+0xbc>
						  return;
 80050ba:	e059      	b.n	8005170 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 80050bc:	f7ff ff5a 	bl	8004f74 <Endpoint_IsOUTReceived>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f083 0301 	eor.w	r3, r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f1      	bne.n	80050b0 <CDC_Device_ProcessControlRequest+0xb0>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 80050cc:	f000 fd3e 	bl	8005b4c <Endpoint_Read_32_LE>
 80050d0:	4602      	mov	r2, r0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	619a      	str	r2, [r3, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 80050d6:	f000 fccd 	bl	8005a74 <Endpoint_Read_8>
 80050da:	4603      	mov	r3, r0
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	771a      	strb	r2, [r3, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 80050e2:	f000 fcc7 	bl	8005a74 <Endpoint_Read_8>
 80050e6:	4603      	mov	r3, r0
 80050e8:	461a      	mov	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	775a      	strb	r2, [r3, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80050ee:	f000 fcc1 	bl	8005a74 <Endpoint_Read_8>
 80050f2:	4603      	mov	r3, r0
 80050f4:	461a      	mov	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	779a      	strb	r2, [r3, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();
 80050fa:	f7ff ff09 	bl	8004f10 <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.LineEncodingChanged)
 80050fe:	4b20      	ldr	r3, [pc, #128]	; (8005180 <CDC_Device_ProcessControlRequest+0x180>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <CDC_Device_ProcessControlRequest+0x110>
					{
						cdc_class_events.LineEncodingChanged(CDCInterfaceInfo);
 8005106:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <CDC_Device_ProcessControlRequest+0x180>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
					}

				}

				break;
 800510e:	e02f      	b.n	8005170 <CDC_Device_ProcessControlRequest+0x170>
 8005110:	e02e      	b.n	8005170 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8005112:	4b19      	ldr	r3, [pc, #100]	; (8005178 <CDC_Device_ProcessControlRequest+0x178>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b21      	cmp	r3, #33	; 0x21
 800511a:	d111      	bne.n	8005140 <CDC_Device_ProcessControlRequest+0x140>
				{
					Endpoint_ClearSETUP();
 800511c:	f7ff fee8 	bl	8004ef0 <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8005120:	f7ff fef6 	bl	8004f10 <Endpoint_ClearStatusStage>

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8005124:	4b14      	ldr	r3, [pc, #80]	; (8005178 <CDC_Device_ProcessControlRequest+0x178>)
 8005126:	885b      	ldrh	r3, [r3, #2]
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	829a      	strh	r2, [r3, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 800512e:	4b14      	ldr	r3, [pc, #80]	; (8005180 <CDC_Device_ProcessControlRequest+0x180>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <CDC_Device_ProcessControlRequest+0x140>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <CDC_Device_ProcessControlRequest+0x180>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
					}

				}

				break;
 800513e:	e017      	b.n	8005170 <CDC_Device_ProcessControlRequest+0x170>
 8005140:	e016      	b.n	8005170 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8005142:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <CDC_Device_ProcessControlRequest+0x178>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b21      	cmp	r3, #33	; 0x21
 800514a:	d110      	bne.n	800516e <CDC_Device_ProcessControlRequest+0x16e>
				{
					Endpoint_ClearSETUP();
 800514c:	f7ff fed0 	bl	8004ef0 <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8005150:	f7ff fede 	bl	8004f10 <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.Device_BreakSent)
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <CDC_Device_ProcessControlRequest+0x180>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <CDC_Device_ProcessControlRequest+0x16e>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <CDC_Device_ProcessControlRequest+0x180>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4a05      	ldr	r2, [pc, #20]	; (8005178 <CDC_Device_ProcessControlRequest+0x178>)
 8005162:	8852      	ldrh	r2, [r2, #2]
 8005164:	b292      	uxth	r2, r2
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4611      	mov	r1, r2
 800516c:	4798      	blx	r3
					}

				}

				break;
 800516e:	bf00      	nop
		}
	}
}
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	1ffee018 	.word	0x1ffee018
 800517c:	1ffee015 	.word	0x1ffee015
 8005180:	1ffed028 	.word	0x1ffed028

08005184 <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	bool status = true;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3314      	adds	r3, #20
 8005194:	4618      	mov	r0, r3
 8005196:	2100      	movs	r1, #0
 8005198:	220c      	movs	r2, #12
 800519a:	f00d f9be 	bl	801251a <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	711a      	strb	r2, [r3, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	729a      	strb	r2, [r3, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2203      	movs	r2, #3
 80051ae:	741a      	strb	r2, [r3, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4618      	mov	r0, r3
 80051b4:	2101      	movs	r1, #1
 80051b6:	f000 fd01 	bl	8005bbc <Endpoint_ConfigureEndpointTable>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f083 0301 	eor.w	r3, r3, #1
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <CDC_Device_ConfigureEndpoints+0x46>
	{
		status = false;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3306      	adds	r3, #6
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80051ce:	4618      	mov	r0, r3
 80051d0:	2101      	movs	r1, #1
 80051d2:	f000 fcf3 	bl	8005bbc <Endpoint_ConfigureEndpointTable>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f083 0301 	eor.w	r3, r3, #1
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <CDC_Device_ConfigureEndpoints+0x62>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	330c      	adds	r3, #12
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80051ea:	4618      	mov	r0, r3
 80051ec:	2101      	movs	r1, #1
 80051ee:	f000 fce5 	bl	8005bbc <Endpoint_ConfigureEndpointTable>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f083 0301 	eor.w	r3, r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <CDC_Device_ConfigureEndpoints+0x7e>
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	{
		status = false;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8005202:	7bfb      	ldrb	r3, [r7, #15]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <CDC_Device_USBTask>:

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <CDC_Device_USBTask+0x3c>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b04      	cmp	r3, #4
 800521c:	d110      	bne.n	8005240 <CDC_Device_USBTask+0x34>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <CDC_Device_USBTask+0x34>
	{
		#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fe30 	bl	8004e90 <Endpoint_SelectEndpoint>

		if (Endpoint_IsINReady())
 8005230:	f7ff fe74 	bl	8004f1c <Endpoint_IsINReady>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <CDC_Device_USBTask+0x34>
		{
		  CDC_Device_Flush(CDCInterfaceInfo);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f830 	bl	80052a0 <CDC_Device_Flush>
		}
		#endif
	}
}
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	1ffee015 	.word	0x1ffee015

0800524c <CDC_Device_SendData>:
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
	uint8_t status = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <CDC_Device_SendData+0x50>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b04      	cmp	r3, #4
 8005266:	d111      	bne.n	800528c <CDC_Device_SendData+0x40>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00d      	beq.n	800528c <CDC_Device_SendData+0x40>
	{

		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fe0b 	bl	8004e90 <Endpoint_SelectEndpoint>
		status = Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	4619      	mov	r1, r3
 8005280:	2200      	movs	r2, #0
 8005282:	f000 f99d 	bl	80055c0 <Endpoint_Write_Stream_LE>
 8005286:	4603      	mov	r3, r0
 8005288:	75fb      	strb	r3, [r7, #23]
 800528a:	e001      	b.n	8005290 <CDC_Device_SendData+0x44>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 800528c:	2302      	movs	r3, #2
 800528e:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8005290:	7dfb      	ldrb	r3, [r7, #23]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	1ffee015 	.word	0x1ffee015

080052a0 <CDC_Device_Flush>:
	return status;

}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	73fb      	strb	r3, [r7, #15]
	if ((USB_DeviceState == DEVICE_STATE_Configured) &&	(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS != 0))
 80052ac:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <CDC_Device_Flush+0x4c>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d112      	bne.n	80052dc <CDC_Device_Flush+0x3c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00e      	beq.n	80052dc <CDC_Device_Flush+0x3c>
	{
		Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fde4 	bl	8004e90 <Endpoint_SelectEndpoint>

		if (Endpoint_BytesInEndpoint())
 80052c8:	f7ff fe76 	bl	8004fb8 <Endpoint_BytesInEndpoint>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <CDC_Device_Flush+0x36>
		{
			Endpoint_ClearIN();
 80052d2:	f000 fb17 	bl	8005904 <Endpoint_ClearIN>
		}

		status = ENDPOINT_READYWAIT_NoError;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
 80052da:	e001      	b.n	80052e0 <CDC_Device_Flush+0x40>
	}
	else
	{
		status = ENDPOINT_RWSTREAM_DeviceDisconnected;
 80052dc:	2302      	movs	r3, #2
 80052de:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	1ffee015 	.word	0x1ffee015

080052f0 <USBD_VCOM_Init>:
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <USBD_VCOM_Init+0x8c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	749a      	strb	r2, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <USBD_VCOM_Init+0x8c>)
 8005304:	2282      	movs	r2, #130	; 0x82
 8005306:	701a      	strb	r2, [r3, #0]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 8005308:	4b1c      	ldr	r3, [pc, #112]	; (800537c <USBD_VCOM_Init+0x8c>)
 800530a:	2240      	movs	r2, #64	; 0x40
 800530c:	805a      	strh	r2, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 800530e:	4b1b      	ldr	r3, [pc, #108]	; (800537c <USBD_VCOM_Init+0x8c>)
 8005310:	2202      	movs	r2, #2
 8005312:	711a      	strb	r2, [r3, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 8005314:	4b19      	ldr	r3, [pc, #100]	; (800537c <USBD_VCOM_Init+0x8c>)
 8005316:	2200      	movs	r2, #0
 8005318:	715a      	strb	r2, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 800531a:	4b18      	ldr	r3, [pc, #96]	; (800537c <USBD_VCOM_Init+0x8c>)
 800531c:	2203      	movs	r2, #3
 800531e:	719a      	strb	r2, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 8005320:	4b16      	ldr	r3, [pc, #88]	; (800537c <USBD_VCOM_Init+0x8c>)
 8005322:	2240      	movs	r2, #64	; 0x40
 8005324:	811a      	strh	r2, [r3, #8]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <USBD_VCOM_Init+0x8c>)
 8005328:	2202      	movs	r2, #2
 800532a:	729a      	strb	r2, [r3, #10]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <USBD_VCOM_Init+0x8c>)
 800532e:	2200      	movs	r2, #0
 8005330:	72da      	strb	r2, [r3, #11]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <USBD_VCOM_Init+0x8c>)
 8005334:	2281      	movs	r2, #129	; 0x81
 8005336:	731a      	strb	r2, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8005338:	4b10      	ldr	r3, [pc, #64]	; (800537c <USBD_VCOM_Init+0x8c>)
 800533a:	2208      	movs	r2, #8
 800533c:	81da      	strh	r2, [r3, #14]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <USBD_VCOM_Init+0x8c>)
 8005340:	2203      	movs	r2, #3
 8005342:	741a      	strb	r2, [r3, #16]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <USBD_VCOM_Init+0x8c>)
 8005346:	2200      	movs	r2, #0
 8005348:	745a      	strb	r2, [r3, #17]

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
 800534a:	480d      	ldr	r0, [pc, #52]	; (8005380 <USBD_VCOM_Init+0x90>)
 800534c:	f000 f85c 	bl	8005408 <USBD_VCOM_Register_USBEvent_CB>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <USBD_VCOM_Init+0x7c>
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <USBD_VCOM_Init+0x94>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fd9c 	bl	8005e98 <USBD_Init>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <USBD_VCOM_Init+0x80>
    {
      status = USBD_VCOM_STATUS_FAILURE;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
 800536a:	e001      	b.n	8005370 <USBD_VCOM_Init+0x80>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	1ffedff4 	.word	0x1ffedff4
 8005380:	1ffed000 	.word	0x1ffed000
 8005384:	1ffed04c 	.word	0x1ffed04c

08005388 <USBD_VCOM_IsEnumDone>:

/*The function check if the enumeration has been done already. */
uint32_t USBD_VCOM_IsEnumDone(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  return (uint32_t)(USBD_IsEnumDone() && (USB_DeviceState == (uint8_t)DEVICE_STATE_Configured));
 800538c:	f000 fe22 	bl	8005fd4 <USBD_IsEnumDone>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d006      	beq.n	80053a4 <USBD_VCOM_IsEnumDone+0x1c>
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <USBD_VCOM_IsEnumDone+0x24>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b04      	cmp	r3, #4
 800539e:	d101      	bne.n	80053a4 <USBD_VCOM_IsEnumDone+0x1c>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <USBD_VCOM_IsEnumDone+0x1e>
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	1ffee015 	.word	0x1ffee015

080053b0 <USBD_VCOM_SendData>:
  return status;
}

/* This function sends multiple bytes to the USB host. */
USBD_VCOM_STATUS_t USBD_VCOM_SendData(const int8_t* const data_buffer, const uint16_t length)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	807b      	strh	r3, [r7, #2]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80053bc:	2300      	movs	r3, #0
 80053be:	73fb      	strb	r3, [r7, #15]

  if ((length == 0U) || (data_buffer == NULL))
 80053c0:	887b      	ldrh	r3, [r7, #2]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <USBD_VCOM_SendData+0x1c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <USBD_VCOM_SendData+0x22>
  {
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
 80053cc:	2306      	movs	r3, #6
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e012      	b.n	80053f8 <USBD_VCOM_SendData+0x48>
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
 80053d2:	887b      	ldrh	r3, [r7, #2]
 80053d4:	480b      	ldr	r0, [pc, #44]	; (8005404 <USBD_VCOM_SendData+0x54>)
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	461a      	mov	r2, r3
 80053da:	f7ff ff37 	bl	800524c <CDC_Device_SendData>
 80053de:	4603      	mov	r3, r0
    status = USBD_VCOM_STATUS_CDC_ERROR;		  
  }
  else
  {
    /* Send data to USB host.*/
    if ((uint8_t)ENDPOINT_RWSTREAM_NoError !=
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <USBD_VCOM_SendData+0x38>
        CDC_Device_SendData(&USBD_VCOM_cdc_interface, (const int8_t *)data_buffer, length))
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80053e4:	2306      	movs	r3, #6
 80053e6:	73fb      	strb	r3, [r7, #15]
    }
    if ((uint8_t)ENDPOINT_READYWAIT_NoError != CDC_Device_Flush(&USBD_VCOM_cdc_interface))
 80053e8:	4806      	ldr	r0, [pc, #24]	; (8005404 <USBD_VCOM_SendData+0x54>)
 80053ea:	f7ff ff59 	bl	80052a0 <CDC_Device_Flush>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <USBD_VCOM_SendData+0x48>
    {
      status = USBD_VCOM_STATUS_CDC_ERROR;
 80053f4:	2306      	movs	r3, #6
 80053f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	1ffedff4 	.word	0x1ffedff4

08005408 <USBD_VCOM_Register_USBEvent_CB>:
/**
 * Register the USB event call backs.
 * Call this API before calling USBD_Init
 **/
USBD_VCOM_STATUS_t USBD_VCOM_Register_USBEvent_CB(USBD_Event_CB_t *event_callback)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]

  /*Register USB event call backs*/
  if (event_callback != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d03c      	beq.n	8005494 <USBD_VCOM_Register_USBEvent_CB+0x8c>
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 800541a:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6912      	ldr	r2, [r2, #16]
 8005424:	611a      	str	r2, [r3, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6892      	ldr	r2, [r2, #8]
 8005430:	609a      	str	r2, [r3, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
 8005432:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	601a      	str	r2, [r3, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
 800543e:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68d2      	ldr	r2, [r2, #12]
 8005448:	60da      	str	r2, [r3, #12]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 800544a:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6852      	ldr	r2, [r2, #4]
 8005454:	605a      	str	r2, [r3, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6952      	ldr	r2, [r2, #20]
 8005460:	615a      	str	r2, [r3, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 8005462:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	69d2      	ldr	r2, [r2, #28]
 800546c:	61da      	str	r2, [r3, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 800546e:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6992      	ldr	r2, [r2, #24]
 8005478:	619a      	str	r2, [r3, #24]
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6a12      	ldr	r2, [r2, #32]
 8005484:	621a      	str	r2, [r3, #32]
    USBD_handle->event_cb->reset = event_callback->reset;
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005490:	625a      	str	r2, [r3, #36]	; 0x24
 8005492:	e001      	b.n	8005498 <USBD_VCOM_Register_USBEvent_CB+0x90>
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]

}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	1ffed04c 	.word	0x1ffed04c

080054ac <USBD_VCOM_Event_ConfigurationChanged>:

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 80054b0:	2081      	movs	r0, #129	; 0x81
 80054b2:	490f      	ldr	r1, [pc, #60]	; (80054f0 <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 80054b4:	2240      	movs	r2, #64	; 0x40
 80054b6:	f000 fd99 	bl	8005fec <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 80054ba:	2082      	movs	r0, #130	; 0x82
 80054bc:	490d      	ldr	r1, [pc, #52]	; (80054f4 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 80054be:	2240      	movs	r2, #64	; 0x40
 80054c0:	f000 fd94 	bl	8005fec <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 80054c4:	2003      	movs	r0, #3
 80054c6:	490c      	ldr	r1, [pc, #48]	; (80054f8 <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 80054c8:	2240      	movs	r2, #64	; 0x40
 80054ca:	f000 fd8f 	bl	8005fec <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 80054ce:	480b      	ldr	r0, [pc, #44]	; (80054fc <USBD_VCOM_Event_ConfigurationChanged+0x50>)
 80054d0:	f7ff fe58 	bl	8005184 <CDC_Device_ConfigureEndpoints>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <USBD_VCOM_Event_ConfigurationChanged+0x42>
  {
    device.IsConfigured = 1U;
 80054da:	4a09      	ldr	r2, [pc, #36]	; (8005500 <USBD_VCOM_Event_ConfigurationChanged+0x54>)
 80054dc:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <USBD_VCOM_Event_ConfigurationChanged+0x58>)
 80054ea:	2204      	movs	r2, #4
 80054ec:	701a      	strb	r2, [r3, #0]
  }
}
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	1ffedf74 	.word	0x1ffedf74
 80054f4:	1ffedf30 	.word	0x1ffedf30
 80054f8:	1ffedfb4 	.word	0x1ffedfb4
 80054fc:	1ffedff4 	.word	0x1ffedff4
 8005500:	1ffee220 	.word	0x1ffee220
 8005504:	1ffee015 	.word	0x1ffee015

08005508 <USBD_VCOM_Event_ControlRequest>:

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 800550c:	4801      	ldr	r0, [pc, #4]	; (8005514 <USBD_VCOM_Event_ControlRequest+0xc>)
 800550e:	f7ff fd77 	bl	8005000 <CDC_Device_ProcessControlRequest>
}
 8005512:	bd80      	pop	{r7, pc}
 8005514:	1ffedff4 	.word	0x1ffedff4

08005518 <USBD_VCOM_Event_Reset>:

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <USBD_VCOM_Event_Reset+0x38>)
 800551e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d010      	beq.n	800554e <USBD_VCOM_Event_Reset+0x36>
  {
    device.IsConfigured = 0U;
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <USBD_VCOM_Event_Reset+0x38>)
 800552e:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8005532:	f36f 0300 	bfc	r3, #0, #1
 8005536:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Init(USBD_VCOM_handle))
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <USBD_VCOM_Event_Reset+0x3c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fed6 	bl	80052f0 <USBD_VCOM_Init>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <USBD_VCOM_Event_Reset+0x36>
    {
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 800554a:	f000 f831 	bl	80055b0 <USBD_VCOM_Connect>
      {
      }
    }
  }
}
 800554e:	bd80      	pop	{r7, pc}
 8005550:	1ffee220 	.word	0x1ffee220
 8005554:	1ffed034 	.word	0x1ffed034

08005558 <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
/*CDC class driver event for a line encoding change on a CDC interface. This event fires each time the host
 * requests a line encoding change (containing the serial parity, baud and other configuration information). The new
 * line encoding settings are available in the LineEncoding structure inside the CDC interface structure passed
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 8005560:	4b03      	ldr	r3, [pc, #12]	; (8005570 <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x18>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
  (void)cdc_interface_info;

}
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	1ffedf70 	.word	0x1ffedf70

08005574 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
/*CDC class driver event for a control line state change on a CDC interface. This event fires
 * each time the host requests a control line state change (containing the virtual serial control
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 800557c:	4b03      	ldr	r3, [pc, #12]	; (800558c <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x18>)
 800557e:	2201      	movs	r2, #1
 8005580:	705a      	strb	r2, [r3, #1]
  (void)cdc_interface_info;

}
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	1ffedf70 	.word	0x1ffedf70

08005590 <USBD_VCOM_CDCClass_Event_BreakSent>:

/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 800559c:	4b03      	ldr	r3, [pc, #12]	; (80055ac <USBD_VCOM_CDCClass_Event_BreakSent+0x1c>)
 800559e:	2201      	movs	r2, #1
 80055a0:	709a      	strb	r2, [r3, #2]
  (void)cdc_interface_info;
  (void)duration;

}
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	1ffedf70 	.word	0x1ffedf70

080055b0 <USBD_VCOM_Connect>:

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 80055b4:	f000 fd02 	bl	8005fbc <USBD_Connect>
 80055b8:	4603      	mov	r3, r0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop

080055c0 <Endpoint_Write_Stream_LE>:
/*Flag to indicate the zlp to be sent or not*/
volatile uint8_t zlp_flag = 0;

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length,
											uint16_t *const BytesProcessed)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	460b      	mov	r3, r1
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80055ce:	4b3e      	ldr	r3, [pc, #248]	; (80056c8 <Endpoint_Write_Stream_LE+0x108>)
 80055d0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80055d4:	461a      	mov	r2, r3
 80055d6:	232c      	movs	r3, #44	; 0x2c
 80055d8:	fb03 f302 	mul.w	r3, r3, r2
 80055dc:	4a3a      	ldr	r2, [pc, #232]	; (80056c8 <Endpoint_Write_Stream_LE+0x108>)
 80055de:	4413      	add	r3, r2
 80055e0:	3304      	adds	r3, #4
 80055e2:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	83fb      	strh	r3, [r7, #30]
	uint16_t BytesTransfered = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	83bb      	strh	r3, [r7, #28]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) 
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <Endpoint_Write_Stream_LE+0x42>
	{
		Length -= *BytesProcessed;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	897a      	ldrh	r2, [r7, #10]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	83bb      	strh	r3, [r7, #28]
	}

	while (Length) 
 8005602:	e058      	b.n	80056b6 <Endpoint_Write_Stream_LE+0xf6>
	{
		if (ep->InInUse)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d000      	beq.n	8005616 <Endpoint_Write_Stream_LE+0x56>
		{
			continue;
 8005614:	e04f      	b.n	80056b6 <Endpoint_Write_Stream_LE+0xf6>
		}
		if (Endpoint_IsReadWriteAllowed()) 
 8005616:	f000 f9c7 	bl	80059a8 <Endpoint_IsReadWriteAllowed>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d02f      	beq.n	8005680 <Endpoint_Write_Stream_LE+0xc0>
		{
			if((ep->InBufferLength - ep->InBytesAvailable)  > Length)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	1ad2      	subs	r2, r2, r3
 800562a:	897b      	ldrh	r3, [r7, #10]
 800562c:	429a      	cmp	r2, r3
 800562e:	d902      	bls.n	8005636 <Endpoint_Write_Stream_LE+0x76>
			{
				Bytes = Length;
 8005630:	897b      	ldrh	r3, [r7, #10]
 8005632:	83fb      	strh	r3, [r7, #30]
 8005634:	e007      	b.n	8005646 <Endpoint_Write_Stream_LE+0x86>
			}
			else
			{
				Bytes = (ep->InBufferLength - ep->InBytesAvailable);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	b29a      	uxth	r2, r3
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	b29b      	uxth	r3, r3
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ep->InBuffer + ep->InBytesAvailable,(uint8_t*)Buffer + BytesTransfered,Bytes);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	18d1      	adds	r1, r2, r3
 8005650:	8bbb      	ldrh	r3, [r7, #28]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	441a      	add	r2, r3
 8005656:	8bfb      	ldrh	r3, [r7, #30]
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	f00c ff51 	bl	8012504 <memcpy>
			ep->InBytesAvailable += Bytes;
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	8bfb      	ldrh	r3, [r7, #30]
 8005668:	441a      	add	r2, r3
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 800566e:	8bba      	ldrh	r2, [r7, #28]
 8005670:	8bfb      	ldrh	r3, [r7, #30]
 8005672:	4413      	add	r3, r2
 8005674:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8005676:	897a      	ldrh	r2, [r7, #10]
 8005678:	8bfb      	ldrh	r3, [r7, #30]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	817b      	strh	r3, [r7, #10]
 800567e:	e01a      	b.n	80056b6 <Endpoint_Write_Stream_LE+0xf6>
		}
		else 
		{
			Endpoint_ClearIN();
 8005680:	f000 f940 	bl	8005904 <Endpoint_ClearIN>
			if(Length < ep->MaxPacketSize)
 8005684:	897b      	ldrh	r3, [r7, #10]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	8892      	ldrh	r2, [r2, #4]
 800568a:	f3c2 1286 	ubfx	r2, r2, #6, #7
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	4293      	cmp	r3, r2
 8005692:	da07      	bge.n	80056a4 <Endpoint_Write_Stream_LE+0xe4>
			{
				if (BytesProcessed!=NULL) 
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <Endpoint_Write_Stream_LE+0xe4>
				{
					*BytesProcessed = BytesTransfered;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8bba      	ldrh	r2, [r7, #28]
 800569e:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80056a0:	2305      	movs	r3, #5
 80056a2:	e00c      	b.n	80056be <Endpoint_Write_Stream_LE+0xfe>
				}
			}

			ErrorCode = Endpoint_WaitUntilReady();
 80056a4:	f000 f8e6 	bl	8005874 <Endpoint_WaitUntilReady>
 80056a8:	4603      	mov	r3, r0
 80056aa:	75fb      	strb	r3, [r7, #23]
			if (ErrorCode) 
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <Endpoint_Write_Stream_LE+0xf6>
			{
				return ErrorCode;
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
 80056b4:	e003      	b.n	80056be <Endpoint_Write_Stream_LE+0xfe>
	{
		Length -= *BytesProcessed;
		BytesTransfered = *BytesProcessed;
	}

	while (Length) 
 80056b6:	897b      	ldrh	r3, [r7, #10]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1a3      	bne.n	8005604 <Endpoint_Write_Stream_LE+0x44>
				return ErrorCode;
			}
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	1ffee220 	.word	0x1ffee220

080056cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	db0b      	blt.n	80056f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056de:	4908      	ldr	r1, [pc, #32]	; (8005700 <__NVIC_EnableIRQ+0x34>)
 80056e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	79fa      	ldrb	r2, [r7, #7]
 80056e8:	f002 021f 	and.w	r2, r2, #31
 80056ec:	2001      	movs	r0, #1
 80056ee:	fa00 f202 	lsl.w	r2, r0, r2
 80056f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	e000e100 	.word	0xe000e100

08005704 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	2b00      	cmp	r3, #0
 8005714:	db10      	blt.n	8005738 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005716:	490b      	ldr	r1, [pc, #44]	; (8005744 <__NVIC_DisableIRQ+0x40>)
 8005718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	79fa      	ldrb	r2, [r7, #7]
 8005720:	f002 021f 	and.w	r2, r2, #31
 8005724:	2001      	movs	r0, #1
 8005726:	fa00 f202 	lsl.w	r2, r0, r2
 800572a:	3320      	adds	r3, #32
 800572c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005730:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005734:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	e000e100 	.word	0xe000e100

08005748 <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800574e:	4b13      	ldr	r3, [pc, #76]	; (800579c <Endpoint_IsINReady+0x54>)
 8005750:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005754:	461a      	mov	r2, r3
 8005756:	232c      	movs	r3, #44	; 0x2c
 8005758:	fb03 f302 	mul.w	r3, r3, r2
 800575c:	4a0f      	ldr	r2, [pc, #60]	; (800579c <Endpoint_IsINReady+0x54>)
 800575e:	4413      	add	r3, r2
 8005760:	3304      	adds	r3, #4
 8005762:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <Endpoint_IsINReady+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <Endpoint_IsINReady+0x40>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <Endpoint_IsINReady+0x42>
 8005788:	2300      	movs	r3, #0
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	b2db      	uxtb	r3, r3
	}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	1ffee220 	.word	0x1ffee220

080057a0 <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80057a6:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <Endpoint_IsOUTReceived+0x40>)
 80057a8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80057ac:	461a      	mov	r2, r3
 80057ae:	232c      	movs	r3, #44	; 0x2c
 80057b0:	fb03 f302 	mul.w	r3, r3, r2
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <Endpoint_IsOUTReceived+0x40>)
 80057b6:	4413      	add	r3, r2
 80057b8:	3304      	adds	r3, #4
 80057ba:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
	}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	1ffee220 	.word	0x1ffee220

080057e4 <Endpoint_GetEndpointDirection>:
	 *  \return The currently selected endpoint's direction, as a
	 *  \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void);
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <Endpoint_GetEndpointDirection+0x34>)
 80057ec:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80057f0:	461a      	mov	r2, r3
 80057f2:	232c      	movs	r3, #44	; 0x2c
 80057f4:	fb03 f302 	mul.w	r3, r3, r2
 80057f8:	4a07      	ldr	r2, [pc, #28]	; (8005818 <Endpoint_GetEndpointDirection+0x34>)
 80057fa:	4413      	add	r3, r2
 80057fc:	3304      	adds	r3, #4
 80057fe:	607b      	str	r3, [r7, #4]
		return ep->Address & ENDPOINT_DIR_MASK;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005808:	b2db      	uxtb	r3, r3
	}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	1ffee220 	.word	0x1ffee220

0800581c <Endpoint_IsStalled>:
	 *  \return Boolean \c true if the currently selected endpoint is stalled,
	 *  \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void);
	static inline bool Endpoint_IsStalled(void)
	{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
		bool status = false;
 8005822:	2300      	movs	r3, #0
 8005824:	71fb      	strb	r3, [r7, #7]
		if(device.Endpoints[device.CurrentEndpoint].IsHalted == 1)
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <Endpoint_IsStalled+0x3c>)
 8005828:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800582c:	4619      	mov	r1, r3
 800582e:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <Endpoint_IsStalled+0x3c>)
 8005830:	232c      	movs	r3, #44	; 0x2c
 8005832:	fb03 f301 	mul.w	r3, r3, r1
 8005836:	4413      	add	r3, r2
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	089b      	lsrs	r3, r3, #2
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <Endpoint_IsStalled+0x2e>
		{
			status = true;
 8005846:	2301      	movs	r3, #1
 8005848:	71fb      	strb	r3, [r7, #7]
		}
		return status;
 800584a:	79fb      	ldrb	r3, [r7, #7]
	}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	1ffee220 	.word	0x1ffee220

0800585c <USB_Device_GetFrameNumber>:
 *  the frame number is incremented by one.
 *
 *  \return Current USB frame number from the USB controller.
 */
static inline uint16_t USB_Device_GetFrameNumber(void);
static inline uint16_t USB_Device_GetFrameNumber() {
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
	return device.Driver->GetFrameNumber();
 8005860:	4b03      	ldr	r3, [pc, #12]	; (8005870 <USB_Device_GetFrameNumber+0x14>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	4798      	blx	r3
 8005868:	4603      	mov	r3, r0
}
 800586a:	4618      	mov	r0, r3
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	1ffee220 	.word	0x1ffee220

08005874 <Endpoint_WaitUntilReady>:

#define USB_STREAM_TIMEOUT_MS 100


uint8_t Endpoint_WaitUntilReady(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 800587a:	2364      	movs	r3, #100	; 0x64
 800587c:	71fb      	strb	r3, [r7, #7]
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 800587e:	f7ff ffed 	bl	800585c <USB_Device_GetFrameNumber>
 8005882:	4603      	mov	r3, r0
 8005884:	80bb      	strh	r3, [r7, #4]

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8005886:	f7ff ffad 	bl	80057e4 <Endpoint_GetEndpointDirection>
 800588a:	4603      	mov	r3, r0
 800588c:	2b80      	cmp	r3, #128	; 0x80
 800588e:	d106      	bne.n	800589e <Endpoint_WaitUntilReady+0x2a>
		{
			if (Endpoint_IsINReady())
 8005890:	f7ff ff5a 	bl	8005748 <Endpoint_IsINReady>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 800589a:	2300      	movs	r3, #0
 800589c:	e02c      	b.n	80058f8 <Endpoint_WaitUntilReady+0x84>
			}
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 800589e:	f7ff ff7f 	bl	80057a0 <Endpoint_IsOUTReceived>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <Endpoint_WaitUntilReady+0x38>
			{
			  return ENDPOINT_READYWAIT_NoError;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e025      	b.n	80058f8 <Endpoint_WaitUntilReady+0x84>
			}
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 80058ac:	4b14      	ldr	r3, [pc, #80]	; (8005900 <Endpoint_WaitUntilReady+0x8c>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	70fb      	strb	r3, [r7, #3]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <Endpoint_WaitUntilReady+0x48>
		{
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 80058b8:	2302      	movs	r3, #2
 80058ba:	e01d      	b.n	80058f8 <Endpoint_WaitUntilReady+0x84>
		}
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d101      	bne.n	80058c6 <Endpoint_WaitUntilReady+0x52>
		{
		  return ENDPOINT_READYWAIT_BusSuspended;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e018      	b.n	80058f8 <Endpoint_WaitUntilReady+0x84>
		}
		else if (Endpoint_IsStalled())
 80058c6:	f7ff ffa9 	bl	800581c <Endpoint_IsStalled>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <Endpoint_WaitUntilReady+0x60>
		{
		  return ENDPOINT_READYWAIT_EndpointStalled;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e011      	b.n	80058f8 <Endpoint_WaitUntilReady+0x84>
		}

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 80058d4:	f7ff ffc2 	bl	800585c <USB_Device_GetFrameNumber>
 80058d8:	4603      	mov	r3, r0
 80058da:	803b      	strh	r3, [r7, #0]

		if (CurrentFrameNumber != PreviousFrameNumber)
 80058dc:	883a      	ldrh	r2, [r7, #0]
 80058de:	88bb      	ldrh	r3, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d008      	beq.n	80058f6 <Endpoint_WaitUntilReady+0x82>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 80058e4:	883b      	ldrh	r3, [r7, #0]
 80058e6:	80bb      	strh	r3, [r7, #4]

			if (!(TimeoutMSRem--))
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	1e5a      	subs	r2, r3, #1
 80058ec:	71fa      	strb	r2, [r7, #7]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <Endpoint_WaitUntilReady+0x82>
			{
			  return ENDPOINT_READYWAIT_Timeout;
 80058f2:	2304      	movs	r3, #4
 80058f4:	e000      	b.n	80058f8 <Endpoint_WaitUntilReady+0x84>
			}
		}
	}
 80058f6:	e7c6      	b.n	8005886 <Endpoint_WaitUntilReady+0x12>
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	1ffee015 	.word	0x1ffee015

08005904 <Endpoint_ClearIN>:
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
	}
}

void Endpoint_ClearIN(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800590a:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <Endpoint_ClearIN+0xa0>)
 800590c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005910:	461a      	mov	r2, r3
 8005912:	232c      	movs	r3, #44	; 0x2c
 8005914:	fb03 f302 	mul.w	r3, r3, r2
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <Endpoint_ClearIN+0xa0>)
 800591a:	4413      	add	r3, r2
 800591c:	3304      	adds	r3, #4
 800591e:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d007      	beq.n	8005940 <Endpoint_ClearIN+0x3c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d100      	bne.n	8005942 <Endpoint_ClearIN+0x3e>
		return;
 8005940:	e02c      	b.n	800599c <Endpoint_ClearIN+0x98>
	ep->InInUse = true;
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	8893      	ldrh	r3, [r2, #4]
 8005946:	f043 0310 	orr.w	r3, r3, #16
 800594a:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 8005962:	206b      	movs	r0, #107	; 0x6b
 8005964:	f7ff fece 	bl	8005704 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 8005968:	4b0e      	ldr	r3, [pc, #56]	; (80059a4 <Endpoint_ClearIN+0xa0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6a91      	ldr	r1, [r2, #40]	; 0x28
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800597a:	4798      	blx	r3
 800597c:	6038      	str	r0, [r7, #0]
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	441a      	add	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	1ad2      	subs	r2, r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8005996:	206b      	movs	r0, #107	; 0x6b
 8005998:	f7ff fe98 	bl	80056cc <__NVIC_EnableIRQ>

}
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	1ffee220 	.word	0x1ffee220

080059a8 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed() {
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80059ae:	4b16      	ldr	r3, [pc, #88]	; (8005a08 <Endpoint_IsReadWriteAllowed+0x60>)
 80059b0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80059b4:	461a      	mov	r2, r3
 80059b6:	232c      	movs	r3, #44	; 0x2c
 80059b8:	fb03 f302 	mul.w	r3, r3, r2
 80059bc:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <Endpoint_IsReadWriteAllowed+0x60>)
 80059be:	4413      	add	r3, r2
 80059c0:	3304      	adds	r3, #4
 80059c2:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 80059c4:	2300      	movs	r3, #0
 80059c6:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	429a      	cmp	r2, r3
 80059e0:	bf34      	ite	cc
 80059e2:	2301      	movcc	r3, #1
 80059e4:	2300      	movcs	r3, #0
 80059e6:	71fb      	strb	r3, [r7, #7]
 80059e8:	e006      	b.n	80059f8 <Endpoint_IsReadWriteAllowed+0x50>
														? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf14      	ite	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	2300      	moveq	r3, #0
 80059f6:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 80059f8:	79fb      	ldrb	r3, [r7, #7]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	1ffee220 	.word	0x1ffee220

08005a0c <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <Endpoint_Write_8+0x64>)
 8005a18:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	232c      	movs	r3, #44	; 0x2c
 8005a20:	fb03 f302 	mul.w	r3, r3, r2
 8005a24:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <Endpoint_Write_8+0x64>)
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d20d      	bcs.n	8005a58 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4413      	add	r3, r2
 8005a46:	79fa      	ldrb	r2, [r7, #7]
 8005a48:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	619a      	str	r2, [r3, #24]

	      Success = true;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	f083 0301 	eor.w	r3, r3, #1
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e5      	bne.n	8005a30 <Endpoint_Write_8+0x24>
}
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	1ffee220 	.word	0x1ffee220

08005a74 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8() {
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8005a7a:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <Endpoint_Read_8+0x6c>)
 8005a7c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005a80:	461a      	mov	r2, r3
 8005a82:	232c      	movs	r3, #44	; 0x2c
 8005a84:	fb03 f302 	mul.w	r3, r3, r2
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <Endpoint_Read_8+0x6c>)
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8005a90:	2300      	movs	r3, #0
 8005a92:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	71bb      	strb	r3, [r7, #6]

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d012      	beq.n	8005ac6 <Endpoint_Read_8+0x52>
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	71bb      	strb	r3, [r7, #6]
		  EndPoint->OutOffset++;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	60da      	str	r2, [r3, #12]
		  EndPoint->OutBytesAvailable--;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	609a      	str	r2, [r3, #8]

		  Success = true;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	f083 0301 	eor.w	r3, r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e2      	bne.n	8005a98 <Endpoint_Read_8+0x24>
	 return data;
 8005ad2:	79bb      	ldrb	r3, [r7, #6]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	1ffee220 	.word	0x1ffee220

08005ae4 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8005aec:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <Endpoint_Write_32_LE+0x64>)
 8005aee:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005af2:	461a      	mov	r2, r3
 8005af4:	232c      	movs	r3, #44	; 0x2c
 8005af6:	fb03 f302 	mul.w	r3, r3, r2
 8005afa:	4a13      	ldr	r2, [pc, #76]	; (8005b48 <Endpoint_Write_32_LE+0x64>)
 8005afc:	4413      	add	r3, r2
 8005afe:	3304      	adds	r3, #4
 8005b00:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	3b03      	subs	r3, #3
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d20d      	bcs.n	8005b30 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
																		Data;
			EndPoint->InBytesAvailable+=4;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	619a      	str	r2, [r3, #24]

			Success = true;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	f083 0301 	eor.w	r3, r3, #1
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e4      	bne.n	8005b06 <Endpoint_Write_32_LE+0x22>
}
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	1ffee220 	.word	0x1ffee220

08005b4c <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE() {
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8005b52:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <Endpoint_Read_32_LE+0x6c>)
 8005b54:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005b58:	461a      	mov	r2, r3
 8005b5a:	232c      	movs	r3, #44	; 0x2c
 8005b5c:	fb03 f302 	mul.w	r3, r3, r2
 8005b60:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <Endpoint_Read_32_LE+0x6c>)
 8005b62:	4413      	add	r3, r2
 8005b64:	3304      	adds	r3, #4
 8005b66:	607b      	str	r3, [r7, #4]
	bool Success = false;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d912      	bls.n	8005b9e <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	1d1a      	adds	r2, r3, #4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	1f1a      	subs	r2, r3, #4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	609a      	str	r2, [r3, #8]

			Success = true;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	f083 0301 	eor.w	r3, r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e2      	bne.n	8005b70 <Endpoint_Read_32_LE+0x24>
	return data;
 8005baa:	68bb      	ldr	r3, [r7, #8]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	1ffee220 	.word	0x1ffee220

08005bbc <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73fb      	strb	r3, [r7, #15]
 8005bcc:	e092      	b.n	8005cf4 <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	461a      	mov	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8005be6:	4b48      	ldr	r3, [pc, #288]	; (8005d08 <Endpoint_ConfigureEndpointTable+0x14c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69dc      	ldr	r4, [r3, #28]
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	7818      	ldrb	r0, [r3, #0]
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
 8005bfe:	7bfa      	ldrb	r2, [r7, #15]
 8005c00:	4613      	mov	r3, r2
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	4413      	add	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	7919      	ldrb	r1, [r3, #4]
 8005c10:	7bfa      	ldrb	r2, [r7, #15]
 8005c12:	4613      	mov	r3, r2
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	4413      	add	r3, r2
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4413      	add	r3, r2
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8005c20:	885b      	ldrh	r3, [r3, #2]
 8005c22:	461a      	mov	r2, r3
 8005c24:	47a0      	blx	r4
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <Endpoint_ConfigureEndpointTable+0x74>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e067      	b.n	8005d00 <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8005c30:	7bb9      	ldrb	r1, [r7, #14]
 8005c32:	7bfa      	ldrb	r2, [r7, #15]
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4413      	add	r3, r2
 8005c42:	7818      	ldrb	r0, [r3, #0]
 8005c44:	4a30      	ldr	r2, [pc, #192]	; (8005d08 <Endpoint_ConfigureEndpointTable+0x14c>)
 8005c46:	232c      	movs	r3, #44	; 0x2c
 8005c48:	fb03 f301 	mul.w	r3, r3, r1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4602      	mov	r2, r0
 8005c50:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8005c52:	7bb8      	ldrb	r0, [r7, #14]
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	4613      	mov	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	885b      	ldrh	r3, [r3, #2]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6c:	b2d9      	uxtb	r1, r3
 8005c6e:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <Endpoint_ConfigureEndpointTable+0x14c>)
 8005c70:	232c      	movs	r3, #44	; 0x2c
 8005c72:	fb03 f300 	mul.w	r3, r3, r0
 8005c76:	441a      	add	r2, r3
 8005c78:	8913      	ldrh	r3, [r2, #8]
 8005c7a:	f361 138c 	bfi	r3, r1, #6, #7
 8005c7e:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8005c80:	7bbb      	ldrb	r3, [r7, #14]
 8005c82:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <Endpoint_ConfigureEndpointTable+0x14c>)
 8005c84:	212c      	movs	r1, #44	; 0x2c
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	441a      	add	r2, r3
 8005c8c:	7a13      	ldrb	r3, [r2, #8]
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <Endpoint_ConfigureEndpointTable+0x14c>)
 8005c98:	212c      	movs	r1, #44	; 0x2c
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	441a      	add	r2, r3
 8005ca0:	8913      	ldrh	r3, [r2, #8]
 8005ca2:	f043 0302 	orr.w	r3, r3, #2
 8005ca6:	8113      	strh	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8005ca8:	7bfa      	ldrb	r2, [r7, #15]
 8005caa:	4613      	mov	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	b25b      	sxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	db15      	blt.n	8005cee <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 8005cc2:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <Endpoint_ConfigureEndpointTable+0x14c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8005cc8:	7bfa      	ldrb	r2, [r7, #15]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	7818      	ldrb	r0, [r3, #0]
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <Endpoint_ConfigureEndpointTable+0x14c>)
 8005cde:	212c      	movs	r1, #44	; 0x2c
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3310      	adds	r3, #16
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	4619      	mov	r1, r3
 8005cec:	47a0      	blx	r4

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
 8005cf4:	7bfa      	ldrb	r2, [r7, #15]
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	f4ff af68 	bcc.w	8005bce <Endpoint_ConfigureEndpointTable+0x12>
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8005cfe:	2301      	movs	r3, #1
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd90      	pop	{r4, r7, pc}
 8005d08:	1ffee220 	.word	0x1ffee220

08005d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d10:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <__NVIC_GetPriorityGrouping+0x18>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d18:	0a1b      	lsrs	r3, r3, #8
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	e000ed00 	.word	0xe000ed00

08005d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	db0b      	blt.n	8005d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d3a:	4908      	ldr	r1, [pc, #32]	; (8005d5c <__NVIC_EnableIRQ+0x34>)
 8005d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	79fa      	ldrb	r2, [r7, #7]
 8005d44:	f002 021f 	and.w	r2, r2, #31
 8005d48:	2001      	movs	r0, #1
 8005d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	e000e100 	.word	0xe000e100

08005d60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	db10      	blt.n	8005d94 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d72:	490b      	ldr	r1, [pc, #44]	; (8005da0 <__NVIC_DisableIRQ+0x40>)
 8005d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	79fa      	ldrb	r2, [r7, #7]
 8005d7c:	f002 021f 	and.w	r2, r2, #31
 8005d80:	2001      	movs	r0, #1
 8005d82:	fa00 f202 	lsl.w	r2, r0, r2
 8005d86:	3320      	adds	r3, #32
 8005d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d8c:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005d90:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	e000e100 	.word	0xe000e100

08005da4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	db0c      	blt.n	8005dd0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005db6:	4909      	ldr	r1, [pc, #36]	; (8005ddc <__NVIC_ClearPendingIRQ+0x38>)
 8005db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	79fa      	ldrb	r2, [r7, #7]
 8005dc0:	f002 021f 	and.w	r2, r2, #31
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dca:	3360      	adds	r3, #96	; 0x60
 8005dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	e000e100 	.word	0xe000e100

08005de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	db0a      	blt.n	8005e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df4:	490d      	ldr	r1, [pc, #52]	; (8005e2c <__NVIC_SetPriority+0x4c>)
 8005df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	0092      	lsls	r2, r2, #2
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	440b      	add	r3, r1
 8005e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005e08:	e00a      	b.n	8005e20 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e0a:	4909      	ldr	r1, [pc, #36]	; (8005e30 <__NVIC_SetPriority+0x50>)
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	3b04      	subs	r3, #4
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	0092      	lsls	r2, r2, #2
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	761a      	strb	r2, [r3, #24]
  }
}
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	e000e100 	.word	0xe000e100
 8005e30:	e000ed00 	.word	0xe000ed00

08005e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b089      	sub	sp, #36	; 0x24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f1c3 0307 	rsb	r3, r3, #7
 8005e4e:	2b06      	cmp	r3, #6
 8005e50:	bf28      	it	cs
 8005e52:	2306      	movcs	r3, #6
 8005e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3306      	adds	r3, #6
 8005e5a:	2b06      	cmp	r3, #6
 8005e5c:	d902      	bls.n	8005e64 <NVIC_EncodePriority+0x30>
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	e000      	b.n	8005e66 <NVIC_EncodePriority+0x32>
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	1e5a      	subs	r2, r3, #1
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	401a      	ands	r2, r3
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e82:	1e59      	subs	r1, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8005e88:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3724      	adds	r7, #36	; 0x24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop

08005e98 <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
	USBD_STATUS_t status = USBD_STATUS_SUCCESS;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	73fb      	strb	r3, [r7, #15]


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 8005ea4:	f7fd fe30 	bl	8003b08 <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 8005ea8:	483d      	ldr	r0, [pc, #244]	; (8005fa0 <USBD_Init+0x108>)
 8005eaa:	2100      	movs	r1, #0
 8005eac:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8005eb0:	f00c fb33 	bl	801251a <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <USBD_Init+0x10c>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8005eba:	4b39      	ldr	r3, [pc, #228]	; (8005fa0 <USBD_Init+0x108>)
 8005ebc:	4a3a      	ldr	r2, [pc, #232]	; (8005fa8 <USBD_Init+0x110>)
 8005ebe:	601a      	str	r2, [r3, #0]
	device.ep0_state = USBD_EP0_STATE_IDLE;
 8005ec0:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <USBD_Init+0x108>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8005ec8:	4b35      	ldr	r3, [pc, #212]	; (8005fa0 <USBD_Init+0x108>)
 8005eca:	4a38      	ldr	r2, [pc, #224]	; (8005fac <USBD_Init+0x114>)
 8005ecc:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 8005ece:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <USBD_Init+0x108>)
 8005ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8005ed6:	4b32      	ldr	r3, [pc, #200]	; (8005fa0 <USBD_Init+0x108>)
 8005ed8:	4a35      	ldr	r2, [pc, #212]	; (8005fb0 <USBD_Init+0x118>)
 8005eda:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 8005edc:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <USBD_Init+0x108>)
 8005ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee2:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
 8005ee4:	4a2e      	ldr	r2, [pc, #184]	; (8005fa0 <USBD_Init+0x108>)
 8005ee6:	7913      	ldrb	r3, [r2, #4]
 8005ee8:	f36f 13c7 	bfc	r3, #7, #1
 8005eec:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 8005eee:	4a2c      	ldr	r2, [pc, #176]	; (8005fa0 <USBD_Init+0x108>)
 8005ef0:	7a13      	ldrb	r3, [r2, #8]
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8005ef8:	4a29      	ldr	r2, [pc, #164]	; (8005fa0 <USBD_Init+0x108>)
 8005efa:	8913      	ldrh	r3, [r2, #8]
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	8113      	strh	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 8005f02:	4a27      	ldr	r2, [pc, #156]	; (8005fa0 <USBD_Init+0x108>)
 8005f04:	8913      	ldrh	r3, [r2, #8]
 8005f06:	2140      	movs	r1, #64	; 0x40
 8005f08:	f361 138c 	bfi	r3, r1, #6, #7
 8005f0c:	8113      	strh	r3, [r2, #8]

	if ((handle->event_cb->control_request == 0) ||
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	695b      	ldr	r3, [r3, #20]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	689b      	ldr	r3, [r3, #8]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <USBD_Init+0x9a>
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
 8005f30:	e031      	b.n	8005f96 <USBD_Init+0xfe>
	}
	else
	{
	  device.events = handle->event_cb;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <USBD_Init+0x108>)
 8005f38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f7fc f82b 	bl	8001f98 <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1b      	ldr	r2, [pc, #108]	; (8005fb4 <USBD_Init+0x11c>)
 8005f46:	605a      	str	r2, [r3, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <USBD_Init+0x120>)
 8005f4c:	609a      	str	r2, [r3, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 8005f4e:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <USBD_Init+0x108>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4610      	mov	r0, r2
 8005f58:	4798      	blx	r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	73fb      	strb	r3, [r7, #15]
	  if (USBD_STATUS_SUCCESS == status)
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <USBD_Init+0xe2>
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();
 8005f64:	f000 f888 	bl	8006078 <USB_EnableUSBInterrupt>

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8005f68:	4b0d      	ldr	r3, [pc, #52]	; (8005fa0 <USBD_Init+0x108>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	2000      	movs	r0, #0
 8005f70:	2100      	movs	r1, #0
 8005f72:	2240      	movs	r2, #64	; 0x40
 8005f74:	4798      	blx	r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	73fb      	strb	r3, [r7, #15]
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <USBD_Init+0xfe>
	  {
	  XMC_USBD_Disable();
 8005f80:	f7fd fdc2 	bl	8003b08 <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <USBD_Init+0x108>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4798      	blx	r3
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <USBD_Init+0xfe>
	  {
	    USB_DisableUSBInterrupt();
 8005f92:	f000 f887 	bl	80060a4 <USB_DisableUSBInterrupt>
	  }
	  }
	}


	return status;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	1ffee220 	.word	0x1ffee220
 8005fa4:	1ffee015 	.word	0x1ffee015
 8005fa8:	08013a74 	.word	0x08013a74
 8005fac:	1ffee020 	.word	0x1ffee020
 8005fb0:	1ffee120 	.word	0x1ffee120
 8005fb4:	080066d9 	.word	0x080066d9
 8005fb8:	08006935 	.word	0x08006935

08005fbc <USBD_Connect>:
 *
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 8005fc0:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <USBD_Connect+0x14>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	4798      	blx	r3
 8005fc8:	4603      	mov	r3, r0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	1ffee220 	.word	0x1ffee220

08005fd4 <USBD_IsEnumDone>:
 *
 * Check with the USB device controller driver if the enumeration is done.
 * Returns 1 on completion of enumeration.
 */
uint32_t USBD_IsEnumDone(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  return device.Driver->IsEnumDone();
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <USBD_IsEnumDone+0x14>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fde:	4798      	blx	r3
 8005fe0:	4603      	mov	r3, r0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	1ffee220 	.word	0x1ffee220

08005fec <USBD_SetEndpointBuffer>:
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	6039      	str	r1, [r7, #0]
 8005ff6:	71fb      	strb	r3, [r7, #7]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	80bb      	strh	r3, [r7, #4]
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	b25b      	sxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	da12      	bge.n	8006032 <USBD_SetEndpointBuffer+0x46>
  {
    device.Endpoints[number].InBuffer = buf;
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <USBD_SetEndpointBuffer+0x74>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	212c      	movs	r1, #44	; 0x2c
 8006012:	fb01 f303 	mul.w	r3, r1, r3
 8006016:	4413      	add	r3, r2
 8006018:	3318      	adds	r3, #24
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	609a      	str	r2, [r3, #8]
    device.Endpoints[number].InBufferLength = len;
 800601e:	88ba      	ldrh	r2, [r7, #4]
 8006020:	490f      	ldr	r1, [pc, #60]	; (8006060 <USBD_SetEndpointBuffer+0x74>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	202c      	movs	r0, #44	; 0x2c
 8006026:	fb00 f303 	mul.w	r3, r0, r3
 800602a:	440b      	add	r3, r1
 800602c:	3320      	adds	r3, #32
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	e011      	b.n	8006056 <USBD_SetEndpointBuffer+0x6a>
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 8006032:	4a0b      	ldr	r2, [pc, #44]	; (8006060 <USBD_SetEndpointBuffer+0x74>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	212c      	movs	r1, #44	; 0x2c
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	4413      	add	r3, r2
 800603e:	3310      	adds	r3, #16
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	605a      	str	r2, [r3, #4]
    device.Endpoints[number].OutBufferLength = len;
 8006044:	88ba      	ldrh	r2, [r7, #4]
 8006046:	4906      	ldr	r1, [pc, #24]	; (8006060 <USBD_SetEndpointBuffer+0x74>)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	202c      	movs	r0, #44	; 0x2c
 800604c:	fb00 f303 	mul.w	r3, r0, r3
 8006050:	440b      	add	r3, r1
 8006052:	3310      	adds	r3, #16
 8006054:	609a      	str	r2, [r3, #8]
  }

}
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	1ffee220 	.word	0x1ffee220

08006064 <USB0_0_IRQHandler>:
 *
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 8006068:	4b02      	ldr	r3, [pc, #8]	; (8006074 <USB0_0_IRQHandler+0x10>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f7fd fc97 	bl	80039a0 <XMC_USBD_IRQHandler>
}
 8006072:	bd80      	pop	{r7, pc}
 8006074:	1ffed04c 	.word	0x1ffed04c

08006078 <USB_EnableUSBInterrupt>:
 * Enables and sets the priority of USB Interrupt
 *
 * First the interrupt priority is set and then the interrupt is enabled in the NVIC.
 */
static void USB_EnableUSBInterrupt(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), USB_PRE_EMPTION_PRIORITY, 
 800607c:	f7ff fe46 	bl	8005d0c <__NVIC_GetPriorityGrouping>
 8006080:	4603      	mov	r3, r0
 8006082:	4618      	mov	r0, r3
 8006084:	213b      	movs	r1, #59	; 0x3b
 8006086:	2200      	movs	r2, #0
 8006088:	f7ff fed4 	bl	8005e34 <NVIC_EncodePriority>
 800608c:	4603      	mov	r3, r0
 800608e:	206b      	movs	r0, #107	; 0x6b
 8006090:	4619      	mov	r1, r3
 8006092:	f7ff fea5 	bl	8005de0 <__NVIC_SetPriority>
  USB_SUB_PRIORITY));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8006096:	206b      	movs	r0, #107	; 0x6b
 8006098:	f7ff fe84 	bl	8005da4 <__NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 800609c:	206b      	movs	r0, #107	; 0x6b
 800609e:	f7ff fe43 	bl	8005d28 <__NVIC_EnableIRQ>
}
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USB_DisableUSBInterrupt>:
 * Disables the USB interrupt in the NVIC.
 *
 * Before the interrupt gets disabled, it will clear the pending IRQs.
 */
static void USB_DisableUSBInterrupt(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 80060a8:	206b      	movs	r0, #107	; 0x6b
 80060aa:	f7ff fe7b 	bl	8005da4 <__NVIC_ClearPendingIRQ>
  NVIC_DisableIRQ(USB0_0_IRQn);
 80060ae:	206b      	movs	r0, #107	; 0x6b
 80060b0:	f7ff fe56 	bl	8005d60 <__NVIC_DisableIRQ>
}
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop

080060b8 <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 80060bc:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <USBD_HandleEP0_Stall+0x2c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2080      	movs	r0, #128	; 0x80
 80060c4:	2101      	movs	r1, #1
 80060c6:	4798      	blx	r3
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <USBD_HandleEP0_Stall+0x2a>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <USBD_HandleEP0_Stall+0x2c>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 80060d6:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <USBD_HandleEP0_Stall+0x2c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	2000      	movs	r0, #0
 80060de:	2118      	movs	r1, #24
 80060e0:	4798      	blx	r3
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	1ffee220 	.word	0x1ffee220

080060e8 <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af00      	add	r7, sp, #0
  uint32_t length = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
  uint32_t ret;
  void *buffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
  uint32_t status = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	603b      	str	r3, [r7, #0]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 80060fa:	4b95      	ldr	r3, [pc, #596]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 80060fc:	885b      	ldrh	r3, [r3, #2]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	b2db      	uxtb	r3, r3
 8006102:	61bb      	str	r3, [r7, #24]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8006104:	4b93      	ldr	r3, [pc, #588]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006106:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <USBD_Handle_DeviceRequest+0x32>
  {
    device.events->control_request();
 8006110:	4b90      	ldr	r3, [pc, #576]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006112:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4798      	blx	r3
  }

  if (1U == device.IsSetupRecieved)
 800611a:	4b8e      	ldr	r3, [pc, #568]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 800611c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8006120:	b2db      	uxtb	r3, r3
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	f040 8228 	bne.w	8006580 <USBD_Handle_DeviceRequest+0x498>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 8006130:	4b87      	ldr	r3, [pc, #540]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b0c      	cmp	r3, #12
 8006138:	f200 821f 	bhi.w	800657a <USBD_Handle_DeviceRequest+0x492>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <USBD_Handle_DeviceRequest+0x5c>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	080062df 	.word	0x080062df
 8006148:	08006179 	.word	0x08006179
 800614c:	0800657b 	.word	0x0800657b
 8006150:	080064ad 	.word	0x080064ad
 8006154:	0800657b 	.word	0x0800657b
 8006158:	080063d7 	.word	0x080063d7
 800615c:	08006225 	.word	0x08006225
 8006160:	08006467 	.word	0x08006467
 8006164:	08006215 	.word	0x08006215
 8006168:	0800641b 	.word	0x0800641b
 800616c:	080062a5 	.word	0x080062a5
 8006170:	0800646d 	.word	0x0800646d
 8006174:	08006575 	.word	0x08006575
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 8006178:	4b75      	ldr	r3, [pc, #468]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d134      	bne.n	80061f0 <USBD_Handle_DeviceRequest+0x108>
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 8006186:	4b72      	ldr	r3, [pc, #456]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 8006188:	889b      	ldrh	r3, [r3, #4]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 8006192:	4b71      	ldr	r3, [pc, #452]	; (8006358 <USBD_Handle_DeviceRequest+0x270>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b04      	cmp	r3, #4
 800619a:	d004      	beq.n	80061a6 <USBD_Handle_DeviceRequest+0xbe>
 800619c:	4b6c      	ldr	r3, [pc, #432]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 800619e:	889b      	ldrh	r3, [r3, #4]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d121      	bne.n	80061ea <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
 80061a6:	4a6b      	ldr	r2, [pc, #428]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	212c      	movs	r1, #44	; 0x2c
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	7a1b      	ldrb	r3, [r3, #8]
 80061b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061b8:	b2db      	uxtb	r3, r3
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d115      	bne.n	80061ea <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 80061be:	4a65      	ldr	r2, [pc, #404]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	212c      	movs	r1, #44	; 0x2c
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	441a      	add	r2, r3
 80061ca:	8913      	ldrh	r3, [r2, #8]
 80061cc:	f36f 0382 	bfc	r3, #2, #1
 80061d0:	8113      	strh	r3, [r2, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 80061d2:	4b60      	ldr	r3, [pc, #384]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	4a5d      	ldr	r2, [pc, #372]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 80061da:	8892      	ldrh	r2, [r2, #4]
 80061dc:	b292      	uxth	r2, r2
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	4610      	mov	r0, r2
 80061e2:	2100      	movs	r1, #0
 80061e4:	4798      	blx	r3
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
            if (USBD_STATUS_SUCCESS != 
 80061e6:	bf00      	nop
          }
          else
          {
            USBD_HandleEP0_Stall();
          }
          break;
 80061e8:	e1ca      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed", 0);
            }
          }
          else
          {
            USBD_HandleEP0_Stall();
 80061ea:	f7ff ff65 	bl	80060b8 <USBD_HandleEP0_Stall>
          }
          break;
 80061ee:	e1c7      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80061f0:	4b57      	ldr	r3, [pc, #348]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <USBD_Handle_DeviceRequest+0x126>
        {
          device.remote_wakeup = 0U;
 80061fe:	4a55      	ldr	r2, [pc, #340]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006200:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8006204:	f36f 0382 	bfc	r3, #2, #1
 8006208:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
          break;
 800620c:	e1b8      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        USBD_HandleEP0_Stall();
 800620e:	f7ff ff53 	bl	80060b8 <USBD_HandleEP0_Stall>
        break;
 8006212:	e1b5      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 8006214:	4b4f      	ldr	r3, [pc, #316]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	2000      	movs	r0, #0
 800621c:	494f      	ldr	r1, [pc, #316]	; (800635c <USBD_Handle_DeviceRequest+0x274>)
 800621e:	2201      	movs	r2, #1
 8006220:	4798      	blx	r3
        {
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;
 8006222:	e1ad      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 8006224:	4b4b      	ldr	r3, [pc, #300]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006226:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d013      	beq.n	8006258 <USBD_Handle_DeviceRequest+0x170>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8006230:	4b47      	ldr	r3, [pc, #284]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 8006232:	885b      	ldrh	r3, [r3, #2]
 8006234:	b29b      	uxth	r3, r3
 8006236:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 8006238:	4b45      	ldr	r3, [pc, #276]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 800623a:	889b      	ldrh	r3, [r3, #4]
 800623c:	b29b      	uxth	r3, r3
 800623e:	60fb      	str	r3, [r7, #12]
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 8006240:	4b44      	ldr	r3, [pc, #272]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006242:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	b290      	uxth	r0, r2
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	b291      	uxth	r1, r2
 8006250:	1d3a      	adds	r2, r7, #4
 8006252:	4798      	blx	r3
 8006254:	4603      	mov	r3, r0
 8006256:	61fb      	str	r3, [r7, #28]
        }

        if (0U == length)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <USBD_Handle_DeviceRequest+0x17c>
        {
          USBD_HandleEP0_Stall();
 800625e:	f7ff ff2b 	bl	80060b8 <USBD_HandleEP0_Stall>

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
        }
        break;
 8006262:	e18d      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 8006264:	4b3a      	ldr	r3, [pc, #232]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 8006266:	88db      	ldrh	r3, [r3, #6]
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	429a      	cmp	r2, r3
 8006270:	d803      	bhi.n	800627a <USBD_Handle_DeviceRequest+0x192>
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 8006272:	4b37      	ldr	r3, [pc, #220]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 8006274:	88db      	ldrh	r3, [r3, #6]
 8006276:	b29b      	uxth	r3, r3
 8006278:	61fb      	str	r3, [r7, #28]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 800627a:	4b36      	ldr	r3, [pc, #216]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	2000      	movs	r0, #0
 8006284:	4611      	mov	r1, r2
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	4798      	blx	r3
 800628a:	4603      	mov	r3, r0
 800628c:	60bb      	str	r3, [r7, #8]
          device.Endpoints[0].InDataLeft = length - ret;
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	4a2f      	ldr	r2, [pc, #188]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006296:	6293      	str	r3, [r2, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4413      	add	r3, r2
 800629e:	4a2d      	ldr	r2, [pc, #180]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 80062a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
        break;
 80062a2:	e16d      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 80062a4:	4b2c      	ldr	r3, [pc, #176]	; (8006358 <USBD_Handle_DeviceRequest+0x270>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d10e      	bne.n	80062cc <USBD_Handle_DeviceRequest+0x1e4>
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 80062ae:	4b29      	ldr	r3, [pc, #164]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 80062b4:	4a26      	ldr	r2, [pc, #152]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 80062b6:	8892      	ldrh	r2, [r2, #4]
 80062b8:	b292      	uxth	r2, r2
 80062ba:	f502 729c 	add.w	r2, r2, #312	; 0x138
 80062be:	4925      	ldr	r1, [pc, #148]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 80062c0:	440a      	add	r2, r1
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 80062c2:	2000      	movs	r0, #0
 80062c4:	4611      	mov	r1, r2
 80062c6:	2201      	movs	r2, #1
 80062c8:	4798      	blx	r3
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetInterface", 0);
          }
          break;
 80062ca:	e159      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 80062cc:	4b22      	ldr	r3, [pc, #136]	; (8006358 <USBD_Handle_DeviceRequest+0x270>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d102      	bne.n	80062dc <USBD_Handle_DeviceRequest+0x1f4>
        {
          USBD_HandleEP0_Stall();
 80062d6:	f7ff feef 	bl	80060b8 <USBD_HandleEP0_Stall>
          break;
 80062da:	e151      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 80062dc:	e150      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80062de:	4b1c      	ldr	r3, [pc, #112]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d119      	bne.n	8006320 <USBD_Handle_DeviceRequest+0x238>
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 80062ec:	4b19      	ldr	r3, [pc, #100]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 80062ee:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80062f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	4b15      	ldr	r3, [pc, #84]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006300:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8006304:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4313      	orrs	r3, r2
 800630c:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	463a      	mov	r2, r7
 8006316:	2000      	movs	r0, #0
 8006318:	4611      	mov	r1, r2
 800631a:	2202      	movs	r2, #2
 800631c:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
 800631e:	e12f      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <USBD_Handle_DeviceRequest+0x268>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	2b01      	cmp	r3, #1
 800632c:	d118      	bne.n	8006360 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 800632e:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <USBD_Handle_DeviceRequest+0x270>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	b2db      	uxtb	r3, r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8006334:	2b04      	cmp	r3, #4
 8006336:	d113      	bne.n	8006360 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800633c:	4b05      	ldr	r3, [pc, #20]	; (8006354 <USBD_Handle_DeviceRequest+0x26c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	463a      	mov	r2, r7
 8006344:	2000      	movs	r0, #0
 8006346:	4611      	mov	r1, r2
 8006348:	2202      	movs	r2, #2
 800634a:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
 800634c:	e118      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
 800634e:	bf00      	nop
 8006350:	1ffee018 	.word	0x1ffee018
 8006354:	1ffee220 	.word	0x1ffee220
 8006358:	1ffee015 	.word	0x1ffee015
 800635c:	1ffee359 	.word	0x1ffee359
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8006360:	4b8c      	ldr	r3, [pc, #560]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d130      	bne.n	80063d0 <USBD_Handle_DeviceRequest+0x2e8>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 800636e:	4b89      	ldr	r3, [pc, #548]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 8006370:	889b      	ldrh	r3, [r3, #4]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800637a:	4b87      	ldr	r3, [pc, #540]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b04      	cmp	r3, #4
 8006382:	d004      	beq.n	800638e <USBD_Handle_DeviceRequest+0x2a6>
 8006384:	4b83      	ldr	r3, [pc, #524]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 8006386:	889b      	ldrh	r3, [r3, #4]
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d120      	bne.n	80063d0 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
 800638e:	4a83      	ldr	r2, [pc, #524]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	212c      	movs	r1, #44	; 0x2c
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	4413      	add	r3, r2
 800639a:	7a1b      	ldrb	r3, [r3, #8]
 800639c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063a0:	b2db      	uxtb	r3, r3
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d114      	bne.n	80063d0 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 80063a6:	4a7d      	ldr	r2, [pc, #500]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	212c      	movs	r1, #44	; 0x2c
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	4413      	add	r3, r2
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	089b      	lsrs	r3, r3, #2
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	603b      	str	r3, [r7, #0]
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80063be:	4b77      	ldr	r3, [pc, #476]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	463a      	mov	r2, r7
 80063c6:	2000      	movs	r0, #0
 80063c8:	4611      	mov	r1, r2
 80063ca:	2202      	movs	r2, #2
 80063cc:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 80063ce:	e0d7      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default stall */
        USBD_HandleEP0_Stall();
 80063d0:	f7ff fe72 	bl	80060b8 <USBD_HandleEP0_Stall>
        break;
 80063d4:	e0d4      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetAddress:
        if (0U == value)
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <USBD_Handle_DeviceRequest+0x2fc>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 80063dc:	4b6e      	ldr	r3, [pc, #440]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 80063de:	2202      	movs	r2, #2
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e002      	b.n	80063ea <USBD_Handle_DeviceRequest+0x302>
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 80063e4:	4b6c      	ldr	r3, [pc, #432]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 80063e6:	2203      	movs	r2, #3
 80063e8:	701a      	strb	r2, [r3, #0]
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 80063ea:	4b6c      	ldr	r3, [pc, #432]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	4610      	mov	r0, r2
 80063f6:	2100      	movs	r1, #0
 80063f8:	4798      	blx	r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10b      	bne.n	8006418 <USBD_Handle_DeviceRequest+0x330>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 8006400:	4b66      	ldr	r3, [pc, #408]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 8006402:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <USBD_Handle_DeviceRequest+0x330>
          {
            device.events->set_address();
 800640c:	4b63      	ldr	r3, [pc, #396]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 800640e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	4798      	blx	r3
          }
        }
        break;
 8006416:	e0b3      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
 8006418:	e0b2      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4b5f      	ldr	r3, [pc, #380]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 8006420:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
        if (NULL != device.events->config_changed)
 8006424:	4b5d      	ldr	r3, [pc, #372]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 8006426:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d004      	beq.n	800643a <USBD_Handle_DeviceRequest+0x352>
        {
          device.events->config_changed();
 8006430:	4b5a      	ldr	r3, [pc, #360]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 8006432:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <USBD_Handle_DeviceRequest+0x360>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8006440:	4b55      	ldr	r3, [pc, #340]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 8006442:	2203      	movs	r2, #3
 8006444:	701a      	strb	r2, [r3, #0]
          break;
 8006446:	e09b      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 8006448:	4b54      	ldr	r3, [pc, #336]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 800644a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <USBD_Handle_DeviceRequest+0x378>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8006458:	4b4f      	ldr	r3, [pc, #316]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 800645a:	2204      	movs	r2, #4
 800645c:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          USBD_HandleEP0_Stall();
        }
        break;
 800645e:	e08f      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
        }
        else
        {
          USBD_HandleEP0_Stall();
 8006460:	f7ff fe2a 	bl	80060b8 <USBD_HandleEP0_Stall>
        }
        break;
 8006464:	e08c      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetDescriptor:
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
 8006466:	f7ff fe27 	bl	80060b8 <USBD_HandleEP0_Stall>
        break;
 800646a:	e089      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 800646c:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b04      	cmp	r3, #4
 8006474:	d111      	bne.n	800649a <USBD_Handle_DeviceRequest+0x3b2>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8006476:	4b47      	ldr	r3, [pc, #284]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 8006478:	885b      	ldrh	r3, [r3, #2]
 800647a:	b29b      	uxth	r3, r3
 800647c:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 800647e:	4b45      	ldr	r3, [pc, #276]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 8006480:	889b      	ldrh	r3, [r3, #4]
 8006482:	b29b      	uxth	r3, r3
 8006484:	60fb      	str	r3, [r7, #12]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	b2d9      	uxtb	r1, r3
 800648a:	4a44      	ldr	r2, [pc, #272]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006494:	460a      	mov	r2, r1
 8006496:	701a      	strb	r2, [r3, #0]
          break;
 8006498:	e072      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 800649a:	4b3f      	ldr	r3, [pc, #252]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d102      	bne.n	80064aa <USBD_Handle_DeviceRequest+0x3c2>
        {
          USBD_HandleEP0_Stall();
 80064a4:	f7ff fe08 	bl	80060b8 <USBD_HandleEP0_Stall>
          break;
 80064a8:	e06a      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 80064aa:	e069      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d102      	bne.n	80064b8 <USBD_Handle_DeviceRequest+0x3d0>
        {
          USBD_HandleEP0_Stall();
 80064b2:	f7ff fe01 	bl	80060b8 <USBD_HandleEP0_Stall>
          break;
 80064b6:	e063      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 80064b8:	4b37      	ldr	r3, [pc, #220]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d138      	bne.n	8006534 <USBD_Handle_DeviceRequest+0x44c>
        {
          switch (value)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <USBD_Handle_DeviceRequest+0x3f6>
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d000      	beq.n	80064ce <USBD_Handle_DeviceRequest+0x3e6>
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
            default:
              break;
 80064cc:	e031      	b.n	8006532 <USBD_Handle_DeviceRequest+0x44a>
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {
          switch (value)
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 80064ce:	4a33      	ldr	r2, [pc, #204]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 80064d0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80064d4:	f043 0304 	orr.w	r3, r3, #4
 80064d8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
              break;
 80064dc:	e029      	b.n	8006532 <USBD_Handle_DeviceRequest+0x44a>
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 80064de:	4b2d      	ldr	r3, [pc, #180]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 80064e0:	889b      	ldrh	r3, [r3, #4]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	617b      	str	r3, [r7, #20]
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 80064ea:	4a2c      	ldr	r2, [pc, #176]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	212c      	movs	r1, #44	; 0x2c
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	7a1b      	ldrb	r3, [r3, #8]
 80064f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <USBD_Handle_DeviceRequest+0x420>
              {
                USBD_HandleEP0_Stall();
 8006502:	f7ff fdd9 	bl	80060b8 <USBD_HandleEP0_Stall>
 8006506:	e013      	b.n	8006530 <USBD_Handle_DeviceRequest+0x448>
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 8006508:	4a24      	ldr	r2, [pc, #144]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	212c      	movs	r1, #44	; 0x2c
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	441a      	add	r2, r3
 8006514:	8913      	ldrh	r3, [r2, #8]
 8006516:	f043 0304 	orr.w	r3, r3, #4
 800651a:	8113      	strh	r3, [r2, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 800651c:	4b1f      	ldr	r3, [pc, #124]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	4a1c      	ldr	r2, [pc, #112]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 8006524:	8892      	ldrh	r2, [r2, #4]
 8006526:	b292      	uxth	r2, r2
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	4610      	mov	r0, r2
 800652c:	2101      	movs	r1, #1
 800652e:	4798      	blx	r3
                {
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
 8006530:	bf00      	nop
            default:
              break;
          }
          break;
 8006532:	e025      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8006534:	4b18      	ldr	r3, [pc, #96]	; (8006598 <USBD_Handle_DeviceRequest+0x4b0>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d117      	bne.n	800656e <USBD_Handle_DeviceRequest+0x486>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d114      	bne.n	800656e <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8006544:	4b13      	ldr	r3, [pc, #76]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 0303 	and.w	r3, r3, #3
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 800654e:	2b02      	cmp	r3, #2
 8006550:	d10d      	bne.n	800656e <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 8006552:	4b10      	ldr	r3, [pc, #64]	; (8006594 <USBD_Handle_DeviceRequest+0x4ac>)
 8006554:	889b      	ldrh	r3, [r3, #4]
 8006556:	b29b      	uxth	r3, r3
 8006558:	b2db      	uxtb	r3, r3
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800655a:	2b00      	cmp	r3, #0
 800655c:	d107      	bne.n	800656e <USBD_Handle_DeviceRequest+0x486>
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 800655e:	4a0f      	ldr	r2, [pc, #60]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 8006560:	8913      	ldrh	r3, [r2, #8]
 8006562:	f043 0304 	orr.w	r3, r3, #4
 8006566:	8113      	strh	r3, [r2, #8]
            USBD_HandleEP0_Stall();
 8006568:	f7ff fda6 	bl	80060b8 <USBD_HandleEP0_Stall>
            break;
 800656c:	e008      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default behaviour is stall */
        USBD_HandleEP0_Stall();
 800656e:	f7ff fda3 	bl	80060b8 <USBD_HandleEP0_Stall>
        break;
 8006572:	e005      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SynchFrame:
        /* Not yet supported */
        USBD_HandleEP0_Stall();
 8006574:	f7ff fda0 	bl	80060b8 <USBD_HandleEP0_Stall>
        break;
 8006578:	e002      	b.n	8006580 <USBD_Handle_DeviceRequest+0x498>

      default:
        USBD_HandleEP0_Stall();
 800657a:	f7ff fd9d 	bl	80060b8 <USBD_HandleEP0_Stall>
        break;
 800657e:	bf00      	nop
    }
  }
  device.IsSetupRecieved = 0U;
 8006580:	4b06      	ldr	r3, [pc, #24]	; (800659c <USBD_Handle_DeviceRequest+0x4b4>)
 8006582:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8006586:	f022 0202 	bic.w	r2, r2, #2
 800658a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 800658e:	3720      	adds	r7, #32
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	1ffee018 	.word	0x1ffee018
 8006598:	1ffee015 	.word	0x1ffee015
 800659c:	1ffee220 	.word	0x1ffee220

080065a0 <USBD_HandleEP0_IN>:
 * state.
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 80065a4:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <USBD_HandleEP0_IN+0x48>)
 80065a6:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d10a      	bne.n	80065c4 <USBD_HandleEP0_IN+0x24>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 80065ae:	4b0e      	ldr	r3, [pc, #56]	; (80065e8 <USBD_HandleEP0_IN+0x48>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	2000      	movs	r0, #0
 80065b6:	2100      	movs	r1, #0
 80065b8:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 80065ba:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <USBD_HandleEP0_IN+0x48>)
 80065bc:	2205      	movs	r2, #5
 80065be:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 80065c2:	e010      	b.n	80065e6 <USBD_HandleEP0_IN+0x46>
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 80065c4:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <USBD_HandleEP0_IN+0x48>)
 80065c6:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d10b      	bne.n	80065e6 <USBD_HandleEP0_IN+0x46>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 80065ce:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <USBD_HandleEP0_IN+0x48>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	4a04      	ldr	r2, [pc, #16]	; (80065e8 <USBD_HandleEP0_IN+0x48>)
 80065d6:	7912      	ldrb	r2, [r2, #4]
 80065d8:	4610      	mov	r0, r2
 80065da:	2118      	movs	r1, #24
 80065dc:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80065de:	4b02      	ldr	r3, [pc, #8]	; (80065e8 <USBD_HandleEP0_IN+0x48>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_IN: invalid ep0 state", 0);
  }
}
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	1ffee220 	.word	0x1ffee220

080065ec <USBD_HandleEP0_OUT>:
 * for new SETUP packets, when in \ref USBD_EP0_STATE_OUT_STATUS. When endpoint 0 is in
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 80065f0:	4b12      	ldr	r3, [pc, #72]	; (800663c <USBD_HandleEP0_OUT+0x50>)
 80065f2:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d10d      	bne.n	8006616 <USBD_HandleEP0_OUT+0x2a>
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 80065fa:	f7ff fd75 	bl	80060e8 <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <USBD_HandleEP0_OUT+0x50>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	2000      	movs	r0, #0
 8006606:	2100      	movs	r1, #0
 8006608:	2200      	movs	r2, #0
 800660a:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <USBD_HandleEP0_OUT+0x50>)
 800660e:	2203      	movs	r2, #3
 8006610:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 8006614:	e010      	b.n	8006638 <USBD_HandleEP0_OUT+0x4c>
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <USBD_HandleEP0_OUT+0x50>)
 8006618:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800661c:	2b05      	cmp	r3, #5
 800661e:	d10b      	bne.n	8006638 <USBD_HandleEP0_OUT+0x4c>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <USBD_HandleEP0_OUT+0x50>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	4a05      	ldr	r2, [pc, #20]	; (800663c <USBD_HandleEP0_OUT+0x50>)
 8006628:	7912      	ldrb	r2, [r2, #4]
 800662a:	4610      	mov	r0, r2
 800662c:	2118      	movs	r1, #24
 800662e:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8006630:	4b02      	ldr	r3, [pc, #8]	; (800663c <USBD_HandleEP0_OUT+0x50>)
 8006632:	2201      	movs	r2, #1
 8006634:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_OUT: invalid ep0 state", 0);
  }
}
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	1ffee220 	.word	0x1ffee220

08006640 <USBD_HandleEP0_SETUP>:
 * equals zero, it starts processing the request and sends in status response including the switch to
 * USBD_EP0_STATE_IN_STATUS. When the host expects data from the device, the function processes the control
 * request and switches to USBD_EP0_STATE_IN_DATA state.
 */
static void USBD_HandleEP0_SETUP()
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 8006646:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <USBD_HandleEP0_SETUP+0x90>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	2000      	movs	r0, #0
 800664e:	4921      	ldr	r1, [pc, #132]	; (80066d4 <USBD_HandleEP0_SETUP+0x94>)
 8006650:	2208      	movs	r2, #8
 8006652:	4798      	blx	r3
 8006654:	4603      	mov	r3, r0
 8006656:	607b      	str	r3, [r7, #4]
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <USBD_HandleEP0_SETUP+0x90>)
 800665a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 800665e:	f042 0202 	orr.w	r2, r2, #2
 8006662:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d12d      	bne.n	80066c8 <USBD_HandleEP0_SETUP+0x88>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 800666c:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <USBD_HandleEP0_SETUP+0x94>)
 800666e:	88db      	ldrh	r3, [r3, #6]
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10d      	bne.n	8006692 <USBD_HandleEP0_SETUP+0x52>
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8006676:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <USBD_HandleEP0_SETUP+0x90>)
 8006678:	2203      	movs	r2, #3
 800667a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 800667e:	f7ff fd33 	bl	80060e8 <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 8006682:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <USBD_HandleEP0_SETUP+0x90>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	2000      	movs	r0, #0
 800668a:	2100      	movs	r1, #0
 800668c:	2200      	movs	r2, #0
 800668e:	4798      	blx	r3
 8006690:	e01a      	b.n	80066c8 <USBD_HandleEP0_SETUP+0x88>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <USBD_HandleEP0_SETUP+0x94>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	b2db      	uxtb	r3, r3
 800669a:	b25b      	sxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	da06      	bge.n	80066ae <USBD_HandleEP0_SETUP+0x6e>
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <USBD_HandleEP0_SETUP+0x90>)
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 80066a8:	f7ff fd1e 	bl	80060e8 <USBD_Handle_DeviceRequest>
 80066ac:	e00c      	b.n	80066c8 <USBD_HandleEP0_SETUP+0x88>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 80066ae:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <USBD_HandleEP0_SETUP+0x90>)
 80066b0:	2204      	movs	r2, #4
 80066b2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 80066b6:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <USBD_HandleEP0_SETUP+0x90>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	4a05      	ldr	r2, [pc, #20]	; (80066d4 <USBD_HandleEP0_SETUP+0x94>)
 80066be:	88d2      	ldrh	r2, [r2, #6]
 80066c0:	b292      	uxth	r2, r2
 80066c2:	2000      	movs	r0, #0
 80066c4:	4611      	mov	r1, r2
 80066c6:	4798      	blx	r3
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_SETUP: read invalid setup packet size", 0);
  }
}
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	1ffee220 	.word	0x1ffee220
 80066d4:	1ffee018 	.word	0x1ffee018

080066d8 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  switch (event)
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	2b09      	cmp	r3, #9
 80066e6:	f200 811c 	bhi.w	8006922 <USBD_SignalDeviceEventHandler+0x24a>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <USBD_SignalDeviceEventHandler+0x18>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	080068cb 	.word	0x080068cb
 80066f4:	080068ab 	.word	0x080068ab
 80066f8:	08006871 	.word	0x08006871
 80066fc:	0800688b 	.word	0x0800688b
 8006700:	08006719 	.word	0x08006719
 8006704:	08006923 	.word	0x08006923
 8006708:	080068f7 	.word	0x080068f7
 800670c:	080068d3 	.word	0x080068d3
 8006710:	08006923 	.word	0x08006923
 8006714:	08006857 	.word	0x08006857
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 8006718:	4b84      	ldr	r3, [pc, #528]	; (800692c <USBD_SignalDeviceEventHandler+0x254>)
 800671a:	2202      	movs	r2, #2
 800671c:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
 800671e:	4b84      	ldr	r3, [pc, #528]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006720:	2201      	movs	r2, #1
 8006722:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      device.remote_wakeup = (uint8_t)0;
 8006726:	4a82      	ldr	r2, [pc, #520]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006728:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800672c:	f36f 0382 	bfc	r3, #2, #1
 8006730:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 8006734:	2307      	movs	r3, #7
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e060      	b.n	80067fc <USBD_SignalDeviceEventHandler+0x124>
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f1c3 0307 	rsb	r3, r3, #7
 8006740:	4a7b      	ldr	r2, [pc, #492]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006742:	212c      	movs	r1, #44	; 0x2c
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	441a      	add	r2, r3
 800674a:	8913      	ldrh	r3, [r2, #8]
 800674c:	f36f 1304 	bfc	r3, #4, #1
 8006750:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f1c3 0307 	rsb	r3, r3, #7
 8006758:	4a75      	ldr	r2, [pc, #468]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 800675a:	212c      	movs	r1, #44	; 0x2c
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	441a      	add	r2, r3
 8006762:	8913      	ldrh	r3, [r2, #8]
 8006764:	f36f 03c3 	bfc	r3, #3, #1
 8006768:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f1c3 0307 	rsb	r3, r3, #7
 8006770:	4a6f      	ldr	r2, [pc, #444]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006772:	212c      	movs	r1, #44	; 0x2c
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	441a      	add	r2, r3
 800677a:	8913      	ldrh	r3, [r2, #8]
 800677c:	f36f 0382 	bfc	r3, #2, #1
 8006780:	8113      	strh	r3, [r2, #8]
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b07      	cmp	r3, #7
 8006786:	d036      	beq.n	80067f6 <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f1c3 0307 	rsb	r3, r3, #7
 800678e:	4a68      	ldr	r2, [pc, #416]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	7a1b      	ldrb	r3, [r3, #8]
 800679a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800679e:	b2db      	uxtb	r3, r3
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d028      	beq.n	80067f6 <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 80067a4:	4b62      	ldr	r3, [pc, #392]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	f1c2 0207 	rsb	r2, r2, #7
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 80067b0:	495f      	ldr	r1, [pc, #380]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80067b2:	202c      	movs	r0, #44	; 0x2c
 80067b4:	fb00 f202 	mul.w	r2, r0, r2
 80067b8:	440a      	add	r2, r1
 80067ba:	7912      	ldrb	r2, [r2, #4]
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
 80067c0:	4603      	mov	r3, r0
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d117      	bne.n	80067f6 <USBD_SignalDeviceEventHandler+0x11e>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f1c3 0307 	rsb	r3, r3, #7
 80067cc:	4a58      	ldr	r2, [pc, #352]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80067ce:	212c      	movs	r1, #44	; 0x2c
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	441a      	add	r2, r3
 80067d6:	7a13      	ldrb	r3, [r2, #8]
 80067d8:	f36f 0300 	bfc	r3, #0, #1
 80067dc:	7213      	strb	r3, [r2, #8]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f1c3 0307 	rsb	r3, r3, #7
 80067e4:	4a52      	ldr	r2, [pc, #328]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80067e6:	212c      	movs	r1, #44	; 0x2c
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	441a      	add	r2, r3
 80067ee:	8913      	ldrh	r3, [r2, #8]
 80067f0:	f36f 0341 	bfc	r3, #1, #1
 80067f4:	8113      	strh	r3, [r2, #8]
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d19b      	bne.n	800673a <USBD_SignalDeviceEventHandler+0x62>
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 8006802:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 800680a:	2301      	movs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e00a      	b.n	8006826 <USBD_SignalDeviceEventHandler+0x14e>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f1c3 0301 	rsb	r3, r3, #1
 8006816:	4a46      	ldr	r2, [pc, #280]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006818:	4413      	add	r3, r2
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3b01      	subs	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f1      	bne.n	8006810 <USBD_SignalDeviceEventHandler+0x138>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 800682c:	4b40      	ldr	r3, [pc, #256]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	4a3f      	ldr	r2, [pc, #252]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006834:	7912      	ldrb	r2, [r2, #4]
 8006836:	4610      	mov	r0, r2
 8006838:	2118      	movs	r1, #24
 800683a:	4798      	blx	r3
      if (NULL != device.events->reset)
 800683c:	4b3c      	ldr	r3, [pc, #240]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 800683e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <USBD_SignalDeviceEventHandler+0x17c>
      {
        device.events->reset();
 8006848:	4b39      	ldr	r3, [pc, #228]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 800684a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	4798      	blx	r3
      }
      break;
 8006852:	e067      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
 8006854:	e066      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006858:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <USBD_SignalDeviceEventHandler+0x196>
      {
        device.events->start_of_frame();
 8006862:	4b33      	ldr	r3, [pc, #204]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006864:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	4798      	blx	r3
      }
      break;
 800686c:	e05a      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
 800686e:	e059      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 8006870:	4b2f      	ldr	r3, [pc, #188]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006872:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <USBD_SignalDeviceEventHandler+0x1b0>
      {
        device.events->connect();
 800687c:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 800687e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4798      	blx	r3
      }
      break;
 8006886:	e04d      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
 8006888:	e04c      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 800688a:	4b28      	ldr	r3, [pc, #160]	; (800692c <USBD_SignalDeviceEventHandler+0x254>)
 800688c:	2201      	movs	r2, #1
 800688e:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <USBD_SignalDeviceEventHandler+0x1d0>
      {
        device.events->disconnect();
 800689c:	4b24      	ldr	r3, [pc, #144]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 800689e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4798      	blx	r3
      }
      break;
 80068a6:	e03d      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
 80068a8:	e03c      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 80068aa:	4b20      	ldr	r3, [pc, #128]	; (800692c <USBD_SignalDeviceEventHandler+0x254>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 80068b0:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80068b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <USBD_SignalDeviceEventHandler+0x1f0>
      {
        device.events->disconnect();
 80068bc:	4b1c      	ldr	r3, [pc, #112]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80068be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4798      	blx	r3
      }
      break;
 80068c6:	e02d      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
 80068c8:	e02c      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 80068ca:	4b18      	ldr	r3, [pc, #96]	; (800692c <USBD_SignalDeviceEventHandler+0x254>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]
      break;
 80068d0:	e028      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 80068d2:	4b17      	ldr	r3, [pc, #92]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80068d4:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <USBD_SignalDeviceEventHandler+0x254>)
 80068da:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->wakeup)
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80068de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <USBD_SignalDeviceEventHandler+0x21c>
      {
        device.events->wakeup();
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80068ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	4798      	blx	r3
      }
      break;
 80068f2:	e017      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
 80068f4:	e016      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <USBD_SignalDeviceEventHandler+0x254>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 80068fe:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <USBD_SignalDeviceEventHandler+0x254>)
 8006904:	2205      	movs	r2, #5
 8006906:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->suspend)
 8006908:	4b09      	ldr	r3, [pc, #36]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 800690a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <USBD_SignalDeviceEventHandler+0x248>
      {
        device.events->suspend();
 8006914:	4b06      	ldr	r3, [pc, #24]	; (8006930 <USBD_SignalDeviceEventHandler+0x258>)
 8006916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	4798      	blx	r3
      }
      break;
 800691e:	e001      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
 8006920:	e000      	b.n	8006924 <USBD_SignalDeviceEventHandler+0x24c>
    default:
      break;
 8006922:	bf00      	nop
  }
}
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	1ffee015 	.word	0x1ffee015
 8006930:	1ffee220 	.word	0x1ffee220

08006934 <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	460a      	mov	r2, r1
 800693e:	71fb      	strb	r3, [r7, #7]
 8006940:	4613      	mov	r3, r2
 8006942:	71bb      	strb	r3, [r7, #6]
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	222c      	movs	r2, #44	; 0x2c
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	4a5e      	ldr	r2, [pc, #376]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006952:	4413      	add	r3, r2
 8006954:	3304      	adds	r3, #4
 8006956:	617b      	str	r3, [r7, #20]
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8006958:	4b5c      	ldr	r3, [pc, #368]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 800695a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800695e:	613b      	str	r3, [r7, #16]
  temp_dir = (uint32_t)device.CurrentDirection;
 8006960:	4b5a      	ldr	r3, [pc, #360]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006962:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8006966:	60fb      	str	r3, [r7, #12]
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	b2da      	uxtb	r2, r3
 8006970:	4b56      	ldr	r3, [pc, #344]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006972:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800697c:	b2da      	uxtb	r2, r3
 800697e:	4b53      	ldr	r3, [pc, #332]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006980:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  /* choose what to do based on the event */
  switch (ep_event)
 8006984:	79bb      	ldrb	r3, [r7, #6]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d013      	beq.n	80069b2 <USBD_SignalEndpointEvent_Handler+0x7e>
 800698a:	2b02      	cmp	r3, #2
 800698c:	d03a      	beq.n	8006a04 <USBD_SignalEndpointEvent_Handler+0xd0>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d000      	beq.n	8006994 <USBD_SignalEndpointEvent_Handler+0x60>
        default:
          break;
      }
      break;
    default:
      break;
 8006992:	e08e      	b.n	8006ab2 <USBD_SignalEndpointEvent_Handler+0x17e>
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	8893      	ldrh	r3, [r2, #4]
 8006998:	f36f 03c3 	bfc	r3, #3, #1
 800699c:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 800699e:	4b4b      	ldr	r3, [pc, #300]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 80069a0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d000      	beq.n	80069aa <USBD_SignalEndpointEvent_Handler+0x76>
      {
        case 0:
          USBD_HandleEP0_SETUP();
          break;
        default:
          break;
 80069a8:	e002      	b.n	80069b0 <USBD_SignalEndpointEvent_Handler+0x7c>
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_SETUP();
 80069aa:	f7ff fe49 	bl	8006640 <USBD_HandleEP0_SETUP>
          break;
 80069ae:	bf00      	nop
        default:
          break;
      }
      break;
 80069b0:	e07f      	b.n	8006ab2 <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	8893      	ldrh	r3, [r2, #4]
 80069b6:	f043 0320 	orr.w	r3, r3, #32
 80069ba:	8093      	strh	r3, [r2, #4]
      if (ep->OutBytesAvailable == 0U)
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d110      	bne.n	80069e6 <USBD_SignalEndpointEvent_Handler+0xb2>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2200      	movs	r2, #0
 80069c8:	60da      	str	r2, [r3, #12]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 80069ca:	4b40      	ldr	r3, [pc, #256]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	7810      	ldrb	r0, [r2, #0]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	6911      	ldr	r1, [r2, #16]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	6952      	ldr	r2, [r2, #20]
 80069dc:	4798      	blx	r3
 80069de:	4603      	mov	r3, r0
 80069e0:	461a      	mov	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	609a      	str	r2, [r3, #8]
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	8893      	ldrh	r3, [r2, #4]
 80069ea:	f36f 03c3 	bfc	r3, #3, #1
 80069ee:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 80069f0:	4b36      	ldr	r3, [pc, #216]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 80069f2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d000      	beq.n	80069fc <USBD_SignalEndpointEvent_Handler+0xc8>
      {
        case 0:
          USBD_HandleEP0_OUT();
          break;
        default:
          break;
 80069fa:	e002      	b.n	8006a02 <USBD_SignalEndpointEvent_Handler+0xce>
      }
      ep->OutInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_OUT();
 80069fc:	f7ff fdf6 	bl	80065ec <USBD_HandleEP0_OUT>
          break;
 8006a00:	bf00      	nop
        default:
          break;
      }
      break;
 8006a02:	e056      	b.n	8006ab2 <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d017      	beq.n	8006a3c <USBD_SignalEndpointEvent_Handler+0x108>
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8006a0c:	4b2f      	ldr	r3, [pc, #188]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	7810      	ldrb	r0, [r2, #0]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a1e:	4798      	blx	r3
 8006a20:	60b8      	str	r0, [r7, #8]
        ep->InDataLeft -= (uint32_t)data_count;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	1ad2      	subs	r2, r2, r3
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24
        ep->InDataBuffer += (uint32_t)data_count;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	441a      	add	r2, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8006a3a:	e03a      	b.n	8006ab2 <USBD_SignalEndpointEvent_Handler+0x17e>
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d121      	bne.n	8006a8e <USBD_SignalEndpointEvent_Handler+0x15a>
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01d      	beq.n	8006a8e <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	4a1e      	ldr	r2, [pc, #120]	; (8006ad0 <USBD_SignalEndpointEvent_Handler+0x19c>)
 8006a58:	88d2      	ldrh	r2, [r2, #6]
 8006a5a:	b292      	uxth	r2, r2
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d016      	beq.n	8006a8e <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	8892      	ldrh	r2, [r2, #4]
 8006a68:	f3c2 1286 	ubfx	r2, r2, #6, #7
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a72:	fb02 f201 	mul.w	r2, r2, r1
 8006a76:	1a9b      	subs	r3, r3, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d108      	bne.n	8006a8e <USBD_SignalEndpointEvent_Handler+0x15a>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 8006a7c:	4b13      	ldr	r3, [pc, #76]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	7812      	ldrb	r2, [r2, #0]
 8006a86:	4610      	mov	r0, r2
 8006a88:	2100      	movs	r1, #0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	4798      	blx	r3
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2200      	movs	r2, #0
 8006a92:	619a      	str	r2, [r3, #24]
      ep->InInUse = (uint8_t)0;
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	8893      	ldrh	r3, [r2, #4]
 8006a98:	f36f 1304 	bfc	r3, #4, #1
 8006a9c:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006aa0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d000      	beq.n	8006aaa <USBD_SignalEndpointEvent_Handler+0x176>
      {
        case 0:
          USBD_HandleEP0_IN();
          break;
        default:
          break;
 8006aa8:	e002      	b.n	8006ab0 <USBD_SignalEndpointEvent_Handler+0x17c>
      ep->InBytesAvailable = 0U;
      ep->InInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_IN();
 8006aaa:	f7ff fd79 	bl	80065a0 <USBD_HandleEP0_IN>
          break;
 8006aae:	bf00      	nop
        default:
          break;
      }
      break;
 8006ab0:	bf00      	nop
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006ab8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <USBD_SignalEndpointEvent_Handler+0x198>)
 8006ac2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
}
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	1ffee220 	.word	0x1ffee220
 8006ad0:	1ffee018 	.word	0x1ffee018

08006ad4 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop

08006b18 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b2a:	b2db      	uxtb	r3, r3
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b48:	409a      	lsls	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	401a      	ands	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop

08006ba4 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006bb2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bf14      	ite	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	2300      	moveq	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf14      	ite	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	2300      	moveq	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	43db      	mvns	r3, r3
 8006c24:	401a      	ands	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop

08006c38 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	bf14      	ite	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	2300      	moveq	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4798      	blx	r3
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]

  return status;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop

08006c84 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8006c90:	2304      	movs	r3, #4
 8006c92:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d000      	beq.n	8006ca2 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8006ca0:	e007      	b.n	8006cb2 <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	f000 f808 	bl	8006cbc <UART_StartTransmitIRQ>
 8006cac:	4603      	mov	r3, r0
 8006cae:	75fb      	strb	r3, [r7, #23]
    break;
 8006cb0:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8006cc8:	2304      	movs	r3, #4
 8006cca:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d144      	bne.n	8006d68 <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	7e1b      	ldrb	r3, [r3, #24]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f083 0301 	eor.w	r3, r3, #1
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d03a      	beq.n	8006d68 <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d035      	beq.n	8006d64 <UART_StartTransmitIRQ+0xa8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d032      	beq.n	8006d64 <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2201      	movs	r2, #1
 8006d14:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff ff3c 	bl	8006ba4 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006d36:	f7ff ff0f 	bl	8006b58 <XMC_USIC_CH_TXFIFO_EnableEvent>
 8006d3a:	e006      	b.n	8006d4a <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d46:	f7ff fec5 	bl	8006ad4 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	f7ff feeb 	bl	8006b38 <XMC_USIC_CH_TriggerServiceRequest>
 8006d62:	e001      	b.n	8006d68 <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8006d64:	2303      	movs	r3, #3
 8006d66:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d240      	bcs.n	8006e10 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d027      	beq.n	8006dea <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8006d9a:	e01a      	b.n	8006dd2 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d212      	bcs.n	8006dce <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6819      	ldr	r1, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	4608      	mov	r0, r1
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	f7fb ff65 	bl	8002c8c <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	60da      	str	r2, [r3, #12]
 8006dcc:	e001      	b.n	8006dd2 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8006dce:	bf00      	nop
 8006dd0:	e053      	b.n	8006e7a <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff fef2 	bl	8006bc0 <XMC_USIC_CH_TXFIFO_IsFull>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f083 0301 	eor.w	r3, r3, #1
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1d9      	bne.n	8006d9c <UART_lTransmitHandler+0x28>
 8006de8:	e047      	b.n	8006e7a <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6819      	ldr	r1, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4619      	mov	r1, r3
 8006e00:	f7fb ff44 	bl	8002c8c <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	60da      	str	r2, [r3, #12]
 8006e0e:	e034      	b.n	8006e7a <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff fee7 	bl	8006be8 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02c      	beq.n	8006e7a <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e36:	f7ff fea1 	bl	8006b7c <XMC_USIC_CH_TXFIFO_DisableEvent>
 8006e3a:	e006      	b.n	8006e4a <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e46:	f7ff fe55 	bl	8006af4 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8006e4a:	bf00      	nop
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fe61 	bl	8006b18 <XMC_USIC_CH_GetTransmitBufferStatus>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b80      	cmp	r3, #128	; 0x80
 8006e5a:	d0f7      	beq.n	8006e4c <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4798      	blx	r3
      }
    }
  }
}
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d04e      	beq.n	8006f38 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8006e9a:	e032      	b.n	8006f02 <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d211      	bcs.n	8006ecc <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	18d4      	adds	r4, r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fb ff0e 	bl	8002cd8 <XMC_UART_CH_GetReceivedData>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d114      	bne.n	8006f02 <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8006ee8:	f7ff fe92 	bl	8006c10 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4798      	blx	r3
        }
        break;
 8006efe:	e00b      	b.n	8006f18 <UART_lReceiveHandler+0x98>
 8006f00:	e00a      	b.n	8006f18 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff fe96 	bl	8006c38 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f083 0301 	eor.w	r3, r3, #1
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1c1      	bne.n	8006e9c <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d23a      	bcs.n	8006f9a <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4619      	mov	r1, r3
 8006f32:	f000 f835 	bl	8006fa0 <UART_lReconfigureRxFIFO>
 8006f36:	e030      	b.n	8006f9a <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	695a      	ldr	r2, [r3, #20]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d211      	bcs.n	8006f68 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	18d4      	adds	r4, r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fb fec0 	bl	8002cd8 <XMC_UART_CH_GetReceivedData>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	695a      	ldr	r2, [r3, #20]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d112      	bne.n	8006f9a <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8006f84:	f7ff fdb6 	bl	8006af4 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	4798      	blx	r3
      }
    }
  }
}
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd90      	pop	{r4, r7, pc}

08006fa0 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4093      	lsls	r3, r2
 8006fbc:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d203      	bcs.n	8006fce <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e002      	b.n	8006fd4 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8006fdc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f7fd fda1 	bl	8004b2c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <__NVIC_GetPriorityGrouping+0x18>)
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ffc:	0a1b      	lsrs	r3, r3, #8
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	e000ed00 	.word	0xe000ed00

0800700c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	db0b      	blt.n	8007036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800701e:	4908      	ldr	r1, [pc, #32]	; (8007040 <__NVIC_EnableIRQ+0x34>)
 8007020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	79fa      	ldrb	r2, [r7, #7]
 8007028:	f002 021f 	and.w	r2, r2, #31
 800702c:	2001      	movs	r0, #1
 800702e:	fa00 f202 	lsl.w	r2, r0, r2
 8007032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	e000e100 	.word	0xe000e100

08007044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007054:	2b00      	cmp	r3, #0
 8007056:	db0a      	blt.n	800706e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007058:	490d      	ldr	r1, [pc, #52]	; (8007090 <__NVIC_SetPriority+0x4c>)
 800705a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	0092      	lsls	r2, r2, #2
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	440b      	add	r3, r1
 8007068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800706c:	e00a      	b.n	8007084 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800706e:	4909      	ldr	r1, [pc, #36]	; (8007094 <__NVIC_SetPriority+0x50>)
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	3b04      	subs	r3, #4
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	0092      	lsls	r2, r2, #2
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	440b      	add	r3, r1
 8007082:	761a      	strb	r2, [r3, #24]
  }
}
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	e000e100 	.word	0xe000e100
 8007094:	e000ed00 	.word	0xe000ed00

08007098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007098:	b480      	push	{r7}
 800709a:	b089      	sub	sp, #36	; 0x24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	f1c3 0307 	rsb	r3, r3, #7
 80070b2:	2b06      	cmp	r3, #6
 80070b4:	bf28      	it	cs
 80070b6:	2306      	movcs	r3, #6
 80070b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	3306      	adds	r3, #6
 80070be:	2b06      	cmp	r3, #6
 80070c0:	d902      	bls.n	80070c8 <NVIC_EncodePriority+0x30>
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	e000      	b.n	80070ca <NVIC_EncodePriority+0x32>
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2201      	movs	r2, #1
 80070d0:	fa02 f303 	lsl.w	r3, r2, r3
 80070d4:	1e5a      	subs	r2, r3, #1
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	401a      	ands	r2, r3
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2101      	movs	r1, #1
 80070e2:	fa01 f303 	lsl.w	r3, r1, r3
 80070e6:	1e59      	subs	r1, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80070ec:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3724      	adds	r7, #36	; 0x24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop

080070fc <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
 8007108:	4613      	mov	r3, r2
 800710a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800710c:	78f8      	ldrb	r0, [r7, #3]
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	3306      	adds	r3, #6
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800711e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8007120:	431a      	orrs	r2, r3
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	1d83      	adds	r3, r0, #6
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop

08007138 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	f023 030f 	bic.w	r3, r3, #15
 8007148:	f043 0202 	orr.w	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop

0800715c <cunit_logger_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t cunit_logger_init()
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8007162:	2300      	movs	r3, #0
 8007164:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 0U, &cunit_logger_rx_pin_config);
 8007166:	482d      	ldr	r0, [pc, #180]	; (800721c <cunit_logger_init+0xc0>)
 8007168:	2100      	movs	r1, #0
 800716a:	4a2d      	ldr	r2, [pc, #180]	; (8007220 <cunit_logger_init+0xc4>)
 800716c:	f7fa fc38 	bl	80019e0 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &cunit_logger_channel_config);
 8007170:	482c      	ldr	r0, [pc, #176]	; (8007224 <cunit_logger_init+0xc8>)
 8007172:	492d      	ldr	r1, [pc, #180]	; (8007228 <cunit_logger_init+0xcc>)
 8007174:	f7fb fd34 	bl	8002be0 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 3U);
 8007178:	482a      	ldr	r0, [pc, #168]	; (8007224 <cunit_logger_init+0xc8>)
 800717a:	2100      	movs	r1, #0
 800717c:	2203      	movs	r2, #3
 800717e:	f7ff ffbd 	bl	80070fc <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
 8007182:	4828      	ldr	r0, [pc, #160]	; (8007224 <cunit_logger_init+0xc8>)
 8007184:	2110      	movs	r1, #16
 8007186:	2204      	movs	r2, #4
 8007188:	2301      	movs	r3, #1
 800718a:	f7fd fc7d 	bl	8004a88 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
 800718e:	4825      	ldr	r0, [pc, #148]	; (8007224 <cunit_logger_init+0xc8>)
 8007190:	2100      	movs	r1, #0
 8007192:	2204      	movs	r2, #4
 8007194:	2300      	movs	r3, #0
 8007196:	f7fd fc9f 	bl	8004ad8 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
 800719a:	4822      	ldr	r0, [pc, #136]	; (8007224 <cunit_logger_init+0xc8>)
 800719c:	f7ff ffcc 	bl	8007138 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 1U, &cunit_logger_tx_pin_config);
 80071a0:	481e      	ldr	r0, [pc, #120]	; (800721c <cunit_logger_init+0xc0>)
 80071a2:	2101      	movs	r1, #1
 80071a4:	4a21      	ldr	r2, [pc, #132]	; (800722c <cunit_logger_init+0xd0>)
 80071a6:	f7fa fc1b 	bl	80019e0 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 80071aa:	481e      	ldr	r0, [pc, #120]	; (8007224 <cunit_logger_init+0xc8>)
 80071ac:	2110      	movs	r1, #16
 80071ae:	2200      	movs	r2, #0
 80071b0:	f7fd fcde 	bl	8004b70 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 80071b4:	481b      	ldr	r0, [pc, #108]	; (8007224 <cunit_logger_init+0xc8>)
 80071b6:	2110      	movs	r1, #16
 80071b8:	2203      	movs	r2, #3
 80071ba:	f7fd fcf5 	bl	8004ba8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      3U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 80071be:	4819      	ldr	r0, [pc, #100]	; (8007224 <cunit_logger_init+0xc8>)
 80071c0:	2110      	movs	r1, #16
 80071c2:	2205      	movs	r2, #5
 80071c4:	f7fd fd0e 	bl	8004be4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 80071c8:	4816      	ldr	r0, [pc, #88]	; (8007224 <cunit_logger_init+0xc8>)
 80071ca:	2113      	movs	r1, #19
 80071cc:	2205      	movs	r2, #5
 80071ce:	f7fd fd09 	bl	8004be4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80071d2:	f7ff ff0d 	bl	8006ff0 <__NVIC_GetPriorityGrouping>
 80071d6:	4603      	mov	r3, r0
 80071d8:	4618      	mov	r0, r3
 80071da:	213e      	movs	r1, #62	; 0x3e
 80071dc:	2200      	movs	r2, #0
 80071de:	f7ff ff5b 	bl	8007098 <NVIC_EncodePriority>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2057      	movs	r0, #87	; 0x57
 80071e6:	4619      	mov	r1, r3
 80071e8:	f7ff ff2c 	bl	8007044 <__NVIC_SetPriority>
                        62U, 0U));
  NVIC_EnableIRQ((IRQn_Type)87);
 80071ec:	2057      	movs	r0, #87	; 0x57
 80071ee:	f7ff ff0d 	bl	800700c <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)89, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80071f2:	f7ff fefd 	bl	8006ff0 <__NVIC_GetPriorityGrouping>
 80071f6:	4603      	mov	r3, r0
 80071f8:	4618      	mov	r0, r3
 80071fa:	213e      	movs	r1, #62	; 0x3e
 80071fc:	2200      	movs	r2, #0
 80071fe:	f7ff ff4b 	bl	8007098 <NVIC_EncodePriority>
 8007202:	4603      	mov	r3, r0
 8007204:	2059      	movs	r0, #89	; 0x59
 8007206:	4619      	mov	r1, r3
 8007208:	f7ff ff1c 	bl	8007044 <__NVIC_SetPriority>
                      62U, 0U));
  NVIC_EnableIRQ((IRQn_Type)89);
 800720c:	2059      	movs	r0, #89	; 0x59
 800720e:	f7ff fefd 	bl	800700c <__NVIC_EnableIRQ>
  return status;
 8007212:	79fb      	ldrb	r3, [r7, #7]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	48028500 	.word	0x48028500
 8007220:	08013c94 	.word	0x08013c94
 8007224:	40030000 	.word	0x40030000
 8007228:	08013c40 	.word	0x08013c40
 800722c:	08013c4c 	.word	0x08013c4c

08007230 <USIC0_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void cunit_logger_TX_HANDLER()
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&cunit_logger);
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <USIC0_3_IRQHandler+0xc>)
 8007236:	f7ff fd9d 	bl	8006d74 <UART_lTransmitHandler>
}
 800723a:	bd80      	pop	{r7, pc}
 800723c:	1ffed050 	.word	0x1ffed050

08007240 <USIC0_5_IRQHandler>:

/*Receive ISR*/
void cunit_logger_RX_HANDLER()
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&cunit_logger);
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <USIC0_5_IRQHandler+0xc>)
 8007246:	f7ff fe1b 	bl	8006e80 <UART_lReceiveHandler>
}
 800724a:	bd80      	pop	{r7, pc}
 800724c:	1ffed050 	.word	0x1ffed050

08007250 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	2101      	movs	r1, #1
 8007264:	fa01 f303 	lsl.w	r3, r1, r3
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60da      	str	r2, [r3, #12]
}
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	bf14      	ite	ne
 800728c:	2301      	movne	r3, #1
 800728e:	2300      	moveq	r3, #0
 8007290:	b2db      	uxtb	r3, r3
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop

080072a0 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	60da      	str	r2, [r3, #12]
}
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	611a      	str	r2, [r3, #16]
}
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	611a      	str	r2, [r3, #16]
}
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80072f4:	887a      	ldrh	r2, [r7, #2]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8007310:	887a      	ldrh	r2, [r7, #2]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	611a      	str	r2, [r3, #16]
}
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop

0800733c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f303 	lsl.w	r3, r1, r3
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	2101      	movs	r1, #1
 800737e:	fa01 f303 	lsl.w	r3, r1, r3
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073a6:	f083 0301 	eor.w	r3, r3, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d009      	beq.n	80073c4 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f928 	bl	8007610 <TIMER_CCU4_lInit>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop

080073d0 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00c      	beq.n	80073fc <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff ff55 	bl	80072a0 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
 80073fa:	e001      	b.n	8007400 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop

0800740c <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f81d 	bl	8007454 <TIMER_GetTimerStatus>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d011      	beq.n	8007444 <TIMER_Stop+0x38>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00c      	beq.n	8007444 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff ff3d 	bl	80072b8 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
 8007442:	e001      	b.n	8007448 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop

08007454 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff ff02 	bl	8007278 <XMC_CCU4_SLICE_IsTimerRunning>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	0000      	movs	r0, r0
	...

08007488 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8007488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8007492:	2301      	movs	r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff ffdc 	bl	8007454 <TIMER_GetTimerStatus>
 800749c:	4603      	mov	r3, r0
 800749e:	f083 0301 	eor.w	r3, r3, #1
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d079      	beq.n	800759c <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d874      	bhi.n	800759c <TIMER_SetTimeInterval+0x114>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d36f      	bcc.n	800759c <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 80074c0:	e002      	b.n	80074c8 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	3301      	adds	r3, #1
 80074c6:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	f1c2 020f 	rsb	r2, r2, #15
 80074d2:	fa23 f202 	lsr.w	r2, r3, r2
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d3f2      	bcc.n	80074c2 <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d15a      	bne.n	800759c <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69da      	ldr	r2, [r3, #28]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	b2d9      	uxtb	r1, r3
 80074fc:	7913      	ldrb	r3, [r2, #4]
 80074fe:	f361 0303 	bfi	r3, r1, #0, #4
 8007502:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f04f 0100 	mov.w	r1, #0
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	461a      	mov	r2, r3
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	fb02 fe01 	mul.w	lr, r2, r1
 8007518:	fb00 f603 	mul.w	r6, r0, r3
 800751c:	4476      	add	r6, lr
 800751e:	fba0 2302 	umull	r2, r3, r0, r2
 8007522:	18f1      	adds	r1, r6, r3
 8007524:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	69c9      	ldr	r1, [r1, #28]
 800752a:	7909      	ldrb	r1, [r1, #4]
 800752c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8007530:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8007532:	f1c1 0620 	rsb	r6, r1, #32
 8007536:	f1a1 0020 	sub.w	r0, r1, #32
 800753a:	fa22 f401 	lsr.w	r4, r2, r1
 800753e:	fa03 f606 	lsl.w	r6, r3, r6
 8007542:	4334      	orrs	r4, r6
 8007544:	fa23 f000 	lsr.w	r0, r3, r0
 8007548:	4304      	orrs	r4, r0
 800754a:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	a315      	add	r3, pc, #84	; (adr r3, 80075a8 <TIMER_SetTimeInterval+0x120>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f00a fcca 	bl	8011ef0 <__aeabi_uldivmod>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8007560:	b292      	uxth	r2, r2
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800756a:	2b01      	cmp	r3, #1
 800756c:	d905      	bls.n	800757a <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, (XMC_CCU4_SLICE_PRESCALER_t)handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695a      	ldr	r2, [r3, #20]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	791b      	ldrb	r3, [r3, #4]
 8007584:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007588:	b2db      	uxtb	r3, r3
 800758a:	4610      	mov	r0, r2
 800758c:	4619      	mov	r1, r3
 800758e:	f7fb f839 	bl	8002604 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f888 	bl	80076a8 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8007598:	2300      	movs	r3, #0
 800759a:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 800759c:	7dfb      	ldrb	r3, [r7, #23]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a6:	bf00      	nop
 80075a8:	05f5e100 	.word	0x05f5e100
 80075ac:	00000000 	.word	0x00000000

080075b0 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	4618      	mov	r0, r3
 80075c8:	2100      	movs	r1, #0
 80075ca:	f7ff fecd 	bl	8007368 <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <TIMER_Clear>:

/*
 * Clear the timer
 */
TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00c      	beq.n	8007600 <TIMER_Clear+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <TIMER_Clear+0x26>
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fe6b 	bl	80072d0 <XMC_CCU4_SLICE_ClearTimer>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
 80075fe:	e001      	b.n	8007604 <TIMER_Clear+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8007600:	2301      	movs	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop

08007610 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	4618      	mov	r0, r3
 800761e:	f001 fc13 	bl	8008e48 <GLOBAL_CCU4_Init>
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	7e1b      	ldrb	r3, [r3, #24]
 8007630:	4610      	mov	r0, r2
 8007632:	4619      	mov	r1, r3
 8007634:	f7ff fe0c 	bl	8007250 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	4610      	mov	r0, r2
 8007642:	4619      	mov	r1, r3
 8007644:	f7fa ffa8 	bl	8002598 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f82d 	bl	80076a8 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00f      	beq.n	8007678 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	695a      	ldr	r2, [r3, #20]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007662:	4610      	mov	r0, r2
 8007664:	2100      	movs	r1, #0
 8007666:	461a      	mov	r2, r3
 8007668:	f7fa ffea 	bl	8002640 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	4618      	mov	r0, r3
 8007672:	2100      	movs	r1, #0
 8007674:	f7ff fe62 	bl	800733c <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff fe27 	bl	80072d0 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fe01 	bl	80072a0 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800769e:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80076b8:	4610      	mov	r0, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	f7ff fe14 	bl	80072e8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	4618      	mov	r0, r3
 80076c6:	2100      	movs	r1, #0
 80076c8:	f7ff fe1c 	bl	8007304 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	4610      	mov	r0, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	f7ff fe21 	bl	8007320 <XMC_CCU4_EnableShadowTransfer>
}
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076e8:	4b04      	ldr	r3, [pc, #16]	; (80076fc <__NVIC_GetPriorityGrouping+0x18>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076f0:	0a1b      	lsrs	r3, r3, #8
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	e000ed00 	.word	0xe000ed00

08007700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800770a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800770e:	2b00      	cmp	r3, #0
 8007710:	db0b      	blt.n	800772a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007712:	4908      	ldr	r1, [pc, #32]	; (8007734 <__NVIC_EnableIRQ+0x34>)
 8007714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	79fa      	ldrb	r2, [r7, #7]
 800771c:	f002 021f 	and.w	r2, r2, #31
 8007720:	2001      	movs	r0, #1
 8007722:	fa00 f202 	lsl.w	r2, r0, r2
 8007726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	e000e100 	.word	0xe000e100

08007738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007748:	2b00      	cmp	r3, #0
 800774a:	db0a      	blt.n	8007762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800774c:	490d      	ldr	r1, [pc, #52]	; (8007784 <__NVIC_SetPriority+0x4c>)
 800774e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	0092      	lsls	r2, r2, #2
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	440b      	add	r3, r1
 800775c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8007760:	e00a      	b.n	8007778 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007762:	4909      	ldr	r1, [pc, #36]	; (8007788 <__NVIC_SetPriority+0x50>)
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	3b04      	subs	r3, #4
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	0092      	lsls	r2, r2, #2
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	440b      	add	r3, r1
 8007776:	761a      	strb	r2, [r3, #24]
  }
}
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	e000e100 	.word	0xe000e100
 8007788:	e000ed00 	.word	0xe000ed00

0800778c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800778c:	b480      	push	{r7}
 800778e:	b089      	sub	sp, #36	; 0x24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	f1c3 0307 	rsb	r3, r3, #7
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	bf28      	it	cs
 80077aa:	2306      	movcs	r3, #6
 80077ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	3306      	adds	r3, #6
 80077b2:	2b06      	cmp	r3, #6
 80077b4:	d902      	bls.n	80077bc <NVIC_EncodePriority+0x30>
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	e000      	b.n	80077be <NVIC_EncodePriority+0x32>
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2201      	movs	r2, #1
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	1e5a      	subs	r2, r3, #1
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	401a      	ands	r2, r3
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f303 	lsl.w	r3, r1, r3
 80077da:	1e59      	subs	r1, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80077e0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3724      	adds	r7, #36	; 0x24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop

080077f0 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b25b      	sxtb	r3, r3
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ff7e 	bl	8007700 <__NVIC_EnableIRQ>
}
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop

0800780c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	781c      	ldrb	r4, [r3, #0]
 8007818:	f7ff ff64 	bl	80076e4 <__NVIC_GetPriorityGrouping>
 800781c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007822:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007828:	4608      	mov	r0, r1
 800782a:	4611      	mov	r1, r2
 800782c:	461a      	mov	r2, r3
 800782e:	f7ff ffad 	bl	800778c <NVIC_EncodePriority>
 8007832:	4602      	mov	r2, r0
 8007834:	b263      	sxtb	r3, r4
 8007836:	4618      	mov	r0, r3
 8007838:	4611      	mov	r1, r2
 800783a:	f7ff ff7d 	bl	8007738 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	78db      	ldrb	r3, [r3, #3]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff ffd2 	bl	80077f0 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	bd90      	pop	{r4, r7, pc}
 8007856:	bf00      	nop

08007858 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007866:	2b00      	cmp	r3, #0
 8007868:	db0c      	blt.n	8007884 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800786a:	4909      	ldr	r1, [pc, #36]	; (8007890 <__NVIC_ClearPendingIRQ+0x38>)
 800786c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	79fa      	ldrb	r2, [r7, #7]
 8007874:	f002 021f 	and.w	r2, r2, #31
 8007878:	2001      	movs	r0, #1
 800787a:	fa00 f202 	lsl.w	r2, r0, r2
 800787e:	3360      	adds	r3, #96	; 0x60
 8007880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	e000e100 	.word	0xe000e100

08007894 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	43db      	mvns	r3, r3
 80078c6:	401a      	ands	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop

080078d8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078ea:	b2db      	uxtb	r3, r3
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007908:	409a      	lsls	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	43db      	mvns	r3, r3
 8007950:	401a      	ands	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop

08007964 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007972:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800798e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80079b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bf14      	ite	ne
 80079be:	2301      	movne	r3, #1
 80079c0:	2300      	moveq	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	43db      	mvns	r3, r3
 8007a08:	401a      	ands	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop

08007a1c <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a2a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <XMC_I2C_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	2110      	movs	r1, #16
 8007a72:	461a      	mov	r2, r3
 8007a74:	f7fd f87c 	bl	8004b70 <XMC_USIC_CH_SetInterruptNodePointer>
}
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop

08007a80 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	4619      	mov	r1, r3
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	f7fd f82b 	bl	8004b2c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff ff49 	bl	8007980 <XMC_USIC_CH_TXFIFO_IsFull>
 8007aee:	4603      	mov	r3, r0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff ff97 	bl	8007a38 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8007b0a:	4603      	mov	r3, r0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fa ffeb 	bl	8002afc <XMC_I2C_CH_GetReceivedData>
 8007b26:	4603      	mov	r3, r0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	f7fa ff67 	bl	8002a18 <XMC_I2C_CH_MasterTransmit>
}
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <I2C_MASTER_EnableEvent>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	f7fa ffe5 	bl	8002b30 <XMC_I2C_CH_EnableEvent>
}
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	f7fa fff3 	bl	8002b68 <XMC_I2C_CH_DisableEvent>
}
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fa ff65 	bl	8002a64 <XMC_I2C_CH_MasterReceiveAck>
}
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fa ff7f 	bl	8002ab0 <XMC_I2C_CH_MasterReceiveNack>
}
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	2110      	movs	r1, #16
 8007bc8:	f7ff ff66 	bl	8007a98 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fa fefb 	bl	80029cc <XMC_I2C_CH_MasterStop>
}
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	2104      	movs	r1, #4
 8007bf2:	f7ff ff51 	bl	8007a98 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	461a      	mov	r2, r3
 8007c06:	f7fa fe79 	bl	80028fc <XMC_I2C_CH_MasterStart>
}
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	2108      	movs	r1, #8
 8007c26:	f7ff ff37 	bl	8007a98 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	4608      	mov	r0, r1
 8007c36:	4611      	mov	r1, r2
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f7fa fe93 	bl	8002964 <XMC_I2C_CH_MasterRepeatedStart>
}
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d202      	bcs.n	8007c5c <calculate_minfifosize+0x18>
  {
    result = a;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	e001      	b.n	8007c60 <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
  }
  return (result);
 8007c60:	68fb      	ldr	r3, [r7, #12]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop

08007c70 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d006      	beq.n	8007c8c <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
 8007c8a:	e001      	b.n	8007c90 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop

08007c9c <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fee8 	bl	8007a80 <XMC_I2C_CH_GetStatusFlag>
 8007cb0:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	4013      	ands	r3, r2
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	f7ff fee1 	bl	8007a98 <XMC_I2C_CH_ClearStatusFlag>
}
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007cec:	2302      	movs	r3, #2
 8007cee:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10d      	bne.n	8007d18 <I2C_MASTER_Transmit+0x3c>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
 8007cfc:	7afa      	ldrb	r2, [r7, #11]
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	f000 fb48 	bl	80083a4 <I2C_MASTER_StartTransmitIRQ>
 8007d14:	4603      	mov	r3, r0
 8007d16:	75fb      	strb	r3, [r7, #23]
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop

08007d24 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d3c:	f7ff ffae 	bl	8007c9c <I2C_MASTER_GetFlagStatus>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d011      	beq.n	8007d6a <I2C_MASTER_TransmitHandler+0x46>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007d50:	f7ff fdf4 	bl	800793c <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d5e:	f7ff fda9 	bl	80078b4 <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fdb6 	bl	80088d4 <I2C_MASTER_ProtocolHandler>
 8007d68:	e105      	b.n	8007f76 <I2C_MASTER_TransmitHandler+0x252>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f040 8082 	bne.w	8007e78 <I2C_MASTER_TransmitHandler+0x154>
  {
    if (handle->config->txFIFO_size > 0)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d05a      	beq.n	8007e36 <I2C_MASTER_TransmitHandler+0x112>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d22e      	bcs.n	8007dea <I2C_MASTER_TransmitHandler+0xc6>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007d92:	f7ff feeb 	bl	8007b6c <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007da0:	f7ff fdba 	bl	8007918 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007da4:	e017      	b.n	8007dd6 <I2C_MASTER_TransmitHandler+0xb2>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d20f      	bcs.n	8007dd2 <I2C_MASTER_TransmitHandler+0xae>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	f7ff feb5 	bl	8007b30 <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	60da      	str	r2, [r3, #12]
 8007dd0:	e001      	b.n	8007dd6 <I2C_MASTER_TransmitHandler+0xb2>
          }
          else
          {
            break;
 8007dd2:	bf00      	nop
 8007dd4:	e0cf      	b.n	8007f76 <I2C_MASTER_TransmitHandler+0x252>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fe80 	bl	8007adc <I2C_MASTER_IsTXFIFOFull>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f083 0301 	eor.w	r3, r3, #1
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1de      	bne.n	8007da6 <I2C_MASTER_TransmitHandler+0x82>
 8007de8:	e0c5      	b.n	8007f76 <I2C_MASTER_TransmitHandler+0x252>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007df4:	f7ff fda2 	bl	800793c <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e00:	b25b      	sxtb	r3, r3
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff fd28 	bl	8007858 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8007e08:	bf00      	nop
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff fdca 	bl	80079a8 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f083 0301 	eor.w	r3, r3, #1
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f4      	bne.n	8007e0a <I2C_MASTER_TransmitHandler+0xe6>

          if (ptr_runtime->bus_acquired == true)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80a4 	beq.w	8007f76 <I2C_MASTER_TransmitHandler+0x252>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8a4 	bl	8007f7c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8007e34:	e09f      	b.n	8007f76 <I2C_MASTER_TransmitHandler+0x252>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d20f      	bcs.n	8007e62 <I2C_MASTER_TransmitHandler+0x13e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4619      	mov	r1, r3
 8007e52:	f7ff fe6d 	bl	8007b30 <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	60da      	str	r2, [r3, #12]
 8007e60:	e089      	b.n	8007f76 <I2C_MASTER_TransmitHandler+0x252>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 8083 	beq.w	8007f76 <I2C_MASTER_TransmitHandler+0x252>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f883 	bl	8007f7c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8007e76:	e07e      	b.n	8007f76 <I2C_MASTER_TransmitHandler+0x252>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d054      	beq.n	8007f2e <I2C_MASTER_TransmitHandler+0x20a>
    {
      if ((handle->config->rxFIFO_size > 0))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d015      	beq.n	8007ebc <I2C_MASTER_TransmitHandler+0x198>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e98:	461a      	mov	r2, r3
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	fa03 f202 	lsl.w	r2, r3, r2
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	2301      	movs	r3, #1
 8007eac:	408b      	lsls	r3, r1
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f7ff fec7 	bl	8007c44 <calculate_minfifosize>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73fb      	strb	r3, [r7, #15]
 8007eba:	e001      	b.n	8007ec0 <I2C_MASTER_TransmitHandler+0x19c>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	73fb      	strb	r3, [r7, #15]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007eca:	f7ff fd37 	bl	800793c <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007ece:	e023      	b.n	8007f18 <I2C_MASTER_TransmitHandler+0x1f4>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d21c      	bcs.n	8007f16 <I2C_MASTER_TransmitHandler+0x1f2>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d107      	bne.n	8007efa <I2C_MASTER_TransmitHandler+0x1d6>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d103      	bne.n	8007efa <I2C_MASTER_TransmitHandler+0x1d6>
          {
            I2C_MASTER_ReceiveNACK(handle);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff fe54 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 8007ef8:	e002      	b.n	8007f00 <I2C_MASTER_TransmitHandler+0x1dc>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff fe44 	bl	8007b88 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d301      	bcc.n	8007f18 <I2C_MASTER_TransmitHandler+0x1f4>
          {
            break;
 8007f14:	e00a      	b.n	8007f2c <I2C_MASTER_TransmitHandler+0x208>
          }
        }
        else
        {
          break;
 8007f16:	e009      	b.n	8007f2c <I2C_MASTER_TransmitHandler+0x208>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff fddf 	bl	8007adc <I2C_MASTER_IsTXFIFOFull>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f083 0301 	eor.w	r3, r3, #1
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1d2      	bne.n	8007ed0 <I2C_MASTER_TransmitHandler+0x1ac>
 8007f2a:	e017      	b.n	8007f5c <I2C_MASTER_TransmitHandler+0x238>
 8007f2c:	e016      	b.n	8007f5c <I2C_MASTER_TransmitHandler+0x238>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d107      	bne.n	8007f4c <I2C_MASTER_TransmitHandler+0x228>
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d103      	bne.n	8007f4c <I2C_MASTER_TransmitHandler+0x228>
      {
        I2C_MASTER_ReceiveNACK(handle);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fe2b 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 8007f4a:	e002      	b.n	8007f52 <I2C_MASTER_TransmitHandler+0x22e>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff fe1b 	bl	8007b88 <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d104      	bne.n	8007f76 <I2C_MASTER_TransmitHandler+0x252>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007f72:	f7ff fdfb 	bl	8007b6c <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007f90:	f7ff fdec 	bl	8007b6c <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d106      	bne.n	8007faa <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x2e>
  {
    ptr_runtime->bus_acquired = false;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStop(handle);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff fe07 	bl	8007bb8 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8007faa:	bf00      	nop
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff fc91 	bl	80078d8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b80      	cmp	r3, #128	; 0x80
 8007fba:	d0f7      	beq.n	8007fac <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x30>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x5a>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	4798      	blx	r3
  }
}
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	; 0x28
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007fec:	2302      	movs	r3, #2
 8007fee:	75fb      	strb	r3, [r7, #23]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d110      	bne.n	800801e <I2C_MASTER_Receive+0x42>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
 8007ffc:	7afa      	ldrb	r2, [r7, #11]
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800800c:	9302      	str	r3, [sp, #8]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	4611      	mov	r1, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	f000 fa5b 	bl	80084d0 <I2C_MASTER_StartReceiveIRQ>
 800801a:	4603      	mov	r3, r0
 800801c:	75fb      	strb	r3, [r7, #23]
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
 800801e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <I2C_MASTER_lReceive_FIFOData>:
/***********************************************************************************************************************
     Rx FIFO data
***********************************************************************************************************************/
static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address,
                                     const uint32_t count)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	460b      	mov	r3, r1
 8008036:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	617b      	str	r3, [r7, #20]

  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fcea 	bl	8007a1c <XMC_USIC_CH_RXFIFO_Flush>

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	f000 fc86 	bl	800895c <I2C_MASTER_lReconfigureRxFIFO>

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800805a:	f7ff fcb9 	bl	80079d0 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
 800805e:	7afb      	ldrb	r3, [r7, #11]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d06e      	beq.n	8008142 <I2C_MASTER_lReceive_FIFOData+0x11a>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800806c:	2b01      	cmp	r3, #1
 800806e:	d013      	beq.n	8008098 <I2C_MASTER_lReceive_FIFOData+0x70>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8008078:	2b02      	cmp	r3, #2
 800807a:	d00d      	beq.n	8008098 <I2C_MASTER_lReceive_FIFOData+0x70>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008082:	f7ff fd65 	bl	8007b50 <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008090:	4610      	mov	r0, r2
 8008092:	4619      	mov	r1, r3
 8008094:	f7ff fce4 	bl	8007a60 <XMC_I2C_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f000 f957 	bl	8008350 <I2C_MASTER_lSendStart_Or_RepeatedStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	f040 80a5 	bne.w	80081fa <I2C_MASTER_lReceive_FIFOData+0x1d2>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d02a      	beq.n	8008112 <I2C_MASTER_lReceive_FIFOData+0xea>
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80080bc:	e01f      	b.n	80080fe <I2C_MASTER_lReceive_FIFOData+0xd6>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d217      	bcs.n	80080fa <I2C_MASTER_lReceive_FIFOData+0xd2>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d107      	bne.n	80080e8 <I2C_MASTER_lReceive_FIFOData+0xc0>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d103      	bne.n	80080e8 <I2C_MASTER_lReceive_FIFOData+0xc0>
      {
          I2C_MASTER_ReceiveNACK(handle);
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f7ff fd5d 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 80080e6:	e002      	b.n	80080ee <I2C_MASTER_lReceive_FIFOData+0xc6>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7ff fd4d 	bl	8007b88 <I2C_MASTER_ReceiveACK>
        }
      ptr_runtime->tx_data_index++;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	60da      	str	r2, [r3, #12]
 80080f8:	e001      	b.n	80080fe <I2C_MASTER_lReceive_FIFOData+0xd6>
      }
      else
      {
        break;
 80080fa:	bf00      	nop
 80080fc:	e07d      	b.n	80081fa <I2C_MASTER_lReceive_FIFOData+0x1d2>
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fcec 	bl	8007adc <I2C_MASTER_IsTXFIFOFull>
 8008104:	4603      	mov	r3, r0
 8008106:	f083 0301 	eor.w	r3, r3, #1
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1d6      	bne.n	80080be <I2C_MASTER_lReceive_FIFOData+0x96>
 8008110:	e073      	b.n	80081fa <I2C_MASTER_lReceive_FIFOData+0x1d2>
    } /* end of while */
      }
      else
      {
        /* if it is last byte and send_nack true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	d107      	bne.n	8008130 <I2C_MASTER_lReceive_FIFOData+0x108>
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d103      	bne.n	8008130 <I2C_MASTER_lReceive_FIFOData+0x108>
    {
      I2C_MASTER_ReceiveNACK(handle);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff fd39 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 800812e:	e002      	b.n	8008136 <I2C_MASTER_lReceive_FIFOData+0x10e>
    }
    else
    {
      I2C_MASTER_ReceiveACK(handle);
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7ff fd29 	bl	8007b88 <I2C_MASTER_ReceiveACK>
    }
    ptr_runtime->tx_data_index++;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	60da      	str	r2, [r3, #12]
 8008140:	e05b      	b.n	80081fa <I2C_MASTER_lReceive_FIFOData+0x1d2>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800814a:	2b00      	cmp	r3, #0
 800814c:	d031      	beq.n	80081b2 <I2C_MASTER_lReceive_FIFOData+0x18a>
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008158:	f7ff fbf0 	bl	800793c <XMC_USIC_CH_TXFIFO_DisableEvent>
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800815c:	e01f      	b.n	800819e <I2C_MASTER_lReceive_FIFOData+0x176>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	429a      	cmp	r2, r3
 8008168:	d217      	bcs.n	800819a <I2C_MASTER_lReceive_FIFOData+0x172>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	429a      	cmp	r2, r3
 8008176:	d107      	bne.n	8008188 <I2C_MASTER_lReceive_FIFOData+0x160>
               (ptr_runtime->send_nack == true))
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	6a1b      	ldr	r3, [r3, #32]
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 800817c:	2b01      	cmp	r3, #1
 800817e:	d103      	bne.n	8008188 <I2C_MASTER_lReceive_FIFOData+0x160>
               (ptr_runtime->send_nack == true))
          {
            I2C_MASTER_ReceiveNACK(handle);
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff fd0d 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 8008186:	e002      	b.n	800818e <I2C_MASTER_lReceive_FIFOData+0x166>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f7ff fcfd 	bl	8007b88 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	60da      	str	r2, [r3, #12]
 8008198:	e001      	b.n	800819e <I2C_MASTER_lReceive_FIFOData+0x176>
        }
        else
        {
          break;
 800819a:	bf00      	nop
 800819c:	e02d      	b.n	80081fa <I2C_MASTER_lReceive_FIFOData+0x1d2>
    if (handle->config->txFIFO_size > 0)
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7ff fc9c 	bl	8007adc <I2C_MASTER_IsTXFIFOFull>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f083 0301 	eor.w	r3, r3, #1
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1d6      	bne.n	800815e <I2C_MASTER_lReceive_FIFOData+0x136>
 80081b0:	e023      	b.n	80081fa <I2C_MASTER_lReceive_FIFOData+0x1d2>
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d21d      	bcs.n	80081fa <I2C_MASTER_lReceive_FIFOData+0x1d2>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d107      	bne.n	80081dc <I2C_MASTER_lReceive_FIFOData+0x1b4>
             (ptr_runtime->send_nack == true))
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d103      	bne.n	80081dc <I2C_MASTER_lReceive_FIFOData+0x1b4>
             (ptr_runtime->send_nack == true))
        {
          I2C_MASTER_ReceiveNACK(handle);
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7ff fce3 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 80081da:	e009      	b.n	80081f0 <I2C_MASTER_lReceive_FIFOData+0x1c8>
        }
        else
        {
          XMC_I2C_CH_ClearStatusFlag(handle->channel, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED |
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 80081e6:	f7ff fc57 	bl	8007a98 <XMC_I2C_CH_ClearStatusFlag>
                                              (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION |
                          (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION|
                                              (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
                          (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
          I2C_MASTER_ReceiveACK(handle);
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff fccc 	bl	8007b88 <I2C_MASTER_ReceiveACK>
        }
        ptr_runtime->tx_data_index++;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	60da      	str	r2, [r3, #12]
      }
    } /* end of else */
   } /* end of  if(send_start == false) */
}
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <I2C_MASTER_lReceive_StdData>:
/***********************************************************************************************************************
    Standard receive mode
***********************************************************************************************************************/
static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	460b      	mov	r3, r1
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	617b      	str	r3, [r7, #20]

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800821e:	f7ff fb39 	bl	8007894 <XMC_USIC_CH_EnableEvent>
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d042      	beq.n	80082ae <I2C_MASTER_lReceive_StdData+0xae>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008230:	2b01      	cmp	r3, #1
 8008232:	d013      	beq.n	800825c <I2C_MASTER_lReceive_StdData+0x5c>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 800823c:	2b02      	cmp	r3, #2
 800823e:	d00d      	beq.n	800825c <I2C_MASTER_lReceive_StdData+0x5c>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008246:	f7ff fc83 	bl	8007b50 <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008254:	4610      	mov	r0, r2
 8008256:	4619      	mov	r1, r3
 8008258:	f7ff fc02 	bl	8007a60 <XMC_I2C_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f000 f875 	bl	8008350 <I2C_MASTER_lSendStart_Or_RepeatedStart>

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800826e:	2b01      	cmp	r3, #1
 8008270:	d005      	beq.n	800827e <I2C_MASTER_lReceive_StdData+0x7e>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 800827a:	2b02      	cmp	r3, #2
 800827c:	d165      	bne.n	800834a <I2C_MASTER_lReceive_StdData+0x14a>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	429a      	cmp	r2, r3
 800828a:	d107      	bne.n	800829c <I2C_MASTER_lReceive_StdData+0x9c>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d103      	bne.n	800829c <I2C_MASTER_lReceive_StdData+0x9c>
    {
        I2C_MASTER_ReceiveNACK(handle);
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7ff fc83 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 800829a:	e002      	b.n	80082a2 <I2C_MASTER_lReceive_StdData+0xa2>
    }
    else
    {
    I2C_MASTER_ReceiveACK(handle);
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7ff fc73 	bl	8007b88 <I2C_MASTER_ReceiveACK>
      }
    ptr_runtime->tx_data_index++;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	60da      	str	r2, [r3, #12]
 80082ac:	e04d      	b.n	800834a <I2C_MASTER_lReceive_StdData+0x14a>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d117      	bne.n	80082ea <I2C_MASTER_lReceive_StdData+0xea>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d107      	bne.n	80082d8 <I2C_MASTER_lReceive_StdData+0xd8>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d103      	bne.n	80082d8 <I2C_MASTER_lReceive_StdData+0xd8>
      {
        I2C_MASTER_ReceiveNACK(handle);
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff fc65 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 80082d6:	e002      	b.n	80082de <I2C_MASTER_lReceive_StdData+0xde>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff fc55 	bl	8007b88 <I2C_MASTER_ReceiveACK>
      }

      ptr_runtime->tx_data_index++;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	60da      	str	r2, [r3, #12]
 80082e8:	e02f      	b.n	800834a <I2C_MASTER_lReceive_StdData+0x14a>
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is enabled
***********************************************************************************************************************/
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80082f4:	f7ff fb22 	bl	800793c <XMC_USIC_CH_TXFIFO_DisableEvent>

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80082f8:	e01e      	b.n	8008338 <I2C_MASTER_lReceive_StdData+0x138>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	429a      	cmp	r2, r3
 8008304:	d217      	bcs.n	8008336 <I2C_MASTER_lReceive_StdData+0x136>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	d107      	bne.n	8008324 <I2C_MASTER_lReceive_StdData+0x124>
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d103      	bne.n	8008324 <I2C_MASTER_lReceive_StdData+0x124>
          {
            I2C_MASTER_ReceiveNACK(handle);
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fc3f 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 8008322:	e002      	b.n	800832a <I2C_MASTER_lReceive_StdData+0x12a>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fc2f 	bl	8007b88 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	60da      	str	r2, [r3, #12]
 8008334:	e000      	b.n	8008338 <I2C_MASTER_lReceive_StdData+0x138>
        }
        else
        {
          break;
 8008336:	e008      	b.n	800834a <I2C_MASTER_lReceive_StdData+0x14a>
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7ff fbcf 	bl	8007adc <I2C_MASTER_IsTXFIFOFull>
 800833e:	4603      	mov	r3, r0
 8008340:	f083 0301 	eor.w	r3, r3, #1
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1d7      	bne.n	80082fa <I2C_MASTER_lReceive_StdData+0xfa>
          break;
        }
      } /* end of while */
    } /* end of else */
  } /* end of else */
} /* end of function */
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	71fb      	strb	r3, [r7, #7]
  if (handle->runtime->bus_acquired == true)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d009      	beq.n	8008380 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x30>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	b29b      	uxth	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	4611      	mov	r1, r2
 8008378:	461a      	mov	r2, r3
 800837a:	f7ff fc49 	bl	8007c10 <I2C_MASTER_SendRepeatedStart>
 800837e:	e00d      	b.n	800839c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x4c>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	b29b      	uxth	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	4611      	mov	r1, r2
 8008396:	461a      	mov	r2, r3
 8008398:	f7ff fc20 	bl	8007bdc <I2C_MASTER_SendStart>
  }
}
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop

080083a4 <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	607a      	str	r2, [r7, #4]
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	460b      	mov	r3, r1
 80083b2:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
 80083b4:	2302      	movs	r3, #2
 80083b6:	75fb      	strb	r3, [r7, #23]
  ptr_runtime = handle->runtime;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	613b      	str	r3, [r7, #16]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
 80083be:	7afb      	ldrb	r3, [r7, #11]
 80083c0:	f083 0301 	eor.w	r3, r3, #1
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <I2C_MASTER_StartTransmitIRQ+0x3a>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f083 0301 	eor.w	r3, r3, #1
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d105      	bne.n	80083ea <I2C_MASTER_StartTransmitIRQ+0x46>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <I2C_MASTER_StartTransmitIRQ+0x46>
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <I2C_MASTER_StartTransmitIRQ+0x4c>
  {
  status = I2C_MASTER_STATUS_FAILURE;
 80083ea:	2301      	movs	r3, #1
 80083ec:	75fb      	strb	r3, [r7, #23]
 80083ee:	e03e      	b.n	800846e <I2C_MASTER_StartTransmitIRQ+0xca>
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2200      	movs	r2, #0
 80083f4:	619a      	str	r2, [r3, #24]

    if (ptr_runtime->tx_busy == false)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	f083 0301 	eor.w	r3, r3, #1
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d032      	beq.n	800846e <I2C_MASTER_StartTransmitIRQ+0xca>
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	601a      	str	r2, [r3, #0]
    ptr_runtime->tx_data_count = size;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	609a      	str	r2, [r3, #8]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	2200      	movs	r2, #0
 8008418:	60da      	str	r2, [r3, #12]
    ptr_runtime->tx_busy = true;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    ptr_runtime->send_stop = send_stop;
 8008422:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	61da      	str	r2, [r3, #28]

    /* Enable ACK event */
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008430:	f7ff fb8e 	bl	8007b50 <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800843e:	4610      	mov	r0, r2
 8008440:	4619      	mov	r1, r3
 8008442:	f7ff fb0d 	bl	8007a60 <XMC_I2C_CH_SetInterruptNodePointer>

    if (send_start == true)
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <I2C_MASTER_StartTransmitIRQ+0xb4>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f7ff ff7d 	bl	8008350 <I2C_MASTER_lSendStart_Or_RepeatedStart>
 8008456:	e008      	b.n	800846a <I2C_MASTER_StartTransmitIRQ+0xc6>
    }
    else
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008462:	4610      	mov	r0, r2
 8008464:	4619      	mov	r1, r3
 8008466:	f7ff fa47 	bl	80078f8 <XMC_USIC_CH_TriggerServiceRequest>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 800846a:	2300      	movs	r3, #0
 800846c:	75fb      	strb	r3, [r7, #23]
  }
  }
  return (status);
 800846e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <I2C_MASTER_AbortTransmitIRQ>:

static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  handle->runtime->tx_busy = false;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  handle->runtime->tx_data = NULL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
  handle->runtime->bus_acquired = false;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /*Disable the transmit interrupts*/
  if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <I2C_MASTER_AbortTransmitIRQ+0x48>
  {
    /*Disable the transmit FIFO event*/
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80084b2:	f7ff fa43 	bl	800793c <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff fa52 	bl	8007964 <XMC_USIC_CH_TXFIFO_Flush>
  }
  I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80084c6:	f7ff fb51 	bl	8007b6c <I2C_MASTER_DisableEvent>
}
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <I2C_MASTER_StartReceiveIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	460b      	mov	r3, r1
 80084de:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
 80084e0:	2302      	movs	r3, #2
 80084e2:	75fb      	strb	r3, [r7, #23]
  ptr_runtime = handle->runtime;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	613b      	str	r3, [r7, #16]

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d015      	beq.n	800851c <I2C_MASTER_StartReceiveIRQ+0x4c>
 80084f0:	7afb      	ldrb	r3, [r7, #11]
 80084f2:	f083 0301 	eor.w	r3, r3, #1
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d009      	beq.n	8008510 <I2C_MASTER_StartReceiveIRQ+0x40>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008504:	b2db      	uxtb	r3, r3
 8008506:	f083 0301 	eor.w	r3, r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d105      	bne.n	800851c <I2C_MASTER_StartReceiveIRQ+0x4c>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <I2C_MASTER_StartReceiveIRQ+0x4c>
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <I2C_MASTER_StartReceiveIRQ+0x52>
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
 800851c:	2301      	movs	r3, #1
 800851e:	75fb      	strb	r3, [r7, #23]
 8008520:	e043      	b.n	80085aa <I2C_MASTER_StartReceiveIRQ+0xda>
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008528:	b2db      	uxtb	r3, r3
 800852a:	f083 0301 	eor.w	r3, r3, #1
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d03a      	beq.n	80085aa <I2C_MASTER_StartReceiveIRQ+0xda>
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2201      	movs	r2, #1
 8008538:	619a      	str	r2, [r3, #24]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	605a      	str	r2, [r3, #4]
    ptr_runtime->rx_data_count = count;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6a3a      	ldr	r2, [r7, #32]
 8008544:	611a      	str	r2, [r3, #16]
    ptr_runtime->tx_data = data;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	601a      	str	r2, [r3, #0]
    ptr_runtime->tx_data_count = count;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6a3a      	ldr	r2, [r7, #32]
 8008550:	609a      	str	r2, [r3, #8]
    ptr_runtime->tx_busy = true;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    ptr_runtime->rx_busy = true;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    ptr_runtime->send_stop = send_stop;
 8008562:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	61da      	str	r2, [r3, #28]
    ptr_runtime->send_nack = send_nack;
 800856a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	621a      	str	r2, [r3, #32]
    ptr_runtime->rx_data_index = 0U;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2200      	movs	r2, #0
 8008576:	615a      	str	r2, [r3, #20]
    ptr_runtime->tx_data_index = 0U;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2200      	movs	r2, #0
 800857c:	60da      	str	r2, [r3, #12]

    if (handle->config->rxFIFO_size > 0)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008586:	2b00      	cmp	r3, #0
 8008588:	d007      	beq.n	800859a <I2C_MASTER_StartReceiveIRQ+0xca>
    {
      I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
 800858a:	7afb      	ldrb	r3, [r7, #11]
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	4619      	mov	r1, r3
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	f7ff fd48 	bl	8008028 <I2C_MASTER_lReceive_FIFOData>
 8008598:	e005      	b.n	80085a6 <I2C_MASTER_StartReceiveIRQ+0xd6>
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	4619      	mov	r1, r3
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	f7ff fe2d 	bl	8008200 <I2C_MASTER_lReceive_StdData>
    }
    status = I2C_MASTER_STATUS_SUCCESS;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
  }
  }
  return (status);
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 80085b4:	b590      	push	{r4, r7, lr}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]

  if (ptr_runtime->rx_busy == true)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 8111 	beq.w	80087f6 <I2C_MASTER_ReceiveHandler+0x242>
  {
    if (handle->config->rxFIFO_size > 0)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80c7 	beq.w	8008770 <I2C_MASTER_ReceiveHandler+0x1bc>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 80085e2:	e020      	b.n	8008626 <I2C_MASTER_ReceiveHandler+0x72>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	18d4      	adds	r4, r2, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff fa90 	bl	8007b14 <I2C_MASTER_GetReceivedByte>
 80085f4:	4603      	mov	r3, r0
 80085f6:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	695a      	ldr	r2, [r3, #20]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	429a      	cmp	r2, r3
 800860c:	d10b      	bne.n	8008626 <I2C_MASTER_ReceiveHandler+0x72>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4618      	mov	r0, r3
 800861c:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8008620:	f7ff f9e8 	bl	80079f4 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
 8008624:	e008      	b.n	8008638 <I2C_MASTER_ReceiveHandler+0x84>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff fa66 	bl	8007af8 <I2C_MASTER_IsRXFIFOEmpty>
 800862c:	4603      	mov	r3, r0
 800862e:	f083 0301 	eor.w	r3, r3, #1
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1d5      	bne.n	80085e4 <I2C_MASTER_ReceiveHandler+0x30>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	695a      	ldr	r2, [r3, #20]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	429a      	cmp	r2, r3
 8008642:	d277      	bcs.n	8008734 <I2C_MASTER_ReceiveHandler+0x180>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	691a      	ldr	r2, [r3, #16]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4619      	mov	r1, r3
 8008652:	f000 f983 	bl	800895c <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800865e:	2b00      	cmp	r3, #0
 8008660:	d015      	beq.n	800868e <I2C_MASTER_ReceiveHandler+0xda>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800866a:	461a      	mov	r2, r3
 800866c:	2301      	movs	r3, #1
 800866e:	fa03 f202 	lsl.w	r2, r3, r2
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
 800867a:	4619      	mov	r1, r3
 800867c:	2301      	movs	r3, #1
 800867e:	408b      	lsls	r3, r1
 8008680:	4610      	mov	r0, r2
 8008682:	4619      	mov	r1, r3
 8008684:	f7ff fade 	bl	8007c44 <calculate_minfifosize>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]
 800868c:	e001      	b.n	8008692 <I2C_MASTER_ReceiveHandler+0xde>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
 800868e:	2302      	movs	r3, #2
 8008690:	73bb      	strb	r3, [r7, #14]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800869a:	2b00      	cmp	r3, #0
 800869c:	d033      	beq.n	8008706 <I2C_MASTER_ReceiveHandler+0x152>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800869e:	e027      	b.n	80086f0 <I2C_MASTER_ReceiveHandler+0x13c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d220      	bcs.n	80086ee <I2C_MASTER_ReceiveHandler+0x13a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d107      	bne.n	80086ca <I2C_MASTER_ReceiveHandler+0x116>
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d103      	bne.n	80086ca <I2C_MASTER_ReceiveHandler+0x116>
              {
                I2C_MASTER_ReceiveNACK(handle);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff fa6c 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 80086c8:	e002      	b.n	80086d0 <I2C_MASTER_ReceiveHandler+0x11c>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff fa5c 	bl	8007b88 <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	3301      	adds	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
 80086e0:	7bfa      	ldrb	r2, [r7, #15]
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d303      	bcc.n	80086f0 <I2C_MASTER_ReceiveHandler+0x13c>
              {
                fifo_lindex = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
                break;
 80086ec:	e00a      	b.n	8008704 <I2C_MASTER_ReceiveHandler+0x150>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
 80086ee:	e009      	b.n	8008704 <I2C_MASTER_ReceiveHandler+0x150>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff f9f3 	bl	8007adc <I2C_MASTER_IsTXFIFOFull>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f083 0301 	eor.w	r3, r3, #1
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1ce      	bne.n	80086a0 <I2C_MASTER_ReceiveHandler+0xec>
 8008702:	e017      	b.n	8008734 <I2C_MASTER_ReceiveHandler+0x180>
 8008704:	e016      	b.n	8008734 <I2C_MASTER_ReceiveHandler+0x180>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	429a      	cmp	r2, r3
 8008712:	d107      	bne.n	8008724 <I2C_MASTER_ReceiveHandler+0x170>
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d103      	bne.n	8008724 <I2C_MASTER_ReceiveHandler+0x170>
         {
           I2C_MASTER_ReceiveNACK(handle);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff fa3f 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 8008722:	e002      	b.n	800872a <I2C_MASTER_ReceiveHandler+0x176>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff fa2f 	bl	8007b88 <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	695a      	ldr	r2, [r3, #20]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	429a      	cmp	r2, r3
 800873e:	d15a      	bne.n	80087f6 <I2C_MASTER_ReceiveHandler+0x242>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4618      	mov	r0, r3
 8008746:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800874a:	f7ff f953 	bl	80079f4 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4618      	mov	r0, r3
 8008754:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8008758:	f7ff f8ac 	bl	80078b4 <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d046      	beq.n	80087f6 <I2C_MASTER_ReceiveHandler+0x242>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f847 	bl	80087fc <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 800876e:	e042      	b.n	80087f6 <I2C_MASTER_ReceiveHandler+0x242>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	18d4      	adds	r4, r2, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff f9ca 	bl	8007b14 <I2C_MASTER_GetReceivedByte>
 8008780:	4603      	mov	r3, r0
 8008782:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	429a      	cmp	r2, r3
 8008798:	d21d      	bcs.n	80087d6 <I2C_MASTER_ReceiveHandler+0x222>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d227      	bcs.n	80087f6 <I2C_MASTER_ReceiveHandler+0x242>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d107      	bne.n	80087c4 <I2C_MASTER_ReceiveHandler+0x210>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d103      	bne.n	80087c4 <I2C_MASTER_ReceiveHandler+0x210>
          {
            I2C_MASTER_ReceiveNACK(handle);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff f9ef 	bl	8007ba0 <I2C_MASTER_ReceiveNACK>
 80087c2:	e002      	b.n	80087ca <I2C_MASTER_ReceiveHandler+0x216>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff f9df 	bl	8007b88 <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	60da      	str	r2, [r3, #12]
 80087d4:	e00f      	b.n	80087f6 <I2C_MASTER_ReceiveHandler+0x242>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80087e0:	f7ff f868 	bl	80078b4 <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <I2C_MASTER_ReceiveHandler+0x242>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f803 	bl	80087fc <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd90      	pop	{r4, r7, pc}

080087fc <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d10f      	bne.n	8008832 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x36>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8008812:	bf00      	nop
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff f85d 	bl	80078d8 <XMC_USIC_CH_GetTransmitBufferStatus>
 800881e:	4603      	mov	r3, r0
 8008820:	2b80      	cmp	r3, #128	; 0x80
 8008822:	d0f7      	beq.n	8008814 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    I2C_MASTER_SendStop(handle);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff f9c3 	bl	8007bb8 <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8008832:	bf00      	nop
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff f84d 	bl	80078d8 <XMC_USIC_CH_GetTransmitBufferStatus>
 800883e:	4603      	mov	r3, r0
 8008840:	2b80      	cmp	r3, #128	; 0x80
 8008842:	d0f7      	beq.n	8008834 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  ptr_runtime->tx_busy = false;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->rx_cbhandler != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6a>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	4798      	blx	r3
  }
}
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <I2C_MASTER_lAbortReceiveIRQ>:


static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Reset the user buffer pointer to null */
  handle->runtime->rx_busy = false;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  handle->runtime->tx_busy = false;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  handle->runtime->rx_data = NULL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2200      	movs	r2, #0
 800888e:	605a      	str	r2, [r3, #4]

  handle->runtime->bus_acquired = false;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Disable the receive interrupts */
  if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d007      	beq.n	80088b6 <I2C_MASTER_lAbortReceiveIRQ+0x4a>
  {
    XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80088b0:	f7ff f8a0 	bl	80079f4 <XMC_USIC_CH_RXFIFO_DisableEvent>
 80088b4:	e006      	b.n	80088c4 <I2C_MASTER_lAbortReceiveIRQ+0x58>
                                                    (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  }
  else
  {
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80088c0:	f7fe fff8 	bl	80078b4 <XMC_USIC_CH_DisableEvent>
                                                 (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
  }
  I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80088ca:	f7ff f94f 	bl	8007b6c <I2C_MASTER_DisableEvent>
}
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff f8cd 	bl	8007a80 <XMC_I2C_CH_GetStatusFlag>
 80088e6:	60f8      	str	r0, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <I2C_MASTER_ProtocolHandler+0x38>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <I2C_MASTER_ProtocolHandler+0x38>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	2120      	movs	r1, #32
 8008900:	f7ff f9de 	bl	8007cc0 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00c      	beq.n	8008930 <I2C_MASTER_ProtocolHandler+0x5c>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891c:	2b00      	cmp	r3, #0
 800891e:	d007      	beq.n	8008930 <I2C_MASTER_ProtocolHandler+0x5c>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	2140      	movs	r1, #64	; 0x40
 8008924:	f7ff f9cc 	bl	8007cc0 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00d      	beq.n	8008956 <I2C_MASTER_ProtocolHandler+0x82>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f403 7381 	and.w	r3, r3, #258	; 0x102
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <I2C_MASTER_ProtocolHandler+0x82>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800894a:	f7ff f9b9 	bl	8007cc0 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	4798      	blx	r3
  }
}
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800896e:	461a      	mov	r2, r3
 8008970:	2301      	movs	r3, #1
 8008972:	4093      	lsls	r3, r2
 8008974:	75bb      	strb	r3, [r7, #22]

  if ((handle->config->txFIFO_size > 0))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800897e:	2b00      	cmp	r3, #0
 8008980:	d008      	beq.n	8008994 <I2C_MASTER_lReconfigureRxFIFO+0x38>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800898a:	461a      	mov	r2, r3
 800898c:	2301      	movs	r3, #1
 800898e:	4093      	lsls	r3, r2
 8008990:	75fb      	strb	r3, [r7, #23]
 8008992:	e001      	b.n	8008998 <I2C_MASTER_lReconfigureRxFIFO+0x3c>
  }
  else
  {
    tx_fifo_size = 1U;
 8008994:	2301      	movs	r3, #1
 8008996:	75fb      	strb	r3, [r7, #23]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
 8008998:	7dfa      	ldrb	r2, [r7, #23]
 800899a:	7dbb      	ldrb	r3, [r7, #22]
 800899c:	4610      	mov	r0, r2
 800899e:	4619      	mov	r1, r3
 80089a0:	f7ff f950 	bl	8007c44 <calculate_minfifosize>
 80089a4:	6138      	str	r0, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
 80089a6:	6838      	ldr	r0, [r7, #0]
 80089a8:	6939      	ldr	r1, [r7, #16]
 80089aa:	f7ff f94b 	bl	8007c44 <calculate_minfifosize>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80089ba:	461a      	mov	r2, r3
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	3b01      	subs	r3, #1
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4611      	mov	r1, r2
 80089c4:	461a      	mov	r2, r3
 80089c6:	f7ff f877 	bl	8007ab8 <I2C_MASTER_SetRXFIFOTriggerLimit>
}
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d103      	bne.n	80089f0 <I2C_MASTER_AbortTransmit+0x20>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff fd45 	bl	8008478 <I2C_MASTER_AbortTransmitIRQ>
 80089ee:	e007      	b.n	8008a00 <I2C_MASTER_AbortTransmit+0x30>
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d001      	beq.n	8008a00 <I2C_MASTER_AbortTransmit+0x30>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	73fb      	strb	r3, [r7, #15]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6812      	ldr	r2, [r2, #0]
 8008a08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a0a:	f042 0202 	orr.w	r2, r2, #2
 8008a0e:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2202      	movs	r2, #2
 8008a16:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop

08008a24 <I2C_MASTER_AbortReceive>:
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d103      	bne.n	8008a44 <I2C_MASTER_AbortReceive+0x20>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
    I2C_MASTER_lAbortReceiveIRQ(handle);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff ff15 	bl	800886c <I2C_MASTER_lAbortReceiveIRQ>
 8008a42:	e007      	b.n	8008a54 <I2C_MASTER_AbortReceive+0x30>
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d001      	beq.n	8008a54 <I2C_MASTER_AbortReceive+0x30>
    I2C_MASTER_lAbortReceiveDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8008a50:	2301      	movs	r3, #1
 8008a52:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a64:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <__NVIC_GetPriorityGrouping+0x18>)
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a6c:	0a1b      	lsrs	r3, r3, #8
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	e000ed00 	.word	0xe000ed00

08008a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	db0b      	blt.n	8008aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a8e:	4908      	ldr	r1, [pc, #32]	; (8008ab0 <__NVIC_EnableIRQ+0x34>)
 8008a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	79fa      	ldrb	r2, [r7, #7]
 8008a98:	f002 021f 	and.w	r2, r2, #31
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8008aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	e000e100 	.word	0xe000e100

08008ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	db0a      	blt.n	8008ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac8:	490d      	ldr	r1, [pc, #52]	; (8008b00 <__NVIC_SetPriority+0x4c>)
 8008aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	b2d2      	uxtb	r2, r2
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	b2d2      	uxtb	r2, r2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008adc:	e00a      	b.n	8008af4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ade:	4909      	ldr	r1, [pc, #36]	; (8008b04 <__NVIC_SetPriority+0x50>)
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	f003 030f 	and.w	r3, r3, #15
 8008ae6:	3b04      	subs	r3, #4
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	0092      	lsls	r2, r2, #2
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	440b      	add	r3, r1
 8008af2:	761a      	strb	r2, [r3, #24]
  }
}
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	e000e100 	.word	0xe000e100
 8008b04:	e000ed00 	.word	0xe000ed00

08008b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b089      	sub	sp, #36	; 0x24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f1c3 0307 	rsb	r3, r3, #7
 8008b22:	2b06      	cmp	r3, #6
 8008b24:	bf28      	it	cs
 8008b26:	2306      	movcs	r3, #6
 8008b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	3306      	adds	r3, #6
 8008b2e:	2b06      	cmp	r3, #6
 8008b30:	d902      	bls.n	8008b38 <NVIC_EncodePriority+0x30>
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	e000      	b.n	8008b3a <NVIC_EncodePriority+0x32>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	fa02 f303 	lsl.w	r3, r2, r3
 8008b44:	1e5a      	subs	r2, r3, #1
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	401a      	ands	r2, r3
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2101      	movs	r1, #1
 8008b52:	fa01 f303 	lsl.w	r3, r1, r3
 8008b56:	1e59      	subs	r1, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008b5c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3724      	adds	r7, #36	; 0x24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop

08008b6c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	70fb      	strb	r3, [r7, #3]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8008b7c:	78f8      	ldrb	r0, [r7, #3]
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	3306      	adds	r3, #6
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8008b8e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8008b90:	431a      	orrs	r2, r3
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	1d83      	adds	r3, r0, #6
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop

08008ba8 <XMC_USIC_CH_EnableInputDigitalFilter>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 8008bb4:	78f8      	ldrb	r0, [r7, #3]
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	3306      	adds	r3, #6
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f043 0220 	orr.w	r2, r3, #32
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	1d83      	adds	r3, r0, #6
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	605a      	str	r2, [r3, #4]
}
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop

08008bdc <XMC_USIC_CH_EnableInputSync>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 8008be8:	78f8      	ldrb	r0, [r7, #3]
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	3306      	adds	r3, #6
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	1d83      	adds	r3, r0, #6
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	440b      	add	r3, r1
 8008c02:	605a      	str	r2, [r3, #4]
}
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop

08008c10 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c68:	f023 020f 	bic.w	r2, r3, #15
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop

08008c80 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	2104      	movs	r1, #4
 8008c8c:	f7ff ffe4 	bl	8008c58 <XMC_USIC_CH_SetMode>
}
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop

08008c98 <i2c_master_0_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void i2c_master_0_disable_io(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)15, XMC_GPIO_MODE_INPUT_TRISTATE);
 8008c9c:	4805      	ldr	r0, [pc, #20]	; (8008cb4 <i2c_master_0_disable_io+0x1c>)
 8008c9e:	210f      	movs	r1, #15
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f7f9 fd25 	bl	80026f0 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)13, XMC_GPIO_MODE_INPUT_TRISTATE);
 8008ca6:	4804      	ldr	r0, [pc, #16]	; (8008cb8 <i2c_master_0_disable_io+0x20>)
 8008ca8:	210d      	movs	r1, #13
 8008caa:	2200      	movs	r2, #0
 8008cac:	f7f9 fd20 	bl	80026f0 <XMC_GPIO_SetMode>
}
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	48028300 	.word	0x48028300
 8008cb8:	48028000 	.word	0x48028000

08008cbc <i2c_master_0_enable_io>:

static void i2c_master_0_enable_io(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)15, i2c_master_0_sda_pin_config.mode);
 8008cc0:	23d0      	movs	r3, #208	; 0xd0
 8008cc2:	4806      	ldr	r0, [pc, #24]	; (8008cdc <i2c_master_0_enable_io+0x20>)
 8008cc4:	210f      	movs	r1, #15
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f7f9 fd12 	bl	80026f0 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)13, i2c_master_0_scl_pin_config.mode);
 8008ccc:	23d0      	movs	r3, #208	; 0xd0
 8008cce:	4804      	ldr	r0, [pc, #16]	; (8008ce0 <i2c_master_0_enable_io+0x24>)
 8008cd0:	210d      	movs	r1, #13
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f7f9 fd0c 	bl	80026f0 <XMC_GPIO_SetMode>
}
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	48028300 	.word	0x48028300
 8008ce0:	48028000 	.word	0x48028000

08008ce4 <i2c_master_0_init>:
  .config = &i2c_master_0_config,
  .runtime = &i2c_master_0_runtime,
};

void i2c_master_0_init(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 
  const uint32_t enabled_protocol_events = (uint32_t)(XMC_I2C_CH_EVENT_NACK | 
 8008cea:	f04f 73b0 	mov.w	r3, #23068672	; 0x1600000
 8008cee:	60fb      	str	r3, [r7, #12]
                               XMC_I2C_CH_EVENT_ARBITRATION_LOST | 
                               XMC_I2C_CH_EVENT_ERROR); 

  const uint32_t tx_fifo_events = (uint32_t)(0);
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60bb      	str	r3, [r7, #8]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 8008cf4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8008cf8:	607b      	str	r3, [r7, #4]
  XMC_I2C_CH_Init(XMC_I2C1_CH1, &i2c_master_0_channel_config);
 8008cfa:	483d      	ldr	r0, [pc, #244]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008cfc:	493d      	ldr	r1, [pc, #244]	; (8008df4 <i2c_master_0_init+0x110>)
 8008cfe:	f7f9 fd79 	bl	80027f4 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX0, 0);
 8008d02:	483b      	ldr	r0, [pc, #236]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d04:	2100      	movs	r1, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	f7ff ff30 	bl	8008b6c <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX1, 1);
 8008d0c:	4838      	ldr	r0, [pc, #224]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d0e:	2101      	movs	r1, #1
 8008d10:	2201      	movs	r2, #1
 8008d12:	f7ff ff2b 	bl	8008b6c <XMC_USIC_CH_SetInputSource>

  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX0);
 8008d16:	4836      	ldr	r0, [pc, #216]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f7ff ff45 	bl	8008ba8 <XMC_USIC_CH_EnableInputDigitalFilter>
  XMC_USIC_CH_EnableInputSync(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX0);
 8008d1e:	4834      	ldr	r0, [pc, #208]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d20:	2100      	movs	r1, #0
 8008d22:	f7ff ff5b 	bl	8008bdc <XMC_USIC_CH_EnableInputSync>
  XMC_USIC_CH_EnableInputDigitalFilter(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX1);
 8008d26:	4832      	ldr	r0, [pc, #200]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d28:	2101      	movs	r1, #1
 8008d2a:	f7ff ff3d 	bl	8008ba8 <XMC_USIC_CH_EnableInputDigitalFilter>
  XMC_USIC_CH_EnableInputSync(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX1);
 8008d2e:	4830      	ldr	r0, [pc, #192]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d30:	2101      	movs	r1, #1
 8008d32:	f7ff ff53 	bl	8008bdc <XMC_USIC_CH_EnableInputSync>
    
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C1_CH1,
 8008d36:	482e      	ldr	r0, [pc, #184]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d38:	2120      	movs	r1, #32
 8008d3a:	2205      	movs	r2, #5
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f7fb fea3 	bl	8004a88 <XMC_USIC_CH_TXFIFO_Configure>
                               32,
                               XMC_USIC_CH_FIFO_SIZE_32WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
 8008d42:	482b      	ldr	r0, [pc, #172]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d44:	2110      	movs	r1, #16
 8008d46:	2201      	movs	r2, #1
 8008d48:	f7fb ff2e 	bl	8004ba8 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)1));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C1_CH1, tx_fifo_events);
 8008d4c:	4828      	ldr	r0, [pc, #160]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	f7ff ff5e 	bl	8008c10 <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C1_CH1,
 8008d54:	4826      	ldr	r0, [pc, #152]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d56:	2100      	movs	r1, #0
 8008d58:	2205      	movs	r2, #5
 8008d5a:	231f      	movs	r3, #31
 8008d5c:	f7fb febc 	bl	8004ad8 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_32WORDS,
                                (uint32_t)(31));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
 8008d60:	4823      	ldr	r0, [pc, #140]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d62:	2110      	movs	r1, #16
 8008d64:	2200      	movs	r2, #0
 8008d66:	f7fb ff3d 	bl	8004be4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
 8008d6a:	4821      	ldr	r0, [pc, #132]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d6c:	2113      	movs	r1, #19
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f7fb ff38 	bl	8004be4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C1_CH1, rx_fifo_events);
 8008d74:	481e      	ldr	r0, [pc, #120]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	f7ff ff5c 	bl	8008c34 <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C1_CH1,
 8008d7c:	481c      	ldr	r0, [pc, #112]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d7e:	2110      	movs	r1, #16
 8008d80:	2202      	movs	r2, #2
 8008d82:	f7fb fef5 	bl	8004b70 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)2));
  XMC_I2C_CH_EnableEvent(XMC_I2C1_CH1, enabled_protocol_events);
 8008d86:	481a      	ldr	r0, [pc, #104]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d88:	68f9      	ldr	r1, [r7, #12]
 8008d8a:	f7f9 fed1 	bl	8002b30 <XMC_I2C_CH_EnableEvent>
  XMC_I2C_CH_Start(XMC_I2C1_CH1);
 8008d8e:	4818      	ldr	r0, [pc, #96]	; (8008df0 <i2c_master_0_init+0x10c>)
 8008d90:	f7ff ff76 	bl	8008c80 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)15, &i2c_master_0_sda_pin_config);
 8008d94:	4818      	ldr	r0, [pc, #96]	; (8008df8 <i2c_master_0_init+0x114>)
 8008d96:	210f      	movs	r1, #15
 8008d98:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <i2c_master_0_init+0x118>)
 8008d9a:	f7f8 fe21 	bl	80019e0 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)13, &i2c_master_0_scl_pin_config);
 8008d9e:	4818      	ldr	r0, [pc, #96]	; (8008e00 <i2c_master_0_init+0x11c>)
 8008da0:	210d      	movs	r1, #13
 8008da2:	4a18      	ldr	r2, [pc, #96]	; (8008e04 <i2c_master_0_init+0x120>)
 8008da4:	f7f8 fe1c 	bl	80019e0 <XMC_GPIO_Init>
/* Tx interrupt priority settings */
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),60,0));
 8008da8:	f7ff fe5a 	bl	8008a60 <__NVIC_GetPriorityGrouping>
 8008dac:	4603      	mov	r3, r0
 8008dae:	4618      	mov	r0, r3
 8008db0:	213c      	movs	r1, #60	; 0x3c
 8008db2:	2200      	movs	r2, #0
 8008db4:	f7ff fea8 	bl	8008b08 <NVIC_EncodePriority>
 8008db8:	4603      	mov	r3, r0
 8008dba:	205b      	movs	r0, #91	; 0x5b
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	f7ff fe79 	bl	8008ab4 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)91);/* Rx interrupt priority settings */
 8008dc2:	205b      	movs	r0, #91	; 0x5b
 8008dc4:	f7ff fe5a 	bl	8008a7c <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),60,0));
 8008dc8:	f7ff fe4a 	bl	8008a60 <__NVIC_GetPriorityGrouping>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	213c      	movs	r1, #60	; 0x3c
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f7ff fe98 	bl	8008b08 <NVIC_EncodePriority>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	205a      	movs	r0, #90	; 0x5a
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f7ff fe69 	bl	8008ab4 <__NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)90);}
 8008de2:	205a      	movs	r0, #90	; 0x5a
 8008de4:	f7ff fe4a 	bl	8008a7c <__NVIC_EnableIRQ>
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	48020200 	.word	0x48020200
 8008df4:	08013cc0 	.word	0x08013cc0
 8008df8:	48028300 	.word	0x48028300
 8008dfc:	08013ca8 	.word	0x08013ca8
 8008e00:	48028000 	.word	0x48028000
 8008e04:	08013cb4 	.word	0x08013cb4

08008e08 <USIC1_1_IRQHandler>:
/*Transmit ISR*/
void i2c_master_0_TX_HANDLER()
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&i2c_master_0);
 8008e0c:	4801      	ldr	r0, [pc, #4]	; (8008e14 <USIC1_1_IRQHandler+0xc>)
 8008e0e:	f7fe ff89 	bl	8007d24 <I2C_MASTER_TransmitHandler>
}
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	1ffed0e8 	.word	0x1ffed0e8

08008e18 <USIC1_0_IRQHandler>:
/*Receive ISR*/
void i2c_master_0_RX_HANDLER()
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&i2c_master_0);
 8008e1c:	4801      	ldr	r0, [pc, #4]	; (8008e24 <USIC1_0_IRQHandler+0xc>)
 8008e1e:	f7ff fbc9 	bl	80085b4 <I2C_MASTER_ReceiveHandler>
}
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	1ffed0e8 	.word	0x1ffed0e8

08008e28 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	60da      	str	r2, [r3, #12]
}
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop

08008e48 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7b5b      	ldrb	r3, [r3, #13]
 8008e54:	f083 0301 	eor.w	r3, r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00f      	beq.n	8008e7e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689a      	ldr	r2, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7b1b      	ldrb	r3, [r3, #12]
 8008e66:	4610      	mov	r0, r2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7f9 fb77 	bl	800255c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff ffd8 	bl	8008e28 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7c1a      	ldrb	r2, [r3, #16]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f7f8 fd9d 	bl	80019e0 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6819      	ldr	r1, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	7c1a      	ldrb	r2, [r3, #16]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	7c5b      	ldrb	r3, [r3, #17]
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7f9 fc5a 	bl	8002770 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop

08008ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <__NVIC_SetPriorityGrouping+0x44>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8008ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ef8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8008efa:	4a04      	ldr	r2, [pc, #16]	; (8008f0c <__NVIC_SetPriorityGrouping+0x44>)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	60d3      	str	r3, [r2, #12]
}
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	e000ed00 	.word	0xe000ed00

08008f10 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8008f16:	2001      	movs	r0, #1
 8008f18:	f7ff ffd6 	bl	8008ec8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008f1c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8008f1e:	4b21      	ldr	r3, [pc, #132]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f20:	4a21      	ldr	r2, [pc, #132]	; (8008fa8 <SystemCoreSetup+0x98>)
 8008f22:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008f24:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8008f28:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8008f2a:	4a1e      	ldr	r2, [pc, #120]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f2c:	4b1d      	ldr	r3, [pc, #116]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8008f3a:	4b1c      	ldr	r3, [pc, #112]	; (8008fac <SystemCoreSetup+0x9c>)
 8008f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f40:	3314      	adds	r3, #20
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f023 030f 	bic.w	r3, r3, #15
 8008f4c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f043 0304 	orr.w	r3, r3, #4
 8008f54:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8008f56:	4b15      	ldr	r3, [pc, #84]	; (8008fac <SystemCoreSetup+0x9c>)
 8008f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f5c:	3314      	adds	r3, #20
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8008f62:	4a10      	ldr	r2, [pc, #64]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	f023 0310 	bic.w	r3, r3, #16
 8008f6c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8008f6e:	4a0d      	ldr	r2, [pc, #52]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f70:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	f023 0308 	bic.w	r3, r3, #8
 8008f78:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008f7a:	4a0a      	ldr	r2, [pc, #40]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f7c:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f84:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8008f86:	4a07      	ldr	r2, [pc, #28]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f88:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f90:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8008f92:	4a04      	ldr	r2, [pc, #16]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f94:	4b03      	ldr	r3, [pc, #12]	; (8008fa4 <SystemCoreSetup+0x94>)
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f9c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	e000ed00 	.word	0xe000ed00
 8008fa8:	08000000 	.word	0x08000000
 8008fac:	58001000 	.word	0x58001000

08008fb0 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	701a      	strb	r2, [r3, #0]

  return (status);
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <OSCHP_GetFrequency+0x10>)
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	00b71b00 	.word	0x00b71b00

08008fe4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8008fe4:	b5b0      	push	{r4, r5, r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8008fea:	4b12      	ldr	r3, [pc, #72]	; (8009034 <SystemCoreClockSetup+0x50>)
 8008fec:	1d3c      	adds	r4, r7, #4
 8008fee:	461d      	mov	r5, r3
 8008ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8008ff8:	1d3b      	adds	r3, r7, #4
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7f8 fdea 	bl	8001bd4 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8009000:	2000      	movs	r0, #0
 8009002:	f7f8 ff01 	bl	8001e08 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8009006:	2000      	movs	r0, #0
 8009008:	f7f8 feb6 	bl	8001d78 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800900c:	2004      	movs	r0, #4
 800900e:	f7f8 ff87 	bl	8001f20 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8009012:	2001      	movs	r0, #1
 8009014:	2120      	movs	r1, #32
 8009016:	f7f9 f807 	bl	8002028 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800901a:	2000      	movs	r0, #0
 800901c:	f7f8 fec0 	bl	8001da0 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8009020:	2001      	movs	r0, #1
 8009022:	f7f8 ffa5 	bl	8001f70 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8009026:	2001      	movs	r0, #1
 8009028:	f7f8 ff8e 	bl	8001f48 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bdb0      	pop	{r4, r5, r7, pc}
 8009032:	bf00      	nop
 8009034:	08013d1c 	.word	0x08013d1c

08009038 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800903e:	2300      	movs	r3, #0
 8009040:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8009042:	4829      	ldr	r0, [pc, #164]	; (80090e8 <DAVE_Init+0xb0>)
 8009044:	f7ff ffb4 	bl	8008fb0 <CLOCK_XMC4_Init>
 8009048:	4603      	mov	r3, r0
 800904a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <DAVE_Init+0x24>
  {
	 /**  Initialization of I2C_MASTER APP instance i2c_master_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&i2c_master_0); 
 8009052:	4826      	ldr	r0, [pc, #152]	; (80090ec <DAVE_Init+0xb4>)
 8009054:	f7fe fe0c 	bl	8007c70 <I2C_MASTER_Init>
 8009058:	4603      	mov	r3, r0
 800905a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d104      	bne.n	800906c <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance reset_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&reset_pin); 
 8009062:	4823      	ldr	r0, [pc, #140]	; (80090f0 <DAVE_Init+0xb8>)
 8009064:	f7ff ff10 	bl	8008e88 <DIGITAL_IO_Init>
 8009068:	4603      	mov	r3, r0
 800906a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance vdd_pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&vdd_pin); 
 8009072:	4820      	ldr	r0, [pc, #128]	; (80090f4 <DAVE_Init+0xbc>)
 8009074:	f7ff ff08 	bl	8008e88 <DIGITAL_IO_Init>
 8009078:	4603      	mov	r3, r0
 800907a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <DAVE_Init+0x54>
  {
	 /**  Initialization of USBD_VCOM APP instance console_logger */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&console_logger); 
 8009082:	481d      	ldr	r0, [pc, #116]	; (80090f8 <DAVE_Init+0xc0>)
 8009084:	f7fc f934 	bl	80052f0 <USBD_VCOM_Init>
 8009088:	4603      	mov	r3, r0
 800908a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <DAVE_Init+0x64>
  {
	 /**  Initialization of UART APP instance cunit_logger */
	 init_status = (DAVE_STATUS_t)UART_Init(&cunit_logger); 
 8009092:	481a      	ldr	r0, [pc, #104]	; (80090fc <DAVE_Init+0xc4>)
 8009094:	f7fd fde4 	bl	8006c60 <UART_Init>
 8009098:	4603      	mov	r3, r0
 800909a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d104      	bne.n	80090ac <DAVE_Init+0x74>
  {
	 /**  Initialization of TIMER APP instance tick_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&tick_timer); 
 80090a2:	4817      	ldr	r0, [pc, #92]	; (8009100 <DAVE_Init+0xc8>)
 80090a4:	f7fe f976 	bl	8007394 <TIMER_Init>
 80090a8:	4603      	mov	r3, r0
 80090aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <DAVE_Init+0x84>
  {
	 /**  Initialization of INTERRUPT APP instance tick_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&tick_timer_intr); 
 80090b2:	4814      	ldr	r0, [pc, #80]	; (8009104 <DAVE_Init+0xcc>)
 80090b4:	f7fe fbaa 	bl	800780c <INTERRUPT_Init>
 80090b8:	4603      	mov	r3, r0
 80090ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d104      	bne.n	80090cc <DAVE_Init+0x94>
  {
	 /**  Initialization of INTERRUPT APP instance scheduler_timer_intr */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&scheduler_timer_intr); 
 80090c2:	4811      	ldr	r0, [pc, #68]	; (8009108 <DAVE_Init+0xd0>)
 80090c4:	f7fe fba2 	bl	800780c <INTERRUPT_Init>
 80090c8:	4603      	mov	r3, r0
 80090ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <DAVE_Init+0xa4>
  {
	 /**  Initialization of TIMER APP instance scheduler_timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&scheduler_timer); 
 80090d2:	480e      	ldr	r0, [pc, #56]	; (800910c <DAVE_Init+0xd4>)
 80090d4:	f7fe f95e 	bl	8007394 <TIMER_Init>
 80090d8:	4603      	mov	r3, r0
 80090da:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80090dc:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	1ffed67c 	.word	0x1ffed67c
 80090ec:	1ffed0e8 	.word	0x1ffed0e8
 80090f0:	08013cf4 	.word	0x08013cf4
 80090f4:	08013d08 	.word	0x08013d08
 80090f8:	1ffed634 	.word	0x1ffed634
 80090fc:	1ffed050 	.word	0x1ffed050
 8009100:	1ffed064 	.word	0x1ffed064
 8009104:	08013ca0 	.word	0x08013ca0
 8009108:	08013ca4 	.word	0x08013ca4
 800910c:	1ffed094 	.word	0x1ffed094

08009110 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	2201      	movs	r2, #1
 8009120:	409a      	lsls	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	605a      	str	r2, [r3, #4]
}
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009142:	409a      	lsls	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	605a      	str	r2, [r3, #4]
}
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop

08009154 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	7c1b      	ldrb	r3, [r3, #16]
 8009164:	4610      	mov	r0, r2
 8009166:	4619      	mov	r1, r3
 8009168:	f7ff ffd2 	bl	8009110 <XMC_GPIO_SetOutputHigh>
}
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop

08009174 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7c1b      	ldrb	r3, [r3, #16]
 8009184:	4610      	mov	r0, r2
 8009186:	4619      	mov	r1, r3
 8009188:	f7ff ffd2 	bl	8009130 <XMC_GPIO_SetOutputLow>
}
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop

08009194 <pal_gpio_set_high>:
{
    return PAL_STATUS_SUCCESS;
}

void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d008      	beq.n	80091b4 <pal_gpio_set_high+0x20>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <pal_gpio_set_high+0x20>
    {
        DIGITAL_IO_SetOutputHigh(p_gpio_context->p_gpio_hw);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff ffd0 	bl	8009154 <DIGITAL_IO_SetOutputHigh>
    }
}
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop

080091bc <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d008      	beq.n	80091dc <pal_gpio_set_low+0x20>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d004      	beq.n	80091dc <pal_gpio_set_low+0x20>
    {
        DIGITAL_IO_SetOutputLow(p_gpio_context->p_gpio_hw);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff ffcc 	bl	8009174 <DIGITAL_IO_SetOutputLow>
    }
}
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop

080091e4 <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80091f4:	b2db      	uxtb	r3, r3
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop

08009204 <I2C_MASTER_IsRxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009214:	b2db      	uxtb	r3, r3
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop

08009224 <pal_i2c_acquire>:
_STATIC_H volatile uint32_t g_entry_count = 0;
_STATIC_H const pal_i2c_t * gp_pal_i2c_current_ctx;

//lint --e{715} suppress "This is implemented for overall completion of API"
_STATIC_H pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
    if (0 == g_entry_count)
 800922c:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <pal_i2c_acquire+0x34>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <pal_i2c_acquire+0x26>
    {
        g_entry_count++;
 8009234:	4b08      	ldr	r3, [pc, #32]	; (8009258 <pal_i2c_acquire+0x34>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3301      	adds	r3, #1
 800923a:	4a07      	ldr	r2, [pc, #28]	; (8009258 <pal_i2c_acquire+0x34>)
 800923c:	6013      	str	r3, [r2, #0]
        if (1 == g_entry_count)
 800923e:	4b06      	ldr	r3, [pc, #24]	; (8009258 <pal_i2c_acquire+0x34>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d101      	bne.n	800924a <pal_i2c_acquire+0x26>
        {
            return PAL_STATUS_SUCCESS;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <pal_i2c_acquire+0x28>
        }
    }
    return PAL_STATUS_FAILURE;
 800924a:	2301      	movs	r3, #1
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	1ffed680 	.word	0x1ffed680

0800925c <pal_i2c_release>:

//lint --e{715} suppress "The unused p_i2c_context variable is kept for future enhancements"
_STATIC_H void pal_i2c_release(const void * p_i2c_context)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
    g_entry_count = 0;
 8009264:	4b03      	ldr	r3, [pc, #12]	; (8009274 <pal_i2c_release+0x18>)
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
}
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	1ffed680 	.word	0x1ffed680

08009278 <invoke_upper_layer_callback>:
/// @endcond

void invoke_upper_layer_callback (const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	807b      	strh	r3, [r7, #2]
    upper_layer_callback_t upper_layer_handler;
    //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	60fb      	str	r3, [r7, #12]

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6899      	ldr	r1, [r3, #8]
 800928e:	887a      	ldrh	r2, [r7, #2]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	4798      	blx	r3

    //Release I2C Bus
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff ffdd 	bl	800925c <pal_i2c_release>
}
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <i2c_master_end_of_transmit_callback>:

/// @cond hidden
void i2c_master_end_of_transmit_callback(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 80092ac:	4b03      	ldr	r3, [pc, #12]	; (80092bc <i2c_master_end_of_transmit_callback+0x14>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4618      	mov	r0, r3
 80092b2:	2100      	movs	r1, #0
 80092b4:	f7ff ffe0 	bl	8009278 <invoke_upper_layer_callback>
}
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	1ffed684 	.word	0x1ffed684

080092c0 <i2c_master_end_of_receive_callback>:

void i2c_master_end_of_receive_callback(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 80092c4:	4b03      	ldr	r3, [pc, #12]	; (80092d4 <i2c_master_end_of_receive_callback+0x14>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4618      	mov	r0, r3
 80092ca:	2100      	movs	r1, #0
 80092cc:	f7ff ffd4 	bl	8009278 <invoke_upper_layer_callback>
}
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	1ffed684 	.word	0x1ffed684

080092d8 <i2c_master_error_detected_callback>:

void i2c_master_error_detected_callback(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
    I2C_MASTER_t * p_i2c_master;

    p_i2c_master = gp_pal_i2c_current_ctx->p_i2c_hw_config;
 80092de:	4b16      	ldr	r3, [pc, #88]	; (8009338 <i2c_master_error_detected_callback+0x60>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	607b      	str	r3, [r7, #4]
    if (0 != I2C_MASTER_IsTxBusy(p_i2c_master))
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff ff7c 	bl	80091e4 <I2C_MASTER_IsTxBusy>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d009      	beq.n	8009306 <i2c_master_error_detected_callback+0x2e>
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortTransmit(p_i2c_master);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff fb6c 	bl	80089d0 <I2C_MASTER_AbortTransmit>
        while (I2C_MASTER_IsTxBusy(p_i2c_master)){}
 80092f8:	bf00      	nop
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff ff72 	bl	80091e4 <I2C_MASTER_IsTxBusy>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1f9      	bne.n	80092fa <i2c_master_error_detected_callback+0x22>
    }

    if (0 != I2C_MASTER_IsRxBusy(p_i2c_master))
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff ff7c 	bl	8009204 <I2C_MASTER_IsRxBusy>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d009      	beq.n	8009326 <i2c_master_error_detected_callback+0x4e>
    {
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        I2C_MASTER_AbortReceive(p_i2c_master);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff fb86 	bl	8008a24 <I2C_MASTER_AbortReceive>
        while (I2C_MASTER_IsRxBusy(p_i2c_master)){}
 8009318:	bf00      	nop
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff ff72 	bl	8009204 <I2C_MASTER_IsRxBusy>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f9      	bne.n	800931a <i2c_master_error_detected_callback+0x42>
    }

    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_ERROR);
 8009326:	4b04      	ldr	r3, [pc, #16]	; (8009338 <i2c_master_error_detected_callback+0x60>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	2101      	movs	r1, #1
 800932e:	f7ff ffa3 	bl	8009278 <invoke_upper_layer_callback>
}
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	1ffed684 	.word	0x1ffed684

0800933c <i2c_master_nack_received_callback>:

void i2c_master_nack_received_callback(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
    i2c_master_error_detected_callback();
 8009340:	f7ff ffca 	bl	80092d8 <i2c_master_error_detected_callback>
}
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop

08009348 <i2c_master_arbitration_lost_callback>:

void i2c_master_arbitration_lost_callback(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
    i2c_master_error_detected_callback();
 800934c:	f7ff ffc4 	bl	80092d8 <i2c_master_error_detected_callback>
}
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop

08009354 <pal_i2c_init>:
/// @endcond

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
    return PAL_STATUS_SUCCESS;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop

0800936c <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
    return PAL_STATUS_SUCCESS;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop

08009384 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8009384:	b590      	push	{r4, r7, lr}
 8009386:	b089      	sub	sp, #36	; 0x24
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8009392:	2301      	movs	r3, #1
 8009394:	82fb      	strh	r3, [r7, #22]

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff ff44 	bl	8009224 <pal_i2c_acquire>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d124      	bne.n	80093ec <pal_i2c_write+0x68>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 80093a2:	4a1a      	ldr	r2, [pc, #104]	; (800940c <pal_i2c_write+0x88>)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6013      	str	r3, [r2, #0]
        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681a      	ldr	r2, [r3, #0]
                                                             (bool)TRUE,
                                                             (p_i2c_context->slave_address << 1),
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	791b      	ldrb	r3, [r3, #4]
 80093b0:	005b      	lsls	r3, r3, #1
    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
        //Invoke the low level i2c master driver API to write to the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Transmit(p_i2c_context->p_i2c_hw_config,
 80093b2:	461c      	mov	r4, r3
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	2301      	movs	r3, #1
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	4610      	mov	r0, r2
 80093be:	2101      	movs	r1, #1
 80093c0:	4622      	mov	r2, r4
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f7fe fc8a 	bl	8007cdc <I2C_MASTER_Transmit>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <pal_i2c_write+0x62>
                                                             (bool)TRUE))
        {
            //If I2C Master fails to invoke the write operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	461a      	mov	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	4618      	mov	r0, r3
 80093da:	2101      	movs	r1, #1
 80093dc:	4790      	blx	r2
                                                       (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_ERROR);
            
            //Release I2C Bus
            pal_i2c_release((void * )p_i2c_context);
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7ff ff3c 	bl	800925c <pal_i2c_release>
 80093e4:	e00c      	b.n	8009400 <pal_i2c_write+0x7c>
        }
        else
        {
            status = PAL_STATUS_SUCCESS;
 80093e6:	2300      	movs	r3, #0
 80093e8:	82fb      	strh	r3, [r7, #22]
 80093ea:	e009      	b.n	8009400 <pal_i2c_write+0x7c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 80093ec:	2302      	movs	r3, #2
 80093ee:	82fb      	strh	r3, [r7, #22]
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	461a      	mov	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	4618      	mov	r0, r3
 80093fc:	2102      	movs	r1, #2
 80093fe:	4790      	blx	r2
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    
    return status;
 8009400:	8afb      	ldrh	r3, [r7, #22]
}
 8009402:	4618      	mov	r0, r3
 8009404:	371c      	adds	r7, #28
 8009406:	46bd      	mov	sp, r7
 8009408:	bd90      	pop	{r4, r7, pc}
 800940a:	bf00      	nop
 800940c:	1ffed684 	.word	0x1ffed684

08009410 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b08b      	sub	sp, #44	; 0x2c
 8009414:	af04      	add	r7, sp, #16
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 800941e:	2301      	movs	r3, #1
 8009420:	82fb      	strh	r3, [r7, #22]

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7ff fefe 	bl	8009224 <pal_i2c_acquire>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d126      	bne.n	800947c <pal_i2c_read+0x6c>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 800942e:	4a1b      	ldr	r2, [pc, #108]	; (800949c <pal_i2c_read+0x8c>)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6013      	str	r3, [r2, #0]

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681a      	ldr	r2, [r3, #0]
                                                            (bool)TRUE,
                                                            (p_i2c_context->slave_address << 1),
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	791b      	ldrb	r3, [r3, #4]
 800943c:	005b      	lsls	r3, r3, #1
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
    {
        gp_pal_i2c_current_ctx = p_i2c_context;

        //Invoke the low level i2c master driver API to read from the bus
        if (I2C_MASTER_STATUS_SUCCESS != I2C_MASTER_Receive(p_i2c_context->p_i2c_hw_config,
 800943e:	461c      	mov	r4, r3
 8009440:	88fb      	ldrh	r3, [r7, #6]
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	2301      	movs	r3, #1
 8009446:	9301      	str	r3, [sp, #4]
 8009448:	2301      	movs	r3, #1
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	4610      	mov	r0, r2
 800944e:	2101      	movs	r1, #1
 8009450:	4622      	mov	r2, r4
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f7fe fdc2 	bl	8007fdc <I2C_MASTER_Receive>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <pal_i2c_read+0x66>
                                                            (bool)TRUE))
        {
            //If I2C Master fails to invoke the read operation, invoke upper layer event handler with error.

            //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	461a      	mov	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	4618      	mov	r0, r3
 800946a:	2101      	movs	r1, #1
 800946c:	4790      	blx	r2
                                                       (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_ERROR);

            //Release I2C Bus
            pal_i2c_release((void * )p_i2c_context);
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f7ff fef4 	bl	800925c <pal_i2c_release>
 8009474:	e00c      	b.n	8009490 <pal_i2c_read+0x80>
        }
        else
        {
            status = PAL_STATUS_SUCCESS;
 8009476:	2300      	movs	r3, #0
 8009478:	82fb      	strh	r3, [r7, #22]
 800947a:	e009      	b.n	8009490 <pal_i2c_read+0x80>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 800947c:	2302      	movs	r3, #2
 800947e:	82fb      	strh	r3, [r7, #22]
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	461a      	mov	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	4618      	mov	r0, r3
 800948c:	2102      	movs	r1, #2
 800948e:	4790      	blx	r2
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
    }
    
    return status;
 8009490:	8afb      	ldrh	r3, [r7, #22]
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	bd90      	pop	{r4, r7, pc}
 800949a:	bf00      	nop
 800949c:	1ffed684 	.word	0x1ffed684

080094a0 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	807b      	strh	r3, [r7, #2]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 80094ac:	2301      	movs	r3, #1
 80094ae:	81fb      	strh	r3, [r7, #14]
    optiga_lib_status_t event = PAL_I2C_EVENT_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	81bb      	strh	r3, [r7, #12]

    //Acquire the I2C bus before setting the bitrate
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff feb5 	bl	8009224 <pal_i2c_acquire>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d104      	bne.n	80094ca <pal_i2c_set_bitrate+0x2a>
//        {
//            return_status = PAL_STATUS_FAILURE;
//        }
//        else
//        {
            return_status = PAL_STATUS_SUCCESS;
 80094c0:	2300      	movs	r3, #0
 80094c2:	81fb      	strh	r3, [r7, #14]
            event = PAL_I2C_EVENT_SUCCESS;
 80094c4:	2300      	movs	r3, #0
 80094c6:	81bb      	strh	r3, [r7, #12]
 80094c8:	e003      	b.n	80094d2 <pal_i2c_set_bitrate+0x32>
//        }
    }
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
 80094ca:	2302      	movs	r3, #2
 80094cc:	81fb      	strh	r3, [r7, #14]
        event = PAL_I2C_EVENT_BUSY;
 80094ce:	2302      	movs	r3, #2
 80094d0:	81bb      	strh	r3, [r7, #12]
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d008      	beq.n	80094ec <pal_i2c_set_bitrate+0x4c>
    {
        //lint --e{611} suppress "void* function pointer is type casted to upper_layer_callback_t type"
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	461a      	mov	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6899      	ldr	r1, [r3, #8]
 80094e4:	89bb      	ldrh	r3, [r7, #12]
 80094e6:	4608      	mov	r0, r1
 80094e8:	4619      	mov	r1, r3
 80094ea:	4790      	blx	r2
    }
    //Release I2C Bus if its acquired 
    if (PAL_STATUS_I2C_BUSY != return_status)
 80094ec:	89fb      	ldrh	r3, [r7, #14]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d002      	beq.n	80094f8 <pal_i2c_set_bitrate+0x58>
    {
        pal_i2c_release((void * )p_i2c_context);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff feb2 	bl	800925c <pal_i2c_release>
    }
    return return_status;
 80094f8:	89fb      	ldrh	r3, [r7, #14]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop

08009504 <cunit_console_uart_end_of_transmit_callback>:
        .logger_rx_flag = 1,
        .logger_tx_flag = 1
};

void cunit_console_uart_end_of_transmit_callback(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
    cunit_console.logger_tx_flag = 0;
 8009508:	4b03      	ldr	r3, [pc, #12]	; (8009518 <cunit_console_uart_end_of_transmit_callback+0x14>)
 800950a:	2200      	movs	r2, #0
 800950c:	715a      	strb	r2, [r3, #5]
}
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	1ffed134 	.word	0x1ffed134

0800951c <cunit_console_uart_end_of_receive_callback>:

void cunit_console_uart_end_of_receive_callback(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
    cunit_console.logger_rx_flag = 0;
 8009520:	4b03      	ldr	r3, [pc, #12]	; (8009530 <cunit_console_uart_end_of_receive_callback+0x14>)
 8009522:	2200      	movs	r2, #0
 8009524:	711a      	strb	r2, [r3, #4]
}
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	1ffed134 	.word	0x1ffed134

08009534 <pal_logger_init>:

/// @endcond


pal_status_t pal_logger_init(void * p_logger_context)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 800953c:	2301      	movs	r3, #1
 800953e:	81fb      	strh	r3, [r7, #14]
    pal_logger_t * p_log_context = p_logger_context;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	60bb      	str	r3, [r7, #8]

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10e      	bne.n	800956a <pal_logger_init+0x36>
        {
            if(USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 800954c:	f7fc f830 	bl	80055b0 <USBD_VCOM_Connect>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d000      	beq.n	8009558 <pal_logger_init+0x24>
            {
                break;
 8009556:	e00a      	b.n	800956e <pal_logger_init+0x3a>
            }

            while(!USBD_VCOM_IsEnumDone()){};
 8009558:	bf00      	nop
 800955a:	f7fb ff15 	bl	8005388 <USBD_VCOM_IsEnumDone>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0fa      	beq.n	800955a <pal_logger_init+0x26>
            return_status = PAL_STATUS_SUCCESS;
 8009564:	2300      	movs	r3, #0
 8009566:	81fb      	strh	r3, [r7, #14]
 8009568:	e001      	b.n	800956e <pal_logger_init+0x3a>
        }
        else
        {
            return_status = PAL_STATUS_SUCCESS;
 800956a:	2300      	movs	r3, #0
 800956c:	81fb      	strh	r3, [r7, #14]
        }
    }while(FALSE);
    return return_status;
 800956e:	89fb      	ldrh	r3, [r7, #14]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <pal_logger_write>:
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]

    int32_t return_status = PAL_STATUS_FAILURE;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
    pal_logger_t * p_log_context = p_logger_context;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	613b      	str	r3, [r7, #16]

    do
    {
        // The instance of VMCOMS is internally declared
        if(NULL == p_log_context->logger_config_ptr)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10f      	bne.n	80095b4 <pal_logger_write+0x3c>
        {
            if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_SendData((int8_t *)p_log_data,(uint16_t)log_data_length))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	b29b      	uxth	r3, r3
 8009598:	68b8      	ldr	r0, [r7, #8]
 800959a:	4619      	mov	r1, r3
 800959c:	f7fb ff08 	bl	80053b0 <USBD_VCOM_SendData>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d000      	beq.n	80095a8 <pal_logger_write+0x30>
            {
                break;
 80095a6:	e01d      	b.n	80095e4 <pal_logger_write+0x6c>
            }
            CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 80095a8:	4811      	ldr	r0, [pc, #68]	; (80095f0 <pal_logger_write+0x78>)
 80095aa:	f7fb fe2f 	bl	800520c <CDC_Device_USBTask>
            return_status = PAL_STATUS_SUCCESS;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]
 80095b2:	e017      	b.n	80095e4 <pal_logger_write+0x6c>
        }
        else
        {
            p_log_context->logger_tx_flag = 1U;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2201      	movs	r2, #1
 80095b8:	715a      	strb	r2, [r3, #5]

            return_status = (int32_t)UART_Transmit(p_log_context->logger_config_ptr, (uint8_t *)p_log_data, log_data_length);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4618      	mov	r0, r3
 80095c0:	68b9      	ldr	r1, [r7, #8]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	f7fd fb5e 	bl	8006c84 <UART_Transmit>
 80095c8:	4603      	mov	r3, r0
 80095ca:	617b      	str	r3, [r7, #20]
            if (return_status != PAL_STATUS_SUCCESS)
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d000      	beq.n	80095d4 <pal_logger_write+0x5c>
            {
                break;
 80095d2:	e007      	b.n	80095e4 <pal_logger_write+0x6c>
            }
            while (p_log_context->logger_tx_flag)
 80095d4:	bf00      	nop
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	795b      	ldrb	r3, [r3, #5]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1fa      	bne.n	80095d6 <pal_logger_write+0x5e>
            {

            }
            return_status = PAL_STATUS_SUCCESS;
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]
        }
    } while(0);
    return ((pal_status_t)return_status);
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	b29b      	uxth	r3, r3
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	1ffedff4 	.word	0x1ffedff4

080095f4 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	80fb      	strh	r3, [r7, #6]
 8009600:	4613      	mov	r3, r2
 8009602:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8009604:	2301      	movs	r3, #1
 8009606:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 800960c:	88fb      	ldrh	r3, [r7, #6]
 800960e:	2b22      	cmp	r3, #34	; 0x22
 8009610:	d026      	beq.n	8009660 <pal_os_datastore_write+0x6c>
 8009612:	2b33      	cmp	r3, #51	; 0x33
 8009614:	d042      	beq.n	800969c <pal_os_datastore_write+0xa8>
 8009616:	2b11      	cmp	r3, #17
 8009618:	d000      	beq.n	800961c <pal_os_datastore_write+0x28>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 800961a:	e05d      	b.n	80096d8 <pal_os_datastore_write+0xe4>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of updating
            // the platform binding shared secret during the runtime into NVM.
            // In current implementation, platform binding shared secret is 
            // stored in RAM.
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 800961c:	88bb      	ldrh	r3, [r7, #4]
 800961e:	2b40      	cmp	r3, #64	; 0x40
 8009620:	d81d      	bhi.n	800965e <pal_os_datastore_write+0x6a>
            {
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8009622:	7b7b      	ldrb	r3, [r7, #13]
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	737a      	strb	r2, [r7, #13]
 8009628:	461a      	mov	r2, r3
 800962a:	88bb      	ldrh	r3, [r7, #4]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	b29b      	uxth	r3, r3
 8009630:	b2d9      	uxtb	r1, r3
 8009632:	4b2c      	ldr	r3, [pc, #176]	; (80096e4 <pal_os_datastore_write+0xf0>)
 8009634:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8009636:	7b7b      	ldrb	r3, [r7, #13]
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	737a      	strb	r2, [r7, #13]
 800963c:	461a      	mov	r2, r3
 800963e:	88bb      	ldrh	r3, [r7, #4]
 8009640:	b2d9      	uxtb	r1, r3
 8009642:	4b28      	ldr	r3, [pc, #160]	; (80096e4 <pal_os_datastore_write+0xf0>)
 8009644:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8009646:	7b7b      	ldrb	r3, [r7, #13]
 8009648:	4a26      	ldr	r2, [pc, #152]	; (80096e4 <pal_os_datastore_write+0xf0>)
 800964a:	441a      	add	r2, r3
 800964c:	88bb      	ldrh	r3, [r7, #4]
 800964e:	4610      	mov	r0, r2
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	f008 ff56 	bl	8012504 <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8009658:	2300      	movs	r3, #0
 800965a:	81fb      	strh	r3, [r7, #14]
            }
            break;
 800965c:	e03c      	b.n	80096d8 <pal_os_datastore_write+0xe4>
 800965e:	e03b      	b.n	80096d8 <pal_os_datastore_write+0xe4>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the manage context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8009660:	7b7b      	ldrb	r3, [r7, #13]
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	737a      	strb	r2, [r7, #13]
 8009666:	461a      	mov	r2, r3
 8009668:	88bb      	ldrh	r3, [r7, #4]
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	b29b      	uxth	r3, r3
 800966e:	b2d9      	uxtb	r1, r3
 8009670:	4b1d      	ldr	r3, [pc, #116]	; (80096e8 <pal_os_datastore_write+0xf4>)
 8009672:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 8009674:	7b7b      	ldrb	r3, [r7, #13]
 8009676:	1c5a      	adds	r2, r3, #1
 8009678:	737a      	strb	r2, [r7, #13]
 800967a:	461a      	mov	r2, r3
 800967c:	88bb      	ldrh	r3, [r7, #4]
 800967e:	b2d9      	uxtb	r1, r3
 8009680:	4b19      	ldr	r3, [pc, #100]	; (80096e8 <pal_os_datastore_write+0xf4>)
 8009682:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 8009684:	7b7b      	ldrb	r3, [r7, #13]
 8009686:	4a18      	ldr	r2, [pc, #96]	; (80096e8 <pal_os_datastore_write+0xf4>)
 8009688:	441a      	add	r2, r3
 800968a:	88bb      	ldrh	r3, [r7, #4]
 800968c:	4610      	mov	r0, r2
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	f008 ff37 	bl	8012504 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8009696:	2300      	movs	r3, #0
 8009698:	81fb      	strh	r3, [r7, #14]
            break;
 800969a:	e01d      	b.n	80096d8 <pal_os_datastore_write+0xe4>
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only, in case of storing 
            // the application context information in non-volatile memory 
            // to reuse for later during hard reset scenarios where the 
            // RAM gets flushed out.
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 800969c:	7b7b      	ldrb	r3, [r7, #13]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	737a      	strb	r2, [r7, #13]
 80096a2:	461a      	mov	r2, r3
 80096a4:	88bb      	ldrh	r3, [r7, #4]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	b2d9      	uxtb	r1, r3
 80096ac:	4b0f      	ldr	r3, [pc, #60]	; (80096ec <pal_os_datastore_write+0xf8>)
 80096ae:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 80096b0:	7b7b      	ldrb	r3, [r7, #13]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	737a      	strb	r2, [r7, #13]
 80096b6:	461a      	mov	r2, r3
 80096b8:	88bb      	ldrh	r3, [r7, #4]
 80096ba:	b2d9      	uxtb	r1, r3
 80096bc:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <pal_os_datastore_write+0xf8>)
 80096be:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 80096c0:	7b7b      	ldrb	r3, [r7, #13]
 80096c2:	4a0a      	ldr	r2, [pc, #40]	; (80096ec <pal_os_datastore_write+0xf8>)
 80096c4:	441a      	add	r2, r3
 80096c6:	88bb      	ldrh	r3, [r7, #4]
 80096c8:	4610      	mov	r0, r2
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	f008 ff19 	bl	8012504 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80096d2:	2300      	movs	r3, #0
 80096d4:	81fb      	strh	r3, [r7, #14]
            break;
 80096d6:	bf00      	nop
        default:
        {
            break;
        }
    }
    return return_status;
 80096d8:	89fb      	ldrh	r3, [r7, #14]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	1ffed13c 	.word	0x1ffed13c
 80096e8:	1ffee364 	.word	0x1ffee364
 80096ec:	1ffee3a8 	.word	0x1ffee3a8

080096f0 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 80096fe:	2301      	movs	r3, #1
 8009700:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 8009706:	89fb      	ldrh	r3, [r7, #14]
 8009708:	2b22      	cmp	r3, #34	; 0x22
 800970a:	d029      	beq.n	8009760 <pal_os_datastore_read+0x70>
 800970c:	2b33      	cmp	r3, #51	; 0x33
 800970e:	d049      	beq.n	80097a4 <pal_os_datastore_read+0xb4>
 8009710:	2b11      	cmp	r3, #17
 8009712:	d169      	bne.n	80097e8 <pal_os_datastore_read+0xf8>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8009714:	7d7b      	ldrb	r3, [r7, #21]
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	757a      	strb	r2, [r7, #21]
 800971a:	461a      	mov	r2, r3
 800971c:	4b37      	ldr	r3, [pc, #220]	; (80097fc <pal_os_datastore_read+0x10c>)
 800971e:	5c9b      	ldrb	r3, [r3, r2]
 8009720:	b29b      	uxth	r3, r3
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8009726:	7d7b      	ldrb	r3, [r7, #21]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	757a      	strb	r2, [r7, #21]
 800972c:	461a      	mov	r2, r3
 800972e:	4b33      	ldr	r3, [pc, #204]	; (80097fc <pal_os_datastore_read+0x10c>)
 8009730:	5c9b      	ldrb	r3, [r3, r2]
 8009732:	b29a      	uxth	r2, r3
 8009734:	8a7b      	ldrh	r3, [r7, #18]
 8009736:	4313      	orrs	r3, r2
 8009738:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 800973a:	8a7b      	ldrh	r3, [r7, #18]
 800973c:	2b40      	cmp	r3, #64	; 0x40
 800973e:	d80e      	bhi.n	800975e <pal_os_datastore_read+0x6e>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 8009740:	7d7b      	ldrb	r3, [r7, #21]
 8009742:	4a2e      	ldr	r2, [pc, #184]	; (80097fc <pal_os_datastore_read+0x10c>)
 8009744:	441a      	add	r2, r3
 8009746:	8a7b      	ldrh	r3, [r7, #18]
 8009748:	68b8      	ldr	r0, [r7, #8]
 800974a:	4611      	mov	r1, r2
 800974c:	461a      	mov	r2, r3
 800974e:	f008 fed9 	bl	8012504 <memcpy>
                *p_buffer_length = data_length;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	8a7a      	ldrh	r2, [r7, #18]
 8009756:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 8009758:	2300      	movs	r3, #0
 800975a:	82fb      	strh	r3, [r7, #22]
            }
            break;
 800975c:	e048      	b.n	80097f0 <pal_os_datastore_read+0x100>
 800975e:	e047      	b.n	80097f0 <pal_os_datastore_read+0x100>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8009760:	7d7b      	ldrb	r3, [r7, #21]
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	757a      	strb	r2, [r7, #21]
 8009766:	461a      	mov	r2, r3
 8009768:	4b25      	ldr	r3, [pc, #148]	; (8009800 <pal_os_datastore_read+0x110>)
 800976a:	5c9b      	ldrb	r3, [r3, r2]
 800976c:	b29b      	uxth	r3, r3
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8009772:	7d7b      	ldrb	r3, [r7, #21]
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	757a      	strb	r2, [r7, #21]
 8009778:	461a      	mov	r2, r3
 800977a:	4b21      	ldr	r3, [pc, #132]	; (8009800 <pal_os_datastore_read+0x110>)
 800977c:	5c9b      	ldrb	r3, [r3, r2]
 800977e:	b29a      	uxth	r2, r3
 8009780:	8a7b      	ldrh	r3, [r7, #18]
 8009782:	4313      	orrs	r3, r2
 8009784:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 8009786:	7d7b      	ldrb	r3, [r7, #21]
 8009788:	4a1d      	ldr	r2, [pc, #116]	; (8009800 <pal_os_datastore_read+0x110>)
 800978a:	441a      	add	r2, r3
 800978c:	8a7b      	ldrh	r3, [r7, #18]
 800978e:	68b8      	ldr	r0, [r7, #8]
 8009790:	4611      	mov	r1, r2
 8009792:	461a      	mov	r2, r3
 8009794:	f008 feb6 	bl	8012504 <memcpy>
            *p_buffer_length = data_length;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	8a7a      	ldrh	r2, [r7, #18]
 800979c:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 800979e:	2300      	movs	r3, #0
 80097a0:	82fb      	strh	r3, [r7, #22]
            break;
 80097a2:	e025      	b.n	80097f0 <pal_os_datastore_read+0x100>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 80097a4:	7d7b      	ldrb	r3, [r7, #21]
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	757a      	strb	r2, [r7, #21]
 80097aa:	461a      	mov	r2, r3
 80097ac:	4b15      	ldr	r3, [pc, #84]	; (8009804 <pal_os_datastore_read+0x114>)
 80097ae:	5c9b      	ldrb	r3, [r3, r2]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	021b      	lsls	r3, r3, #8
 80097b4:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 80097b6:	7d7b      	ldrb	r3, [r7, #21]
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	757a      	strb	r2, [r7, #21]
 80097bc:	461a      	mov	r2, r3
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <pal_os_datastore_read+0x114>)
 80097c0:	5c9b      	ldrb	r3, [r3, r2]
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	8a7b      	ldrh	r3, [r7, #18]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 80097ca:	7d7b      	ldrb	r3, [r7, #21]
 80097cc:	4a0d      	ldr	r2, [pc, #52]	; (8009804 <pal_os_datastore_read+0x114>)
 80097ce:	441a      	add	r2, r3
 80097d0:	8a7b      	ldrh	r3, [r7, #18]
 80097d2:	68b8      	ldr	r0, [r7, #8]
 80097d4:	4611      	mov	r1, r2
 80097d6:	461a      	mov	r2, r3
 80097d8:	f008 fe94 	bl	8012504 <memcpy>
            *p_buffer_length = data_length;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8a7a      	ldrh	r2, [r7, #18]
 80097e0:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80097e2:	2300      	movs	r3, #0
 80097e4:	82fb      	strh	r3, [r7, #22]
            break;
 80097e6:	e003      	b.n	80097f0 <pal_os_datastore_read+0x100>
        }
        default:
        {
            *p_buffer_length = 0;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	801a      	strh	r2, [r3, #0]
            break;
 80097ee:	bf00      	nop
        }
    }

    return return_status;
 80097f0:	8afb      	ldrh	r3, [r7, #22]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	1ffed13c 	.word	0x1ffed13c
 8009800:	1ffee364 	.word	0x1ffee364
 8009804:	1ffee3a8 	.word	0x1ffee3a8

08009808 <pal_os_event_start>:
/// @cond hidden

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
    if (FALSE == p_pal_os_event->is_event_triggered)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d109      	bne.n	8009830 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2201      	movs	r2, #1
 8009820:	701a      	strb	r2, [r3, #0]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	68b9      	ldr	r1, [r7, #8]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800982c:	f000 f848 	bl	80098c0 <pal_os_event_register_callback_oneshot>
    }
}
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop

08009838 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
    //lint --e{714} suppress "The API pal_os_event_stop is not exposed in header file but used as extern in 
    //optiga_cmd.c"
    p_pal_os_event->is_event_triggered = FALSE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
}
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d007      	beq.n	8009870 <pal_os_event_create+0x20>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d004      	beq.n	8009870 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 8009866:	4805      	ldr	r0, [pc, #20]	; (800987c <pal_os_event_create+0x2c>)
 8009868:	6879      	ldr	r1, [r7, #4]
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	f7ff ffcc 	bl	8009808 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8009870:	4b02      	ldr	r3, [pc, #8]	; (800987c <pal_os_event_create+0x2c>)
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	1ffed688 	.word	0x1ffed688

08009880 <CCU43_1_IRQHandler>:

void pal_os_event_trigger_registered_callback(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
    register_callback callback;

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    TIMER_ClearEvent(&scheduler_timer);
 8009886:	480c      	ldr	r0, [pc, #48]	; (80098b8 <CCU43_1_IRQHandler+0x38>)
 8009888:	f7fd fe92 	bl	80075b0 <TIMER_ClearEvent>
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_Stop(&scheduler_timer);
 800988c:	480a      	ldr	r0, [pc, #40]	; (80098b8 <CCU43_1_IRQHandler+0x38>)
 800988e:	f7fd fdbd 	bl	800740c <TIMER_Stop>
    TIMER_Clear(&scheduler_timer);
 8009892:	4809      	ldr	r0, [pc, #36]	; (80098b8 <CCU43_1_IRQHandler+0x38>)
 8009894:	f7fd fe9e 	bl	80075d4 <TIMER_Clear>

    if (pal_os_event_0.callback_registered)
 8009898:	4b08      	ldr	r3, [pc, #32]	; (80098bc <CCU43_1_IRQHandler+0x3c>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d007      	beq.n	80098b0 <CCU43_1_IRQHandler+0x30>
    {
        callback = pal_os_event_0.callback_registered;
 80098a0:	4b06      	ldr	r3, [pc, #24]	; (80098bc <CCU43_1_IRQHandler+0x3c>)
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	607b      	str	r3, [r7, #4]
        callback((void * )pal_os_event_0.callback_ctx);
 80098a6:	4b05      	ldr	r3, [pc, #20]	; (80098bc <CCU43_1_IRQHandler+0x3c>)
 80098a8:	689a      	ldr	r2, [r3, #8]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
    }
}
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	1ffed094 	.word	0x1ffed094
 80098bc:	1ffed688 	.word	0x1ffed688

080098c0 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	603b      	str	r3, [r7, #0]
    p_pal_os_event->callback_registered = callback;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	605a      	str	r2, [r3, #4]
    p_pal_os_event->callback_ctx = callback_args;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	609a      	str	r2, [r3, #8]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // The following steps related to TIMER must be taken care while porting to different platform
    //lint --e{534} suppress "Error handling is not required so return value is not checked"
    TIMER_SetTimeInterval(&scheduler_timer, (time_us * 100));
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2264      	movs	r2, #100	; 0x64
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	4805      	ldr	r0, [pc, #20]	; (80098f8 <pal_os_event_register_callback_oneshot+0x38>)
 80098e4:	4619      	mov	r1, r3
 80098e6:	f7fd fdcf 	bl	8007488 <TIMER_SetTimeInterval>
    TIMER_Start(&scheduler_timer);
 80098ea:	4803      	ldr	r0, [pc, #12]	; (80098f8 <pal_os_event_register_callback_oneshot+0x38>)
 80098ec:	f7fd fd70 	bl	80073d0 <TIMER_Start>
}
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	1ffed094 	.word	0x1ffed094

080098fc <pal_os_event_destroy>:

//lint --e{818,715} suppress "As there is no implementation, pal_os_event is not used"
void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
    
}
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop

08009910 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
}
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 800991c:	b480      	push	{r7}
 800991e:	af00      	add	r7, sp, #0
}
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <pal_os_calloc>:
{
    return (malloc(block_size));
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
    return (calloc(number_of_blocks, block_size));
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	f008 fda7 	bl	8012488 <calloc>
 800993a:	4603      	mov	r3, r0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <pal_os_free>:

void pal_os_free(void * p_block)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
    free(p_block);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f008 fdd1 	bl	80124f4 <free>
}
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	68b9      	ldr	r1, [r7, #8]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	f008 fdcb 	bl	8012504 <memcpy>
}
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
    memset(p_buffer, (int32_t)value, size);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	4619      	mov	r1, r3
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	f008 fdc7 	bl	801251a <memset>
}
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop

08009994 <CCU41_1_IRQHandler>:

/// @cond hidden
static volatile uint32_t g_tick_count = 0;

void delay_timer_isr(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
    TIMER_ClearEvent(&tick_timer);
 8009998:	4805      	ldr	r0, [pc, #20]	; (80099b0 <CCU41_1_IRQHandler+0x1c>)
 800999a:	f7fd fe09 	bl	80075b0 <TIMER_ClearEvent>
    (void)TIMER_Clear(&tick_timer);
 800999e:	4804      	ldr	r0, [pc, #16]	; (80099b0 <CCU41_1_IRQHandler+0x1c>)
 80099a0:	f7fd fe18 	bl	80075d4 <TIMER_Clear>
    g_tick_count += 1U;
 80099a4:	4b03      	ldr	r3, [pc, #12]	; (80099b4 <CCU41_1_IRQHandler+0x20>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3301      	adds	r3, #1
 80099aa:	4a02      	ldr	r2, [pc, #8]	; (80099b4 <CCU41_1_IRQHandler+0x20>)
 80099ac:	6013      	str	r3, [r2, #0]
}
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	1ffed064 	.word	0x1ffed064
 80099b4:	1ffed698 	.word	0x1ffed698

080099b8 <pal_os_timer_get_time_in_microseconds>:

/// @endcond


uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 80099b8:	b480      	push	{r7}
 80099ba:	af00      	add	r7, sp, #0
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // This API is needed to support optiga cmd scheduler. 
    static uint32_t count = 0;
    // The implementation must ensure that every invocation of this API returns a unique value.
    return (count++);
 80099bc:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <pal_os_timer_get_time_in_microseconds+0x18>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	4903      	ldr	r1, [pc, #12]	; (80099d0 <pal_os_timer_get_time_in_microseconds+0x18>)
 80099c4:	600a      	str	r2, [r1, #0]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	1ffed69c 	.word	0x1ffed69c

080099d4 <pal_os_timer_get_time_in_milliseconds>:

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 80099d4:	b480      	push	{r7}
 80099d6:	af00      	add	r7, sp, #0
    return (g_tick_count);
 80099d8:	4b03      	ldr	r3, [pc, #12]	; (80099e8 <pal_os_timer_get_time_in_milliseconds+0x14>)
 80099da:	681b      	ldr	r3, [r3, #0]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	1ffed698 	.word	0x1ffed698

080099ec <pal_os_timer_delay_in_milliseconds>:

void pal_os_timer_delay_in_milliseconds(uint16_t milliseconds)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	80fb      	strh	r3, [r7, #6]
    uint32_t start_time;
    uint32_t current_time;
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
 80099f6:	f7ff ffed 	bl	80099d4 <pal_os_timer_get_time_in_milliseconds>
 80099fa:	6138      	str	r0, [r7, #16]
    current_time = start_time;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	60fb      	str	r3, [r7, #12]
    time_stamp_diff = current_time - start_time;
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	617b      	str	r3, [r7, #20]
    while (time_stamp_diff <= (uint32_t)milliseconds)
 8009a08:	e00e      	b.n	8009a28 <pal_os_timer_delay_in_milliseconds+0x3c>
    {
        current_time = pal_os_timer_get_time_in_milliseconds();
 8009a0a:	f7ff ffe3 	bl	80099d4 <pal_os_timer_get_time_in_milliseconds>
 8009a0e:	60f8      	str	r0, [r7, #12]
        time_stamp_diff = current_time - start_time;
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	617b      	str	r3, [r7, #20]
        if (start_time > current_time)
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d903      	bls.n	8009a28 <pal_os_timer_delay_in_milliseconds+0x3c>
        {
            time_stamp_diff = (0xFFFFFFFF + (current_time - start_time)) + 0x01;
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	617b      	str	r3, [r7, #20]
    uint32_t time_stamp_diff;

    start_time = pal_os_timer_get_time_in_milliseconds();
    current_time = start_time;
    time_stamp_diff = current_time - start_time;
    while (time_stamp_diff <= (uint32_t)milliseconds)
 8009a28:	88fa      	ldrh	r2, [r7, #6]
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d2ec      	bcs.n	8009a0a <pal_os_timer_delay_in_milliseconds+0x1e>
        if (start_time > current_time)
        {
            time_stamp_diff = (0xFFFFFFFF + (current_time - start_time)) + 0x01;
        }        
    }
}
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop

08009a38 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	6991      	ldr	r1, [r2, #24]
 8009a66:	887a      	ldrh	r2, [r7, #2]
 8009a68:	4608      	mov	r0, r1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4798      	blx	r3
}
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
    if (NULL != me)
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
    }
}
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop

08009a88 <optiga_util_write_data_wrapper>:
                                                             uint16_t optiga_oid,
                                                             uint8_t write_type,
                                                             uint16_t offset,
                                                             const uint8_t * p_buffer,
                                                             uint16_t length)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	4608      	mov	r0, r1
 8009a92:	4611      	mov	r1, r2
 8009a94:	461a      	mov	r2, r3
 8009a96:	4603      	mov	r3, r0
 8009a98:	817b      	strh	r3, [r7, #10]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	727b      	strb	r3, [r7, #9]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8009aa2:	f240 3302 	movw	r3, #770	; 0x302
 8009aa6:	82fb      	strh	r3, [r7, #22]
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d006      	beq.n	8009abc <optiga_util_write_data_wrapper+0x34>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <optiga_util_write_data_wrapper+0x34>
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d103      	bne.n	8009ac4 <optiga_util_write_data_wrapper+0x3c>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8009abc:	f240 3303 	movw	r3, #771	; 0x303
 8009ac0:	82fb      	strh	r3, [r7, #22]
            break;
 8009ac2:	e045      	b.n	8009b50 <optiga_util_write_data_wrapper+0xc8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8c1b      	ldrh	r3, [r3, #32]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d103      	bne.n	8009ad4 <optiga_util_write_data_wrapper+0x4c>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8009acc:	f240 3305 	movw	r3, #773	; 0x305
 8009ad0:	82fb      	strh	r3, [r7, #22]
            break;
 8009ad2:	e03d      	b.n	8009b50 <optiga_util_write_data_wrapper+0xc8>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	2214      	movs	r2, #20
 8009ae6:	f7ff ff45 	bl	8009974 <pal_os_memset>

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
 8009aea:	7a7b      	ldrb	r3, [r7, #9]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d107      	bne.n	8009b00 <optiga_util_write_data_wrapper+0x78>
        {
            p_params->count = p_buffer[0];
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	781a      	ldrb	r2, [r3, #0]
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	739a      	strb	r2, [r3, #14]
            p_params->buffer = NULL;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	2200      	movs	r2, #0
 8009afc:	609a      	str	r2, [r3, #8]
 8009afe:	e005      	b.n	8009b0c <optiga_util_write_data_wrapper+0x84>
        }
        else
        {
            p_params->count = 0;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2200      	movs	r2, #0
 8009b04:	739a      	strb	r2, [r3, #14]
            p_params->buffer = p_buffer;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	6a3a      	ldr	r2, [r7, #32]
 8009b0a:	609a      	str	r2, [r3, #8]
        }
        p_params->oid = optiga_oid;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	897a      	ldrh	r2, [r7, #10]
 8009b10:	801a      	strh	r2, [r3, #0]
        p_params->offset = offset;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	88fa      	ldrh	r2, [r7, #6]
 8009b16:	805a      	strh	r2, [r3, #2]
        p_params->data_or_metadata = 0;//for Data
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	731a      	strb	r2, [r3, #12]
        p_params->size = length;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b22:	809a      	strh	r2, [r3, #4]
        p_params->written_size = 0;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2200      	movs	r2, #0
 8009b28:	80da      	strh	r2, [r3, #6]
        p_params->write_type = write_type;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	7a7a      	ldrb	r2, [r7, #9]
 8009b2e:	735a      	strb	r2, [r3, #13]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	695a      	ldr	r2, [r3, #20]
 8009b34:	7a7b      	ldrb	r3, [r7, #9]
 8009b36:	4610      	mov	r0, r2
 8009b38:	4619      	mov	r1, r3
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	f004 f808 	bl	800db50 <optiga_cmd_set_data_object>
 8009b40:	4603      	mov	r3, r0
 8009b42:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8009b44:	8afb      	ldrh	r3, [r7, #22]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <optiga_util_write_data_wrapper+0xc8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	841a      	strh	r2, [r3, #32]
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f7ff ff8f 	bl	8009a74 <optiga_util_reset_protection_level>

    return (return_value);
 8009b56:	8afb      	ldrh	r3, [r7, #22]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d100      	bne.n	8009b7a <optiga_util_create+0x1a>
        {
            break;
 8009b78:	e023      	b.n	8009bc2 <optiga_util_create+0x62>
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 8009b7a:	2001      	movs	r0, #1
 8009b7c:	2124      	movs	r1, #36	; 0x24
 8009b7e:	f7ff fed3 	bl	8009928 <pal_os_calloc>
 8009b82:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d100      	bne.n	8009b8c <optiga_util_create+0x2c>
        {
            break;
 8009b8a:	e01a      	b.n	8009bc2 <optiga_util_create+0x62>
        }

        me->handler = handler;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	490a      	ldr	r1, [pc, #40]	; (8009bcc <optiga_util_create+0x6c>)
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	f003 fbe9 	bl	800d37c <optiga_cmd_create>
 8009baa:	4602      	mov	r2, r0
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <optiga_util_create+0x62>
        {
            pal_os_free(me);
 8009bb8:	6978      	ldr	r0, [r7, #20]
 8009bba:	f7ff fec3 	bl	8009944 <pal_os_free>
            me = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]
        }
    } while (FALSE);

    return (me);
 8009bc2:	697b      	ldr	r3, [r7, #20]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	08009a49 	.word	0x08009a49

08009bd0 <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d103      	bne.n	8009be6 <optiga_util_destroy+0x16>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8009bde:	f240 3303 	movw	r3, #771	; 0x303
 8009be2:	81fb      	strh	r3, [r7, #14]
            break;
 8009be4:	e011      	b.n	8009c0a <optiga_util_destroy+0x3a>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	8c1b      	ldrh	r3, [r3, #32]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d103      	bne.n	8009bf6 <optiga_util_destroy+0x26>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8009bee:	f240 3305 	movw	r3, #773	; 0x305
 8009bf2:	81fb      	strh	r3, [r7, #14]
            break;
 8009bf4:	e009      	b.n	8009c0a <optiga_util_destroy+0x3a>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f003 fc36 	bl	800d46c <optiga_cmd_destroy>
 8009c00:	4603      	mov	r3, r0
 8009c02:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fe9d 	bl	8009944 <pal_os_free>
    } while (FALSE);
    return (return_value);
 8009c0a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8009c20:	f240 3302 	movw	r3, #770	; 0x302
 8009c24:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <optiga_util_open_application+0x20>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d103      	bne.n	8009c3c <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8009c34:	f240 3303 	movw	r3, #771	; 0x303
 8009c38:	81fb      	strh	r3, [r7, #14]
            break;
 8009c3a:	e01a      	b.n	8009c72 <optiga_util_open_application+0x5e>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	8c1b      	ldrh	r3, [r3, #32]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d103      	bne.n	8009c4c <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8009c44:	f240 3305 	movw	r3, #773	; 0x305
 8009c48:	81fb      	strh	r3, [r7, #14]
            break;
 8009c4a:	e012      	b.n	8009c72 <optiga_util_open_application+0x5e>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	841a      	strh	r2, [r3, #32]
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	78fb      	ldrb	r3, [r7, #3]
 8009c58:	4610      	mov	r0, r2
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f003 fd85 	bl	800d76c <optiga_cmd_open_application>
 8009c62:	4603      	mov	r3, r0
 8009c64:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8009c66:	89fb      	ldrh	r3, [r7, #14]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <optiga_util_open_application+0x5e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fefe 	bl	8009a74 <optiga_util_reset_protection_level>

    return (return_value);
 8009c78:	89fb      	ldrh	r3, [r7, #14]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop

08009c84 <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	817b      	strh	r3, [r7, #10]
 8009c92:	4613      	mov	r3, r2
 8009c94:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8009c96:	f240 3302 	movw	r3, #770	; 0x302
 8009c9a:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d009      	beq.n	8009cb6 <optiga_util_read_data+0x32>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <optiga_util_read_data+0x32>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <optiga_util_read_data+0x32>
            (NULL == buffer) || (NULL == length))
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d103      	bne.n	8009cbe <optiga_util_read_data+0x3a>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8009cb6:	f240 3303 	movw	r3, #771	; 0x303
 8009cba:	82fb      	strh	r3, [r7, #22]
            break;
 8009cbc:	e03c      	b.n	8009d38 <optiga_util_read_data+0xb4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	8c1b      	ldrh	r3, [r3, #32]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d103      	bne.n	8009cce <optiga_util_read_data+0x4a>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8009cc6:	f240 3305 	movw	r3, #773	; 0x305
 8009cca:	82fb      	strh	r3, [r7, #22]
            break;
 8009ccc:	e034      	b.n	8009d38 <optiga_util_read_data+0xb4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	2100      	movs	r1, #0
 8009cde:	2214      	movs	r2, #20
 8009ce0:	f7ff fe48 	bl	8009974 <pal_os_memset>

        p_params->oid = optiga_oid;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	897a      	ldrh	r2, [r7, #10]
 8009ce8:	801a      	strh	r2, [r3, #0]
        p_params->offset = offset;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	893a      	ldrh	r2, [r7, #8]
 8009cee:	805a      	strh	r2, [r3, #2]
        // set option to read data
        p_params->data_or_metadata = 0;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	729a      	strb	r2, [r3, #10]
        p_params->buffer = buffer;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	611a      	str	r2, [r3, #16]
        p_params->bytes_to_read = *length;
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	881a      	ldrh	r2, [r3, #0]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	809a      	strh	r2, [r3, #4]
        p_params->ref_bytes_to_read = length;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	60da      	str	r2, [r3, #12]
        p_params->accumulated_size = 0;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	80da      	strh	r2, [r3, #6]
        p_params->last_read_size = 0;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2200      	movs	r2, #0
 8009d14:	811a      	strh	r2, [r3, #8]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	695a      	ldr	r2, [r3, #20]
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	7a9b      	ldrb	r3, [r3, #10]
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	f003 fe46 	bl	800d9b4 <optiga_cmd_get_data_object>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8009d2c:	8afb      	ldrh	r3, [r7, #22]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <optiga_util_read_data+0xb4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7ff fe9b 	bl	8009a74 <optiga_util_reset_protection_level>

    return (return_value);
 8009d3e:	8afb      	ldrh	r3, [r7, #22]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <optiga_util_write_data>:
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
 8009d48:	b590      	push	{r4, r7, lr}
 8009d4a:	b089      	sub	sp, #36	; 0x24
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	4608      	mov	r0, r1
 8009d52:	4611      	mov	r1, r2
 8009d54:	461a      	mov	r2, r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	817b      	strh	r3, [r7, #10]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	727b      	strb	r3, [r7, #9]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8009d62:	f240 3303 	movw	r3, #771	; 0x303
 8009d66:	82fb      	strh	r3, [r7, #22]
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
 8009d68:	7a7b      	ldrb	r3, [r7, #9]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <optiga_util_write_data+0x2e>
 8009d6e:	7a7b      	ldrb	r3, [r7, #9]
 8009d70:	2b40      	cmp	r3, #64	; 0x40
 8009d72:	d000      	beq.n	8009d76 <optiga_util_write_data+0x2e>
        {
            break;
 8009d74:	e00c      	b.n	8009d90 <optiga_util_write_data+0x48>
        }
        return_value =  optiga_util_write_data_wrapper(me,
 8009d76:	8979      	ldrh	r1, [r7, #10]
 8009d78:	7a7a      	ldrb	r2, [r7, #9]
 8009d7a:	88fc      	ldrh	r4, [r7, #6]
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	4623      	mov	r3, r4
 8009d88:	f7ff fe7e 	bl	8009a88 <optiga_util_write_data_wrapper>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	82fb      	strh	r3, [r7, #22]
                                                       write_type,
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
 8009d90:	8afb      	ldrh	r3, [r7, #22]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd90      	pop	{r4, r7, pc}
 8009d9a:	bf00      	nop

08009d9c <optiga_crypt_generic_event_handler>:

#endif

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	807b      	strh	r3, [r7, #2]
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	60fb      	str	r3, [r7, #12]

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	859a      	strh	r2, [r3, #44]	; 0x2c
    me->handler(me->caller_context, event);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8009dba:	887a      	ldrh	r2, [r7, #2]
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4798      	blx	r3
}
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
    if (NULL != me)
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
    }
}
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop

08009ddc <optiga_crypt_sign>:
                                                uint8_t digest_length,
                                                optiga_key_id_t private_key,
                                                uint8_t * p_signature,
                                                uint16_t * p_signature_length,
                                                uint16_t salt_length)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	461a      	mov	r2, r3
 8009de8:	460b      	mov	r3, r1
 8009dea:	72fb      	strb	r3, [r7, #11]
 8009dec:	4613      	mov	r3, r2
 8009dee:	72bb      	strb	r3, [r7, #10]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8009df0:	f240 4302 	movw	r3, #1026	; 0x402
 8009df4:	82fb      	strh	r3, [r7, #22]
    optiga_calc_sign_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_digest) ||
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00c      	beq.n	8009e16 <optiga_crypt_sign+0x3a>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d008      	beq.n	8009e16 <optiga_crypt_sign+0x3a>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d005      	beq.n	8009e16 <optiga_crypt_sign+0x3a>
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <optiga_crypt_sign+0x3a>
            (NULL == p_signature) || (NULL == p_signature_length))
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d103      	bne.n	8009e1e <optiga_crypt_sign+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8009e16:	f240 4303 	movw	r3, #1027	; 0x403
 8009e1a:	82fb      	strh	r3, [r7, #22]
            break;
 8009e1c:	e031      	b.n	8009e82 <optiga_crypt_sign+0xa6>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d103      	bne.n	8009e2e <optiga_crypt_sign+0x52>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8009e26:	f240 4305 	movw	r3, #1029	; 0x405
 8009e2a:	82fb      	strh	r3, [r7, #22]
            break;
 8009e2c:	e029      	b.n	8009e82 <optiga_crypt_sign+0xa6>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2201      	movs	r2, #1
 8009e32:	859a      	strh	r2, [r3, #44]	; 0x2c

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f7ff fd98 	bl	8009974 <pal_os_memset>

        p_params->p_digest = p_digest;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	7aba      	ldrb	r2, [r7, #10]
 8009e4e:	739a      	strb	r2, [r3, #14]
        p_params->private_key_oid = private_key;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	8c3a      	ldrh	r2, [r7, #32]
 8009e54:	819a      	strh	r2, [r3, #12]
        p_params->p_signature = p_signature;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5a:	605a      	str	r2, [r3, #4]
        p_params->p_signature_length = p_signature_length;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e60:	609a      	str	r2, [r3, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        return_value = optiga_cmd_calc_sign(me->my_cmd,
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6a1a      	ldr	r2, [r3, #32]
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	f003 ffc5 	bl	800ddfc <optiga_cmd_calc_sign>
 8009e72:	4603      	mov	r3, r0
 8009e74:	82fb      	strh	r3, [r7, #22]
                                            signature_scheme,
                                            (optiga_calc_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8009e76:	8afb      	ldrh	r3, [r7, #22]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <optiga_crypt_sign+0xa6>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	859a      	strh	r2, [r3, #44]	; 0x2c
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff ffa0 	bl	8009dc8 <optiga_crypt_reset_protection_level>

    return (return_value);
 8009e88:	8afb      	ldrh	r3, [r7, #22]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop

08009e94 <optiga_crypt_verify>:
                                                  const uint8_t * p_signature,
                                                  uint16_t signature_length,
                                                  uint8_t public_key_source_type,
                                                  const void * p_public_key,
                                                  uint16_t salt_length)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	607a      	str	r2, [r7, #4]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	72fb      	strb	r3, [r7, #11]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	72bb      	strb	r3, [r7, #10]
    optiga_verify_sign_params_t * p_params;
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8009ea8:	f240 4302 	movw	r3, #1026	; 0x402
 8009eac:	82fb      	strh	r3, [r7, #22]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00c      	beq.n	8009ece <optiga_crypt_verify+0x3a>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d008      	beq.n	8009ece <optiga_crypt_verify+0x3a>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d005      	beq.n	8009ece <optiga_crypt_verify+0x3a>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <optiga_crypt_verify+0x3a>
 8009ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d103      	bne.n	8009ed6 <optiga_crypt_verify+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8009ece:	f240 4303 	movw	r3, #1027	; 0x403
 8009ed2:	82fb      	strh	r3, [r7, #22]
            break;
 8009ed4:	e03e      	b.n	8009f54 <optiga_crypt_verify+0xc0>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d103      	bne.n	8009ee6 <optiga_crypt_verify+0x52>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8009ede:	f240 4305 	movw	r3, #1029	; 0x405
 8009ee2:	82fb      	strh	r3, [r7, #22]
            break;
 8009ee4:	e036      	b.n	8009f54 <optiga_crypt_verify+0xc0>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	859a      	strh	r2, [r3, #44]	; 0x2c
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	f7ff fd3c 	bl	8009974 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_digest = p_digest;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	7aba      	ldrb	r2, [r7, #10]
 8009f06:	711a      	strb	r2, [r3, #4]
        p_params->p_signature = p_signature;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	6a3a      	ldr	r2, [r7, #32]
 8009f0c:	609a      	str	r2, [r3, #8]
        p_params->signature_length = signature_length;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f12:	819a      	strh	r2, [r3, #12]
        p_params->public_key_source_type = public_key_source_type;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009f1a:	739a      	strb	r2, [r3, #14]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8009f1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <optiga_crypt_verify+0x9a>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8009f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f26:	881a      	ldrh	r2, [r3, #0]
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	829a      	strh	r2, [r3, #20]
 8009f2c:	e002      	b.n	8009f34 <optiga_crypt_verify+0xa0>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f32:	611a      	str	r2, [r3, #16]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6a1a      	ldr	r2, [r3, #32]
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	f004 f886 	bl	800e050 <optiga_cmd_verify_sign>
 8009f44:	4603      	mov	r3, r0
 8009f46:	82fb      	strh	r3, [r7, #22]
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8009f48:	8afb      	ldrh	r3, [r7, #22]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <optiga_crypt_verify+0xc0>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	859a      	strh	r2, [r3, #44]	; 0x2c
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff ff37 	bl	8009dc8 <optiga_crypt_reset_protection_level>

    return (return_value);
 8009f5a:	8afb      	ldrh	r3, [r7, #22]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <optiga_crypt_get_random>:
                                                      uint8_t cmd_param,
                                                      uint8_t * p_random_data,
                                                      uint16_t random_data_length,
                                                      const uint8_t * p_optional_data,
                                                      uint16_t optional_data_length)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	607a      	str	r2, [r7, #4]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	460b      	mov	r3, r1
 8009f72:	72fb      	strb	r3, [r7, #11]
 8009f74:	4613      	mov	r3, r2
 8009f76:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8009f78:	f240 4302 	movw	r3, #1026	; 0x402
 8009f7c:	82fb      	strh	r3, [r7, #22]
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d103      	bne.n	8009f8e <optiga_crypt_get_random+0x2a>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8009f86:	f240 4305 	movw	r3, #1029	; 0x405
 8009f8a:	82fb      	strh	r3, [r7, #22]
            break;
 8009f8c:	e026      	b.n	8009fdc <optiga_crypt_get_random+0x78>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2201      	movs	r2, #1
 8009f92:	859a      	strh	r2, [r3, #44]	; 0x2c
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f7ff fce8 	bl	8009974 <pal_os_memset>

        p_params->optional_data = p_optional_data;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	6a3a      	ldr	r2, [r7, #32]
 8009fa8:	609a      	str	r2, [r3, #8]
        p_params->optional_data_length = optional_data_length;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fae:	805a      	strh	r2, [r3, #2]
        p_params->random_data = p_random_data;
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	605a      	str	r2, [r3, #4]
        p_params->random_data_length = random_data_length;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	893a      	ldrh	r2, [r7, #8]
 8009fba:	801a      	strh	r2, [r3, #0]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        return_value = optiga_cmd_get_random(me->my_cmd,
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	f003 fe38 	bl	800dc3c <optiga_cmd_get_random>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	82fb      	strh	r3, [r7, #22]
                                             cmd_param,
                                             (optiga_get_random_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8009fd0:	8afb      	ldrh	r3, [r7, #22]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <optiga_crypt_get_random+0x78>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	859a      	strh	r2, [r3, #44]	; 0x2c
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f7ff fef3 	bl	8009dc8 <optiga_crypt_reset_protection_level>

    return (return_value);
 8009fe2:	8afb      	ldrh	r3, [r7, #22]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <optiga_crypt_hash_generic>:
                                                        optiga_hash_context_t * hash_ctx,
                                                        uint32_t context_length,                                                        
                                                        const void * data_to_hash,
                                                        bool_t export_intermediate_ctx,
                                                        uint8_t * hash_output)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	70fb      	strb	r3, [r7, #3]
 8009ffe:	460b      	mov	r3, r1
 800a000:	70bb      	strb	r3, [r7, #2]
 800a002:	4613      	mov	r3, r2
 800a004:	707b      	strb	r3, [r7, #1]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 800a006:	f240 4302 	movw	r3, #1026	; 0x402
 800a00a:	81fb      	strh	r3, [r7, #14]
    optiga_calc_hash_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a010:	2b01      	cmp	r3, #1
 800a012:	d103      	bne.n	800a01c <optiga_crypt_hash_generic+0x30>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 800a014:	f240 4305 	movw	r3, #1029	; 0x405
 800a018:	81fb      	strh	r3, [r7, #14]
            break;
 800a01a:	e047      	b.n	800a0ac <optiga_crypt_hash_generic+0xc0>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	859a      	strh	r2, [r3, #44]	; 0x2c
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60bb      	str	r3, [r7, #8]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4618      	mov	r0, r3
 800a02a:	2100      	movs	r1, #0
 800a02c:	2220      	movs	r2, #32
 800a02e:	f7ff fca1 	bl	8009974 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = hash_sequence;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	78ba      	ldrb	r2, [r7, #2]
 800a036:	731a      	strb	r2, [r3, #12]
        p_params->p_hash_context = hash_ctx;
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	609a      	str	r2, [r3, #8]
        p_params->apparent_context_size = context_length;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	61da      	str	r2, [r3, #28]
        p_params->p_hash_data = NULL;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	605a      	str	r2, [r3, #4]
        p_params->p_hash_oid = NULL;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2200      	movs	r2, #0
 800a04e:	601a      	str	r2, [r3, #0]
        p_params->p_out_digest = hash_output;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a054:	615a      	str	r2, [r3, #20]
        p_params->export_hash_ctx = export_intermediate_ctx;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800a05c:	761a      	strb	r2, [r3, #24]
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
 800a05e:	78bb      	ldrb	r3, [r7, #2]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d002      	beq.n	800a06a <optiga_crypt_hash_generic+0x7e>
 800a064:	78bb      	ldrb	r3, [r7, #2]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d110      	bne.n	800a08c <optiga_crypt_hash_generic+0xa0>
        {
            if (source_of_data_to_hash)
 800a06a:	787b      	ldrb	r3, [r7, #1]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d003      	beq.n	800a078 <optiga_crypt_hash_generic+0x8c>
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	6a3a      	ldr	r2, [r7, #32]
 800a074:	605a      	str	r2, [r3, #4]
 800a076:	e009      	b.n	800a08c <optiga_crypt_hash_generic+0xa0>
            }
            else
            {
                p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	7b1b      	ldrb	r3, [r3, #12]
 800a07c:	f043 0310 	orr.w	r3, r3, #16
 800a080:	b2da      	uxtb	r2, r3
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	731a      	strb	r2, [r3, #12]
                p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	6a3a      	ldr	r2, [r7, #32]
 800a08a:	601a      	str	r2, [r3, #0]
            }
        }

        return_value = optiga_cmd_calc_hash(me->my_cmd,
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1a      	ldr	r2, [r3, #32]
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	4610      	mov	r0, r2
 800a094:	4619      	mov	r1, r3
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	f004 f9ca 	bl	800e430 <optiga_cmd_calc_hash>
 800a09c:	4603      	mov	r3, r0
 800a09e:	81fb      	strh	r3, [r7, #14]
                                            hash_algorithm,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 800a0a0:	89fb      	ldrh	r3, [r7, #14]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <optiga_crypt_hash_generic+0xc0>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	859a      	strh	r2, [r3, #44]	; 0x2c
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fe8b 	bl	8009dc8 <optiga_crypt_reset_protection_level>

    return (return_value);
 800a0b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	73fb      	strb	r3, [r7, #15]
    optiga_crypt_t * me = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d100      	bne.n	800a0d6 <optiga_crypt_create+0x1a>
        {
            break;
 800a0d4:	e023      	b.n	800a11e <optiga_crypt_create+0x62>
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	2130      	movs	r1, #48	; 0x30
 800a0da:	f7ff fc25 	bl	8009928 <pal_os_calloc>
 800a0de:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d100      	bne.n	800a0e8 <optiga_crypt_create+0x2c>
        {
            break;
 800a0e6:	e01a      	b.n	800a11e <optiga_crypt_create+0x62>
        }

        me->handler = handler;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	629a      	str	r2, [r3, #40]	; 0x28
        me->caller_context = caller_context;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	625a      	str	r2, [r3, #36]	; 0x24
        me->instance_state = OPTIGA_LIB_SUCCESS;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	490a      	ldr	r1, [pc, #40]	; (800a128 <optiga_crypt_create+0x6c>)
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	f003 f93b 	bl	800d37c <optiga_cmd_create>
 800a106:	4602      	mov	r2, r0
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	621a      	str	r2, [r3, #32]
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d104      	bne.n	800a11e <optiga_crypt_create+0x62>
        {
            pal_os_free(me);
 800a114:	6978      	ldr	r0, [r7, #20]
 800a116:	f7ff fc15 	bl	8009944 <pal_os_free>
            me = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	617b      	str	r3, [r7, #20]
        }

    } while (FALSE);

    return (me);
 800a11e:	697b      	ldr	r3, [r7, #20]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	08009d9d 	.word	0x08009d9d

0800a12c <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d103      	bne.n	800a142 <optiga_crypt_destroy+0x16>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800a13a:	f240 4303 	movw	r3, #1027	; 0x403
 800a13e:	81fb      	strh	r3, [r7, #14]
            break;
 800a140:	e011      	b.n	800a166 <optiga_crypt_destroy+0x3a>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a146:	2b01      	cmp	r3, #1
 800a148:	d103      	bne.n	800a152 <optiga_crypt_destroy+0x26>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 800a14a:	f240 4305 	movw	r3, #1029	; 0x405
 800a14e:	81fb      	strh	r3, [r7, #14]
            break;
 800a150:	e009      	b.n	800a166 <optiga_crypt_destroy+0x3a>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	4618      	mov	r0, r3
 800a158:	f003 f988 	bl	800d46c <optiga_cmd_destroy>
 800a15c:	4603      	mov	r3, r0
 800a15e:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff fbef 	bl	8009944 <pal_os_free>

    } while (FALSE);
    return (return_value);
 800a166:	89fb      	ldrh	r3, [r7, #14]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <optiga_crypt_random>:
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
 800a170:	b590      	push	{r4, r7, lr}
 800a172:	b089      	sub	sp, #36	; 0x24
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	461a      	mov	r2, r3
 800a17c:	460b      	mov	r3, r1
 800a17e:	72fb      	strb	r3, [r7, #11]
 800a180:	4613      	mov	r3, r2
 800a182:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 800a184:	f240 4302 	movw	r3, #1026	; 0x402
 800a188:	82fb      	strh	r3, [r7, #22]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <optiga_crypt_random+0x2e>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <optiga_crypt_random+0x2e>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d103      	bne.n	800a1a6 <optiga_crypt_random+0x36>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800a19e:	f240 4303 	movw	r3, #1027	; 0x403
 800a1a2:	82fb      	strh	r3, [r7, #22]
            break;
 800a1a4:	e00d      	b.n	800a1c2 <optiga_crypt_random+0x52>
        }
#endif
        return_value = optiga_crypt_get_random(me,
 800a1a6:	7afa      	ldrb	r2, [r7, #11]
 800a1a8:	893c      	ldrh	r4, [r7, #8]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	4623      	mov	r3, r4
 800a1ba:	f7ff fed3 	bl	8009f64 <optiga_crypt_get_random>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	82fb      	strh	r3, [r7, #22]
                                               random_data_length,
                                               NULL,
                                               0x00);
    } while (FALSE);

    return (return_value);
 800a1c2:	8afb      	ldrh	r3, [r7, #22]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	371c      	adds	r7, #28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd90      	pop	{r4, r7, pc}

0800a1cc <optiga_crypt_hash_start>:
#endif //OPTIGA_CRYPT_RANDOM_ENABLED

#ifdef OPTIGA_CRYPT_HASH_ENABLED
optiga_lib_status_t optiga_crypt_hash_start(optiga_crypt_t * me,
                                            optiga_hash_context_t * hash_ctx)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08a      	sub	sp, #40	; 0x28
 800a1d0:	af06      	add	r7, sp, #24
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 800a1d6:	f240 4302 	movw	r3, #1026	; 0x402
 800a1da:	81fb      	strh	r3, [r7, #14]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do  
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == hash_ctx))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d006      	beq.n	800a1f0 <optiga_crypt_hash_start+0x24>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <optiga_crypt_hash_start+0x24>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d103      	bne.n	800a1f8 <optiga_crypt_hash_start+0x2c>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800a1f0:	f240 4303 	movw	r3, #1027	; 0x403
 800a1f4:	81fb      	strh	r3, [r7, #14]
            break;
 800a1f6:	e013      	b.n	800a220 <optiga_crypt_hash_start+0x54>
        }
#endif
        return_value = optiga_crypt_hash_generic(me,
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	7a1a      	ldrb	r2, [r3, #8]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	2300      	movs	r3, #0
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	2300      	movs	r3, #0
 800a206:	9302      	str	r3, [sp, #8]
 800a208:	2301      	movs	r3, #1
 800a20a:	9303      	str	r3, [sp, #12]
 800a20c:	2300      	movs	r3, #0
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	4611      	mov	r1, r2
 800a214:	2200      	movs	r2, #0
 800a216:	2300      	movs	r3, #0
 800a218:	f7ff fee8 	bl	8009fec <optiga_crypt_hash_generic>
 800a21c:	4603      	mov	r3, r0
 800a21e:	81fb      	strh	r3, [r7, #14]
                                                 NULL,
                                                 TRUE,
                                                 NULL);
    } while (FALSE);

    return (return_value);
 800a220:	89fb      	ldrh	r3, [r7, #14]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop

0800a22c <optiga_crypt_hash_update>:

optiga_lib_status_t optiga_crypt_hash_update(optiga_crypt_t * me,
                                             optiga_hash_context_t * hash_ctx,
                                             uint8_t source_of_data_to_hash,
                                             const void * data_to_hash)
{
 800a22c:	b590      	push	{r4, r7, lr}
 800a22e:	b08d      	sub	sp, #52	; 0x34
 800a230:	af06      	add	r7, sp, #24
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	4613      	mov	r3, r2
 800a23a:	71fb      	strb	r3, [r7, #7]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 800a23c:	f240 4302 	movw	r3, #1026	; 0x402
 800a240:	82fb      	strh	r3, [r7, #22]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d009      	beq.n	800a25c <optiga_crypt_hash_update+0x30>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6a1b      	ldr	r3, [r3, #32]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d005      	beq.n	800a25c <optiga_crypt_hash_update+0x30>
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <optiga_crypt_hash_update+0x30>
            (NULL == hash_ctx) || (NULL == data_to_hash))
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d103      	bne.n	800a264 <optiga_crypt_hash_update+0x38>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800a25c:	f240 4303 	movw	r3, #1027	; 0x403
 800a260:	82fb      	strh	r3, [r7, #22]
            break;
 800a262:	e014      	b.n	800a28e <optiga_crypt_hash_update+0x62>
        }
#endif
        return_value = optiga_crypt_hash_generic(me,
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	7a19      	ldrb	r1, [r3, #8]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	79fc      	ldrb	r4, [r7, #7]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	9200      	str	r2, [sp, #0]
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	9302      	str	r3, [sp, #8]
 800a278:	2301      	movs	r3, #1
 800a27a:	9303      	str	r3, [sp, #12]
 800a27c:	2300      	movs	r3, #0
 800a27e:	9304      	str	r3, [sp, #16]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	2202      	movs	r2, #2
 800a284:	4623      	mov	r3, r4
 800a286:	f7ff feb1 	bl	8009fec <optiga_crypt_hash_generic>
 800a28a:	4603      	mov	r3, r0
 800a28c:	82fb      	strh	r3, [r7, #22]
                                                 data_to_hash,
                                                 TRUE,
                                                 NULL);
    } while (FALSE);

    return (return_value);
 800a28e:	8afb      	ldrh	r3, [r7, #22]
}
 800a290:	4618      	mov	r0, r3
 800a292:	371c      	adds	r7, #28
 800a294:	46bd      	mov	sp, r7
 800a296:	bd90      	pop	{r4, r7, pc}

0800a298 <optiga_crypt_hash_finalize>:

optiga_lib_status_t optiga_crypt_hash_finalize(optiga_crypt_t * me,
                                               optiga_hash_context_t * hash_ctx,
                                               uint8_t * hash_output)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08c      	sub	sp, #48	; 0x30
 800a29c:	af06      	add	r7, sp, #24
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 800a2a4:	f240 4302 	movw	r3, #1026	; 0x402
 800a2a8:	82fb      	strh	r3, [r7, #22]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d009      	beq.n	800a2c4 <optiga_crypt_hash_finalize+0x2c>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <optiga_crypt_hash_finalize+0x2c>
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <optiga_crypt_hash_finalize+0x2c>
            (NULL == hash_ctx) || (NULL == hash_output))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <optiga_crypt_hash_finalize+0x34>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800a2c4:	f240 4303 	movw	r3, #1027	; 0x403
 800a2c8:	82fb      	strh	r3, [r7, #22]
            break;
 800a2ca:	e013      	b.n	800a2f4 <optiga_crypt_hash_finalize+0x5c>
        }
#endif
        return_value = optiga_crypt_hash_generic(me,
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	7a19      	ldrb	r1, [r3, #8]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	9200      	str	r2, [sp, #0]
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	9302      	str	r3, [sp, #8]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	9303      	str	r3, [sp, #12]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	9304      	str	r3, [sp, #16]
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f7ff fe7e 	bl	8009fec <optiga_crypt_hash_generic>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	82fb      	strh	r3, [r7, #22]
                                                 NULL,
                                                 FALSE,
                                                 hash_output);
    } while (FALSE);

    return (return_value);
 800a2f4:	8afb      	ldrh	r3, [r7, #22]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop

0800a300 <optiga_crypt_ecdsa_sign>:
                                            const uint8_t * digest,
                                            uint8_t digest_length,
                                            optiga_key_id_t private_key,
                                            uint8_t * signature,
                                            uint16_t * signature_length)
{
 800a300:	b590      	push	{r4, r7, lr}
 800a302:	b089      	sub	sp, #36	; 0x24
 800a304:	af04      	add	r7, sp, #16
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4611      	mov	r1, r2
 800a30c:	461a      	mov	r2, r3
 800a30e:	460b      	mov	r3, r1
 800a310:	71fb      	strb	r3, [r7, #7]
 800a312:	4613      	mov	r3, r2
 800a314:	80bb      	strh	r3, [r7, #4]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_sign(me,
 800a316:	79fc      	ldrb	r4, [r7, #7]
 800a318:	88bb      	ldrh	r3, [r7, #4]
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	9302      	str	r3, [sp, #8]
 800a324:	2300      	movs	r3, #0
 800a326:	9303      	str	r3, [sp, #12]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	2111      	movs	r1, #17
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	4623      	mov	r3, r4
 800a330:	f7ff fd54 	bl	8009ddc <optiga_crypt_sign>
 800a334:	4603      	mov	r3, r0
                              digest_length,
                              private_key,
                              signature,
                              signature_length,
                              0x0000));
}
 800a336:	4618      	mov	r0, r3
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd90      	pop	{r4, r7, pc}
 800a33e:	bf00      	nop

0800a340 <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
 800a340:	b590      	push	{r4, r7, lr}
 800a342:	b08b      	sub	sp, #44	; 0x2c
 800a344:	af06      	add	r7, sp, #24
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	4613      	mov	r3, r2
 800a34e:	71fb      	strb	r3, [r7, #7]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_verify(me,
 800a350:	79fc      	ldrb	r4, [r7, #7]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	8c3b      	ldrh	r3, [r7, #32]
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a35e:	9302      	str	r3, [sp, #8]
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	2300      	movs	r3, #0
 800a366:	9304      	str	r3, [sp, #16]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	2111      	movs	r1, #17
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	4623      	mov	r3, r4
 800a370:	f7ff fd90 	bl	8009e94 <optiga_crypt_verify>
 800a374:	4603      	mov	r3, r0
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
 800a376:	4618      	mov	r0, r3
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd90      	pop	{r4, r7, pc}
 800a37e:	bf00      	nop

0800a380 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 800a388:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a38c:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a394:	2b03      	cmp	r3, #3
 800a396:	d025      	beq.n	800a3e4 <ifx_i2c_open+0x64>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	609a      	str	r2, [r3, #8]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d900      	bls.n	800a3b4 <ifx_i2c_open+0x34>
            {
                break;
 800a3b2:	e017      	b.n	800a3e4 <ifx_i2c_open+0x64>
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	22b1      	movs	r2, #177	; 0xb1
 800a3b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            p_ctx->do_pal_init = TRUE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            api_status = ifx_i2c_init(p_ctx);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f8ab 	bl	800a528 <ifx_i2c_init>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 800a3d6:	89fb      	ldrh	r3, [r7, #14]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d103      	bne.n	800a3e4 <ifx_i2c_open+0x64>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2203      	movs	r2, #3
 800a3e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
            }
        }while(FALSE);
    }
    return (api_status);
 800a3e4:	89fb      	ldrh	r3, [r7, #14]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop

0800a3f0 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	603b      	str	r3, [r7, #0]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 800a400:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a404:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d126      	bne.n	800a45e <ifx_i2c_transceive+0x6e>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a416:	2b03      	cmp	r3, #3
 800a418:	d021      	beq.n	800a45e <ifx_i2c_transceive+0x6e>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	61da      	str	r2, [r3, #28]
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a3a      	ldr	r2, [r7, #32]
 800a424:	621a      	str	r2, [r3, #32]
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_transceive(p_ctx,
 800a426:	88fa      	ldrh	r2, [r7, #6]
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	68b9      	ldr	r1, [r7, #8]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	f001 fa15 	bl	800b860 <ifx_i2c_tl_transceive>
 800a436:	4603      	mov	r3, r0
 800a438:	82fb      	strh	r3, [r7, #22]
                                           (uint8_t * )p_tx_data,
                                           (tx_data_length),
                                           (uint8_t * )p_rx_buffer,
                                           p_rx_buffer_len);
        if (IFX_I2C_STACK_SUCCESS == api_status)
 800a43a:	8afb      	ldrh	r3, [r7, #22]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d103      	bne.n	800a448 <ifx_i2c_transceive+0x58>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2203      	movs	r2, #3
 800a444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 800a448:	8afb      	ldrh	r3, [r7, #22]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d107      	bne.n	800a45e <ifx_i2c_transceive+0x6e>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a452:	2b00      	cmp	r3, #0
 800a454:	d103      	bne.n	800a45e <ifx_i2c_transceive+0x6e>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2203      	movs	r2, #3
 800a45a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        }
    }
    return (api_status);
 800a45e:	8afb      	ldrh	r3, [r7, #22]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 800a470:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a474:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d01e      	beq.n	800a4be <ifx_i2c_close+0x56>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 800a480:	2300      	movs	r3, #0
 800a482:	81fb      	strh	r3, [r7, #14]
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
        }
#else
        ifx_i2c_tl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, NULL, 0);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	2100      	movs	r1, #0
 800a488:	2200      	movs	r2, #0
 800a48a:	2300      	movs	r3, #0
 800a48c:	f000 f81c 	bl	800a4c8 <ifx_i2c_tl_event_handler>
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        // Close I2C master
        pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe ff69 	bl	800936c <pal_i2c_deinit>
        // Also power off the device
        pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fe8c 	bl	80091bc <pal_gpio_set_low>
        pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe fe87 	bl	80091bc <pal_gpio_set_low>
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2204      	movs	r2, #4
 800a4ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
#endif

    }
    return (api_status);
 800a4be:	89fb      	ldrh	r3, [r7, #14]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	607a      	str	r2, [r7, #4]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	817b      	strh	r3, [r7, #10]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d007      	beq.n	800a4f4 <ifx_i2c_tl_event_handler+0x2c>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	695b      	ldr	r3, [r3, #20]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	6991      	ldr	r1, [r2, #24]
 800a4ec:	897a      	ldrh	r2, [r7, #10]
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	897a      	ldrh	r2, [r7, #10]
 800a4f8:	851a      	strh	r2, [r3, #40]	; 0x28
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2204      	movs	r2, #4
 800a4fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    switch (p_ctx->state)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d000      	beq.n	800a50e <ifx_i2c_tl_event_handler+0x46>
                p_ctx->state = IFX_I2C_STATE_IDLE;
            }
            break;
        }
        default:
            break;
 800a50c:	e008      	b.n	800a520 <ifx_i2c_tl_event_handler+0x58>
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
    switch (p_ctx->state)
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 800a50e:	897b      	ldrh	r3, [r7, #10]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d104      	bne.n	800a51e <ifx_i2c_tl_event_handler+0x56>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            }
            break;
 800a51c:	e7ff      	b.n	800a51e <ifx_i2c_tl_event_handler+0x56>
 800a51e:	bf00      	nop
        }
        default:
            break;
    }
}
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop

0800a528 <ifx_i2c_init>:
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 800a530:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a534:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d004      	beq.n	800a54a <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 800a546:	2b00      	cmp	r3, #0
 800a548:	d151      	bne.n	800a5ee <ifx_i2c_init+0xc6>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
    {
        switch (p_ifx_i2c_context->reset_state)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a550:	2bb2      	cmp	r3, #178	; 0xb2
 800a552:	d024      	beq.n	800a59e <ifx_i2c_init+0x76>
 800a554:	2bb3      	cmp	r3, #179	; 0xb3
 800a556:	d042      	beq.n	800a5de <ifx_i2c_init+0xb6>
 800a558:	2bb1      	cmp	r3, #177	; 0xb1
 800a55a:	d000      	beq.n	800a55e <ifx_i2c_init+0x36>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 800a55c:	e046      	b.n	800a5ec <ifx_i2c_init+0xc4>
        switch (p_ifx_i2c_context->reset_state)
        {
            case IFX_I2C_STATE_RESET_PIN_LOW:
            {
                // Setting the Vdd & Reset pin to low
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a564:	2b00      	cmp	r3, #0
 800a566:	d104      	bne.n	800a572 <ifx_i2c_init+0x4a>
                {
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fe25 	bl	80091bc <pal_gpio_set_low>
                }
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fe20 	bl	80091bc <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	22b2      	movs	r2, #178	; 0xb2
 800a580:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a58a:	4618      	mov	r0, r3
 800a58c:	491f      	ldr	r1, [pc, #124]	; (800a60c <ifx_i2c_init+0xe4>)
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a594:	f7ff f994 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       RESET_LOW_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
 800a598:	2300      	movs	r3, #0
 800a59a:	81fb      	strh	r3, [r7, #14]
                break;
 800a59c:	e026      	b.n	800a5ec <ifx_i2c_init+0xc4>
            }
            case IFX_I2C_STATE_RESET_PIN_HIGH:
            {
                // Setting the Vdd & Reset pin to high
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d104      	bne.n	800a5b2 <ifx_i2c_init+0x8a>
                {
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fdf1 	bl	8009194 <pal_gpio_set_high>
                }
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fdec 	bl	8009194 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	22b3      	movs	r2, #179	; 0xb3
 800a5c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	490f      	ldr	r1, [pc, #60]	; (800a60c <ifx_i2c_init+0xe4>)
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800a5d4:	f7ff f974 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)ifx_i2c_init,
                                                       (void * )p_ifx_i2c_context,
                                                       STARTUP_TIME_MSEC);
                api_status = IFX_I2C_STACK_SUCCESS;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	81fb      	strh	r3, [r7, #14]
                break;
 800a5dc:	e006      	b.n	800a5ec <ifx_i2c_init+0xc4>
            }
            case IFX_I2C_STATE_RESET_INIT:
            {
                //Frequency and frame size negotiation
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
                api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	490b      	ldr	r1, [pc, #44]	; (800a610 <ifx_i2c_init+0xe8>)
 800a5e2:	f001 f911 	bl	800b808 <ifx_i2c_tl_init>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	81fb      	strh	r3, [r7, #14]
#else
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
 800a5ea:	bf00      	nop
            }
            default:
                break;
        }
    }
 800a5ec:	e009      	b.n	800a602 <ifx_i2c_init+0xda>
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	4905      	ldr	r1, [pc, #20]	; (800a610 <ifx_i2c_init+0xe8>)
 800a5fa:	f001 f905 	bl	800b808 <ifx_i2c_tl_init>
 800a5fe:	4603      	mov	r3, r0
 800a600:	81fb      	strh	r3, [r7, #14]
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
    }

    return (api_status);
 800a602:	89fb      	ldrh	r3, [r7, #14]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	0800a529 	.word	0x0800a529
 800a610:	0800a4c9 	.word	0x0800a4c9

0800a614 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4917      	ldr	r1, [pc, #92]	; (800a688 <ifx_i2c_dl_init+0x74>)
 800a62a:	f000 fc27 	bl	800ae7c <ifx_i2c_pl_init>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 800a634:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a638:	e021      	b.n	800a67e <ifx_i2c_dl_init+0x6a>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	675a      	str	r2, [r3, #116]	; 0x74
    p_ctx->dl.state = DL_STATE_IDLE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2203      	movs	r2, #3
 800a64c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2203      	movs	r2, #3
 800a654:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    p_ctx->dl.resynced = 0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    p_ctx->dl.error = 0;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	669a      	str	r2, [r3, #104]	; 0x68
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f203 22be 	addw	r2, r3, #702	; 0x2be
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	66da      	str	r2, [r3, #108]	; 0x6c

    return IFX_I2C_STACK_SUCCESS;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	0800aa25 	.word	0x0800aa25

0800a68c <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d102      	bne.n	800a6a8 <ifx_i2c_dl_send_frame+0x1c>
 800a6a2:	887b      	ldrh	r3, [r7, #2]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d102      	bne.n	800a6ae <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800a6a8:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a6ac:	e01a      	b.n	800a6e4 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    p_ctx->dl.retransmit_counter = 0;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    p_ctx->dl.action_rx_only = 0;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    p_ctx->dl.tx_buffer_size = frame_len;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	887a      	ldrh	r2, [r7, #2]
 800a6ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	661a      	str	r2, [r3, #96]	; 0x60

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 800a6d4:	887b      	ldrh	r3, [r7, #2]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	2200      	movs	r2, #0
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f000 f889 	bl	800a7f4 <ifx_i2c_dl_send_frame_internal>
 800a6e2:	4603      	mov	r3, r0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d002      	beq.n	800a704 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 800a6fe:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a702:	e017      	b.n	800a734 <ifx_i2c_dl_receive_frame+0x48>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2203      	movs	r2, #3
 800a708:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    p_ctx->dl.retransmit_counter = 0;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    p_ctx->dl.action_rx_only = 1;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800a71c:	f7ff f95a 	bl	80099d4 <pal_os_timer_get_time_in_milliseconds>
 800a720:	4602      	mov	r2, r0
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	671a      	str	r2, [r3, #112]	; 0x70
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a04      	ldr	r2, [pc, #16]	; (800a73c <ifx_i2c_dl_receive_frame+0x50>)
 800a72a:	661a      	str	r2, [r3, #96]	; 0x60

    return (ifx_i2c_pl_receive_frame(p_ctx));
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fc1b 	bl	800af68 <ifx_i2c_pl_receive_frame>
 800a732:	4603      	mov	r3, r0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	0002bf20 	.word	0x0002bf20

0800a740 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	460a      	mov	r2, r1
 800a74a:	80fb      	strh	r3, [r7, #6]
 800a74c:	4613      	mov	r3, r2
 800a74e:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 800a750:	797b      	ldrb	r3, [r7, #5]
 800a752:	b29a      	uxth	r2, r3
 800a754:	88fb      	ldrh	r3, [r7, #6]
 800a756:	4053      	eors	r3, r2
 800a758:	b29b      	uxth	r3, r3
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 800a75e:	89fb      	ldrh	r3, [r7, #14]
 800a760:	f003 030f 	and.w	r3, r3, #15
 800a764:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 800a766:	89bb      	ldrh	r3, [r7, #12]
 800a768:	011b      	lsls	r3, r3, #4
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	89fb      	ldrh	r3, [r7, #14]
 800a76e:	4053      	eors	r3, r2
 800a770:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 800a772:	897b      	ldrh	r3, [r7, #10]
 800a774:	091b      	lsrs	r3, r3, #4
 800a776:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 800a778:	897b      	ldrh	r3, [r7, #10]
 800a77a:	005b      	lsls	r3, r3, #1
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	893b      	ldrh	r3, [r7, #8]
 800a780:	4053      	eors	r3, r2
 800a782:	b29b      	uxth	r3, r3
 800a784:	011b      	lsls	r3, r3, #4
 800a786:	b29a      	uxth	r2, r3
 800a788:	89bb      	ldrh	r3, [r7, #12]
 800a78a:	4053      	eors	r3, r2
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	b29a      	uxth	r2, r3
 800a792:	893b      	ldrh	r3, [r7, #8]
 800a794:	4053      	eors	r3, r2
 800a796:	b29a      	uxth	r2, r3
 800a798:	88fb      	ldrh	r3, [r7, #6]
 800a79a:	0a1b      	lsrs	r3, r3, #8
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	4053      	eors	r3, r2
 800a7a0:	b29b      	uxth	r3, r3
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop

0800a7b0 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	81fb      	strh	r3, [r7, #14]
 800a7c4:	e00d      	b.n	800a7e2 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 800a7c6:	89fb      	ldrh	r3, [r7, #14]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	89ba      	ldrh	r2, [r7, #12]
 800a7d0:	4610      	mov	r0, r2
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	f7ff ffb4 	bl	800a740 <ifx_i2c_dl_calc_crc_byte>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	81bb      	strh	r3, [r7, #12]
_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
    uint16_t i;
    uint16_t crc = 0;

    for (i = 0; i < data_len; i++)
 800a7dc:	89fb      	ldrh	r3, [r7, #14]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	81fb      	strh	r3, [r7, #14]
 800a7e2:	89fa      	ldrh	r2, [r7, #14]
 800a7e4:	887b      	ldrh	r3, [r7, #2]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d3ed      	bcc.n	800a7c6 <ifx_i2c_dl_calc_crc+0x16>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
    }

    return (crc);
 800a7ea:	89bb      	ldrh	r3, [r7, #12]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	4608      	mov	r0, r1
 800a7fe:	4611      	mov	r1, r2
 800a800:	461a      	mov	r2, r3
 800a802:	4603      	mov	r3, r0
 800a804:	807b      	strh	r3, [r7, #2]
 800a806:	460b      	mov	r3, r1
 800a808:	707b      	strb	r3, [r7, #1]
 800a80a:	4613      	mov	r3, r2
 800a80c:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a814:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 800a816:	787b      	ldrb	r3, [r7, #1]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d108      	bne.n	800a82e <ifx_i2c_dl_send_frame_internal+0x3a>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a822:	b29b      	uxth	r3, r3
 800a824:	3301      	adds	r3, #1
 800a826:	b29b      	uxth	r3, r3
 800a828:	f003 0303 	and.w	r3, r3, #3
 800a82c:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a832:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 800a834:	787b      	ldrb	r3, [r7, #1]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d104      	bne.n	800a844 <ifx_i2c_dl_send_frame_internal+0x50>
    {
        ack_nr = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a842:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 800a844:	787b      	ldrb	r3, [r7, #1]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d107      	bne.n	800a85a <ifx_i2c_dl_send_frame_internal+0x66>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a850:	2b09      	cmp	r3, #9
 800a852:	d102      	bne.n	800a85a <ifx_i2c_dl_send_frame_internal+0x66>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a858:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 800a85a:	8afb      	ldrh	r3, [r7, #22]
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	787b      	ldrb	r3, [r7, #1]
 800a868:	015b      	lsls	r3, r3, #5
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	4313      	orrs	r3, r2
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 800a874:	887b      	ldrh	r3, [r7, #2]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d022      	beq.n	800a8c0 <ifx_i2c_dl_send_frame_internal+0xcc>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 800a87a:	783b      	ldrb	r3, [r7, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d004      	beq.n	800a88a <ifx_i2c_dl_send_frame_internal+0x96>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <ifx_i2c_dl_send_frame_internal+0xac>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a890:	3301      	adds	r3, #1
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800a8be:	e006      	b.n	800a8ce <ifx_i2c_dl_send_frame_internal+0xda>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	887a      	ldrh	r2, [r7, #2]
 800a8d4:	0a12      	lsrs	r2, r2, #8
 800a8d6:	b292      	uxth	r2, r2
 800a8d8:	b2d2      	uxtb	r2, r2
 800a8da:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	3302      	adds	r3, #2
 800a8e0:	887a      	ldrh	r2, [r7, #2]
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 800a8e6:	887b      	ldrh	r3, [r7, #2]
 800a8e8:	3303      	adds	r3, #3
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	6938      	ldr	r0, [r7, #16]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	f7ff ff5e 	bl	800a7b0 <ifx_i2c_dl_calc_crc>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 800a8f8:	887b      	ldrh	r3, [r7, #2]
 800a8fa:	3303      	adds	r3, #3
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	4413      	add	r3, r2
 800a902:	89fa      	ldrh	r2, [r7, #14]
 800a904:	0a12      	lsrs	r2, r2, #8
 800a906:	b292      	uxth	r2, r2
 800a908:	b2d2      	uxtb	r2, r2
 800a90a:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 800a90c:	887b      	ldrh	r3, [r7, #2]
 800a90e:	3304      	adds	r3, #4
 800a910:	461a      	mov	r2, r3
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	4413      	add	r3, r2
 800a916:	89fa      	ldrh	r2, [r7, #14]
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 800a91c:	887b      	ldrh	r3, [r7, #2]
 800a91e:	3305      	adds	r3, #5
 800a920:	b29b      	uxth	r3, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	6939      	ldr	r1, [r7, #16]
 800a926:	461a      	mov	r2, r3
 800a928:	f000 faf4 	bl	800af14 <ifx_i2c_pl_send_frame>
 800a92c:	4603      	mov	r3, r0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop

0800a938 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2203      	movs	r2, #3
 800a944:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2203      	movs	r2, #3
 800a94c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    p_ctx->dl.resynced = 1;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2205      	movs	r2, #5
 800a95c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	2100      	movs	r1, #0
 800a964:	2202      	movs	r2, #2
 800a966:	2300      	movs	r3, #0
 800a968:	f7ff ff44 	bl	800a7f4 <ifx_i2c_dl_send_frame_internal>
 800a96c:	4603      	mov	r3, r0
 800a96e:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 800a970:	89fb      	ldrh	r3, [r7, #14]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop

0800a97c <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 800a988:	f7ff f824 	bl	80099d4 <pal_os_timer_get_time_in_milliseconds>
 800a98c:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d904      	bls.n	800a9ac <ifx_i2c_dl_resend_frame+0x30>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	4a1c      	ldr	r2, [pc, #112]	; (800aa20 <ifx_i2c_dl_resend_frame+0xa4>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d82e      	bhi.n	800aa12 <ifx_i2c_dl_resend_frame+0x96>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d109      	bne.n	800a9d2 <ifx_i2c_dl_resend_frame+0x56>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            status = ifx_i2c_dl_resync(p_ctx);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff ffb6 	bl	800a938 <ifx_i2c_dl_resync>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	82fb      	strh	r3, [r7, #22]
 800a9d0:	e017      	b.n	800aa02 <ifx_i2c_dl_resend_frame+0x86>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a9d8:	3301      	adds	r3, #1
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            p_ctx->dl.state = DL_STATE_TX;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	f7ff fefb 	bl	800a7f4 <ifx_i2c_dl_send_frame_internal>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 800aa02:	8afb      	ldrh	r3, [r7, #22]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d008      	beq.n	800aa1a <ifx_i2c_dl_resend_frame+0x9e>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2206      	movs	r2, #6
 800aa0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800aa10:	e003      	b.n	800aa1a <ifx_i2c_dl_resend_frame+0x9e>
        }
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2208      	movs	r2, #8
 800aa16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }
}
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	0002bf1f 	.word	0x0002bf1f

0800aa24 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 800aa24:	b590      	push	{r4, r7, lr}
 800aa26:	b089      	sub	sp, #36	; 0x24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	607a      	str	r2, [r7, #4]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	460b      	mov	r3, r1
 800aa32:	817b      	strh	r3, [r7, #10]
 800aa34:	4613      	mov	r3, r2
 800aa36:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 800aa5c:	897b      	ldrh	r3, [r7, #10]
 800aa5e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800aa62:	d108      	bne.n	800aa76 <ifx_i2c_pl_event_handler+0x52>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d003      	beq.n	800aa76 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2208      	movs	r2, #8
 800aa72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        }
        switch (p_ctx->dl.state)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	2b0a      	cmp	r3, #10
 800aa80:	f200 81e6 	bhi.w	800ae50 <ifx_i2c_pl_event_handler+0x42c>
 800aa84:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <ifx_i2c_pl_event_handler+0x68>)
 800aa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8a:	bf00      	nop
 800aa8c:	0800aab9 	.word	0x0800aab9
 800aa90:	0800aadf 	.word	0x0800aadf
 800aa94:	0800ab1f 	.word	0x0800ab1f
 800aa98:	0800ad6d 	.word	0x0800ad6d
 800aa9c:	0800ade7 	.word	0x0800ade7
 800aaa0:	0800adcd 	.word	0x0800adcd
 800aaa4:	0800ae51 	.word	0x0800ae51
 800aaa8:	0800ae01 	.word	0x0800ae01
 800aaac:	0800ad59 	.word	0x0800ad59
 800aab0:	0800abc9 	.word	0x0800abc9
 800aab4:	0800ac99 	.word	0x0800ac99
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 800aab8:	897b      	ldrh	r3, [r7, #10]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <ifx_i2c_pl_event_handler+0x9e>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <ifx_i2c_pl_event_handler+0xa0>
 800aac2:	2302      	movs	r3, #2
 800aac4:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 800aac6:	2300      	movs	r3, #0
 800aac8:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800aace:	7cfb      	ldrb	r3, [r7, #19]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	4619      	mov	r1, r3
 800aad6:	2200      	movs	r2, #0
 800aad8:	2300      	movs	r3, #0
 800aada:	47a0      	blx	r4
            }
            break;
 800aadc:	e1c6      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 800aade:	897b      	ldrh	r3, [r7, #10]
 800aae0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800aae4:	d104      	bne.n	800aaf0 <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2205      	movs	r2, #5
 800aaea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800aaee:	e1bd      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800aaf0:	f7fe ff70 	bl	80099d4 <pal_os_timer_get_time_in_milliseconds>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	671a      	str	r2, [r3, #112]	; 0x70
                p_ctx->dl.state = DL_STATE_RX;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2203      	movs	r2, #3
 800aafe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 fa30 	bl	800af68 <ifx_i2c_pl_receive_frame>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <ifx_i2c_pl_event_handler+0xf4>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2206      	movs	r2, #6
 800ab12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 800ab16:	e1a9      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
                }
                else
                {
                    continue_state_machine = FALSE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 800ab1c:	e1a6      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 800ab1e:	897b      	ldrh	r3, [r7, #10]
 800ab20:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800ab24:	d104      	bne.n	800ab30 <ifx_i2c_pl_event_handler+0x10c>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2205      	movs	r2, #5
 800ab2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800ab2e:	e19d      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 800ab30:	893b      	ldrh	r3, [r7, #8]
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d804      	bhi.n	800ab40 <ifx_i2c_pl_event_handler+0x11c>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2206      	movs	r2, #6
 800ab3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800ab3e:	e195      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 800ab46:	7d7b      	ldrb	r3, [r7, #21]
 800ab48:	09db      	lsrs	r3, r3, #7
 800ab4a:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 800ab4c:	7d7b      	ldrb	r3, [r7, #21]
 800ab4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab52:	115b      	asrs	r3, r3, #5
 800ab54:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 800ab56:	7d7b      	ldrb	r3, [r7, #21]
 800ab58:	f003 0303 	and.w	r3, r3, #3
 800ab5c:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 800ab5e:	7d7b      	ldrb	r3, [r7, #21]
 800ab60:	f003 030c 	and.w	r3, r3, #12
 800ab64:	109b      	asrs	r3, r3, #2
 800ab66:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	3302      	adds	r3, #2
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 800ab80:	893b      	ldrh	r3, [r7, #8]
 800ab82:	3b02      	subs	r3, #2
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	4413      	add	r3, r2
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	021b      	lsls	r3, r3, #8
 800ab8c:	b299      	uxth	r1, r3
 800ab8e:	893b      	ldrh	r3, [r7, #8]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	4413      	add	r3, r2
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	460a      	mov	r2, r1
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 800aba2:	893b      	ldrh	r3, [r7, #8]
 800aba4:	3b02      	subs	r3, #2
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	4619      	mov	r1, r3
 800abac:	f7ff fe00 	bl	800a7b0 <ifx_i2c_dl_calc_crc>
 800abb0:	4603      	mov	r3, r0
 800abb2:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 800abb4:	7d3b      	ldrb	r3, [r7, #20]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d101      	bne.n	800abbe <ifx_i2c_pl_event_handler+0x19a>
 800abba:	220b      	movs	r2, #11
 800abbc:	e000      	b.n	800abc0 <ifx_i2c_pl_event_handler+0x19c>
 800abbe:	220a      	movs	r2, #10
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            }
            break;
 800abc6:	e151      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 800abc8:	8b3a      	ldrh	r2, [r7, #24]
 800abca:	8afb      	ldrh	r3, [r7, #22]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d10d      	bne.n	800abec <ifx_i2c_pl_event_handler+0x1c8>
 800abd0:	8b7b      	ldrh	r3, [r7, #26]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <ifx_i2c_pl_event_handler+0x1c8>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 800abd6:	893a      	ldrh	r2, [r7, #8]
 800abd8:	8b7b      	ldrh	r3, [r7, #26]
 800abda:	3305      	adds	r3, #5
            }
            break;
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 800abdc:	429a      	cmp	r2, r3
 800abde:	d105      	bne.n	800abec <ifx_i2c_pl_event_handler+0x1c8>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 800abe0:	7f7b      	ldrb	r3, [r7, #29]
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d002      	beq.n	800abec <ifx_i2c_pl_event_handler+0x1c8>
 800abe6:	7f7b      	ldrb	r3, [r7, #29]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d104      	bne.n	800abf6 <ifx_i2c_pl_event_handler+0x1d2>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2206      	movs	r2, #6
 800abf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800abf4:	e13a      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 800abf6:	7ffa      	ldrb	r2, [r7, #31]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800abfe:	3301      	adds	r3, #1
 800ac00:	f003 0303 	and.w	r3, r3, #3
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d00c      	beq.n	800ac22 <ifx_i2c_pl_event_handler+0x1fe>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2209      	movs	r2, #9
 800ac0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    continue_state_machine = FALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	2100      	movs	r1, #0
 800ac18:	2200      	movs	r2, #0
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f7ff fdea 	bl	800a7f4 <ifx_i2c_dl_send_frame_internal>
                    break;
 800ac20:	e124      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ac28:	7fba      	ldrb	r2, [r7, #30]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d004      	beq.n	800ac38 <ifx_i2c_pl_event_handler+0x214>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2209      	movs	r2, #9
 800ac32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800ac36:	e119      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 800ac38:	7f7b      	ldrb	r3, [r7, #29]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d104      	bne.n	800ac48 <ifx_i2c_pl_event_handler+0x224>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2205      	movs	r2, #5
 800ac42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800ac46:	e111      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800ac4e:	3301      	adds	r3, #1
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ac62:	893b      	ldrh	r3, [r7, #8]
 800ac64:	4610      	mov	r0, r2
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	f007 fc4b 	bl	8012504 <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	893a      	ldrh	r2, [r7, #8]
 800ac72:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                p_ctx->dl.state = DL_STATE_ACK;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2204      	movs	r2, #4
 800ac82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                continue_state_machine = FALSE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	2200      	movs	r2, #0
 800ac90:	2300      	movs	r3, #0
 800ac92:	f7ff fdaf 	bl	800a7f4 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800ac96:	e0e9      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800ac9e:	461a      	mov	r2, r3
 800aca0:	7f7b      	ldrb	r3, [r7, #29]
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	bf0c      	ite	eq
 800aca6:	2301      	moveq	r3, #1
 800aca8:	2300      	movne	r3, #0
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	429a      	cmp	r2, r3
 800acae:	d004      	beq.n	800acba <ifx_i2c_pl_event_handler+0x296>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2209      	movs	r2, #9
 800acb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800acb8:	e0d8      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                if (crc_received != crc_calculated)
 800acba:	8b3a      	ldrh	r2, [r7, #24]
 800acbc:	8afb      	ldrh	r3, [r7, #22]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d004      	beq.n	800accc <ifx_i2c_pl_event_handler+0x2a8>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2205      	movs	r2, #5
 800acc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800acca:	e0cf      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 800accc:	893b      	ldrh	r3, [r7, #8]
 800acce:	2b05      	cmp	r3, #5
 800acd0:	d802      	bhi.n	800acd8 <ifx_i2c_pl_event_handler+0x2b4>
 800acd2:	8b7b      	ldrh	r3, [r7, #26]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d004      	beq.n	800ace2 <ifx_i2c_pl_event_handler+0x2be>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2209      	movs	r2, #9
 800acdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800ace0:	e0c4      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 800ace2:	7f7b      	ldrb	r3, [r7, #29]
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d110      	bne.n	800ad0a <ifx_i2c_pl_event_handler+0x2e6>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2209      	movs	r2, #9
 800acec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    p_ctx->dl.resynced = 1;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2203      	movs	r2, #3
 800acfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2203      	movs	r2, #3
 800ad04:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                    break;
 800ad08:	e0b0      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 800ad0a:	7ffb      	ldrb	r3, [r7, #31]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d108      	bne.n	800ad22 <ifx_i2c_pl_event_handler+0x2fe>
 800ad10:	7f7b      	ldrb	r3, [r7, #29]
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d005      	beq.n	800ad22 <ifx_i2c_pl_event_handler+0x2fe>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ad1c:	7fba      	ldrb	r2, [r7, #30]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d004      	beq.n	800ad2c <ifx_i2c_pl_event_handler+0x308>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2209      	movs	r2, #9
 800ad26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800ad2a:	e09f      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 800ad2c:	7f7b      	ldrb	r3, [r7, #29]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d104      	bne.n	800ad3c <ifx_i2c_pl_event_handler+0x318>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2205      	movs	r2, #5
 800ad36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800ad3a:	e097      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                continue_state_machine = FALSE;
 800ad44:	2300      	movs	r3, #0
 800ad46:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	2102      	movs	r1, #2
 800ad50:	2200      	movs	r2, #0
 800ad52:	2300      	movs	r3, #0
 800ad54:	47a0      	blx	r4
            }
            break;
 800ad56:	e089      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2203      	movs	r2, #3
 800ad5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                continue_state_machine = FALSE;
 800ad60:	2300      	movs	r3, #0
 800ad62:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f8ff 	bl	800af68 <ifx_i2c_pl_receive_frame>
            }
            break;
 800ad6a:	e07f      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 800ad6c:	897b      	ldrh	r3, [r7, #10]
 800ad6e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800ad72:	d104      	bne.n	800ad7e <ifx_i2c_pl_event_handler+0x35a>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2205      	movs	r2, #5
 800ad78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    break;
 800ad7c:	e076      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                continue_state_machine = FALSE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00d      	beq.n	800adb0 <ifx_i2c_pl_event_handler+0x38c>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6f5c      	ldr	r4, [r3, #116]	; 0x74
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800ad9c:	1cda      	adds	r2, r3, #3
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
                continue_state_machine = FALSE;
                if (0 != p_ctx->dl.action_rx_only)
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800ada4:	3b05      	subs	r3, #5
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	2104      	movs	r1, #4
 800adac:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 800adae:	e05d      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
                else
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6f5c      	ldr	r4, [r3, #116]	; 0x74
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
                else
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800adb8:	1cda      	adds	r2, r3, #3
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
                else
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800adc0:	3b05      	subs	r3, #5
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	2106      	movs	r1, #6
 800adc8:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 800adca:	e04f      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2202      	movs	r2, #2
 800add0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                continue_state_machine = FALSE;
 800add4:	2300      	movs	r3, #0
 800add6:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	2100      	movs	r1, #0
 800addc:	2201      	movs	r2, #1
 800adde:	2300      	movs	r3, #0
 800ade0:	f7ff fd08 	bl	800a7f4 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800ade4:	e042      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	2100      	movs	r1, #0
 800adea:	f7ff fdc7 	bl	800a97c <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800adf4:	2b08      	cmp	r3, #8
 800adf6:	d002      	beq.n	800adfe <ifx_i2c_pl_event_handler+0x3da>
                {
                    continue_state_machine = FALSE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 800adfc:	e036      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
 800adfe:	e035      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d103      	bne.n	800ae12 <ifx_i2c_pl_event_handler+0x3ee>
                {
                    p_ctx->dl.error = 1;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                }
                if (0 == p_ctx->dl.error)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10b      	bne.n	800ae34 <ifx_i2c_pl_event_handler+0x410>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	47a0      	blx	r4
 800ae32:	e00a      	b.n	800ae4a <ifx_i2c_pl_event_handler+0x426>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff fd7f 	bl	800a938 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                    p_ctx->dl.error = 0;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                }
                continue_state_machine = FALSE;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	773b      	strb	r3, [r7, #28]
            }
            break;
 800ae4e:	e00d      	b.n	800ae6c <ifx_i2c_pl_event_handler+0x448>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	2101      	movs	r1, #1
 800ae60:	2200      	movs	r2, #0
 800ae62:	2300      	movs	r3, #0
 800ae64:	47a0      	blx	r4
                continue_state_machine = FALSE;
 800ae66:	2300      	movs	r3, #0
 800ae68:	773b      	strb	r3, [r7, #28]
                break;
 800ae6a:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 800ae6c:	7f3b      	ldrb	r3, [r7, #28]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	f43f adf4 	beq.w	800aa5c <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 800ae74:	3724      	adds	r7, #36	; 0x24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd90      	pop	{r4, r7, pc}
 800ae7a:	bf00      	nop

0800ae7c <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	22bb      	movs	r2, #187	; 0xbb
 800ae9a:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	7812      	ldrb	r2, [r2, #0]
 800aea6:	711a      	strb	r2, [r3, #4]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = ifx_i2c_pl_pal_event_handler;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	4a18      	ldr	r2, [pc, #96]	; (800af10 <ifx_i2c_pl_init+0x94>)
 800aeae:	60da      	str	r2, [r3, #12]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	22c8      	movs	r2, #200	; 0xc8
 800aeb4:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
    if (TRUE == p_ctx->do_pal_init)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d10a      	bne.n	800aed8 <ifx_i2c_pl_init+0x5c>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fa44 	bl	8009354 <pal_i2c_init>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <ifx_i2c_pl_init+0x5c>
        {
            return (IFX_I2C_STACK_ERROR);
 800aed2:	f44f 7381 	mov.w	r3, #258	; 0x102
 800aed6:	e016      	b.n	800af06 <ifx_i2c_pl_init+0x8a>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d108      	bne.n	800aef4 <ifx_i2c_pl_init+0x78>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2299      	movs	r2, #153	; 0x99
 800aee6:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2205      	movs	r2, #5
 800aeee:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 800aef2:	e003      	b.n	800aefc <ifx_i2c_pl_init+0x80>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	2100      	movs	r1, #0
 800af00:	f000 fa66 	bl	800b3d0 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	0800b6ad 	.word	0x0800b6ad

0800af14 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4613      	mov	r3, r2
 800af20:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d007      	beq.n	800af3c <ifx_i2c_pl_send_frame+0x28>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800af32:	2b02      	cmp	r3, #2
 800af34:	d002      	beq.n	800af3c <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 800af36:	f44f 7381 	mov.w	r3, #258	; 0x102
 800af3a:	e010      	b.n	800af5e <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    p_ctx->pl.tx_frame_len = frame_len;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	88fa      	ldrh	r2, [r7, #6]
 800af50:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	2100      	movs	r1, #0
 800af58:	f000 fa3a 	bl	800b3d0 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop

0800af68 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800af76:	2b01      	cmp	r3, #1
 800af78:	d007      	beq.n	800af8a <ifx_i2c_pl_receive_frame+0x22>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800af80:	2b02      	cmp	r3, #2
 800af82:	d002      	beq.n	800af8a <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800af84:	f44f 7381 	mov.w	r3, #258	; 0x102
 800af88:	e008      	b.n	800af9c <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2202      	movs	r2, #2
 800af8e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	2100      	movs	r1, #0
 800af96:	f000 fa1b 	bl	800b3d0 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	460b      	mov	r3, r1
 800afae:	70fb      	strb	r3, [r7, #3]
 800afb0:	4613      	mov	r3, r2
 800afb2:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	78fa      	ldrb	r2, [r7, #3]
 800afb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    p_ctx->pl.buffer_tx_len = 1;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	883a      	ldrh	r2, [r7, #0]
 800afc8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	22c8      	movs	r2, #200	; 0xc8
 800afd8:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6919      	ldr	r1, [r3, #16]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 800aff4:	4608      	mov	r0, r1
 800aff6:	4611      	mov	r1, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	f7fe f9c3 	bl	8009384 <pal_i2c_write>
}
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	607b      	str	r3, [r7, #4]
 800b00e:	460b      	mov	r3, r1
 800b010:	72fb      	strb	r3, [r7, #11]
 800b012:	4613      	mov	r3, r2
 800b014:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	7afa      	ldrb	r2, [r7, #11]
 800b01a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f103 0279 	add.w	r2, r3, #121	; 0x79
 800b024:	893b      	ldrh	r3, [r7, #8]
 800b026:	4610      	mov	r0, r2
 800b028:	6879      	ldr	r1, [r7, #4]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f007 fa6a 	bl	8012504 <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 800b030:	893b      	ldrh	r3, [r7, #8]
 800b032:	3301      	adds	r3, #1
 800b034:	b29a      	uxth	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	22c8      	movs	r2, #200	; 0xc8
 800b048:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6919      	ldr	r1, [r3, #16]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 800b064:	4608      	mov	r0, r1
 800b066:	4611      	mov	r1, r2
 800b068:	461a      	mov	r2, r3
 800b06a:	f7fe f98b 	bl	8009384 <pal_i2c_write>
}
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	2182      	movs	r1, #130	; 0x82
 800b080:	2204      	movs	r2, #4
 800b082:	f7ff ff8f 	bl	800afa4 <ifx_i2c_pl_read_register>
}
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	60da      	str	r2, [r3, #12]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691a      	ldr	r2, [r3, #16]
 800b0ac:	887b      	ldrh	r3, [r7, #2]
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	f7fe f9f5 	bl	80094a0 <pal_i2c_set_bitrate>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	60da      	str	r2, [r3, #12]
    if (PAL_I2C_EVENT_SUCCESS != status)
 800b0c2:	89fb      	ldrh	r3, [r7, #14]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01a      	beq.n	800b0fe <ifx_i2c_pl_set_bit_rate+0x72>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 800b0ce:	1e5a      	subs	r2, r3, #1
 800b0d0:	b291      	uxth	r1, r2
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	f8a2 1194 	strh.w	r1, [r2, #404]	; 0x194
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00c      	beq.n	800b0f6 <ifx_i2c_pl_set_bit_rate+0x6a>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	4909      	ldr	r1, [pc, #36]	; (800b10c <ifx_i2c_pl_set_bit_rate+0x80>)
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0ec:	f7fe fbe8 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	81fb      	strh	r3, [r7, #14]
 800b0f4:	e005      	b.n	800b102 <ifx_i2c_pl_set_bit_rate+0x76>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 800b0f6:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b0fa:	81fb      	strh	r3, [r7, #14]
 800b0fc:	e001      	b.n	800b102 <ifx_i2c_pl_set_bit_rate+0x76>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 800b0fe:	2300      	movs	r3, #0
 800b100:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 800b102:	89fb      	ldrh	r3, [r7, #14]

}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	0800b111 	.word	0x0800b111

0800b110 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 800b110:	b590      	push	{r4, r7, lr}
 800b112:	b08b      	sub	sp, #44	; 0x2c
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 800b118:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b11c:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	889b      	ldrh	r3, [r3, #4]
 800b126:	0a1b      	lsrs	r3, r3, #8
 800b128:	b29b      	uxth	r3, r3
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	733b      	strb	r3, [r7, #12]
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	889b      	ldrh	r3, [r3, #4]
 800b132:	b2db      	uxtb	r3, r3
 800b134:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 800b13e:	2300      	movs	r3, #0
 800b140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800b14a:	2b55      	cmp	r3, #85	; 0x55
 800b14c:	f000 809a 	beq.w	800b284 <ifx_i2c_pl_negotiation_event_handler+0x174>
 800b150:	2b55      	cmp	r3, #85	; 0x55
 800b152:	dc0d      	bgt.n	800b170 <ifx_i2c_pl_negotiation_event_handler+0x60>
 800b154:	2b22      	cmp	r3, #34	; 0x22
 800b156:	f000 80ee 	beq.w	800b336 <ifx_i2c_pl_negotiation_event_handler+0x226>
 800b15a:	2b22      	cmp	r3, #34	; 0x22
 800b15c:	dc03      	bgt.n	800b166 <ifx_i2c_pl_negotiation_event_handler+0x56>
 800b15e:	2b11      	cmp	r3, #17
 800b160:	f000 80dd 	beq.w	800b31e <ifx_i2c_pl_negotiation_event_handler+0x20e>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 800b164:	e129      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 800b166:	2b33      	cmp	r3, #51	; 0x33
 800b168:	d03d      	beq.n	800b1e6 <ifx_i2c_pl_negotiation_event_handler+0xd6>
 800b16a:	2b44      	cmp	r3, #68	; 0x44
 800b16c:	d045      	beq.n	800b1fa <ifx_i2c_pl_negotiation_event_handler+0xea>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 800b16e:	e124      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 800b170:	2b88      	cmp	r3, #136	; 0x88
 800b172:	f000 80ea 	beq.w	800b34a <ifx_i2c_pl_negotiation_event_handler+0x23a>
 800b176:	2b88      	cmp	r3, #136	; 0x88
 800b178:	dc06      	bgt.n	800b188 <ifx_i2c_pl_negotiation_event_handler+0x78>
 800b17a:	2b66      	cmp	r3, #102	; 0x66
 800b17c:	f000 808c 	beq.w	800b298 <ifx_i2c_pl_negotiation_event_handler+0x188>
 800b180:	2b77      	cmp	r3, #119	; 0x77
 800b182:	f000 80ab 	beq.w	800b2dc <ifx_i2c_pl_negotiation_event_handler+0x1cc>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 800b186:	e118      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>

    do
    {
        continue_negotiation = FALSE;
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 800b188:	2baa      	cmp	r3, #170	; 0xaa
 800b18a:	f000 8100 	beq.w	800b38e <ifx_i2c_pl_negotiation_event_handler+0x27e>
 800b18e:	2bbb      	cmp	r3, #187	; 0xbb
 800b190:	d000      	beq.n	800b194 <ifx_i2c_pl_negotiation_event_handler+0x84>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 800b192:	e112      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
        {
            // Set initial frequency to PL_DEFAULT_FREQUENCY to be able to negotiate with slave
            case PL_INIT_SET_FREQ_DEFAULT:
            {
                // Default frequency set to master
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	2164      	movs	r1, #100	; 0x64
 800b198:	f7ff ff78 	bl	800b08c <ifx_i2c_pl_set_bit_rate>
 800b19c:	4603      	mov	r3, r0
 800b19e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 800b1a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d107      	bne.n	800b1b6 <ifx_i2c_pl_negotiation_event_handler+0xa6>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	2233      	movs	r2, #51	; 0x33
 800b1aa:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                    continue_negotiation = TRUE;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b1b4:	e016      	b.n	800b1e4 <ifx_i2c_pl_negotiation_event_handler+0xd4>
                }
                else if (IFX_I2C_STACK_ERROR == event)
 800b1b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1b8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800b1bc:	d112      	bne.n	800b1e4 <ifx_i2c_pl_negotiation_event_handler+0xd4>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	22aa      	movs	r2, #170	; 0xaa
 800b1c2:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                    p_buffer = NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	847b      	strh	r3, [r7, #34]	; 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	497d      	ldr	r1, [pc, #500]	; (800b3cc <ifx_i2c_pl_negotiation_event_handler+0x2bc>)
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b1de:	f7fe fb6f 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                           (void * )p_ctx,
                                                           STARTUP_TIME_MSEC);
                }
            }
            break;
 800b1e2:	e0ea      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
 800b1e4:	e0e9      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            // Read the current Max frequency supported by slave
            case PL_INIT_GET_FREQ_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	2244      	movs	r2, #68	; 0x44
 800b1ea:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 800b1ee:	69b8      	ldr	r0, [r7, #24]
 800b1f0:	2184      	movs	r1, #132	; 0x84
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	f7ff fed6 	bl	800afa4 <ifx_i2c_pl_read_register>
            }
            break;
 800b1f8:	e0df      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            // Set the I2C mode register
            case PL_INIT_SET_FREQ_REG:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b200:	021b      	lsls	r3, r3, #8
 800b202:	b29a      	uxth	r2, r3
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b29b      	uxth	r3, r3
 800b210:	82fb      	strh	r3, [r7, #22]

                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 800b212:	2380      	movs	r3, #128	; 0x80
 800b214:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	885b      	ldrh	r3, [r3, #2]
 800b21a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b21e:	d911      	bls.n	800b244 <ifx_i2c_pl_negotiation_event_handler+0x134>
 800b220:	8afb      	ldrh	r3, [r7, #22]
 800b222:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b226:	d80d      	bhi.n	800b244 <ifx_i2c_pl_negotiation_event_handler+0x134>
                {
                    //Change to FM+ mode if slave's current supported frequency is below user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 800b228:	2304      	movs	r3, #4
 800b22a:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	2255      	movs	r2, #85	; 0x55
 800b230:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 800b234:	f107 0310 	add.w	r3, r7, #16
 800b238:	69b8      	ldr	r0, [r7, #24]
 800b23a:	2189      	movs	r1, #137	; 0x89
 800b23c:	2202      	movs	r2, #2
 800b23e:	f7ff fee1 	bl	800b004 <ifx_i2c_pl_write_register>
 800b242:	e01e      	b.n	800b282 <ifx_i2c_pl_negotiation_event_handler+0x172>
                }
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	885b      	ldrh	r3, [r3, #2]
 800b248:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b24c:	d811      	bhi.n	800b272 <ifx_i2c_pl_negotiation_event_handler+0x162>
 800b24e:	8afb      	ldrh	r3, [r7, #22]
 800b250:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b254:	d90d      	bls.n	800b272 <ifx_i2c_pl_negotiation_event_handler+0x162>
                {
                    //Change to SM&FM mode if slave's current supported frequency is above user's requested frequency
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 800b256:	2303      	movs	r3, #3
 800b258:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	2255      	movs	r2, #85	; 0x55
 800b25e:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 800b262:	f107 0310 	add.w	r3, r7, #16
 800b266:	69b8      	ldr	r0, [r7, #24]
 800b268:	2189      	movs	r1, #137	; 0x89
 800b26a:	2202      	movs	r2, #2
 800b26c:	f7ff feca 	bl	800b004 <ifx_i2c_pl_write_register>
 800b270:	e007      	b.n	800b282 <ifx_i2c_pl_negotiation_event_handler+0x172>
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2266      	movs	r2, #102	; 0x66
 800b276:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                    continue_negotiation = TRUE;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                }
            }
            break;
 800b280:	e09b      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
 800b282:	e09a      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            // After setting I2C mode register, read the slave's supported frequency
            case PL_INIT_READ_FREQ:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	2266      	movs	r2, #102	; 0x66
 800b288:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 800b28c:	69b8      	ldr	r0, [r7, #24]
 800b28e:	2184      	movs	r1, #132	; 0x84
 800b290:	2204      	movs	r2, #4
 800b292:	f7ff fe87 	bl	800afa4 <ifx_i2c_pl_read_register>
            }
            break;
 800b296:	e090      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            // Verify the requested frequency and slave's supported frequency
            case PL_INIT_VERIFY_FREQ:
            {
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b29e:	021b      	lsls	r3, r3, #8
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frequency > slave_frequency)
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	885b      	ldrh	r3, [r3, #2]
 800b2b4:	8afa      	ldrh	r2, [r7, #22]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d208      	bcs.n	800b2cc <ifx_i2c_pl_negotiation_event_handler+0x1bc>
                {
                    LOG_PL("[IFX-PL]: Unexpected frequency in MAX_SCL_FREQU\n");
                    p_buffer = NULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	847b      	strh	r3, [r7, #34]	; 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	22aa      	movs	r2, #170	; 0xaa
 800b2c6:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 800b2ca:	e003      	b.n	800b2d4 <ifx_i2c_pl_negotiation_event_handler+0x1c4>
                }
                else
                {
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	2277      	movs	r2, #119	; 0x77
 800b2d0:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                }
                continue_negotiation = TRUE;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            break;
 800b2da:	e06e      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            // Frequency negotiated, Set frequency at master
            case PL_INIT_AGREE_FREQ:
            {
                // Frequency negotiation between master and slave is complete
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	885b      	ldrh	r3, [r3, #2]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	f7ff fed2 	bl	800b08c <ifx_i2c_pl_set_bit_rate>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 800b2ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d107      	bne.n	800b302 <ifx_i2c_pl_negotiation_event_handler+0x1f2>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	2211      	movs	r2, #17
 800b2f6:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                    continue_negotiation = TRUE;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b300:	e00c      	b.n	800b31c <ifx_i2c_pl_negotiation_event_handler+0x20c>
                }
                else if (IFX_I2C_STACK_ERROR == event)
 800b302:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b304:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800b308:	d108      	bne.n	800b31c <ifx_i2c_pl_negotiation_event_handler+0x20c>
                {
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	22aa      	movs	r2, #170	; 0xaa
 800b30e:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                    p_buffer = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	847b      	strh	r3, [r7, #34]	; 0x22
                }
            }
            break;
 800b31a:	e04e      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
 800b31c:	e04d      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            // Start frame length negotiation by writing the requested frame length
            case PL_INIT_SET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2222      	movs	r2, #34	; 0x22
 800b322:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 800b326:	f107 030c 	add.w	r3, r7, #12
 800b32a:	69b8      	ldr	r0, [r7, #24]
 800b32c:	2181      	movs	r1, #129	; 0x81
 800b32e:	2202      	movs	r2, #2
 800b330:	f7ff fe68 	bl	800b004 <ifx_i2c_pl_write_register>
            }
            break;
 800b334:	e041      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            // Read the frame length to verify
            case PL_INIT_GET_DATA_REG_LEN:
            {
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2288      	movs	r2, #136	; 0x88
 800b33a:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 800b33e:	69b8      	ldr	r0, [r7, #24]
 800b340:	2181      	movs	r1, #129	; 0x81
 800b342:	2202      	movs	r2, #2
 800b344:	f7ff fe2e 	bl	800afa4 <ifx_i2c_pl_read_register>
            }
            break;
 800b348:	e037      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            // Check is slave accepted the new frame length
            case PL_INIT_VERIFY_DATA_REG:
            {
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	22aa      	movs	r2, #170	; 0xaa
 800b34e:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b358:	021b      	lsls	r3, r3, #8
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800b362:	b29b      	uxth	r3, r3
 800b364:	4313      	orrs	r3, r2
 800b366:	b29b      	uxth	r3, r3
 800b368:	82bb      	strh	r3, [r7, #20]
                // Error if slave's frame length is more than requested frame length
                if (p_ctx->frame_size >= slave_frame_len)
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	889b      	ldrh	r3, [r3, #4]
 800b36e:	8aba      	ldrh	r2, [r7, #20]
 800b370:	429a      	cmp	r2, r3
 800b372:	d804      	bhi.n	800b37e <ifx_i2c_pl_negotiation_event_handler+0x26e>
                {
                    p_ctx->frame_size = slave_frame_len;
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	8aba      	ldrh	r2, [r7, #20]
 800b378:	809a      	strh	r2, [r3, #4]
                    event = IFX_I2C_STACK_SUCCESS;
 800b37a:	2300      	movs	r3, #0
 800b37c:	84fb      	strh	r3, [r7, #38]	; 0x26
                }
                p_buffer = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	847b      	strh	r3, [r7, #34]	; 0x22
                continue_negotiation = TRUE;
 800b386:	2301      	movs	r3, #1
 800b388:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            break;
 800b38c:	e015      	b.n	800b3ba <ifx_i2c_pl_negotiation_event_handler+0x2aa>
            case PL_INIT_DONE:
            {
                if (IFX_I2C_STACK_SUCCESS == event)
 800b38e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b390:	2b00      	cmp	r3, #0
 800b392:	d104      	bne.n	800b39e <ifx_i2c_pl_negotiation_event_handler+0x28e>
                {
                    p_ctx->pl.frame_state = PL_STATE_READY;
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 800b39c:	e003      	b.n	800b3a6 <ifx_i2c_pl_negotiation_event_handler+0x296>
                }
                else
                {
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                }
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	f8d3 41a0 	ldr.w	r4, [r3, #416]	; 0x1a0
 800b3ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3b0:	69b8      	ldr	r0, [r7, #24]
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	69fa      	ldr	r2, [r7, #28]
 800b3b6:	47a0      	blx	r4
            }
            break;
 800b3b8:	bf00      	nop
            default:
                break;
        }
    } while (FALSE != continue_negotiation);
 800b3ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f47f aebd 	bne.w	800b13e <ifx_i2c_pl_negotiation_event_handler+0x2e>
}
 800b3c4:	372c      	adds	r7, #44	; 0x2c
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd90      	pop	{r4, r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	0800b111 	.word	0x0800b111

0800b3d0 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 800b3dc:	887b      	ldrh	r3, [r7, #2]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00d      	beq.n	800b3fe <ifx_i2c_pl_frame_event_handler+0x2e>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2202      	movs	r2, #2
 800b3e6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 41a0 	ldr.w	r4, [r3, #416]	; 0x1a0
 800b3f0:	887b      	ldrh	r3, [r7, #2]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	47a0      	blx	r4
 800b3fc:	e0eb      	b.n	800b5d6 <ifx_i2c_pl_frame_event_handler+0x206>
    }
    else
    {
        switch (p_ctx->pl.frame_state)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800b404:	3b01      	subs	r3, #1
 800b406:	2b04      	cmp	r3, #4
 800b408:	f200 80d7 	bhi.w	800b5ba <ifx_i2c_pl_frame_event_handler+0x1ea>
 800b40c:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <ifx_i2c_pl_frame_event_handler+0x44>)
 800b40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b412:	bf00      	nop
 800b414:	0800b431 	.word	0x0800b431
 800b418:	0800b439 	.word	0x0800b439
 800b41c:	0800b457 	.word	0x0800b457
 800b420:	0800b599 	.word	0x0800b599
 800b424:	0800b429 	.word	0x0800b429
        {
            // Perform soft reset
            case PL_STATE_SOFT_RESET:
            {
                ifx_i2c_pl_soft_reset(p_ctx);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f97b 	bl	800b724 <ifx_i2c_pl_soft_reset>
            }
            break;
 800b42e:	e0d2      	b.n	800b5d6 <ifx_i2c_pl_frame_event_handler+0x206>
            // Negotiate frame and frequency with slave
            case PL_STATE_INIT:
            {
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff fe6d 	bl	800b110 <ifx_i2c_pl_negotiation_event_handler>
            }
            break;
 800b436:	e0ce      	b.n	800b5d6 <ifx_i2c_pl_frame_event_handler+0x206>
            // Check status of slave data
            case PL_STATE_READY:
            {
                // Start polling status register
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2203      	movs	r2, #3
 800b43c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800b446:	2b02      	cmp	r3, #2
 800b448:	d105      	bne.n	800b456 <ifx_i2c_pl_frame_event_handler+0x86>
                {
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	2182      	movs	r1, #130	; 0x82
 800b44e:	2204      	movs	r2, #4
 800b450:	f7ff fda8 	bl	800afa4 <ifx_i2c_pl_read_register>
                    break;
 800b454:	e0bf      	b.n	800b5d6 <ifx_i2c_pl_frame_event_handler+0x206>
            //lint -fallthrough "For write frame, polling of i2c status register is skipped"
            // Do read/write frame
            case PL_STATE_DATA_AVAILABLE:
            {
                // Read frame, if response is ready. Ignore busy flag
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d156      	bne.n	800b50e <ifx_i2c_pl_frame_event_handler+0x13e>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d04f      	beq.n	800b50e <ifx_i2c_pl_frame_event_handler+0x13e>
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800b474:	021b      	lsls	r3, r3, #8
 800b476:	b29a      	uxth	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b47e:	b29b      	uxth	r3, r3
 800b480:	4313      	orrs	r3, r2
 800b482:	b29b      	uxth	r3, r3
 800b484:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 800b486:	8a7b      	ldrh	r3, [r7, #18]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00f      	beq.n	800b4ac <ifx_i2c_pl_frame_event_handler+0xdc>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	889b      	ldrh	r3, [r3, #4]
 800b490:	8a7a      	ldrh	r2, [r7, #18]
 800b492:	429a      	cmp	r2, r3
 800b494:	d80a      	bhi.n	800b4ac <ifx_i2c_pl_frame_event_handler+0xdc>
                    {
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2204      	movs	r2, #4
 800b49a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 800b49e:	8a7b      	ldrh	r3, [r7, #18]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	2180      	movs	r1, #128	; 0x80
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	f7ff fd7d 	bl	800afa4 <ifx_i2c_pl_read_register>
 800b4aa:	e02f      	b.n	800b50c <ifx_i2c_pl_frame_event_handler+0x13c>
                    }
                    else
                    {
                        current_time = pal_os_timer_get_time_in_milliseconds();
 800b4ac:	f7fe fa92 	bl	80099d4 <pal_os_timer_get_time_in_milliseconds>
 800b4b0:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d904      	bls.n	800b4d0 <ifx_i2c_pl_frame_event_handler+0x100>
                        {
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
                                               p_ctx->dl.frame_start_time)) + 0x01;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    {
                        current_time = pal_os_timer_get_time_in_milliseconds();
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
                        if (p_ctx->dl.frame_start_time > current_time)
                        {
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	617b      	str	r3, [r7, #20]
                                               p_ctx->dl.frame_start_time)) + 0x01;
                        }
                        // Continue polling STATUS register if retry limit is not reached
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d90a      	bls.n	800b4f0 <ifx_i2c_pl_frame_event_handler+0x120>
                        {
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	493e      	ldr	r1, [pc, #248]	; (800b5dc <ifx_i2c_pl_frame_event_handler+0x20c>)
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800b4ea:	f7fe f9e9 	bl	80098c0 <pal_os_event_register_callback_oneshot>
 800b4ee:	e00d      	b.n	800b50c <ifx_i2c_pl_frame_event_handler+0x13c>
                                                                   (void * )p_ctx,
                                                                   PL_DATA_POLLING_INVERVAL_US);
                        }
                        else
                        {
                            p_ctx->pl.frame_state = PL_STATE_READY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 41a0 	ldr.w	r4, [r3, #416]	; 0x1a0
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b504:	2200      	movs	r2, #0
 800b506:	2300      	movs	r3, #0
 800b508:	47a0      	blx	r4
                // Read frame, if response is ready. Ignore busy flag
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
                {
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 800b50a:	e044      	b.n	800b596 <ifx_i2c_pl_frame_event_handler+0x1c6>
 800b50c:	e043      	b.n	800b596 <ifx_i2c_pl_frame_event_handler+0x1c6>
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
                        }
                    }
                }
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800b514:	2b01      	cmp	r3, #1
 800b516:	d10e      	bne.n	800b536 <ifx_i2c_pl_frame_event_handler+0x166>
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2204      	movs	r2, #4
 800b51c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                    ifx_i2c_pl_write_register(p_ctx,
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
                                              PL_REG_DATA,
                                              p_ctx->pl.tx_frame_len,
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
                // Write frame is slave is not busy
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
                {
                    // Write frame if device is not busy, otherwise wait and poll STATUS again later
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
                    ifx_i2c_pl_write_register(p_ctx,
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	2180      	movs	r1, #128	; 0x80
 800b530:	f7ff fd68 	bl	800b004 <ifx_i2c_pl_write_register>
 800b534:	e02f      	b.n	800b596 <ifx_i2c_pl_frame_event_handler+0x1c6>
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
                }
                // Continue checking the slave status register
                else
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
 800b536:	f7fe fa4d 	bl	80099d4 <pal_os_timer_get_time_in_milliseconds>
 800b53a:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d904      	bls.n	800b55a <ifx_i2c_pl_frame_event_handler+0x18a>
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
                                           p_ctx->dl.frame_start_time)) + 0x01;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                {
                    current_time = pal_os_timer_get_time_in_milliseconds();
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
                    if (p_ctx->dl.frame_start_time > current_time)
                    {
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	617b      	str	r3, [r7, #20]
                                           p_ctx->dl.frame_start_time)) + 0x01;
                    }
                    // Continue polling STATUS register if retry limit is not reached
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	429a      	cmp	r2, r3
 800b562:	d90a      	bls.n	800b57a <ifx_i2c_pl_frame_event_handler+0x1aa>
                    {
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b56a:	4618      	mov	r0, r3
 800b56c:	491b      	ldr	r1, [pc, #108]	; (800b5dc <ifx_i2c_pl_frame_event_handler+0x20c>)
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	f241 3388 	movw	r3, #5000	; 0x1388
 800b574:	f7fe f9a4 	bl	80098c0 <pal_os_event_register_callback_oneshot>
 800b578:	e00d      	b.n	800b596 <ifx_i2c_pl_frame_event_handler+0x1c6>
                                                               (void * )p_ctx,
                                                               PL_DATA_POLLING_INVERVAL_US);
                    }
                    else
                    {
                        p_ctx->pl.frame_state = PL_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2202      	movs	r2, #2
 800b57e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 41a0 	ldr.w	r4, [r3, #416]	; 0x1a0
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b58e:	2200      	movs	r2, #0
 800b590:	2300      	movs	r3, #0
 800b592:	47a0      	blx	r4
                    }
                }
            }
            break;
 800b594:	e01f      	b.n	800b5d6 <ifx_i2c_pl_frame_event_handler+0x206>
 800b596:	e01e      	b.n	800b5d6 <ifx_i2c_pl_frame_event_handler+0x206>
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2202      	movs	r2, #2
 800b59c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 41a0 	ldr.w	r4, [r3, #416]	; 0x1a0
                                                    p_ctx->pl.buffer,
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f103 0278 	add.w	r2, r3, #120	; 0x78
            // Frame reading is complete
            case PL_STATE_RXTX:
            {
                // Writing/reading of frame to/from DATA register complete
                p_ctx->pl.frame_state = PL_STATE_READY;
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	47a0      	blx	r4
                                                    p_ctx->pl.buffer,
                                                    p_ctx->pl.buffer_rx_len);
            }
            break;
 800b5b8:	e00d      	b.n	800b5d6 <ifx_i2c_pl_frame_event_handler+0x206>
            default:
            {
                // Default condition occurred
                p_ctx->pl.frame_state = PL_STATE_INIT;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 41a0 	ldr.w	r4, [r3, #416]	; 0x1a0
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	47a0      	blx	r4
            }
            break;
 800b5d4:	bf00      	nop
        }
    }
}
 800b5d6:	371c      	adds	r7, #28
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd90      	pop	{r4, r7, pc}
 800b5dc:	0800b075 	.word	0x0800b075

0800b5e0 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d10d      	bne.n	800b612 <ifx_i2c_pal_poll_callback+0x32>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6919      	ldr	r1, [r3, #16]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 800b606:	4608      	mov	r0, r1
 800b608:	4611      	mov	r1, r2
 800b60a:	461a      	mov	r2, r3
 800b60c:	f7fd feba 	bl	8009384 <pal_i2c_write>
 800b610:	e011      	b.n	800b636 <ifx_i2c_pal_poll_callback+0x56>
    }
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d10c      	bne.n	800b636 <ifx_i2c_pal_poll_callback+0x56>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6919      	ldr	r1, [r3, #16]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
 800b62c:	4608      	mov	r0, r1
 800b62e:	4611      	mov	r1, r2
 800b630:	461a      	mov	r2, r3
 800b632:	f7fd feed 	bl	8009410 <pal_i2c_read>
    }
}
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d120      	bne.n	800b694 <ifx_i2c_pl_guard_time_callback+0x58>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d111      	bne.n	800b680 <ifx_i2c_pl_guard_time_callback+0x44>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2202      	movs	r2, #2
 800b660:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6919      	ldr	r1, [r3, #16]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
 800b674:	4608      	mov	r0, r1
 800b676:	4611      	mov	r1, r2
 800b678:	461a      	mov	r2, r3
 800b67a:	f7fd fec9 	bl	8009410 <pal_i2c_read>
 800b67e:	e012      	b.n	800b6a6 <ifx_i2c_pl_guard_time_callback+0x6a>
        }
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 800b686:	2b02      	cmp	r3, #2
 800b688:	d10d      	bne.n	800b6a6 <ifx_i2c_pl_guard_time_callback+0x6a>
        {
            LOG_PL("[IFX-PL]: GT done -> REG is read\n");
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	2100      	movs	r1, #0
 800b68e:	f7ff fe9f 	bl	800b3d0 <ifx_i2c_pl_frame_event_handler>
 800b692:	e008      	b.n	800b6a6 <ifx_i2c_pl_guard_time_callback+0x6a>
        }
    }
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d103      	bne.n	800b6a6 <ifx_i2c_pl_guard_time_callback+0x6a>
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	f7ff fe95 	bl	800b3d0 <ifx_i2c_pl_frame_event_handler>
    }
}
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	60fb      	str	r3, [r7, #12]
    switch (event)
 800b6bc:	887b      	ldrh	r3, [r7, #2]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d01e      	beq.n	800b700 <ifx_i2c_pl_pal_event_handler+0x54>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	db26      	blt.n	800b714 <ifx_i2c_pl_pal_event_handler+0x68>
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	dc24      	bgt.n	800b714 <ifx_i2c_pl_pal_event_handler+0x68>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 800b6d0:	1e5a      	subs	r2, r3, #1
 800b6d2:	b291      	uxth	r1, r2
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	f8a2 1194 	strh.w	r1, [r2, #404]	; 0x194
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	490d      	ldr	r1, [pc, #52]	; (800b71c <ifx_i2c_pl_pal_event_handler+0x70>)
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6ee:	f7fe f8e7 	bl	80098c0 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 800b6f2:	e010      	b.n	800b716 <ifx_i2c_pl_pal_event_handler+0x6a>
                                                        ifx_i2c_pal_poll_callback, p_local_ctx, PL_POLLING_INVERVAL_US);
            }
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f44f 7183 	mov.w	r1, #262	; 0x106
 800b6fa:	f7ff fe69 	bl	800b3d0 <ifx_i2c_pl_frame_event_handler>
            }
            break;
 800b6fe:	e00a      	b.n	800b716 <ifx_i2c_pl_pal_event_handler+0x6a>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b706:	4618      	mov	r0, r3
 800b708:	4905      	ldr	r1, [pc, #20]	; (800b720 <ifx_i2c_pl_pal_event_handler+0x74>)
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	2332      	movs	r3, #50	; 0x32
 800b70e:	f7fe f8d7 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 800b712:	e000      	b.n	800b716 <ifx_i2c_pl_pal_event_handler+0x6a>
        default:
            break;
 800b714:	bf00      	nop
    }
}
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	0800b5e1 	.word	0x0800b5e1
 800b720:	0800b63d 	.word	0x0800b63d

0800b724 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 800b72c:	2300      	movs	r3, #0
 800b72e:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 800b736:	3b99      	subs	r3, #153	; 0x99
 800b738:	2b0a      	cmp	r3, #10
 800b73a:	d85f      	bhi.n	800b7fc <ifx_i2c_pl_soft_reset+0xd8>
 800b73c:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <ifx_i2c_pl_soft_reset+0x20>)
 800b73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b742:	bf00      	nop
 800b744:	0800b771 	.word	0x0800b771
 800b748:	0800b7fd 	.word	0x0800b7fd
 800b74c:	0800b7fd 	.word	0x0800b7fd
 800b750:	0800b7fd 	.word	0x0800b7fd
 800b754:	0800b7fd 	.word	0x0800b7fd
 800b758:	0800b7fd 	.word	0x0800b7fd
 800b75c:	0800b7fd 	.word	0x0800b7fd
 800b760:	0800b7fd 	.word	0x0800b7fd
 800b764:	0800b7eb 	.word	0x0800b7eb
 800b768:	0800b785 	.word	0x0800b785
 800b76c:	0800b7cd 	.word	0x0800b7cd
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	22a2      	movs	r2, #162	; 0xa2
 800b774:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	2182      	movs	r1, #130	; 0x82
 800b77c:	2204      	movs	r2, #4
 800b77e:	f7ff fc11 	bl	800afa4 <ifx_i2c_pl_read_register>
            break;
 800b782:	e03c      	b.n	800b7fe <ifx_i2c_pl_soft_reset+0xda>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b78a:	f003 0308 	and.w	r3, r3, #8
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d10b      	bne.n	800b7b8 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	22a3      	movs	r2, #163	; 0xa3
 800b7a4:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 800b7a8:	f107 030c 	add.w	r3, r7, #12
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	2188      	movs	r1, #136	; 0x88
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	f7ff fc27 	bl	800b004 <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 800b7b6:	e022      	b.n	800b7fe <ifx_i2c_pl_soft_reset+0xda>
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
            }
            else
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b7c6:	f7ff fe03 	bl	800b3d0 <ifx_i2c_pl_frame_event_handler>
            }
            break;
 800b7ca:	e018      	b.n	800b7fe <ifx_i2c_pl_soft_reset+0xda>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	22a1      	movs	r2, #161	; 0xa1
 800b7d0:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7da:	4618      	mov	r0, r3
 800b7dc:	4909      	ldr	r1, [pc, #36]	; (800b804 <ifx_i2c_pl_soft_reset+0xe0>)
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800b7e4:	f7fe f86c 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 800b7e8:	e009      	b.n	800b7fe <ifx_i2c_pl_soft_reset+0xda>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	f7ff fdeb 	bl	800b3d0 <ifx_i2c_pl_frame_event_handler>
            break;
 800b7fa:	e000      	b.n	800b7fe <ifx_i2c_pl_soft_reset+0xda>
        }
        default:
            break;
 800b7fc:	bf00      	nop
    }
}
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	0800b725 	.word	0x0800b725

0800b808 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	490f      	ldr	r1, [pc, #60]	; (800b85c <ifx_i2c_tl_init+0x54>)
 800b81e:	f7fe fef9 	bl	800a614 <ifx_i2c_dl_init>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 800b828:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b82c:	e011      	b.n	800b852 <ifx_i2c_tl_init+0x4a>
    }
    p_ctx->tl.initialization_state = TRUE;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    p_ctx->tl.upper_layer_event_handler = handler;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	655a      	str	r2, [r3, #84]	; 0x54
    p_ctx->tl.state = TL_STATE_IDLE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	889b      	ldrh	r3, [r3, #4]
 800b848:	3b06      	subs	r3, #6
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	875a      	strh	r2, [r3, #58]	; 0x3a

    return (IFX_I2C_STACK_SUCCESS);
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	0800bafd 	.word	0x0800bafd

0800b860 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	4613      	mov	r3, r2
 800b86e:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 800b870:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b874:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d039      	beq.n	800b8f0 <ifx_i2c_tl_transceive+0x90>
 800b87c:	88fb      	ldrh	r3, [r7, #6]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d036      	beq.n	800b8f0 <ifx_i2c_tl_transceive+0x90>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d000      	beq.n	800b88e <ifx_i2c_tl_transceive+0x2e>
        {
            break;
 800b88c:	e030      	b.n	800b8f0 <ifx_i2c_tl_transceive+0x90>
        }
        p_ctx->tl.state = TL_STATE_TX;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2202      	movs	r2, #2
 800b892:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 800b896:	f7fe f89d 	bl	80099d4 <pal_os_timer_get_time_in_milliseconds>
 800b89a:	4602      	mov	r2, r0
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	645a      	str	r2, [r3, #68]	; 0x44
        p_ctx->tl.p_actual_packet = p_packet;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30
        p_ctx->tl.actual_packet_length = packet_len;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	88fa      	ldrh	r2, [r7, #6]
 800b8aa:	86da      	strh	r2, [r3, #54]	; 0x36
        p_ctx->tl.packet_offset = 0;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	871a      	strh	r2, [r3, #56]	; 0x38
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	63da      	str	r2, [r3, #60]	; 0x3c
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6a3a      	ldr	r2, [r7, #32]
 800b8bc:	641a      	str	r2, [r3, #64]	; 0x40
        p_ctx->tl.total_recv_length = 0;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	869a      	strh	r2, [r3, #52]	; 0x34
        p_ctx->tl.chaining_error_count = 0;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        p_ctx->tl.master_chaining_error_count = 0;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        p_ctx->tl.transmission_completed = 0;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b8e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 f85e 	bl	800b9a8 <ifx_i2c_tl_send_next_fragment>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	82fb      	strh	r3, [r7, #22]
    } while (FALSE);
    return (status);
 800b8f0:	8afb      	ldrh	r3, [r7, #22]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop

0800b8fc <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d002      	beq.n	800b914 <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 800b90e:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b912:	e00d      	b.n	800b930 <ifx_i2c_tl_resend_packets+0x34>
    }

    p_ctx->tl.packet_offset = 0;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	871a      	strh	r2, [r3, #56]	; 0x38
    p_ctx->tl.total_recv_length = 0;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	869a      	strh	r2, [r3, #52]	; 0x34
    p_ctx->tl.state = TL_STATE_TX;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f83d 	bl	800b9a8 <ifx_i2c_tl_send_next_fragment>
 800b92e:	4603      	mov	r3, r0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b944:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b956:	2b00      	cmp	r3, #0
 800b958:	d106      	bne.n	800b968 <ifx_i2c_tl_calculate_pctr+0x30>
 800b95a:	897a      	ldrh	r2, [r7, #10]
 800b95c:	89bb      	ldrh	r3, [r7, #12]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d802      	bhi.n	800b968 <ifx_i2c_tl_calculate_pctr+0x30>
    {
        pctr = TL_CHAINING_NO;
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]
 800b966:	e017      	b.n	800b998 <ifx_i2c_tl_calculate_pctr+0x60>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <ifx_i2c_tl_calculate_pctr+0x46>
 800b970:	897a      	ldrh	r2, [r7, #10]
 800b972:	89bb      	ldrh	r3, [r7, #12]
 800b974:	429a      	cmp	r2, r3
 800b976:	d902      	bls.n	800b97e <ifx_i2c_tl_calculate_pctr+0x46>
    {
        pctr = TL_CHAINING_FIRST;
 800b978:	2301      	movs	r3, #1
 800b97a:	73fb      	strb	r3, [r7, #15]
 800b97c:	e00c      	b.n	800b998 <ifx_i2c_tl_calculate_pctr+0x60>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b982:	2b00      	cmp	r3, #0
 800b984:	d006      	beq.n	800b994 <ifx_i2c_tl_calculate_pctr+0x5c>
 800b986:	897a      	ldrh	r2, [r7, #10]
 800b988:	89bb      	ldrh	r3, [r7, #12]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d902      	bls.n	800b994 <ifx_i2c_tl_calculate_pctr+0x5c>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 800b98e:	2302      	movs	r3, #2
 800b990:	73fb      	strb	r3, [r7, #15]
 800b992:	e001      	b.n	800b998 <ifx_i2c_tl_calculate_pctr+0x60>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 800b994:	2304      	movs	r3, #4
 800b996:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3714      	adds	r7, #20
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop

0800b9a8 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b9b4:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7ff ffbe 	bl	800b938 <ifx_i2c_tl_calculate_pctr>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b9ca:	1ad2      	subs	r2, r2, r3
 800b9cc:	89fb      	ldrh	r3, [r7, #14]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	da05      	bge.n	800b9de <ifx_i2c_tl_send_next_fragment+0x36>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	7b7a      	ldrb	r2, [r7, #13]
 800b9e2:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f503 71d6 	add.w	r1, r3, #428	; 0x1ac
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800b9f4:	441a      	add	r2, r3
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800b9f6:	89fb      	ldrh	r3, [r7, #14]
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	f006 fd81 	bl	8012504 <memcpy>
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800ba06:	89fb      	ldrh	r3, [r7, #14]
 800ba08:	4413      	add	r3, r2
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	871a      	strh	r2, [r3, #56]	; 0x38
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 800ba10:	89fb      	ldrh	r3, [r7, #14]
 800ba12:	3301      	adds	r3, #1
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f7fe fe37 	bl	800a68c <ifx_i2c_dl_send_frame>
 800ba1e:	4603      	mov	r3, r0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 800ba30:	2301      	movs	r3, #1
 800ba32:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2207      	movs	r2, #7
 800ba38:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    p_ctx->tl.total_recv_length = 0;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	869a      	strh	r2, [r3, #52]	; 0x34
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 800ba42:	89fb      	ldrh	r3, [r7, #14]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	4619      	mov	r1, r3
 800ba48:	f7fe fe20 	bl	800a68c <ifx_i2c_dl_send_frame>
 800ba4c:	4603      	mov	r3, r0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop

0800ba58 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	460a      	mov	r2, r1
 800ba62:	71fb      	strb	r3, [r7, #7]
 800ba64:	4613      	mov	r3, r2
 800ba66:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 800ba68:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ba6c:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	2b07      	cmp	r3, #7
 800ba72:	d00b      	beq.n	800ba8c <ifx_i2c_tl_check_chaining_error+0x34>
 800ba74:	79fb      	ldrb	r3, [r7, #7]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d008      	beq.n	800ba8c <ifx_i2c_tl_check_chaining_error+0x34>
 800ba7a:	79fb      	ldrb	r3, [r7, #7]
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	d005      	beq.n	800ba8c <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 800ba80:	79fb      	ldrb	r3, [r7, #7]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d002      	beq.n	800ba8c <ifx_i2c_tl_check_chaining_error+0x34>
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d110      	bne.n	800baae <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 800ba8c:	79fb      	ldrb	r3, [r7, #7]
 800ba8e:	4a0b      	ldr	r2, [pc, #44]	; (800babc <ifx_i2c_tl_check_chaining_error+0x64>)
 800ba90:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ba94:	79ba      	ldrb	r2, [r7, #6]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d007      	beq.n	800baaa <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 800ba9a:	79fb      	ldrb	r3, [r7, #7]
 800ba9c:	4a07      	ldr	r2, [pc, #28]	; (800babc <ifx_i2c_tl_check_chaining_error+0x64>)
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	4413      	add	r3, r2
 800baa2:	785b      	ldrb	r3, [r3, #1]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 800baa4:	79ba      	ldrb	r2, [r7, #6]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d101      	bne.n	800baae <ifx_i2c_tl_check_chaining_error+0x56>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
        {
            status =  IFX_I2C_STACK_SUCCESS;
 800baaa:	2300      	movs	r3, #0
 800baac:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 800baae:	89fb      	ldrh	r3, [r7, #14]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	08013d30 	.word	0x08013d30

0800bac0 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 800bacc:	2300      	movs	r3, #0
 800bace:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	f023 0307 	bic.w	r3, r3, #7
 800bad6:	737b      	strb	r3, [r7, #13]
            }
        }
    }
    else 
    {
        if ((FALSE == p_ctx->tl.initialization_state))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d105      	bne.n	800baee <presence_bit_check+0x2e>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 800bae2:	7b7b      	ldrb	r3, [r7, #13]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <presence_bit_check+0x2e>
            {
                return_status = IFX_I2C_STACK_ERROR;
 800bae8:	f44f 7381 	mov.w	r3, #258	; 0x102
 800baec:	81fb      	strh	r3, [r7, #14]
            }
        }
    }
    return (return_status);
 800baee:	89fb      	ldrh	r3, [r7, #14]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3714      	adds	r7, #20
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 800bafc:	b590      	push	{r4, r7, lr}
 800bafe:	b087      	sub	sp, #28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	607a      	str	r2, [r7, #4]
 800bb06:	461a      	mov	r2, r3
 800bb08:	460b      	mov	r3, r1
 800bb0a:	817b      	strh	r3, [r7, #10]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 800bb14:	2300      	movs	r3, #0
 800bb16:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d006      	beq.n	800bb30 <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	f003 0307 	and.w	r3, r3, #7
 800bb2e:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 800bb30:	897b      	ldrh	r3, [r7, #10]
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d008      	beq.n	800bb4c <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2206      	movs	r2, #6
 800bb3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bb48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        }
        if (0 != data_len)
 800bb4c:	893b      	ldrh	r3, [r7, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d010      	beq.n	800bb74 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 800bb52:	7dfb      	ldrb	r3, [r7, #23]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	4619      	mov	r1, r3
 800bb58:	f7ff ffb2 	bl	800bac0 <presence_bit_check>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d008      	beq.n	800bb74 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2206      	movs	r2, #6
 800bb66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bb70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        switch (p_ctx->tl.state)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bb82:	3b01      	subs	r3, #1
 800bb84:	2b07      	cmp	r3, #7
 800bb86:	f200 81bf 	bhi.w	800bf08 <ifx_i2c_dl_event_handler+0x40c>
 800bb8a:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <ifx_i2c_dl_event_handler+0x94>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbb1 	.word	0x0800bbb1
 800bb94:	0800bbc5 	.word	0x0800bbc5
 800bb98:	0800bf09 	.word	0x0800bf09
 800bb9c:	0800bc55 	.word	0x0800bc55
 800bba0:	0800bd8b 	.word	0x0800bd8b
 800bba4:	0800bed7 	.word	0x0800bed7
 800bba8:	0800be95 	.word	0x0800be95
 800bbac:	0800be39 	.word	0x0800be39
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	2100      	movs	r1, #0
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	47a0      	blx	r4
            }
            break;
 800bbc2:	e1b2      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 800bbc4:	897b      	ldrh	r3, [r7, #10]
 800bbc6:	f003 0302 	and.w	r3, r3, #2
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d03c      	beq.n	800bc48 <ifx_i2c_dl_event_handler+0x14c>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d215      	bcs.n	800bc06 <ifx_i2c_dl_event_handler+0x10a>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 800bbda:	7dbb      	ldrb	r3, [r7, #22]
 800bbdc:	2b07      	cmp	r3, #7
 800bbde:	d104      	bne.n	800bbea <ifx_i2c_dl_event_handler+0xee>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2208      	movs	r2, #8
 800bbe4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                            break;
 800bbe8:	e19f      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 800bbea:	893b      	ldrh	r3, [r7, #8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d004      	beq.n	800bbfa <ifx_i2c_dl_event_handler+0xfe>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2206      	movs	r2, #6
 800bbf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                            break;
 800bbf8:	e197      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                        }
                        exit_machine = FALSE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7ff fed2 	bl	800b9a8 <ifx_i2c_tl_send_next_fragment>
 800bc04:	e025      	b.n	800bc52 <ifx_i2c_dl_event_handler+0x156>
                    }
                    else
                    {
                        // Transmission of all fragments complete, start receiving fragments
                        LOG_TL("[IFX-TL]: Tx:All fragment sent\n");
                        p_ctx->tl.state = TL_STATE_RX;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2204      	movs	r2, #4
 800bc0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        p_ctx->tl.total_recv_length = 0;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	869a      	strh	r2, [r3, #52]	; 0x34
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                        p_ctx->tl.transmission_completed = 1;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                        // if data is received after sending last frame
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 800bc24:	897b      	ldrh	r3, [r7, #10]
 800bc26:	f003 0304 	and.w	r3, r3, #4
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d111      	bne.n	800bc52 <ifx_i2c_dl_event_handler+0x156>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data already received after Tx\n");
                            // Received CTRL frame, trigger reception in Data Link layer
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7fe fd5c 	bl	800a6ec <ifx_i2c_dl_receive_frame>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d003      	beq.n	800bc42 <ifx_i2c_dl_event_handler+0x146>
                            {
                                LOG_TL("[IFX-TL]: Tx:RX Received CTRL frame fail -> Inform UL\n");
                                p_ctx->tl.state = TL_STATE_ERROR;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2206      	movs	r2, #6
 800bc3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                            }
                            exit_machine = FALSE;
 800bc42:	2300      	movs	r3, #0
 800bc44:	757b      	strb	r3, [r7, #21]
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 800bc46:	e170      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    }
                }
                else
                {
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2206      	movs	r2, #6
 800bc4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    break;
 800bc50:	e16b      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                }
            }
            break;
 800bc52:	e16a      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 800bc54:	897b      	ldrh	r3, [r7, #10]
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f000 808f 	beq.w	800bd7e <ifx_i2c_dl_event_handler+0x282>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 800bc60:	893b      	ldrh	r3, [r7, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d104      	bne.n	800bc70 <ifx_i2c_dl_event_handler+0x174>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2206      	movs	r2, #6
 800bc6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        break;
 800bc6e:	e15c      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800bc76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc7a:	d114      	bne.n	800bca6 <ifx_i2c_dl_event_handler+0x1aa>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 800bc7c:	7dbb      	ldrb	r3, [r7, #22]
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d005      	beq.n	800bc8e <ifx_i2c_dl_event_handler+0x192>
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f7fe fd32 	bl	800a6ec <ifx_i2c_dl_receive_frame>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d004      	beq.n	800bc98 <ifx_i2c_dl_event_handler+0x19c>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2206      	movs	r2, #6
 800bc92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                            break;
 800bc96:	e148      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2204      	movs	r2, #4
 800bc9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        exit_machine = FALSE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	757b      	strb	r3, [r7, #21]
                        break;
 800bca4:	e141      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800bcac:	7dba      	ldrb	r2, [r7, #22]
 800bcae:	4610      	mov	r0, r2
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f7ff fed1 	bl	800ba58 <ifx_i2c_tl_check_chaining_error>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d004      	beq.n	800bcc6 <ifx_i2c_dl_event_handler+0x1ca>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2208      	movs	r2, #8
 800bcc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        break;
 800bcc4:	e131      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 800bcc6:	7dbb      	ldrb	r3, [r7, #22]
 800bcc8:	f003 0307 	and.w	r3, r3, #7
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    if (NULL == p_data)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d104      	bne.n	800bce4 <ifx_i2c_dl_event_handler+0x1e8>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2206      	movs	r2, #6
 800bcde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        break;
 800bce2:	e122      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 800bce4:	7dbb      	ldrb	r3, [r7, #22]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d002      	beq.n	800bcf0 <ifx_i2c_dl_event_handler+0x1f4>
 800bcea:	7dbb      	ldrb	r3, [r7, #22]
 800bcec:	2b04      	cmp	r3, #4
 800bcee:	d141      	bne.n	800bd74 <ifx_i2c_dl_event_handler+0x278>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	893b      	ldrh	r3, [r7, #8]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bd00:	8812      	ldrh	r2, [r2, #0]
 800bd02:	4293      	cmp	r3, r2
 800bd04:	dd09      	ble.n	800bd1a <ifx_i2c_dl_event_handler+0x21e>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bd0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                            p_ctx->tl.state = TL_STATE_ERROR;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2206      	movs	r2, #6
 800bd14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                            break;
 800bd18:	e107      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                        }
                        exit_machine = FALSE;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800bd26:	1899      	adds	r1, r3, r2
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	893b      	ldrh	r3, [r7, #8]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	4608      	mov	r0, r1
 800bd32:	4611      	mov	r1, r2
 800bd34:	461a      	mov	r2, r3
 800bd36:	f006 fbe5 	bl	8012504 <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800bd3e:	893b      	ldrh	r3, [r7, #8]
 800bd40:	4413      	add	r3, r2
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	3b01      	subs	r3, #1
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	869a      	strh	r2, [r3, #52]	; 0x34
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800bd5c:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6d5c      	ldr	r4, [r3, #84]	; 0x54
                                                            p_ctx->tl.p_recv_packet_buffer,
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
                        p_ctx->tl.total_recv_length += (data_len - 1);
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	2100      	movs	r1, #0
 800bd70:	47a0      	blx	r4
 800bd72:	e009      	b.n	800bd88 <ifx_i2c_dl_event_handler+0x28c>
                                                            p_ctx->tl.p_recv_packet_buffer,
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
                    }
                    else
                    {
                        p_ctx->tl.state = TL_STATE_CHAINING;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2205      	movs	r2, #5
 800bd78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800bd7c:	e004      	b.n	800bd88 <ifx_i2c_dl_event_handler+0x28c>
                    }
                }
                else
                {
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2206      	movs	r2, #6
 800bd82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    break;
 800bd86:	e0d0      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                }
            }
            break;
 800bd88:	e0cf      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 800bd8a:	893a      	ldrh	r2, [r7, #8]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800bd90:	3301      	adds	r3, #1
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d004      	beq.n	800bda0 <ifx_i2c_dl_event_handler+0x2a4>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2207      	movs	r2, #7
 800bd9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    break;
 800bd9e:	e0c4      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800bda4:	461a      	mov	r2, r3
 800bda6:	893b      	ldrh	r3, [r7, #8]
 800bda8:	4413      	add	r3, r2
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bdb0:	8812      	ldrh	r2, [r2, #0]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	dd09      	ble.n	800bdca <ifx_i2c_dl_event_handler+0x2ce>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bdbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    p_ctx->tl.state = TL_STATE_RX;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2204      	movs	r2, #4
 800bdc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    break;
 800bdc8:	e0af      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                }
                if (NULL == p_data)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d104      	bne.n	800bdda <ifx_i2c_dl_event_handler+0x2de>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2206      	movs	r2, #6
 800bdd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    break;
 800bdd8:	e0a7      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800bde2:	1899      	adds	r1, r3, r2
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	893b      	ldrh	r3, [r7, #8]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	4608      	mov	r0, r1
 800bdee:	4611      	mov	r1, r2
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	f006 fb87 	bl	8012504 <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800bdfa:	893b      	ldrh	r3, [r7, #8]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	3b01      	subs	r3, #1
 800be02:	b29a      	uxth	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	869a      	strh	r2, [r3, #52]	; 0x34

                p_ctx->tl.previous_chaining = pctr & 0x07;
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	f003 0307 	and.w	r3, r3, #7
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2204      	movs	r2, #4
 800be1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f7fe fc64 	bl	800a6ec <ifx_i2c_dl_receive_frame>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <ifx_i2c_dl_event_handler+0x336>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2206      	movs	r2, #6
 800be2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                }
                exit_machine = FALSE;
 800be32:	2300      	movs	r3, #0
 800be34:	757b      	strb	r3, [r7, #21]
            }
            break;
 800be36:	e078      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 800be38:	893b      	ldrh	r3, [r7, #8]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d909      	bls.n	800be52 <ifx_i2c_dl_event_handler+0x356>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800be44:	2b01      	cmp	r3, #1
 800be46:	d104      	bne.n	800be52 <ifx_i2c_dl_event_handler+0x356>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2207      	movs	r2, #7
 800be4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    break;
 800be50:	e06b      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	b2d1      	uxtb	r1, r2
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
 800be62:	2b00      	cmp	r3, #0
 800be64:	d111      	bne.n	800be8a <ifx_i2c_dl_event_handler+0x38e>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f7ff fd44 	bl	800b8fc <ifx_i2c_tl_resend_packets>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d004      	beq.n	800be84 <ifx_i2c_dl_event_handler+0x388>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2206      	movs	r2, #6
 800be7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 800be82:	e052      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
                    }
                    else
                    {
                        exit_machine = FALSE;
 800be84:	2300      	movs	r3, #0
 800be86:	757b      	strb	r3, [r7, #21]
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 800be88:	e04f      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    }
                }
                else
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2206      	movs	r2, #6
 800be8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                }
            }
            break;
 800be92:	e04a      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2202      	movs	r2, #2
 800be98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	b2d1      	uxtb	r1, r2
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10d      	bne.n	800becc <ifx_i2c_dl_event_handler+0x3d0>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7ff fdb9 	bl	800ba28 <ifx_i2c_tl_send_chaining_error>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d004      	beq.n	800bec6 <ifx_i2c_dl_event_handler+0x3ca>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2206      	movs	r2, #6
 800bec0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 800bec4:	e031      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
                    }
                    else
                    {
                        exit_machine = FALSE;
 800bec6:	2300      	movs	r3, #0
 800bec8:	757b      	strb	r3, [r7, #21]
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 800beca:	e02e      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
                    }
                }
                else
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2206      	movs	r2, #6
 800bed0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                }
            }
            break;
 800bed4:	e029      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 800bed6:	2300      	movs	r3, #0
 800bed8:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 800beda:	897b      	ldrh	r3, [r7, #10]
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <ifx_i2c_dl_event_handler+0x3ee>
 800bee4:	893b      	ldrh	r3, [r7, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <ifx_i2c_dl_event_handler+0x3f6>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2201      	movs	r2, #1
 800beee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	4619      	mov	r1, r3
 800bf00:	2200      	movs	r2, #0
 800bf02:	2300      	movs	r3, #0
 800bf04:	47a0      	blx	r4
            }
            break;
 800bf06:	e010      	b.n	800bf2a <ifx_i2c_dl_event_handler+0x42e>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                exit_machine = FALSE;
 800bf10:	2300      	movs	r3, #0
 800bf12:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	4619      	mov	r1, r3
 800bf22:	2200      	movs	r2, #0
 800bf24:	2300      	movs	r3, #0
 800bf26:	47a0      	blx	r4
            }
            break;
 800bf28:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 800bf2a:	7d7b      	ldrb	r3, [r7, #21]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	f43f adf5 	beq.w	800bb1c <ifx_i2c_dl_event_handler+0x20>
}
 800bf32:	371c      	adds	r7, #28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd90      	pop	{r4, r7, pc}

0800bf38 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 800bf46:	4b0e      	ldr	r3, [pc, #56]	; (800bf80 <optiga_comms_create+0x48>)
 800bf48:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	7b1b      	ldrb	r3, [r3, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d110      	bne.n	800bf74 <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 800bf52:	f7fd fd71 	bl	8009a38 <pal_init>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60fb      	str	r3, [r7, #12]
                break;
 800bf60:	e008      	b.n	800bf74 <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	609a      	str	r2, [r3, #8]
            p_optiga_comms->p_upper_layer_ctx = context;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	605a      	str	r2, [r3, #4]
            p_optiga_comms->instance_init_state = TRUE;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2201      	movs	r2, #1
 800bf72:	731a      	strb	r2, [r3, #12]
        }
    } while (FALSE);
    return (p_optiga_comms);
 800bf74:	68fb      	ldr	r3, [r7, #12]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	1ffed558 	.word	0x1ffed558

0800bf84 <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	605a      	str	r2, [r3, #4]
    return (0);
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop

0800bfa4 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800bfac:	f44f 7381 	mov.w	r3, #258	; 0x102
 800bfb0:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f882 	bl	800c0bc <check_optiga_comms_state>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d11a      	bne.n	800bff4 <optiga_comms_open+0x50>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	619a      	str	r2, [r3, #24]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a0d      	ldr	r2, [pc, #52]	; (800c000 <optiga_comms_open+0x5c>)
 800bfcc:	615a      	str	r2, [r3, #20]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	6912      	ldr	r2, [r2, #16]
 800bfd6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe f9ce 	bl	800a380 <ifx_i2c_open>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 800bfe8:	89fb      	ldrh	r3, [r7, #14]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d002      	beq.n	800bff4 <optiga_comms_open+0x50>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	735a      	strb	r2, [r3, #13]
        }
    }
    return (status);
 800bff4:	89fb      	ldrh	r3, [r7, #14]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	0800c0f1 	.word	0x0800c0f1

0800c004 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af02      	add	r7, sp, #8
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	603b      	str	r3, [r7, #0]
 800c010:	4613      	mov	r3, r2
 800c012:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800c014:	f44f 7381 	mov.w	r3, #258	; 0x102
 800c018:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f000 f84e 	bl	800c0bc <check_optiga_comms_state>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d119      	bne.n	800c05a <optiga_comms_transceive+0x56>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	619a      	str	r2, [r3, #24]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a0c      	ldr	r2, [pc, #48]	; (800c064 <optiga_comms_transceive+0x60>)
 800c034:	615a      	str	r2, [r3, #20]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6819      	ldr	r1, [r3, #0]
 800c03a:	88fa      	ldrh	r2, [r7, #6]
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	4608      	mov	r0, r1
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	f7fe f9d3 	bl	800a3f0 <ifx_i2c_transceive>
 800c04a:	4603      	mov	r3, r0
 800c04c:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 800c04e:	8afb      	ldrh	r3, [r7, #22]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <optiga_comms_transceive+0x56>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2200      	movs	r2, #0
 800c058:	735a      	strb	r2, [r3, #13]
        }
    }
    return (status);
 800c05a:	8afb      	ldrh	r3, [r7, #22]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	0800c0f1 	.word	0x0800c0f1

0800c068 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800c070:	f44f 7381 	mov.w	r3, #258	; 0x102
 800c074:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f820 	bl	800c0bc <check_optiga_comms_state>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d114      	bne.n	800c0ac <optiga_comms_close+0x44>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	619a      	str	r2, [r3, #24]
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a0a      	ldr	r2, [pc, #40]	; (800c0b8 <optiga_comms_close+0x50>)
 800c090:	615a      	str	r2, [r3, #20]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe f9e6 	bl	800a468 <ifx_i2c_close>
 800c09c:	4603      	mov	r3, r0
 800c09e:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 800c0a0:	89fb      	ldrh	r3, [r7, #14]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <optiga_comms_close+0x44>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	735a      	strb	r2, [r3, #13]
        }
    }
    return (status);
 800c0ac:	89fb      	ldrh	r3, [r7, #14]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	0800c0f1 	.word	0x0800c0f1

0800c0bc <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800c0c4:	f44f 7381 	mov.w	r3, #258	; 0x102
 800c0c8:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d008      	beq.n	800c0e2 <check_optiga_comms_state+0x26>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	7b5b      	ldrb	r3, [r3, #13]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d004      	beq.n	800c0e2 <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	735a      	strb	r2, [r3, #13]
        status = OPTIGA_COMMS_SUCCESS;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 800c0e2:	89fb      	ldrh	r3, [r7, #14]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3714      	adds	r7, #20
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	887a      	ldrh	r2, [r7, #2]
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	4611      	mov	r1, r2
 800c10c:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	735a      	strb	r2, [r3, #13]
}
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop

0800c11c <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 800c128:	887b      	ldrh	r3, [r7, #2]
 800c12a:	0a1b      	lsrs	r3, r3, #8
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3301      	adds	r3, #1
 800c138:	887a      	ldrh	r2, [r7, #2]
 800c13a:	b2d2      	uxtb	r2, r2
 800c13c:	701a      	strb	r2, [r3, #0]
}
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <optiga_common_get_uint32>:
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
}

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	061a      	lsls	r2, r3, #24
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	3301      	adds	r3, #1
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3302      	adds	r3, #2
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	021b      	lsls	r3, r3, #8
}

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800c166:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 800c168:	6879      	ldr	r1, [r7, #4]
 800c16a:	3103      	adds	r1, #3
 800c16c:	7809      	ldrb	r1, [r1, #0]
 800c16e:	430b      	orrs	r3, r1
}

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800c170:	4313      	orrs	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));

    return (four_byte_value);
 800c174:	68fb      	ldr	r3, [r7, #12]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop

0800c184 <optiga_common_get_uint16>:

void optiga_common_get_uint16 (const uint8_t * p_input_buffer,uint16_t* p_two_byte_value)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
    *p_two_byte_value = (uint16_t)(*p_input_buffer << 8);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	b29b      	uxth	r3, r3
 800c194:	021b      	lsls	r3, r3, #8
 800c196:	b29a      	uxth	r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	801a      	strh	r2, [r3, #0]
    *p_two_byte_value |= (uint16_t)(*(p_input_buffer+1));
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	881a      	ldrh	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	801a      	strh	r2, [r3, #0]
}
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop

0800c1bc <optiga_lib_byte_to_hex_string>:
/* Converts the uint8 array to hex string format */
_STATIC_H void optiga_lib_byte_to_hex_string(const uint8_t * p_array_buffer,
                                             uint8_t * p_hex_string,
                                             uint32_t length,
                                             bool_t is_input_byte_array)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	70fb      	strb	r3, [r7, #3]
    uint32_t loop = 0;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	617b      	str	r3, [r7, #20]
    uint8_t hex_byte = 0, index = 0;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	74bb      	strb	r3, [r7, #18]
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	74fb      	strb	r3, [r7, #19]

    do
    {
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d002      	beq.n	800c1e2 <optiga_lib_byte_to_hex_string+0x26>
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d100      	bne.n	800c1e4 <optiga_lib_byte_to_hex_string+0x28>
        {
            return;
 800c1e2:	e05b      	b.n	800c29c <optiga_lib_byte_to_hex_string+0xe0>
        }

        for (loop = 0; loop < length; loop++)
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
 800c1e8:	e051      	b.n	800c28e <optiga_lib_byte_to_hex_string+0xd2>
        {
            index = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	74fb      	strb	r3, [r7, #19]
            hex_byte = p_array_buffer[loop];
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	74bb      	strb	r3, [r7, #18]
            if (TRUE == is_input_byte_array)
 800c1f8:	78fb      	ldrb	r3, [r7, #3]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d10f      	bne.n	800c21e <optiga_lib_byte_to_hex_string+0x62>
            {
                p_hex_string [index++] = '0';
 800c1fe:	7cfb      	ldrb	r3, [r7, #19]
 800c200:	1c5a      	adds	r2, r3, #1
 800c202:	74fa      	strb	r2, [r7, #19]
 800c204:	461a      	mov	r2, r3
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	4413      	add	r3, r2
 800c20a:	2230      	movs	r2, #48	; 0x30
 800c20c:	701a      	strb	r2, [r3, #0]
                p_hex_string [index++] = 'x';
 800c20e:	7cfb      	ldrb	r3, [r7, #19]
 800c210:	1c5a      	adds	r2, r3, #1
 800c212:	74fa      	strb	r2, [r7, #19]
 800c214:	461a      	mov	r2, r3
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	4413      	add	r3, r2
 800c21a:	2278      	movs	r2, #120	; 0x78
 800c21c:	701a      	strb	r2, [r3, #0]
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
 800c21e:	7cbb      	ldrb	r3, [r7, #18]
 800c220:	091b      	lsrs	r3, r3, #4
 800c222:	747b      	strb	r3, [r7, #17]
 800c224:	7cfb      	ldrb	r3, [r7, #19]
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	74fa      	strb	r2, [r7, #19]
 800c22a:	461a      	mov	r2, r3
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	441a      	add	r2, r3
 800c230:	7c7b      	ldrb	r3, [r7, #17]
 800c232:	2b09      	cmp	r3, #9
 800c234:	d903      	bls.n	800c23e <optiga_lib_byte_to_hex_string+0x82>
 800c236:	7c7b      	ldrb	r3, [r7, #17]
 800c238:	3337      	adds	r3, #55	; 0x37
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	e002      	b.n	800c244 <optiga_lib_byte_to_hex_string+0x88>
 800c23e:	7c7b      	ldrb	r3, [r7, #17]
 800c240:	3330      	adds	r3, #48	; 0x30
 800c242:	b2db      	uxtb	r3, r3
 800c244:	7013      	strb	r3, [r2, #0]
 800c246:	7cbb      	ldrb	r3, [r7, #18]
 800c248:	f003 030f 	and.w	r3, r3, #15
 800c24c:	747b      	strb	r3, [r7, #17]
 800c24e:	7cfb      	ldrb	r3, [r7, #19]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	74fa      	strb	r2, [r7, #19]
 800c254:	461a      	mov	r2, r3
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	441a      	add	r2, r3
 800c25a:	7c7b      	ldrb	r3, [r7, #17]
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	d903      	bls.n	800c268 <optiga_lib_byte_to_hex_string+0xac>
 800c260:	7c7b      	ldrb	r3, [r7, #17]
 800c262:	3337      	adds	r3, #55	; 0x37
 800c264:	b2db      	uxtb	r3, r3
 800c266:	e002      	b.n	800c26e <optiga_lib_byte_to_hex_string+0xb2>
 800c268:	7c7b      	ldrb	r3, [r7, #17]
 800c26a:	3330      	adds	r3, #48	; 0x30
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	7013      	strb	r3, [r2, #0]
            
            p_hex_string [index++] = ' ';
 800c270:	7cfb      	ldrb	r3, [r7, #19]
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	74fa      	strb	r2, [r7, #19]
 800c276:	461a      	mov	r2, r3
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	4413      	add	r3, r2
 800c27c:	2220      	movs	r2, #32
 800c27e:	701a      	strb	r2, [r3, #0]
            p_hex_string += index;
 800c280:	7cfb      	ldrb	r3, [r7, #19]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	4413      	add	r3, r2
 800c286:	60bb      	str	r3, [r7, #8]
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	3301      	adds	r3, #1
 800c28c:	617b      	str	r3, [r7, #20]
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	429a      	cmp	r2, r3
 800c294:	d3a9      	bcc.n	800c1ea <optiga_lib_byte_to_hex_string+0x2e>
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
            
            p_hex_string [index++] = ' ';
            p_hex_string += index;
        }
        *p_hex_string = 0x00;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]
    } while(0);
}
 800c29c:	371c      	adds	r7, #28
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop

0800c2a8 <optiga_lib_word_to_hex_string>:
/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_word_to_hex_string(uint16_t value,
                                             uint8_t * p_buffer)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	6039      	str	r1, [r7, #0]
 800c2b2:	80fb      	strh	r3, [r7, #6]
    uint8_t array_buffer [5] = {0};   
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	743b      	strb	r3, [r7, #16]
    uint8_t loop, hex_byte = 0, index = 0;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	757b      	strb	r3, [r7, #21]
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	75bb      	strb	r3, [r7, #22]
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
 800c2c4:	88fb      	ldrh	r3, [r7, #6]
 800c2c6:	0a1b      	lsrs	r3, r3, #8
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	733b      	strb	r3, [r7, #12]
    array_buffer [1] = (uint8_t)((value & 0x00FF));
 800c2ce:	88fb      	ldrh	r3, [r7, #6]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	737b      	strb	r3, [r7, #13]

    p_buffer [index++] = '0';
 800c2d4:	7dbb      	ldrb	r3, [r7, #22]
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	75ba      	strb	r2, [r7, #22]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	4413      	add	r3, r2
 800c2e0:	2230      	movs	r2, #48	; 0x30
 800c2e2:	701a      	strb	r2, [r3, #0]
    p_buffer [index++] = 'x';
 800c2e4:	7dbb      	ldrb	r3, [r7, #22]
 800c2e6:	1c5a      	adds	r2, r3, #1
 800c2e8:	75ba      	strb	r2, [r7, #22]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	2278      	movs	r2, #120	; 0x78
 800c2f2:	701a      	strb	r2, [r3, #0]
    
    for (loop = 0; loop < 2; loop++)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	75fb      	strb	r3, [r7, #23]
 800c2f8:	e032      	b.n	800c360 <optiga_lib_word_to_hex_string+0xb8>
    {
        hex_byte = array_buffer[loop];
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	f107 0218 	add.w	r2, r7, #24
 800c300:	4413      	add	r3, r2
 800c302:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c306:	757b      	strb	r3, [r7, #21]

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
 800c308:	7d7b      	ldrb	r3, [r7, #21]
 800c30a:	091b      	lsrs	r3, r3, #4
 800c30c:	753b      	strb	r3, [r7, #20]
 800c30e:	7dbb      	ldrb	r3, [r7, #22]
 800c310:	1c5a      	adds	r2, r3, #1
 800c312:	75ba      	strb	r2, [r7, #22]
 800c314:	461a      	mov	r2, r3
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	441a      	add	r2, r3
 800c31a:	7d3b      	ldrb	r3, [r7, #20]
 800c31c:	2b09      	cmp	r3, #9
 800c31e:	d903      	bls.n	800c328 <optiga_lib_word_to_hex_string+0x80>
 800c320:	7d3b      	ldrb	r3, [r7, #20]
 800c322:	3337      	adds	r3, #55	; 0x37
 800c324:	b2db      	uxtb	r3, r3
 800c326:	e002      	b.n	800c32e <optiga_lib_word_to_hex_string+0x86>
 800c328:	7d3b      	ldrb	r3, [r7, #20]
 800c32a:	3330      	adds	r3, #48	; 0x30
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	7013      	strb	r3, [r2, #0]
 800c330:	7d7b      	ldrb	r3, [r7, #21]
 800c332:	f003 030f 	and.w	r3, r3, #15
 800c336:	753b      	strb	r3, [r7, #20]
 800c338:	7dbb      	ldrb	r3, [r7, #22]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	75ba      	strb	r2, [r7, #22]
 800c33e:	461a      	mov	r2, r3
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	441a      	add	r2, r3
 800c344:	7d3b      	ldrb	r3, [r7, #20]
 800c346:	2b09      	cmp	r3, #9
 800c348:	d903      	bls.n	800c352 <optiga_lib_word_to_hex_string+0xaa>
 800c34a:	7d3b      	ldrb	r3, [r7, #20]
 800c34c:	3337      	adds	r3, #55	; 0x37
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	e002      	b.n	800c358 <optiga_lib_word_to_hex_string+0xb0>
 800c352:	7d3b      	ldrb	r3, [r7, #20]
 800c354:	3330      	adds	r3, #48	; 0x30
 800c356:	b2db      	uxtb	r3, r3
 800c358:	7013      	strb	r3, [r2, #0]
    array_buffer [1] = (uint8_t)((value & 0x00FF));

    p_buffer [index++] = '0';
    p_buffer [index++] = 'x';
    
    for (loop = 0; loop < 2; loop++)
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	3301      	adds	r3, #1
 800c35e:	75fb      	strb	r3, [r7, #23]
 800c360:	7dfb      	ldrb	r3, [r7, #23]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d9c9      	bls.n	800c2fa <optiga_lib_word_to_hex_string+0x52>

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
    }    

}
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <optiga_lib_print_length_of_data>:

/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_print_length_of_data(uint16_t value)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b092      	sub	sp, #72	; 0x48
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	80fb      	strh	r3, [r7, #6]
    uint8_t uint16t_conv_buffer [10] = {0};
 800c37a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c37e:	2200      	movs	r2, #0
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	3304      	adds	r3, #4
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]
 800c388:	3304      	adds	r3, #4
 800c38a:	2200      	movs	r2, #0
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	3302      	adds	r3, #2
    char_t print_buffer[50];      

    sprintf((char_t *)print_buffer, "%37s", "Length of data - ");
 800c390:	f107 0308 	add.w	r3, r7, #8
 800c394:	4618      	mov	r0, r3
 800c396:	490d      	ldr	r1, [pc, #52]	; (800c3cc <optiga_lib_print_length_of_data+0x5c>)
 800c398:	4a0d      	ldr	r2, [pc, #52]	; (800c3d0 <optiga_lib_print_length_of_data+0x60>)
 800c39a:	f006 f9fd 	bl	8012798 <siprintf>
    strcat(print_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
    optiga_lib_word_to_hex_string(value,uint16t_conv_buffer);
 800c39e:	88fa      	ldrh	r2, [r7, #6]
 800c3a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	f7ff ff7e 	bl	800c2a8 <optiga_lib_word_to_hex_string>
    strcat(print_buffer,(char_t *)uint16t_conv_buffer); 
 800c3ac:	f107 0208 	add.w	r2, r7, #8
 800c3b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	f006 fa12 	bl	80127e0 <strcat>
    
    optiga_lib_print_string_with_newline(print_buffer);
 800c3bc:	f107 0308 	add.w	r3, r7, #8
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 f807 	bl	800c3d4 <optiga_lib_print_string_with_newline>
}
 800c3c6:	3748      	adds	r7, #72	; 0x48
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	08013d40 	.word	0x08013d40
 800c3d0:	08013d48 	.word	0x08013d48

0800c3d4 <optiga_lib_print_string_with_newline>:
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
}

void optiga_lib_print_string_with_newline(const char_t * p_log_string)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
    uint8_t new_line_characters [2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 800c3dc:	4a0d      	ldr	r2, [pc, #52]	; (800c414 <optiga_lib_print_string_with_newline+0x40>)
 800c3de:	f107 030c 	add.w	r3, r7, #12
 800c3e2:	8812      	ldrh	r2, [r2, #0]
 800c3e4:	801a      	strh	r2, [r3, #0]

    if (NULL == p_log_string)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00f      	beq.n	800c40c <optiga_lib_print_string_with_newline+0x38>
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f006 fa06 	bl	80127fe <strlen>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	4808      	ldr	r0, [pc, #32]	; (800c418 <optiga_lib_print_string_with_newline+0x44>)
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	f7fd f8bd 	bl	8009578 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 800c3fe:	f107 030c 	add.w	r3, r7, #12
 800c402:	4805      	ldr	r0, [pc, #20]	; (800c418 <optiga_lib_print_string_with_newline+0x44>)
 800c404:	4619      	mov	r1, r3
 800c406:	2202      	movs	r2, #2
 800c408:	f7fd f8b6 	bl	8009578 <pal_logger_write>

}
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	08013d5c 	.word	0x08013d5c
 800c418:	1ffed12c 	.word	0x1ffed12c

0800c41c <optiga_lib_print_array_hex_format>:
}

void optiga_lib_print_array_hex_format(const uint8_t * p_log_string,
                                       uint16_t length,
                                       const char_t * p_log_color)
{
 800c41c:	b590      	push	{r4, r7, lr}
 800c41e:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
 800c422:	af02      	add	r7, sp, #8
 800c424:	f107 030c 	add.w	r3, r7, #12
 800c428:	6018      	str	r0, [r3, #0]
 800c42a:	1d3b      	adds	r3, r7, #4
 800c42c:	601a      	str	r2, [r3, #0]
 800c42e:	f107 030a 	add.w	r3, r7, #10
 800c432:	460a      	mov	r2, r1
 800c434:	801a      	strh	r2, [r3, #0]
    uint8_t temp_buffer[350];
    char_t output_buffer[400];
    uint16_t index;
    uint16_t temp_length;
    char_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 800c436:	f107 0310 	add.w	r3, r7, #16
 800c43a:	494d      	ldr	r1, [pc, #308]	; (800c570 <optiga_lib_print_array_hex_format+0x154>)
 800c43c:	461a      	mov	r2, r3
 800c43e:	460b      	mov	r3, r1
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	8013      	strh	r3, [r2, #0]
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line
 800c444:	2320      	movs	r3, #32
 800c446:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303

    if ((NULL == p_log_string) || (NULL == p_log_color))
 800c44a:	f107 030c 	add.w	r3, r7, #12
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	f000 8088 	beq.w	800c566 <optiga_lib_print_array_hex_format+0x14a>
 800c456:	1d3b      	adds	r3, r7, #4
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 8083 	beq.w	800c566 <optiga_lib_print_array_hex_format+0x14a>
    {
        return;
    }
    
    optiga_lib_print_length_of_data(length);
 800c460:	f107 030a 	add.w	r3, r7, #10
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	4618      	mov	r0, r3
 800c468:	f7ff ff82 	bl	800c370 <optiga_lib_print_length_of_data>
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
 800c46c:	2300      	movs	r3, #0
 800c46e:	f8a7 3306 	strh.w	r3, [r7, #774]	; 0x306
 800c472:	e071      	b.n	800c558 <optiga_lib_print_array_hex_format+0x13c>
    {
        temp_length = buffer_window;
 800c474:	f897 3303 	ldrb.w	r3, [r7, #771]	; 0x303
 800c478:	f8a7 3304 	strh.w	r3, [r7, #772]	; 0x304
        if ((length - index) < buffer_window)
 800c47c:	f107 030a 	add.w	r3, r7, #10
 800c480:	881a      	ldrh	r2, [r3, #0]
 800c482:	f8b7 3306 	ldrh.w	r3, [r7, #774]	; 0x306
 800c486:	1ad2      	subs	r2, r2, r3
 800c488:	f897 3303 	ldrb.w	r3, [r7, #771]	; 0x303
 800c48c:	429a      	cmp	r2, r3
 800c48e:	da07      	bge.n	800c4a0 <optiga_lib_print_array_hex_format+0x84>
        {
            temp_length =  length - index;
 800c490:	f107 030a 	add.w	r3, r7, #10
 800c494:	881a      	ldrh	r2, [r3, #0]
 800c496:	f8b7 3306 	ldrh.w	r3, [r7, #774]	; 0x306
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	f8a7 3304 	strh.w	r3, [r7, #772]	; 0x304
        }

        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
 800c4a0:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c4ac:	f7fd fa62 	bl	8009974 <pal_os_memset>
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));
 800c4b0:	f107 0314 	add.w	r3, r7, #20
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c4bc:	f7fd fa5a 	bl	8009974 <pal_os_memset>

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);
 800c4c0:	f8b7 3306 	ldrh.w	r3, [r7, #774]	; 0x306
 800c4c4:	f107 020c 	add.w	r2, r7, #12
 800c4c8:	6812      	ldr	r2, [r2, #0]
 800c4ca:	18d1      	adds	r1, r2, r3
 800c4cc:	f8b7 3304 	ldrh.w	r3, [r7, #772]	; 0x304
 800c4d0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	461a      	mov	r2, r3
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f7ff fe6e 	bl	800c1bc <optiga_lib_byte_to_hex_string>

        OPTIGA_LIB_LOGGER_PRINT_ARRAY(output_buffer,temp_buffer, p_log_color);
 800c4e0:	f107 0114 	add.w	r1, r7, #20
 800c4e4:	1d3b      	adds	r3, r7, #4
 800c4e6:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800c4ea:	4a22      	ldr	r2, [pc, #136]	; (800c574 <optiga_lib_print_array_hex_format+0x158>)
 800c4ec:	9200      	str	r2, [sp, #0]
 800c4ee:	4608      	mov	r0, r1
 800c4f0:	4921      	ldr	r1, [pc, #132]	; (800c578 <optiga_lib_print_array_hex_format+0x15c>)
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	4623      	mov	r3, r4
 800c4f6:	f006 f94f 	bl	8012798 <siprintf>

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
 800c4fa:	f107 0314 	add.w	r3, r7, #20
 800c4fe:	4618      	mov	r0, r3
 800c500:	f006 f97d 	bl	80127fe <strlen>
 800c504:	4602      	mov	r2, r0
 800c506:	f107 0310 	add.w	r3, r7, #16
 800c50a:	7819      	ldrb	r1, [r3, #0]
 800c50c:	f107 0314 	add.w	r3, r7, #20
 800c510:	5499      	strb	r1, [r3, r2]
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
 800c512:	f107 0314 	add.w	r3, r7, #20
 800c516:	4618      	mov	r0, r3
 800c518:	f006 f971 	bl	80127fe <strlen>
 800c51c:	4603      	mov	r3, r0
 800c51e:	3301      	adds	r3, #1
 800c520:	f107 0210 	add.w	r2, r7, #16
 800c524:	7851      	ldrb	r1, [r2, #1]
 800c526:	f107 0214 	add.w	r2, r7, #20
 800c52a:	54d1      	strb	r1, [r2, r3]
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
 800c52c:	f107 0314 	add.w	r3, r7, #20
 800c530:	4618      	mov	r0, r3
 800c532:	f006 f964 	bl	80127fe <strlen>
 800c536:	4603      	mov	r3, r0
 800c538:	3302      	adds	r3, #2
 800c53a:	f107 0214 	add.w	r2, r7, #20
 800c53e:	480f      	ldr	r0, [pc, #60]	; (800c57c <optiga_lib_print_array_hex_format+0x160>)
 800c540:	4611      	mov	r1, r2
 800c542:	461a      	mov	r2, r3
 800c544:	f7fd f818 	bl	8009578 <pal_logger_write>
    }
    
    optiga_lib_print_length_of_data(length);
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
 800c548:	f897 3303 	ldrb.w	r3, [r7, #771]	; 0x303
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	f8b7 3306 	ldrh.w	r3, [r7, #774]	; 0x306
 800c552:	4413      	add	r3, r2
 800c554:	f8a7 3306 	strh.w	r3, [r7, #774]	; 0x306
 800c558:	f107 030a 	add.w	r3, r7, #10
 800c55c:	f8b7 2306 	ldrh.w	r2, [r7, #774]	; 0x306
 800c560:	881b      	ldrh	r3, [r3, #0]
 800c562:	429a      	cmp	r2, r3
 800c564:	d386      	bcc.n	800c474 <optiga_lib_print_array_hex_format+0x58>
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
    }
}
 800c566:	f507 7743 	add.w	r7, r7, #780	; 0x30c
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd90      	pop	{r4, r7, pc}
 800c56e:	bf00      	nop
 800c570:	08013d5c 	.word	0x08013d5c
 800c574:	08013d6c 	.word	0x08013d6c
 800c578:	08013d98 	.word	0x08013d98
 800c57c:	1ffed12c 	.word	0x1ffed12c

0800c580 <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	603b      	str	r3, [r7, #0]
 800c588:	4603      	mov	r3, r0
 800c58a:	71fb      	strb	r3, [r7, #7]
 800c58c:	460b      	mov	r3, r1
 800c58e:	71bb      	strb	r3, [r7, #6]
 800c590:	4613      	mov	r3, r2
 800c592:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	79fa      	ldrb	r2, [r7, #7]
 800c598:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	79ba      	ldrb	r2, [r7, #6]
 800c5a0:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	3302      	adds	r3, #2
 800c5a6:	88ba      	ldrh	r2, [r7, #4]
 800c5a8:	0a12      	lsrs	r2, r2, #8
 800c5aa:	b292      	uxth	r2, r2
 800c5ac:	b2d2      	uxtb	r2, r2
 800c5ae:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	3303      	adds	r3, #3
 800c5b4:	88ba      	ldrh	r2, [r7, #4]
 800c5b6:	b2d2      	uxtb	r2, r2
 800c5b8:	701a      	strb	r2, [r3, #0]
}
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60ba      	str	r2, [r7, #8]
 800c5cc:	607b      	str	r3, [r7, #4]
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	73fb      	strb	r3, [r7, #15]
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	81bb      	strh	r3, [r7, #12]
    uint16_t start_position = *position;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	82fb      	strh	r3, [r7, #22]

    buffer[start_position++] = tag;
 800c5dc:	8afb      	ldrh	r3, [r7, #22]
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	82fa      	strh	r2, [r7, #22]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	7bfa      	ldrb	r2, [r7, #15]
 800c5ea:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 800c5ec:	8afb      	ldrh	r3, [r7, #22]
 800c5ee:	1c5a      	adds	r2, r3, #1
 800c5f0:	82fa      	strh	r2, [r7, #22]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	89ba      	ldrh	r2, [r7, #12]
 800c5fa:	0a12      	lsrs	r2, r2, #8
 800c5fc:	b292      	uxth	r2, r2
 800c5fe:	b2d2      	uxtb	r2, r2
 800c600:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length);
 800c602:	8afb      	ldrh	r3, [r7, #22]
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	82fa      	strh	r2, [r7, #22]
 800c608:	461a      	mov	r2, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	89ba      	ldrh	r2, [r7, #12]
 800c610:	b2d2      	uxtb	r2, r2
 800c612:	701a      	strb	r2, [r3, #0]

    *position = start_position;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	8afa      	ldrh	r2, [r7, #22]
 800c618:	801a      	strh	r2, [r3, #0]
}
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <optiga_cmd_event_trigger_execute>:


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	2100      	movs	r1, #0
 800c630:	f000 fe56 	bl	800d2e0 <optiga_cmd_execute_handler>
}
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop

0800c63c <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	461a      	mov	r2, r3
 800c648:	460b      	mov	r3, r1
 800c64a:	72fb      	strb	r3, [r7, #11]
 800c64c:	4613      	mov	r3, r2
 800c64e:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	69fa      	ldr	r2, [r7, #28]
 800c654:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	7aba      	ldrb	r2, [r7, #10]
 800c65a:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	7e3a      	ldrb	r2, [r7, #24]
 800c660:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	7afa      	ldrb	r2, [r7, #11]
 800c672:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	8c3a      	ldrh	r2, [r7, #32]
 800c678:	841a      	strh	r2, [r3, #32]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	2100      	movs	r1, #0
 800c67e:	f000 fe2f 	bl	800d2e0 <optiga_cmd_execute_handler>
}
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3308      	adds	r3, #8
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff fd57 	bl	800c148 <optiga_common_get_uint32>
 800c69a:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f1b3 3f10 	cmp.w	r3, #269488144	; 0x10101010
 800c6a2:	d201      	bcs.n	800c6a8 <optiga_cmd_session_available+0x20>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e000      	b.n	800c6aa <optiga_cmd_session_available+0x22>
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop

0800c6b4 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	8a9b      	ldrh	r3, [r3, #20]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d11b      	bne.n	800c704 <optiga_cmd_session_assign+0x50>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73fb      	strb	r3, [r7, #15]
 800c6d0:	e015      	b.n	800c6fe <optiga_cmd_session_assign+0x4a>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	2b10      	cmp	r3, #16
 800c6dc:	d00c      	beq.n	800c6f8 <optiga_cmd_session_assign+0x44>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	4b0b      	ldr	r3, [pc, #44]	; (800c710 <optiga_cmd_session_assign+0x5c>)
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	2210      	movs	r2, #16
 800c6f4:	701a      	strb	r2, [r3, #0]
                break;
 800c6f6:	e005      	b.n	800c704 <optiga_cmd_session_assign+0x50>
{
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	73fb      	strb	r3, [r7, #15]
 800c6fe:	7bfb      	ldrb	r3, [r7, #15]
 800c700:	2b03      	cmp	r3, #3
 800c702:	d9e6      	bls.n	800c6d2 <optiga_cmd_session_assign+0x1e>
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
                break;
            }
        }
    }
}
 800c704:	3714      	adds	r7, #20
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	ffffe100 	.word	0xffffe100

0800c714 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3308      	adds	r3, #8
 800c722:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	8a9b      	ldrh	r3, [r3, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00d      	beq.n	800c748 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	8a9b      	ldrh	r3, [r3, #20]
 800c730:	b2db      	uxtb	r3, r3
 800c732:	f003 030f 	and.w	r3, r3, #15
 800c736:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 800c73e:	7afb      	ldrb	r3, [r7, #11]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	4413      	add	r3, r2
 800c744:	2200      	movs	r2, #0
 800c746:	701a      	strb	r2, [r3, #0]
    }
}
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop

0800c754 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
 800c760:	4613      	mov	r3, r2
 800c762:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
 800c770:	e027      	b.n	800c7c2 <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 800c772:	78fb      	ldrb	r3, [r7, #3]
 800c774:	2b08      	cmp	r3, #8
 800c776:	d002      	beq.n	800c77e <optiga_cmd_queue_get_count_of+0x2a>
 800c778:	2b09      	cmp	r3, #9
 800c77a:	d00c      	beq.n	800c796 <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 800c77c:	e017      	b.n	800c7ae <optiga_cmd_queue_get_count_of+0x5a>
    {
        switch (slot_member)
        {
            case OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE:
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 800c77e:	7bfa      	ldrb	r2, [r7, #15]
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	4613      	mov	r3, r2
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	440b      	add	r3, r1
 800c78c:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800c790:	791b      	ldrb	r3, [r3, #4]
 800c792:	737b      	strb	r3, [r7, #13]
            }
            break;
 800c794:	e00b      	b.n	800c7ae <optiga_cmd_queue_get_count_of+0x5a>
            case OPTIGA_CMD_QUEUE_SLOT_STATE:
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 800c796:	7bfa      	ldrb	r2, [r7, #15]
 800c798:	6879      	ldr	r1, [r7, #4]
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	440b      	add	r3, r1
 800c7a4:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800c7a8:	795b      	ldrb	r3, [r3, #5]
 800c7aa:	737b      	strb	r3, [r7, #13]
            }
            break;
 800c7ac:	bf00      	nop
            default:
                break;
        }
        if (state_to_check == slot_value)
 800c7ae:	78ba      	ldrb	r2, [r7, #2]
 800c7b0:	7b7b      	ldrb	r3, [r7, #13]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d102      	bne.n	800c7bc <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	73bb      	strb	r3, [r7, #14]
                                                 uint8_t state_to_check)
{
    uint8_t index;
    uint8_t count = 0;
    uint8_t slot_value = 0;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	73fb      	strb	r3, [r7, #15]
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	2b05      	cmp	r3, #5
 800c7c6:	d9d4      	bls.n	800c772 <optiga_cmd_queue_get_count_of+0x1e>
        if (state_to_check == slot_value)
        {
            count++;
        }
    }
    return (count);
 800c7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop

0800c7d8 <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73fb      	strb	r3, [r7, #15]
 800c7e6:	e01f      	b.n	800c828 <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6819      	ldr	r1, [r3, #0]
 800c7ec:	7bfa      	ldrb	r2, [r7, #15]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	4413      	add	r3, r2
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	440b      	add	r3, r1
 800c7f8:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800c7fc:	795b      	ldrb	r3, [r3, #5]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10f      	bne.n	800c822 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	7bfa      	ldrb	r2, [r7, #15]
 800c806:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6819      	ldr	r1, [r3, #0]
 800c80c:	7bfa      	ldrb	r2, [r7, #15]
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	440b      	add	r3, r1
 800c818:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800c81c:	2201      	movs	r2, #1
 800c81e:	715a      	strb	r2, [r3, #5]
           break;
 800c820:	e005      	b.n	800c82e <optiga_cmd_queue_assign_slot+0x56>
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800c822:	7bfb      	ldrb	r3, [r7, #15]
 800c824:	3301      	adds	r3, #1
 800c826:	73fb      	strb	r3, [r7, #15]
 800c828:	7bfb      	ldrb	r3, [r7, #15]
 800c82a:	2b05      	cmp	r3, #5
 800c82c:	d9dc      	bls.n	800c7e8 <optiga_cmd_queue_assign_slot+0x10>
            * queue_index_store =  index;
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
           break;
        }
    }
}
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	7edb      	ldrb	r3, [r3, #27]
 800c848:	4619      	mov	r1, r3
 800c84a:	460b      	mov	r3, r1
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	440b      	add	r3, r1
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800c858:	2200      	movs	r2, #0
 800c85a:	715a      	strb	r2, [r3, #5]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	7edb      	ldrb	r3, [r3, #27]
 800c864:	4619      	mov	r1, r3
 800c866:	460b      	mov	r3, r1
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	440b      	add	r3, r1
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800c874:	2200      	movs	r2, #0
 800c876:	711a      	strb	r2, [r3, #4]
    me->queue_id = 0;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	76da      	strb	r2, [r3, #27]
}
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b088      	sub	sp, #32
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 800c890:	f04f 33ff 	mov.w	r3, #4294967295
 800c894:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 800c896:	23ff      	movs	r3, #255	; 0xff
 800c898:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 800c89a:	2300      	movs	r3, #0
 800c89c:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800c8a8:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800c8aa:	6978      	ldr	r0, [r7, #20]
 800c8ac:	2109      	movs	r1, #9
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	f7ff ff50 	bl	800c754 <optiga_cmd_queue_get_count_of>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d107      	bne.n	800c8ca <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800c8ba:	6978      	ldr	r0, [r7, #20]
 800c8bc:	2109      	movs	r1, #9
 800c8be:	2208      	movs	r2, #8
 800c8c0:	f7ff ff48 	bl	800c754 <optiga_cmd_queue_get_count_of>
 800c8c4:	4603      	mov	r3, r0
    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00f      	beq.n	800c8ea <optiga_cmd_queue_scheduler+0x62>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 800c8ca:	6978      	ldr	r0, [r7, #20]
 800c8cc:	2109      	movs	r1, #9
 800c8ce:	2204      	movs	r2, #4
 800c8d0:	f7ff ff40 	bl	800c754 <optiga_cmd_queue_get_count_of>
 800c8d4:	4603      	mov	r3, r0

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d10f      	bne.n	800c8fa <optiga_cmd_queue_scheduler+0x72>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 800c8da:	6978      	ldr	r0, [r7, #20]
 800c8dc:	2108      	movs	r1, #8
 800c8de:	2223      	movs	r2, #35	; 0x23
 800c8e0:	f7ff ff38 	bl	800c754 <optiga_cmd_queue_get_count_of>
 800c8e4:	4603      	mov	r3, r0
    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d007      	beq.n	800c8fa <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 800c8ea:	6938      	ldr	r0, [r7, #16]
 800c8ec:	496f      	ldr	r1, [pc, #444]	; (800caac <optiga_cmd_queue_scheduler+0x224>)
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c8f4:	f7fc ffe4 	bl	80098c0 <pal_os_event_register_callback_oneshot>
 800c8f8:	e0d5      	b.n	800caa6 <optiga_cmd_queue_scheduler+0x21e>
                                               p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
    }
    else
    {
        pal_os_event_stop(my_os_event);
 800c8fa:	6938      	ldr	r0, [r7, #16]
 800c8fc:	f7fc ff9c 	bl	8009838 <pal_os_event_stop>
        // continue checking if no context selected and overflow detected
        do
        {
            //reset overflow detected flag and the last_time stamp
            if(overflow_detected == TRUE)
 800c900:	7e7b      	ldrb	r3, [r7, #25]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d105      	bne.n	800c912 <optiga_cmd_queue_scheduler+0x8a>
            {
                p_optiga_ctx->last_time_stamp = 0;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	2200      	movs	r2, #0
 800c90a:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
                overflow_detected = FALSE;
 800c90e:	2300      	movs	r3, #0
 800c910:	767b      	strb	r3, [r7, #25]
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800c912:	2300      	movs	r3, #0
 800c914:	76fb      	strb	r3, [r7, #27]
 800c916:	e05c      	b.n	800c9d2 <optiga_cmd_queue_scheduler+0x14a>
            {
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 800c918:	7efa      	ldrb	r2, [r7, #27]
 800c91a:	4613      	mov	r3, r2
 800c91c:	005b      	lsls	r3, r3, #1
 800c91e:	4413      	add	r3, r2
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4413      	add	r3, r2
 800c92a:	3304      	adds	r3, #4
 800c92c:	60fb      	str	r3, [r7, #12]

                // if any slot has acquired strict lock, highest priority is given to it
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 800c92e:	6978      	ldr	r0, [r7, #20]
 800c930:	2109      	movs	r1, #9
 800c932:	2208      	movs	r2, #8
 800c934:	f7ff ff0e 	bl	800c754 <optiga_cmd_queue_get_count_of>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d10d      	bne.n	800c95a <optiga_cmd_queue_scheduler+0xd2>
                {
                    // Select the slot which has acquired strict lock
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	7a5b      	ldrb	r3, [r3, #9]
 800c942:	2b08      	cmp	r3, #8
 800c944:	d142      	bne.n	800c9cc <optiga_cmd_queue_scheduler+0x144>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	7a1b      	ldrb	r3, [r3, #8]

                // if any slot has acquired strict lock, highest priority is given to it
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
                {
                    // Select the slot which has acquired strict lock
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 800c94a:	2b23      	cmp	r3, #35	; 0x23
 800c94c:	d13e      	bne.n	800c9cc <optiga_cmd_queue_scheduler+0x144>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
                    {
                        reference_time_stamp = p_queue_entry->arrival_time;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 800c954:	7efb      	ldrb	r3, [r7, #27]
 800c956:	76bb      	strb	r3, [r7, #26]
 800c958:	e038      	b.n	800c9cc <optiga_cmd_queue_scheduler+0x144>

                }
                else
                {
                    // pick only requested queue slot and earliest arrival time
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	7a5b      	ldrb	r3, [r3, #9]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d134      	bne.n	800c9cc <optiga_cmd_queue_scheduler+0x144>
                    {
                        // remember that overflow has occurred in one of the entry
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d201      	bcs.n	800c974 <optiga_cmd_queue_scheduler+0xec>
                        {
                            overflow_detected = TRUE;
 800c970:	2301      	movs	r3, #1
 800c972:	767b      	strb	r3, [r7, #25]
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d826      	bhi.n	800c9cc <optiga_cmd_queue_scheduler+0x144>
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f8d3 3670 	ldr.w	r3, [r3, #1648]	; 0x670
 800c988:	429a      	cmp	r2, r3
 800c98a:	d31f      	bcc.n	800c9cc <optiga_cmd_queue_scheduler+0x144>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	7a1b      	ldrb	r3, [r3, #8]
                        {
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 800c990:	2b22      	cmp	r3, #34	; 0x22
 800c992:	d105      	bne.n	800c9a0 <optiga_cmd_queue_scheduler+0x118>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800c994:	6978      	ldr	r0, [r7, #20]
 800c996:	f7ff fe77 	bl	800c688 <optiga_cmd_session_available>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d010      	beq.n	800c9c2 <optiga_cmd_queue_scheduler+0x13a>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	7a1b      	ldrb	r3, [r3, #8]
                            overflow_detected = TRUE;
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800c9a4:	2b22      	cmp	r3, #34	; 0x22
 800c9a6:	d104      	bne.n	800c9b2 <optiga_cmd_queue_scheduler+0x12a>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	8a9b      	ldrh	r3, [r3, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d107      	bne.n	800c9c2 <optiga_cmd_queue_scheduler+0x13a>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	7a1b      	ldrb	r3, [r3, #8]
                        }

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800c9b6:	2b21      	cmp	r3, #33	; 0x21
 800c9b8:	d003      	beq.n	800c9c2 <optiga_cmd_queue_scheduler+0x13a>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	7a1b      	ldrb	r3, [r3, #8]

                        // if lock request or session request and session available(either already assigned or available)
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 800c9be:	2b23      	cmp	r3, #35	; 0x23
 800c9c0:	d104      	bne.n	800c9cc <optiga_cmd_queue_scheduler+0x144>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
                        {
                            reference_time_stamp = p_queue_entry->arrival_time;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 800c9c8:	7efb      	ldrb	r3, [r7, #27]
 800c9ca:	76bb      	strb	r3, [r7, #26]
                p_optiga_ctx->last_time_stamp = 0;
                overflow_detected = FALSE;
            }

            // Select optiga command based on rule
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800c9cc:	7efb      	ldrb	r3, [r7, #27]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	76fb      	strb	r3, [r7, #27]
 800c9d2:	7efb      	ldrb	r3, [r7, #27]
 800c9d4:	2b05      	cmp	r3, #5
 800c9d6:	d99f      	bls.n	800c918 <optiga_cmd_queue_scheduler+0x90>
                            prefered_index = index;
                        }
                    }
                }
            }
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 800c9d8:	7ebb      	ldrb	r3, [r7, #26]
 800c9da:	2bff      	cmp	r3, #255	; 0xff
 800c9dc:	d102      	bne.n	800c9e4 <optiga_cmd_queue_scheduler+0x15c>
 800c9de:	7e7b      	ldrb	r3, [r7, #25]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d08d      	beq.n	800c900 <optiga_cmd_queue_scheduler+0x78>

        // Improve : check the index and max queue size check
        // If slot is identified then go further
        if (0xFF != prefered_index)
 800c9e4:	7ebb      	ldrb	r3, [r7, #26]
 800c9e6:	2bff      	cmp	r3, #255	; 0xff
 800c9e8:	d056      	beq.n	800ca98 <optiga_cmd_queue_scheduler+0x210>
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 800c9ea:	7eba      	ldrb	r2, [r7, #26]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	3304      	adds	r3, #4
 800c9fe:	60fb      	str	r3, [r7, #12]
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 800ca00:	7eba      	ldrb	r2, [r7, #26]
 800ca02:	6979      	ldr	r1, [r7, #20]
 800ca04:	4613      	mov	r3, r2
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	4413      	add	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	440b      	add	r3, r1
 800ca0e:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800ca12:	791b      	ldrb	r3, [r3, #4]
 800ca14:	2b22      	cmp	r3, #34	; 0x22
 800ca16:	d111      	bne.n	800ca3c <optiga_cmd_queue_scheduler+0x1b4>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	8a9b      	ldrh	r3, [r3, #20]
        // If slot is identified then go further
        if (0xFF != prefered_index)
        {
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
            // assign session
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10c      	bne.n	800ca3c <optiga_cmd_queue_scheduler+0x1b4>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
            {
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 800ca22:	7eba      	ldrb	r2, [r7, #26]
 800ca24:	6979      	ldr	r1, [r7, #20]
 800ca26:	4613      	mov	r3, r2
 800ca28:	005b      	lsls	r3, r3, #1
 800ca2a:	4413      	add	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	440b      	add	r3, r1
 800ca30:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff fe3c 	bl	800c6b4 <optiga_cmd_session_assign>
                // Improve : Change the state of the type here. This will reduce 0x0000 check
            }

            // schedule with selected context
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 800ca3c:	7eba      	ldrb	r2, [r7, #26]
 800ca3e:	6979      	ldr	r1, [r7, #20]
 800ca40:	4613      	mov	r3, r2
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	4413      	add	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	440b      	add	r3, r1
 800ca4a:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800ca56:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 800ca58:	7eba      	ldrb	r2, [r7, #26]
 800ca5a:	6979      	ldr	r1, [r7, #20]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	4413      	add	r3, r2
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	440b      	add	r3, r1
 800ca66:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	6938      	ldr	r0, [r7, #16]
 800ca6e:	4910      	ldr	r1, [pc, #64]	; (800cab0 <optiga_cmd_queue_scheduler+0x228>)
 800ca70:	461a      	mov	r2, r3
 800ca72:	2332      	movs	r3, #50	; 0x32
 800ca74:	f7fc ff24 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                   optiga_cmd_event_trigger_execute,
                                                   ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx)),
                                                   OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 800ca78:	7eba      	ldrb	r2, [r7, #26]
 800ca7a:	6979      	ldr	r1, [r7, #20]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	005b      	lsls	r3, r3, #1
 800ca80:	4413      	add	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	440b      	add	r3, r1
 800ca86:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800ca8a:	2204      	movs	r2, #4
 800ca8c:	715a      	strb	r2, [r3, #5]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	69fa      	ldr	r2, [r7, #28]
 800ca92:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
 800ca96:	e006      	b.n	800caa6 <optiga_cmd_queue_scheduler+0x21e>
        }
        else
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 800ca98:	6938      	ldr	r0, [r7, #16]
 800ca9a:	4904      	ldr	r1, [pc, #16]	; (800caac <optiga_cmd_queue_scheduler+0x224>)
 800ca9c:	697a      	ldr	r2, [r7, #20]
 800ca9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800caa2:	f7fc ff0d 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 800caa6:	3720      	adds	r7, #32
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	0800c889 	.word	0x0800c889
 800cab0:	0800c625 	.word	0x0800c625

0800cab4 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 800cab4:	b5b0      	push	{r4, r5, r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	460b      	mov	r3, r1
 800cabe:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	7edb      	ldrb	r3, [r3, #27]
 800cac8:	4619      	mov	r1, r3
 800caca:	460b      	mov	r3, r1
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	440b      	add	r3, r1
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800cad8:	791b      	ldrb	r3, [r3, #4]
 800cada:	2b23      	cmp	r3, #35	; 0x23
 800cadc:	d111      	bne.n	800cb02 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7edb      	ldrb	r3, [r3, #27]
 800cae6:	4619      	mov	r1, r3
 800cae8:	460b      	mov	r3, r1
 800caea:	005b      	lsls	r3, r3, #1
 800caec:	440b      	add	r3, r1
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	4413      	add	r3, r2
 800caf2:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800caf6:	791b      	ldrb	r3, [r3, #4]
/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 800caf8:	2b23      	cmp	r3, #35	; 0x23
 800cafa:	d112      	bne.n	800cb22 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800cafc:	78fb      	ldrb	r3, [r7, #3]
 800cafe:	2b23      	cmp	r3, #35	; 0x23
 800cb00:	d00f      	beq.n	800cb22 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681c      	ldr	r4, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	7edb      	ldrb	r3, [r3, #27]
 800cb0a:	461d      	mov	r5, r3
 800cb0c:	f7fc ff54 	bl	80099b8 <pal_os_timer_get_time_in_microseconds>
 800cb10:	4602      	mov	r2, r0
 800cb12:	462b      	mov	r3, r5
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	442b      	add	r3, r5
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4423      	add	r3, r4
 800cb1c:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800cb20:	609a      	str	r2, [r3, #8]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	7edb      	ldrb	r3, [r3, #27]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	440b      	add	r3, r1
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	605a      	str	r2, [r3, #4]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	7edb      	ldrb	r3, [r3, #27]
 800cb46:	4619      	mov	r1, r3
 800cb48:	460b      	mov	r3, r1
 800cb4a:	005b      	lsls	r3, r3, #1
 800cb4c:	440b      	add	r3, r1
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800cb56:	791b      	ldrb	r3, [r3, #4]
 800cb58:	2b23      	cmp	r3, #35	; 0x23
 800cb5a:	d111      	bne.n	800cb80 <optiga_cmd_queue_update_slot+0xcc>
 800cb5c:	78fb      	ldrb	r3, [r7, #3]
 800cb5e:	2b23      	cmp	r3, #35	; 0x23
 800cb60:	d10e      	bne.n	800cb80 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	7edb      	ldrb	r3, [r3, #27]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	440b      	add	r3, r1
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800cb7a:	2208      	movs	r2, #8
 800cb7c:	715a      	strb	r2, [r3, #5]
 800cb7e:	e00d      	b.n	800cb9c <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	7edb      	ldrb	r3, [r3, #27]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	440b      	add	r3, r1
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800cb98:	2202      	movs	r2, #2
 800cb9a:	715a      	strb	r2, [r3, #5]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	7edb      	ldrb	r3, [r3, #27]
 800cba4:	4619      	mov	r1, r3
 800cba6:	460b      	mov	r3, r1
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	440b      	add	r3, r1
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800cbb4:	78fa      	ldrb	r2, [r7, #3]
 800cbb6:	711a      	strb	r2, [r3, #4]
}
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bdb0      	pop	{r4, r5, r7, pc}
 800cbbe:	bf00      	nop

0800cbc0 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	7edb      	ldrb	r3, [r3, #27]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	440b      	add	r3, r1
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800cbe0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe4:	609a      	str	r2, [r3, #8]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	7edb      	ldrb	r3, [r3, #27]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	440b      	add	r3, r1
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800cbfe:	2200      	movs	r2, #0
 800cc00:	605a      	str	r2, [r3, #4]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	7edb      	ldrb	r3, [r3, #27]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	440b      	add	r3, r1
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	4413      	add	r3, r2
 800cc16:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	711a      	strb	r2, [r3, #4]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	7edb      	ldrb	r3, [r3, #27]
 800cc26:	4619      	mov	r1, r3
 800cc28:	460b      	mov	r3, r1
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	440b      	add	r3, r1
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800cc36:	2201      	movs	r2, #1
 800cc38:	715a      	strb	r2, [r3, #5]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f8d3 266c 	ldr.w	r2, [r3, #1644]	; 0x66c
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4610      	mov	r0, r2
 800cc48:	4903      	ldr	r1, [pc, #12]	; (800cc58 <optiga_cmd_queue_reset_slot+0x98>)
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	f7fc fddc 	bl	8009808 <pal_os_event_start>
}
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	0800c889 	.word	0x0800c889

0800cc5c <optiga_cmd_request_session>:


optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	2122      	movs	r1, #34	; 0x22
 800cc68:	f7ff ff24 	bl	800cab4 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop

0800cc78 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff fd47 	bl	800c714 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 800cc86:	2300      	movs	r3, #0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 800cc9c:	78fb      	ldrb	r3, [r7, #3]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	4619      	mov	r1, r3
 800cca2:	f7ff ff07 	bl	800cab4 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff ff81 	bl	800cbc0 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800ccd0:	f240 2302 	movw	r3, #514	; 0x202
 800ccd4:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	8bdb      	ldrh	r3, [r3, #30]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d014      	beq.n	800cd08 <optiga_cmd_restore_context+0x40>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 800ccde:	2308      	movs	r3, #8
 800cce0:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	8bd9      	ldrh	r1, [r3, #30]
                                                  me->p_optiga->optiga_context_handle_buffer,
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f203 6274 	addw	r2, r3, #1652	; 0x674
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 800ccee:	f107 030c 	add.w	r3, r7, #12
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	f7fc fcfa 	bl	80096f0 <pal_os_datastore_read>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	81fb      	strh	r3, [r7, #14]
                                                  me->p_optiga->optiga_context_handle_buffer,
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 800cd00:	89fb      	ldrh	r3, [r7, #14]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d000      	beq.n	800cd08 <optiga_cmd_restore_context+0x40>
            {
                break;
 800cd06:	e019      	b.n	800cd3c <optiga_cmd_restore_context+0x74>
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff fa19 	bl	800c148 <optiga_common_get_uint32>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10d      	bne.n	800cd38 <optiga_cmd_restore_context+0x70>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7ff fa0f 	bl	800c148 <optiga_common_get_uint32>
 800cd2a:	4603      	mov	r3, r0
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d103      	bne.n	800cd38 <optiga_cmd_restore_context+0x70>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
        {
            return_status = OPTIGA_CMD_ERROR;
 800cd30:	f240 2302 	movw	r3, #514	; 0x202
 800cd34:	81fb      	strh	r3, [r7, #14]
            break;
 800cd36:	e001      	b.n	800cd3c <optiga_cmd_restore_context+0x74>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	81fb      	strh	r3, [r7, #14]
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 800cd3c:	89fb      	ldrh	r3, [r7, #14]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop

0800cd48 <optiga_cmd_execute_comms_open>:
    }
}
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2201      	movs	r2, #1
 800cd56:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	7ddb      	ldrb	r3, [r3, #23]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d01e      	beq.n	800cd9e <optiga_cmd_execute_comms_open+0x56>
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d040      	beq.n	800cde6 <optiga_cmd_execute_comms_open+0x9e>
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d14f      	bne.n	800ce08 <optiga_cmd_execute_comms_open+0xc0>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	2121      	movs	r1, #33	; 0x21
 800cd6c:	f7ff ff90 	bl	800cc90 <optiga_cmd_request_lock>
 800cd70:	4603      	mov	r3, r0
 800cd72:	461a      	mov	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	839a      	strh	r2, [r3, #28]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	8b9b      	ldrh	r3, [r3, #28]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00a      	beq.n	800cd96 <optiga_cmd_execute_comms_open+0x4e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2204      	movs	r2, #4
 800cd84:	759a      	strb	r2, [r3, #22]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f240 2202 	movw	r2, #514	; 0x202
 800cd8c:	839a      	strh	r2, [r3, #28]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	2200      	movs	r2, #0
 800cd92:	701a      	strb	r2, [r3, #0]
                    break;
 800cd94:	e043      	b.n	800ce1e <optiga_cmd_execute_comms_open+0xd6>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	75da      	strb	r2, [r3, #23]
                break;
 800cd9c:	e03f      	b.n	800ce1e <optiga_cmd_execute_comms_open+0xd6>
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4618      	mov	r0, r3
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	f7ff f8ec 	bl	800bf84 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7ff f8f6 	bl	800bfa4 <optiga_comms_open>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	461a      	mov	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	839a      	strh	r2, [r3, #28]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	8b9b      	ldrh	r3, [r3, #28]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00a      	beq.n	800cdde <optiga_cmd_execute_comms_open+0x96>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2204      	movs	r2, #4
 800cdcc:	759a      	strb	r2, [r3, #22]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f240 2202 	movw	r2, #514	; 0x202
 800cdd4:	839a      	strh	r2, [r3, #28]
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	701a      	strb	r2, [r3, #0]
                    break;
 800cddc:	e01f      	b.n	800ce1e <optiga_cmd_execute_comms_open+0xd6>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2202      	movs	r2, #2
 800cde2:	75da      	strb	r2, [r3, #23]
                break;
 800cde4:	e01b      	b.n	800ce1e <optiga_cmd_execute_comms_open+0xd6>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800cdee:	4618      	mov	r0, r3
 800cdf0:	4910      	ldr	r1, [pc, #64]	; (800ce34 <optiga_cmd_execute_comms_open+0xec>)
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	2332      	movs	r3, #50	; 0x32
 800cdf6:	f7fc fd63 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2208      	movs	r2, #8
 800ce04:	75da      	strb	r2, [r3, #23]
                break;
 800ce06:	e00a      	b.n	800ce1e <optiga_cmd_execute_comms_open+0xd6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2204      	movs	r2, #4
 800ce0c:	759a      	strb	r2, [r3, #22]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f240 2202 	movw	r2, #514	; 0x202
 800ce14:	839a      	strh	r2, [r3, #28]
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	701a      	strb	r2, [r3, #0]
            break;
 800ce1c:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d103      	bne.n	800ce2e <optiga_cmd_execute_comms_open+0xe6>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7d9b      	ldrb	r3, [r3, #22]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d091      	beq.n	800cd52 <optiga_cmd_execute_comms_open+0xa>
}
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	0800c625 	.word	0x0800c625

0800ce38 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	2201      	movs	r2, #1
 800ce46:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	7ddb      	ldrb	r3, [r3, #23]
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d002      	beq.n	800ce56 <optiga_cmd_execute_comms_close+0x1e>
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	d033      	beq.n	800cebc <optiga_cmd_execute_comms_close+0x84>
 800ce54:	e03a      	b.n	800cecc <optiga_cmd_execute_comms_close+0x94>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2204      	movs	r2, #4
 800ce5a:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	6812      	ldr	r2, [r2, #0]
 800ce66:	f8d2 266c 	ldr.w	r2, [r2, #1644]	; 0x66c
 800ce6a:	611a      	str	r2, [r3, #16]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4618      	mov	r0, r3
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	f7ff f885 	bl	800bf84 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7ff f8f1 	bl	800c068 <optiga_comms_close>
 800ce86:	4603      	mov	r3, r0
 800ce88:	461a      	mov	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	839a      	strh	r2, [r3, #28]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	8b9b      	ldrh	r3, [r3, #28]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00a      	beq.n	800ceac <optiga_cmd_execute_comms_close+0x74>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2204      	movs	r2, #4
 800ce9a:	759a      	strb	r2, [r3, #22]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f240 2202 	movw	r2, #514	; 0x202
 800cea2:	839a      	strh	r2, [r3, #28]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	2200      	movs	r2, #0
 800cea8:	701a      	strb	r2, [r3, #0]
                    break;
 800ceaa:	e01a      	b.n	800cee2 <optiga_cmd_execute_comms_close+0xaa>
                else
                {
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7ff feff 	bl	800ccb0 <optiga_cmd_release_lock>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	839a      	strh	r2, [r3, #28]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 800ceba:	e012      	b.n	800cee2 <optiga_cmd_execute_comms_close+0xaa>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	68d2      	ldr	r2, [r2, #12]
 800cec4:	4610      	mov	r0, r2
 800cec6:	2100      	movs	r1, #0
 800cec8:	4798      	blx	r3
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
                {
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 800ceca:	e00a      	b.n	800cee2 <optiga_cmd_execute_comms_close+0xaa>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2204      	movs	r2, #4
 800ced0:	759a      	strb	r2, [r3, #22]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f240 2202 	movw	r2, #514	; 0x202
 800ced8:	839a      	strh	r2, [r3, #28]
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2200      	movs	r2, #0
 800cede:	701a      	strb	r2, [r3, #0]
            break;
 800cee0:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d103      	bne.n	800cef2 <optiga_cmd_execute_comms_close+0xba>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	7d9b      	ldrb	r3, [r3, #22]
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d0a7      	beq.n	800ce42 <optiga_cmd_execute_comms_close+0xa>
}
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af02      	add	r7, sp, #8
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	7ddb      	ldrb	r3, [r3, #23]
 800cf0c:	3b05      	subs	r3, #5
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	f200 80b2 	bhi.w	800d078 <optiga_cmd_execute_prepare_command+0x180>
 800cf14:	a201      	add	r2, pc, #4	; (adr r2, 800cf1c <optiga_cmd_execute_prepare_command+0x24>)
 800cf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1a:	bf00      	nop
 800cf1c:	0800cf2d 	.word	0x0800cf2d
 800cf20:	0800cf2d 	.word	0x0800cf2d
 800cf24:	0800cf81 	.word	0x0800cf81
 800cf28:	0800cfbd 	.word	0x0800cfbd
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	7ddb      	ldrb	r3, [r3, #23]
 800cf36:	2b05      	cmp	r3, #5
 800cf38:	d107      	bne.n	800cf4a <optiga_cmd_execute_prepare_command+0x52>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff fe8e 	bl	800cc5c <optiga_cmd_request_session>
 800cf40:	4603      	mov	r3, r0
 800cf42:	461a      	mov	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	839a      	strh	r2, [r3, #28]
 800cf48:	e007      	b.n	800cf5a <optiga_cmd_execute_prepare_command+0x62>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	2121      	movs	r1, #33	; 0x21
 800cf4e:	f7ff fe9f 	bl	800cc90 <optiga_cmd_request_lock>
 800cf52:	4603      	mov	r3, r0
 800cf54:	461a      	mov	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	839a      	strh	r2, [r3, #28]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	8b9b      	ldrh	r3, [r3, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00a      	beq.n	800cf78 <optiga_cmd_execute_prepare_command+0x80>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2204      	movs	r2, #4
 800cf66:	759a      	strb	r2, [r3, #22]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f240 2202 	movw	r2, #514	; 0x202
 800cf6e:	839a      	strh	r2, [r3, #28]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	701a      	strb	r2, [r3, #0]
                    break;
 800cf76:	e08a      	b.n	800d08e <optiga_cmd_execute_prepare_command+0x196>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2208      	movs	r2, #8
 800cf7c:	75da      	strb	r2, [r3, #23]
                break;
 800cf7e:	e086      	b.n	800d08e <optiga_cmd_execute_prepare_command+0x196>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	2123      	movs	r1, #35	; 0x23
 800cf84:	f7ff fe84 	bl	800cc90 <optiga_cmd_request_lock>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	839a      	strh	r2, [r3, #28]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	8b9b      	ldrh	r3, [r3, #28]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00a      	beq.n	800cfae <optiga_cmd_execute_prepare_command+0xb6>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	759a      	strb	r2, [r3, #22]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f240 2202 	movw	r2, #514	; 0x202
 800cfa4:	839a      	strh	r2, [r3, #28]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	701a      	strb	r2, [r3, #0]
                    break;
 800cfac:	e06f      	b.n	800d08e <optiga_cmd_execute_prepare_command+0x196>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2208      	movs	r2, #8
 800cfb2:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	701a      	strb	r2, [r3, #0]
                break;
 800cfba:	e068      	b.n	800d08e <optiga_cmd_execute_prepare_command+0x196>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	4798      	blx	r3
 800cfc8:	4603      	mov	r3, r0
 800cfca:	461a      	mov	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	839a      	strh	r2, [r3, #28]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8b9b      	ldrh	r3, [r3, #28]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d006      	beq.n	800cfe6 <optiga_cmd_execute_prepare_command+0xee>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2204      	movs	r2, #4
 800cfdc:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	701a      	strb	r2, [r3, #0]
                    break;
 800cfe4:	e053      	b.n	800d08e <optiga_cmd_execute_prepare_command+0x196>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f240 6215 	movw	r2, #1557	; 0x615
 800cfee:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->protection_level_state |= me->protection_level;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4618      	mov	r0, r3
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	f7fe ffc3 	bl	800bf84 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->protection_level_state |= me->protection_level;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800d010:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
                                                          me->p_optiga->comms_tx_size,
                                                          me->p_optiga->optiga_comms_buffer,
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->protection_level_state |= me->protection_level;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800d01e:	3306      	adds	r3, #6
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	4623      	mov	r3, r4
 800d024:	f7fe ffee 	bl	800c004 <optiga_comms_transceive>
 800d028:	4603      	mov	r3, r0
 800d02a:	461a      	mov	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	839a      	strh	r2, [r3, #28]
                                                          me->p_optiga->optiga_comms_buffer,
                                                          me->p_optiga->comms_tx_size,
                                                          me->p_optiga->optiga_comms_buffer,
                                                          &(me->p_optiga->comms_rx_size));

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	8b9b      	ldrh	r3, [r3, #28]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00a      	beq.n	800d04e <optiga_cmd_execute_prepare_command+0x156>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2204      	movs	r2, #4
 800d03c:	759a      	strb	r2, [r3, #22]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f240 2202 	movw	r2, #514	; 0x202
 800d044:	839a      	strh	r2, [r3, #28]
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2200      	movs	r2, #0
 800d04a:	701a      	strb	r2, [r3, #0]
                    break;
 800d04c:	e01f      	b.n	800d08e <optiga_cmd_execute_prepare_command+0x196>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2203      	movs	r2, #3
 800d052:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2209      	movs	r2, #9
 800d058:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	7e9b      	ldrb	r3, [r3, #26]
 800d05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d062:	b2da      	uxtb	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	769a      	strb	r2, [r3, #26]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	7e9b      	ldrb	r3, [r3, #26]
 800d06c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d070:	b2da      	uxtb	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	769a      	strb	r2, [r3, #26]
                break;
 800d076:	e00a      	b.n	800d08e <optiga_cmd_execute_prepare_command+0x196>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2204      	movs	r2, #4
 800d07c:	759a      	strb	r2, [r3, #22]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f240 2202 	movw	r2, #514	; 0x202
 800d084:	839a      	strh	r2, [r3, #28]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2200      	movs	r2, #0
 800d08a:	701a      	strb	r2, [r3, #0]
            break;
 800d08c:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d104      	bne.n	800d0a0 <optiga_cmd_execute_prepare_command+0x1a8>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7d9b      	ldrb	r3, [r3, #22]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	f43f af34 	beq.w	800cf08 <optiga_cmd_execute_prepare_command+0x10>
}
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd90      	pop	{r4, r7, pc}
 800d0a6:	bf00      	nop

0800d0a8 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f9f3 	bl	800d4a4 <optiga_cmd_get_error_code_handler>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	839a      	strh	r2, [r3, #28]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	8b9b      	ldrh	r3, [r3, #28]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d005      	beq.n	800d0da <optiga_cmd_execute_get_device_error+0x32>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	8b9b      	ldrh	r3, [r3, #28]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	b21b      	sxth	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da0a      	bge.n	800d0f0 <optiga_cmd_execute_get_device_error+0x48>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	8b9b      	ldrh	r3, [r3, #28]
{
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 800d0de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0e2:	d10c      	bne.n	800d0fe <optiga_cmd_execute_get_device_error+0x56>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	7e9b      	ldrb	r3, [r3, #26]
 800d0e8:	f003 0303 	and.w	r3, r3, #3
    do
    {
        *exit_loop = TRUE;
        me->exit_status = optiga_cmd_get_error_code_handler(me);
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d106      	bne.n	800d0fe <optiga_cmd_execute_get_device_error+0x56>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2204      	movs	r2, #4
 800d0f4:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	701a      	strb	r2, [r3, #0]
            break;
 800d0fc:	bf00      	nop
        }
    } while (FALSE);
}
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2201      	movs	r2, #1
 800d118:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7e9b      	ldrb	r3, [r3, #26]
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	b25b      	sxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	da0b      	bge.n	800d13e <optiga_cmd_execute_process_optiga_response+0x3a>
        {
            me->exit_status = optiga_cmd_handler(me);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	4798      	blx	r3
 800d12c:	4603      	mov	r3, r0
 800d12e:	461a      	mov	r2, r3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	839a      	strh	r2, [r3, #28]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	8b9b      	ldrh	r3, [r3, #28]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d145      	bne.n	800d1c8 <optiga_cmd_execute_process_optiga_response+0xc4>
 800d13c:	e006      	b.n	800d14c <optiga_cmd_execute_process_optiga_response+0x48>
        {
            me->exit_status = optiga_cmd_handler(me);
        }
        else
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2204      	movs	r2, #4
 800d142:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2200      	movs	r2, #0
 800d148:	701a      	strb	r2, [r3, #0]
            break;
 800d14a:	e05d      	b.n	800d208 <optiga_cmd_execute_process_optiga_response+0x104>
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	8c1b      	ldrh	r3, [r3, #32]
 800d150:	b2db      	uxtb	r3, r3
 800d152:	2bf1      	cmp	r3, #241	; 0xf1
 800d154:	d114      	bne.n	800d180 <optiga_cmd_execute_process_optiga_response+0x7c>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800d15e:	4618      	mov	r0, r3
 800d160:	492b      	ldr	r1, [pc, #172]	; (800d210 <optiga_cmd_execute_process_optiga_response+0x10c>)
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d168:	f7fc fbaa 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2201      	movs	r2, #1
 800d170:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2201      	movs	r2, #1
 800d176:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2203      	movs	r2, #3
 800d17c:	75da      	strb	r2, [r3, #23]
 800d17e:	e043      	b.n	800d208 <optiga_cmd_execute_process_optiga_response+0x104>
            }
            else
            {
                if (FALSE == me->chaining_ongoing)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	7e1b      	ldrb	r3, [r3, #24]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10a      	bne.n	800d19e <optiga_cmd_execute_process_optiga_response+0x9a>
                {
                    if (OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	7ddb      	ldrb	r3, [r3, #23]
 800d18c:	2b0c      	cmp	r3, #12
 800d18e:	d002      	beq.n	800d196 <optiga_cmd_execute_process_optiga_response+0x92>
                    {
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	220b      	movs	r2, #11
 800d194:	75da      	strb	r2, [r3, #23]
                    }
                    *exit_loop = FALSE;
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2200      	movs	r2, #0
 800d19a:	701a      	strb	r2, [r3, #0]
                    break;
 800d19c:	e034      	b.n	800d208 <optiga_cmd_execute_process_optiga_response+0x104>
                }
                // for chaining, trigger preparing of next command
                else
                {
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	4919      	ldr	r1, [pc, #100]	; (800d210 <optiga_cmd_execute_process_optiga_response+0x10c>)
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d1b0:	f7fc fb86 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                           (register_callback)optiga_cmd_event_trigger_execute,
                                                           (void*)me,
                                                           OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                    *exit_loop = TRUE;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	701a      	strb	r2, [r3, #0]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2202      	movs	r2, #2
 800d1be:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2208      	movs	r2, #8
 800d1c4:	75da      	strb	r2, [r3, #23]
 800d1c6:	e01f      	b.n	800d208 <optiga_cmd_execute_process_optiga_response+0x104>
            }
        }
        else
        {
            // After OPTIGA error is analyzed, invoke upper layer handler and release lock
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	8b9b      	ldrh	r3, [r3, #28]
 800d1cc:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800d1d0:	d106      	bne.n	800d1e0 <optiga_cmd_execute_process_optiga_response+0xdc>
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	220b      	movs	r2, #11
 800d1d6:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	701a      	strb	r2, [r3, #0]
                break;
 800d1de:	e013      	b.n	800d208 <optiga_cmd_execute_process_optiga_response+0x104>
            }
            // After OPTIGA responds with failure, invoke the next state to check which error occurred
            else
            {
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	220a      	movs	r2, #10
 800d1e4:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	7e9b      	ldrb	r3, [r3, #26]
 800d1ea:	f023 0303 	bic.w	r3, r3, #3
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	769a      	strb	r2, [r3, #26]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	7e9b      	ldrb	r3, [r3, #26]
 800d1f8:	f043 0301 	orr.w	r3, r3, #1
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	769a      	strb	r2, [r3, #26]
                *exit_loop = FALSE;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2200      	movs	r2, #0
 800d206:	701a      	strb	r2, [r3, #0]
            }
        }
    } while (FALSE);
}
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	0800c625 	.word	0x0800c625

0800d214 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7ddb      	ldrb	r3, [r3, #23]
 800d222:	3b09      	subs	r3, #9
 800d224:	2b03      	cmp	r3, #3
 800d226:	d82c      	bhi.n	800d282 <optiga_cmd_execute_process_response+0x6e>
 800d228:	a201      	add	r2, pc, #4	; (adr r2, 800d230 <optiga_cmd_execute_process_response+0x1c>)
 800d22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22e:	bf00      	nop
 800d230:	0800d241 	.word	0x0800d241
 800d234:	0800d24b 	.word	0x0800d24b
 800d238:	0800d255 	.word	0x0800d255
 800d23c:	0800d269 	.word	0x0800d269
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	f7ff ff5e 	bl	800d104 <optiga_cmd_execute_process_optiga_response>
                break;
 800d248:	e026      	b.n	800d298 <optiga_cmd_execute_process_response+0x84>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	f7ff ff2b 	bl	800d0a8 <optiga_cmd_execute_get_device_error>
                break;
 800d252:	e021      	b.n	800d298 <optiga_cmd_execute_process_response+0x84>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fd2b 	bl	800ccb0 <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	220c      	movs	r2, #12
 800d25e:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	2200      	movs	r2, #0
 800d264:	701a      	strb	r2, [r3, #0]
                break;
 800d266:	e017      	b.n	800d298 <optiga_cmd_execute_process_response+0x84>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	68d1      	ldr	r1, [r2, #12]
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	8b92      	ldrh	r2, [r2, #28]
 800d274:	4608      	mov	r0, r1
 800d276:	4611      	mov	r1, r2
 800d278:	4798      	blx	r3
                *exit_loop = TRUE;
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2201      	movs	r2, #1
 800d27e:	701a      	strb	r2, [r3, #0]
                break;
 800d280:	e00a      	b.n	800d298 <optiga_cmd_execute_process_response+0x84>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2204      	movs	r2, #4
 800d286:	759a      	strb	r2, [r3, #22]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f240 2202 	movw	r2, #514	; 0x202
 800d28e:	839a      	strh	r2, [r3, #28]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2200      	movs	r2, #0
 800d294:	701a      	strb	r2, [r3, #0]
            break;
 800d296:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d103      	bne.n	800d2a8 <optiga_cmd_execute_process_response+0x94>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	7d9b      	ldrb	r3, [r3, #22]
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d0ba      	beq.n	800d21e <optiga_cmd_execute_process_response+0xa>
}
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop

0800d2b0 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff fcf8 	bl	800ccb0 <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	68d1      	ldr	r1, [r2, #12]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	8b92      	ldrh	r2, [r2, #28]
 800d2cc:	4608      	mov	r0, r1
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	4798      	blx	r3
        *exit_loop = TRUE;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop

0800d2e0 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 800d2f4:	887b      	ldrh	r3, [r7, #2]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d005      	beq.n	800d306 <optiga_cmd_execute_handler+0x26>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2204      	movs	r2, #4
 800d2fe:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	887a      	ldrh	r2, [r7, #2]
 800d304:	839a      	strh	r2, [r3, #28]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	7d9b      	ldrb	r3, [r3, #22]
 800d30a:	2b04      	cmp	r3, #4
 800d30c:	d82f      	bhi.n	800d36e <optiga_cmd_execute_handler+0x8e>
 800d30e:	a201      	add	r2, pc, #4	; (adr r2, 800d314 <optiga_cmd_execute_handler+0x34>)
 800d310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d314:	0800d329 	.word	0x0800d329
 800d318:	0800d337 	.word	0x0800d337
 800d31c:	0800d345 	.word	0x0800d345
 800d320:	0800d353 	.word	0x0800d353
 800d324:	0800d361 	.word	0x0800d361
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 800d328:	f107 030b 	add.w	r3, r7, #11
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	4619      	mov	r1, r3
 800d330:	f7ff fd0a 	bl	800cd48 <optiga_cmd_execute_comms_open>
                break;
 800d334:	e01c      	b.n	800d370 <optiga_cmd_execute_handler+0x90>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 800d336:	f107 030b 	add.w	r3, r7, #11
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	4619      	mov	r1, r3
 800d33e:	f7ff fd7b 	bl	800ce38 <optiga_cmd_execute_comms_close>
                break;
 800d342:	e015      	b.n	800d370 <optiga_cmd_execute_handler+0x90>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 800d344:	f107 030b 	add.w	r3, r7, #11
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	4619      	mov	r1, r3
 800d34c:	f7ff fdd4 	bl	800cef8 <optiga_cmd_execute_prepare_command>
                break;
 800d350:	e00e      	b.n	800d370 <optiga_cmd_execute_handler+0x90>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 800d352:	f107 030b 	add.w	r3, r7, #11
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	4619      	mov	r1, r3
 800d35a:	f7ff ff5b 	bl	800d214 <optiga_cmd_execute_process_response>
                break;
 800d35e:	e007      	b.n	800d370 <optiga_cmd_execute_handler+0x90>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 800d360:	f107 030b 	add.w	r3, r7, #11
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	4619      	mov	r1, r3
 800d368:	f7ff ffa2 	bl	800d2b0 <optiga_cmd_execute_error_handler>
                break;
 800d36c:	e000      	b.n	800d370 <optiga_cmd_execute_handler+0x90>
            }
            default :
                break;
 800d36e:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 800d370:	7afb      	ldrb	r3, [r7, #11]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d0c7      	beq.n	800d306 <optiga_cmd_execute_handler+0x26>
}
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 800d37c:	b590      	push	{r4, r7, lr}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
 800d382:	4603      	mov	r3, r0
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
 800d388:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 800d38e:	f7fc fabf 	bl	8009910 <pal_os_lock_enter_critical_section>
    do
    {
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 800d392:	7bfb      	ldrb	r3, [r7, #15]
 800d394:	4a31      	ldr	r2, [pc, #196]	; (800d45c <optiga_cmd_create+0xe0>)
 800d396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d39a:	4618      	mov	r0, r3
 800d39c:	2109      	movs	r1, #9
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f7ff f9d8 	bl	800c754 <optiga_cmd_queue_get_count_of>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d100      	bne.n	800d3ac <optiga_cmd_create+0x30>
                                               OPTIGA_CMD_QUEUE_SLOT_STATE,
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
 800d3aa:	e04f      	b.n	800d44c <optiga_cmd_create+0xd0>
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 800d3ac:	2001      	movs	r0, #1
 800d3ae:	2124      	movs	r1, #36	; 0x24
 800d3b0:	f7fc faba 	bl	8009928 <pal_os_calloc>
 800d3b4:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d100      	bne.n	800d3be <optiga_cmd_create+0x42>
        {
            break;
 800d3bc:	e046      	b.n	800d44c <optiga_cmd_create+0xd0>
        }

        me->handler = handler;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	68ba      	ldr	r2, [r7, #8]
 800d3c2:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	4a23      	ldr	r2, [pc, #140]	; (800d45c <optiga_cmd_create+0xe0>)
 800d3ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
 800d3d8:	4a21      	ldr	r2, [pc, #132]	; (800d460 <optiga_cmd_create+0xe4>)
 800d3da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	83da      	strh	r2, [r3, #30]

        if (FALSE == me->p_optiga->instance_init_state)
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	7b1b      	ldrb	r3, [r3, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d129      	bne.n	800d440 <optiga_cmd_create+0xc4>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	681c      	ldr	r4, [r3, #0]
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	481b      	ldr	r0, [pc, #108]	; (800d464 <optiga_cmd_create+0xe8>)
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	f7fc fa2a 	bl	8009850 <pal_os_event_create>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	f8c4 366c 	str.w	r3, [r4, #1644]	; 0x66c
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	681c      	ldr	r4, [r3, #0]
 800d406:	4818      	ldr	r0, [pc, #96]	; (800d468 <optiga_cmd_create+0xec>)
 800d408:	6979      	ldr	r1, [r7, #20]
 800d40a:	f7fe fd95 	bl	800bf38 <optiga_comms_create>
 800d40e:	4603      	mov	r3, r0
 800d410:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d105      	bne.n	800d428 <optiga_cmd_create+0xac>
            {
                pal_os_free(me);
 800d41c:	6978      	ldr	r0, [r7, #20]
 800d41e:	f7fc fa91 	bl	8009944 <pal_os_free>
                me = NULL;
 800d422:	2300      	movs	r3, #0
 800d424:	617b      	str	r3, [r7, #20]
                break;
 800d426:	e011      	b.n	800d44c <optiga_cmd_create+0xd0>
            }
            me->p_optiga->instance_init_state = TRUE;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2201      	movs	r2, #1
 800d42e:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	6812      	ldr	r2, [r2, #0]
 800d43a:	f8d2 266c 	ldr.w	r2, [r2, #1644]	; 0x66c
 800d43e:	611a      	str	r2, [r3, #16]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	331b      	adds	r3, #27
 800d444:	6978      	ldr	r0, [r7, #20]
 800d446:	4619      	mov	r1, r3
 800d448:	f7ff f9c6 	bl	800c7d8 <optiga_cmd_queue_assign_slot>
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 800d44c:	f7fc fa66 	bl	800991c <pal_os_lock_exit_critical_section>
    return (me);
 800d450:	697b      	ldr	r3, [r7, #20]
}
 800d452:	4618      	mov	r0, r3
 800d454:	371c      	adds	r7, #28
 800d456:	46bd      	mov	sp, r7
 800d458:	bd90      	pop	{r4, r7, pc}
 800d45a:	bf00      	nop
 800d45c:	1ffed56c 	.word	0x1ffed56c
 800d460:	1ffed570 	.word	0x1ffed570
 800d464:	0800c889 	.word	0x0800c889
 800d468:	0800d2e1 	.word	0x0800d2e1

0800d46c <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800d474:	f240 2302 	movw	r3, #514	; 0x202
 800d478:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (NULL != me)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00c      	beq.n	800d49a <optiga_cmd_destroy+0x2e>
        {
            return_status = optiga_cmd_release_session(me);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff fbf9 	bl	800cc78 <optiga_cmd_release_session>
 800d486:	4603      	mov	r3, r0
 800d488:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff f9d4 	bl	800c838 <optiga_cmd_queue_deassign_slot>
            pal_os_free(me);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7fc fa57 	bl	8009944 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 800d496:	2300      	movs	r3, #0
 800d498:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    return (return_status);
 800d49a:	89fb      	ldrh	r3, [r7, #14]
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 800d4a4:	b590      	push	{r4, r7, lr}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af02      	add	r7, sp, #8
 800d4aa:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 800d4ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4b0:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800d4b2:	2304      	movs	r3, #4
 800d4b4:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	7e9b      	ldrb	r3, [r3, #26]
 800d4c0:	f003 0303 	and.w	r3, r3, #3
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d055      	beq.n	800d574 <optiga_cmd_get_error_code_handler+0xd0>
 800d4c8:	2b03      	cmp	r3, #3
 800d4ca:	f000 8086 	beq.w	800d5da <optiga_cmd_get_error_code_handler+0x136>
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d000      	beq.n	800d4d4 <optiga_cmd_get_error_code_handler+0x30>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 800d4d2:	e0a4      	b.n	800d61e <optiga_cmd_get_error_code_handler+0x17a>

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
    {
        case OPTIGA_CMD_ERROR_CODE_PREPARE:
        {
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	89bb      	ldrh	r3, [r7, #12]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	4413      	add	r3, r2
 800d4de:	3305      	adds	r3, #5
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f24f 11c2 	movw	r1, #61890	; 0xf1c2
 800d4e6:	f7fe fe19 	bl	800c11c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800d4ea:	89bb      	ldrh	r3, [r7, #12]
 800d4ec:	3302      	adds	r3, #2
 800d4ee:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	89bb      	ldrh	r3, [r7, #12]
 800d4f6:	3308      	adds	r3, #8
 800d4f8:	4413      	add	r3, r2
 800d4fa:	3305      	adds	r3, #5
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	2100      	movs	r1, #0
 800d500:	f7fe fe0c 	bl	800c11c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800d504:	89bb      	ldrh	r3, [r7, #12]
 800d506:	3302      	adds	r3, #2
 800d508:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	89bb      	ldrh	r3, [r7, #12]
 800d510:	3308      	adds	r3, #8
 800d512:	4413      	add	r3, r2
 800d514:	3305      	adds	r3, #5
 800d516:	4618      	mov	r0, r3
 800d518:	2101      	movs	r1, #1
 800d51a:	f7fe fdff 	bl	800c11c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800d51e:	89bb      	ldrh	r3, [r7, #12]
 800d520:	3302      	adds	r3, #2
 800d522:	81bb      	strh	r3, [r7, #12]

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800d524:	89bb      	ldrh	r3, [r7, #12]
 800d526:	3b04      	subs	r3, #4
 800d528:	b29a      	uxth	r2, r3
                                           OPTIGA_CMD_PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	330d      	adds	r3, #13
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800d530:	2001      	movs	r0, #1
 800d532:	2100      	movs	r1, #0
 800d534:	f7ff f824 	bl	800c580 <optiga_cmd_prepare_apdu_header>
                                           OPTIGA_CMD_PARAM,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	89ba      	ldrh	r2, [r7, #12]
 800d53e:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	7e9b      	ldrb	r3, [r3, #26]
 800d544:	f023 0303 	bic.w	r3, r3, #3
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	769a      	strb	r2, [r3, #26]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	7e9b      	ldrb	r3, [r3, #26]
 800d552:	f043 0302 	orr.w	r3, r3, #2
 800d556:	b2da      	uxtb	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	769a      	strb	r2, [r3, #26]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800d564:	4618      	mov	r0, r3
 800d566:	4930      	ldr	r1, [pc, #192]	; (800d628 <optiga_cmd_get_error_code_handler+0x184>)
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d56e:	f7fc f9a7 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
 800d572:	e054      	b.n	800d61e <optiga_cmd_get_error_code_handler+0x17a>
        case OPTIGA_CMD_ERROR_CODE_TX:
        {
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f240 6215 	movw	r2, #1557	; 0x615
 800d57c:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4618      	mov	r0, r3
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	f7fe fcfd 	bl	800bf84 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	f103 010d 	add.w	r1, r3, #13
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	f103 040d 	add.w	r4, r3, #13
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	3306      	adds	r3, #6
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	4623      	mov	r3, r4
 800d5a6:	f7fe fd2d 	bl	800c004 <optiga_comms_transceive>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	81fb      	strh	r3, [r7, #14]
                                                    p_optiga->optiga_comms_buffer,
                                                    p_optiga->comms_tx_size,
                                                    p_optiga->optiga_comms_buffer,
                                                    &p_optiga->comms_rx_size);
            if (OPTIGA_COMMS_SUCCESS != return_status)
 800d5ae:	89fb      	ldrh	r3, [r7, #14]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d003      	beq.n	800d5bc <optiga_cmd_get_error_code_handler+0x118>
            {
                return_status = OPTIGA_CMD_ERROR;
 800d5b4:	f240 2302 	movw	r3, #514	; 0x202
 800d5b8:	81fb      	strh	r3, [r7, #14]
                break;
 800d5ba:	e030      	b.n	800d61e <optiga_cmd_get_error_code_handler+0x17a>
            }
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	7e9b      	ldrb	r3, [r3, #26]
 800d5c0:	f023 0303 	bic.w	r3, r3, #3
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	769a      	strb	r2, [r3, #26]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	7e9b      	ldrb	r3, [r3, #26]
 800d5ce:	f043 0303 	orr.w	r3, r3, #3
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	769a      	strb	r2, [r3, #26]
        }
        break;
 800d5d8:	e021      	b.n	800d61e <optiga_cmd_get_error_code_handler+0x17a>
        case OPTIGA_CMD_ERROR_CODE_RX:
        {
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	7b5b      	ldrb	r3, [r3, #13]
 800d5e0:	2bff      	cmp	r3, #255	; 0xff
 800d5e2:	d100      	bne.n	800d5e6 <optiga_cmd_get_error_code_handler+0x142>
            {
                break;
 800d5e4:	e01b      	b.n	800d61e <optiga_cmd_get_error_code_handler+0x17a>
            }
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	7c5b      	ldrb	r3, [r3, #17]
 800d5ec:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 800d5ee:	89fb      	ldrh	r3, [r7, #14]
 800d5f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5f8:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2203      	movs	r2, #3
 800d5fe:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2209      	movs	r2, #9
 800d604:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f8d3 366c 	ldr.w	r3, [r3, #1644]	; 0x66c
 800d60e:	4618      	mov	r0, r3
 800d610:	4905      	ldr	r1, [pc, #20]	; (800d628 <optiga_cmd_get_error_code_handler+0x184>)
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d618:	f7fc f952 	bl	80098c0 <pal_os_event_register_callback_oneshot>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
 800d61c:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 800d61e:	89fb      	ldrh	r3, [r7, #14]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3714      	adds	r7, #20
 800d624:	46bd      	mov	sp, r7
 800d626:	bd90      	pop	{r4, r7, pc}
 800d628:	0800c625 	.word	0x0800c625

0800d62c <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800d634:	f240 2302 	movw	r3, #514	; 0x202
 800d638:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	7d9b      	ldrb	r3, [r3, #22]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d002      	beq.n	800d648 <optiga_cmd_open_application_handler+0x1c>
 800d642:	2b03      	cmp	r3, #3
 800d644:	d076      	beq.n	800d734 <optiga_cmd_open_application_handler+0x108>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 800d646:	e089      	b.n	800d75c <optiga_cmd_open_application_handler+0x130>
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending open app command...");

            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 800d648:	2314      	movs	r3, #20
 800d64a:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7e5b      	ldrb	r3, [r3, #25]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <optiga_cmd_open_application_handler+0x2c>
 800d654:	2200      	movs	r2, #0
 800d656:	e000      	b.n	800d65a <optiga_cmd_open_application_handler+0x2e>
 800d658:	2208      	movs	r2, #8
 800d65a:	89bb      	ldrh	r3, [r7, #12]
 800d65c:	4413      	add	r3, r2
 800d65e:	81bb      	strh	r3, [r7, #12]
                                    (sizeof(me->p_optiga->optiga_context_handle_buffer)));
            //lint --e{774} suppress "If OPTIGA_MAX_COMMS_BUFFER_SIZE is set to lesser value it will fail"
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800d660:	89bb      	ldrh	r3, [r7, #12]
 800d662:	f240 6215 	movw	r2, #1557	; 0x615
 800d666:	4293      	cmp	r3, r2
 800d668:	d903      	bls.n	800d672 <optiga_cmd_open_application_handler+0x46>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800d66a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d66e:	81fb      	strh	r3, [r7, #14]
                break;
 800d670:	e074      	b.n	800d75c <optiga_cmd_open_application_handler+0x130>
            }
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7e5b      	ldrb	r3, [r3, #25]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d006      	beq.n	800d688 <optiga_cmd_open_application_handler+0x5c>
            {
                ///optiga context restore operation
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff fb24 	bl	800ccc8 <optiga_cmd_restore_context>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d000      	beq.n	800d688 <optiga_cmd_open_application_handler+0x5c>
                {
                    break;
 800d686:	e069      	b.n	800d75c <optiga_cmd_open_application_handler+0x130>
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	7e59      	ldrb	r1, [r3, #25]
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	7e5b      	ldrb	r3, [r3, #25]
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
                {
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <optiga_cmd_open_application_handler+0x6c>
 800d694:	2210      	movs	r2, #16
 800d696:	e000      	b.n	800d69a <optiga_cmd_open_application_handler+0x6e>
 800d698:	2218      	movs	r2, #24
                                           me->cmd_param,
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	330d      	adds	r3, #13
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
                {
                    break;
                }
            }
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800d6a0:	20f0      	movs	r0, #240	; 0xf0
 800d6a2:	f7fe ff6d 	bl	800c580 <optiga_cmd_prepare_apdu_header>
                                           (sizeof(g_optiga_unique_application_identifier)) :
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3311      	adds	r3, #17
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	492e      	ldr	r1, [pc, #184]	; (800d768 <optiga_cmd_open_application_handler+0x13c>)
 800d6b0:	2210      	movs	r2, #16
 800d6b2:	f7fc f951 	bl	8009958 <pal_os_memcpy>
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	7e5b      	ldrb	r3, [r3, #25]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00c      	beq.n	800d6d8 <optiga_cmd_open_application_handler+0xac>
            {
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f103 0221 	add.w	r2, r3, #33	; 0x21
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f203 6374 	addw	r3, r3, #1652	; 0x674
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                          g_optiga_unique_application_identifier,
                          sizeof(g_optiga_unique_application_identifier));
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
            {
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	2208      	movs	r2, #8
 800d6d4:	f7fc f940 	bl	8009958 <pal_os_memcpy>
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	7e52      	ldrb	r2, [r2, #25]
                              sizeof(g_optiga_unique_application_identifier)],
                              me->p_optiga->optiga_context_handle_buffer,
                              sizeof(me->p_optiga->optiga_context_handle_buffer));
            }

            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 800d6e0:	2a00      	cmp	r2, #0
 800d6e2:	d101      	bne.n	800d6e8 <optiga_cmd_open_application_handler+0xbc>
 800d6e4:	2214      	movs	r2, #20
 800d6e6:	e000      	b.n	800d6ea <optiga_cmd_open_application_handler+0xbe>
 800d6e8:	221c      	movs	r2, #28
 800d6ea:	809a      	strh	r2, [r3, #4]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
                                           sizeof(g_optiga_unique_application_identifier):
                                           (sizeof(g_optiga_unique_application_identifier) +
                                           sizeof(me->p_optiga->optiga_context_handle_buffer))));

            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f203 6374 	addw	r3, r3, #1652	; 0x674
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	2208      	movs	r2, #8
 800d6fa:	f7fc f93b 	bl	8009974 <pal_os_memset>
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	8bdb      	ldrh	r3, [r3, #30]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d013      	beq.n	800d72e <optiga_cmd_open_application_handler+0x102>
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	8bda      	ldrh	r2, [r3, #30]
                                                       me->p_optiga->optiga_context_handle_buffer,
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f203 6374 	addw	r3, r3, #1652	; 0x674
                          0,
                          sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
            {
                //Clearing context handle secret from datastore
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800d712:	4610      	mov	r0, r2
 800d714:	4619      	mov	r1, r3
 800d716:	2208      	movs	r2, #8
 800d718:	f7fb ff6c 	bl	80095f4 <pal_os_datastore_write>
 800d71c:	4603      	mov	r3, r0
 800d71e:	81fb      	strh	r3, [r7, #14]
                                                       me->p_optiga->optiga_context_handle_buffer,
                                                       sizeof(me->p_optiga->optiga_context_handle_buffer));
                if (PAL_STATUS_SUCCESS != return_status)
 800d720:	89fb      	ldrh	r3, [r7, #14]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <optiga_cmd_open_application_handler+0x102>
                {
                    return_status = OPTIGA_CMD_ERROR;
 800d726:	f240 2302 	movw	r3, #514	; 0x202
 800d72a:	81fb      	strh	r3, [r7, #14]
                    break;
 800d72c:	e016      	b.n	800d75c <optiga_cmd_open_application_handler+0x130>
                }
            }
            return_status = OPTIGA_LIB_SUCCESS;
 800d72e:	2300      	movs	r3, #0
 800d730:	81fb      	strh	r3, [r7, #14]
        }
        break;
 800d732:	e013      	b.n	800d75c <optiga_cmd_open_application_handler+0x130>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");

            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	7b5b      	ldrb	r3, [r3, #13]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00b      	beq.n	800d756 <optiga_cmd_open_application_handler+0x12a>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	7e9b      	ldrb	r3, [r3, #26]
 800d742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d746:	b2da      	uxtb	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	769a      	strb	r2, [r3, #26]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	7e9a      	ldrb	r2, [r3, #26]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	769a      	strb	r2, [r3, #26]
                break;
 800d754:	e002      	b.n	800d75c <optiga_cmd_open_application_handler+0x130>
            }
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800d756:	2300      	movs	r3, #0
 800d758:	81fb      	strh	r3, [r7, #14]

        }
        break;
 800d75a:	bf00      	nop
        default:
            break;
    }

    return (return_status);
 800d75c:	89fb      	ldrh	r3, [r7, #14]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	08013da4 	.word	0x08013da4

0800d76c <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b088      	sub	sp, #32
 800d770:	af04      	add	r7, sp, #16
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	460b      	mov	r3, r1
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800d77a:	7afa      	ldrb	r2, [r7, #11]
 800d77c:	2300      	movs	r3, #0
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	9301      	str	r3, [sp, #4]
 800d784:	23f0      	movs	r3, #240	; 0xf0
 800d786:	9302      	str	r3, [sp, #8]
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	4611      	mov	r1, r2
 800d78c:	4a04      	ldr	r2, [pc, #16]	; (800d7a0 <optiga_cmd_open_application+0x34>)
 800d78e:	2300      	movs	r3, #0
 800d790:	f7fe ff54 	bl	800c63c <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	0800d62d 	.word	0x0800d62d

0800d7a4 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b088      	sub	sp, #32
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800d7b2:	f240 2302 	movw	r3, #514	; 0x202
 800d7b6:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800d7b8:	2304      	movs	r3, #4
 800d7ba:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 800d7bc:	2381      	movs	r3, #129	; 0x81
 800d7be:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	7d9b      	ldrb	r3, [r3, #22]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d002      	beq.n	800d7ce <optiga_cmd_get_data_object_handler+0x2a>
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d06c      	beq.n	800d8a6 <optiga_cmd_get_data_object_handler+0x102>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 800d7cc:	e0ed      	b.n	800d9aa <optiga_cmd_get_data_object_handler+0x206>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending read data command...");
            // APDU header size + oid 2bytes + offset 2 bytes + length 2 bytes
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 800d7ce:	230a      	movs	r3, #10
 800d7d0:	827b      	strh	r3, [r7, #18]
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            //lint --e{774} suppress "If OPTIGA_MAX_COMMS_BUFFER_SIZE is set to lesser value it will fail"
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800d7d2:	8a7b      	ldrh	r3, [r7, #18]
 800d7d4:	f240 6215 	movw	r2, #1557	; 0x615
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d907      	bls.n	800d7ec <optiga_cmd_get_data_object_handler+0x48>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800d7dc:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d7e0:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	801a      	strh	r2, [r3, #0]
                break;
 800d7ea:	e0de      	b.n	800d9aa <optiga_cmd_get_data_object_handler+0x206>
            }
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	8bbb      	ldrh	r3, [r7, #28]
 800d7f2:	3308      	adds	r3, #8
 800d7f4:	4413      	add	r3, r2
 800d7f6:	1d5a      	adds	r2, r3, #5
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4619      	mov	r1, r3
 800d800:	f7fe fc8c 	bl	800c11c <optiga_common_set_uint16>
                                     p_optiga_read_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800d804:	8bbb      	ldrh	r3, [r7, #28]
 800d806:	3302      	adds	r3, #2
 800d808:	83bb      	strh	r3, [r7, #28]

            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	889b      	ldrh	r3, [r3, #4]
 800d80e:	461a      	mov	r2, r3
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	88db      	ldrh	r3, [r3, #6]
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	f240 6211 	movw	r2, #1553	; 0x611
 800d81a:	4293      	cmp	r3, r2
 800d81c:	bfa8      	it	ge
 800d81e:	4613      	movge	r3, r2
 800d820:	823b      	strh	r3, [r7, #16]
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	7a9b      	ldrb	r3, [r3, #10]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d120      	bne.n	800d86c <optiga_cmd_get_data_object_handler+0xc8>
            {
                //offset
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	8bbb      	ldrh	r3, [r7, #28]
 800d830:	3308      	adds	r3, #8
 800d832:	4413      	add	r3, r2
 800d834:	1d59      	adds	r1, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	885a      	ldrh	r2, [r3, #2]
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	88db      	ldrh	r3, [r3, #6]
                               (p_optiga_read_data->bytes_to_read - p_optiga_read_data->accumulated_size));

            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
            {
                //offset
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800d83e:	4413      	add	r3, r2
 800d840:	b29b      	uxth	r3, r3
 800d842:	4608      	mov	r0, r1
 800d844:	4619      	mov	r1, r3
 800d846:	f7fe fc69 	bl	800c11c <optiga_common_set_uint16>
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800d84a:	8bbb      	ldrh	r3, [r7, #28]
 800d84c:	3302      	adds	r3, #2
 800d84e:	83bb      	strh	r3, [r7, #28]

                //length
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	8bbb      	ldrh	r3, [r7, #28]
 800d856:	3308      	adds	r3, #8
 800d858:	4413      	add	r3, r2
 800d85a:	1d5a      	adds	r2, r3, #5
 800d85c:	8a3b      	ldrh	r3, [r7, #16]
 800d85e:	4610      	mov	r0, r2
 800d860:	4619      	mov	r1, r3
 800d862:	f7fe fc5b 	bl	800c11c <optiga_common_set_uint16>
                                         size_to_read);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800d866:	8bbb      	ldrh	r3, [r7, #28]
 800d868:	3302      	adds	r3, #2
 800d86a:	83bb      	strh	r3, [r7, #28]
            }
            // If OID is for Last error code, don't clear the error code in read
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	f24f 12c2 	movw	r2, #61890	; 0xf1c2
 800d874:	4293      	cmp	r3, r2
 800d876:	d101      	bne.n	800d87c <optiga_cmd_get_data_object_handler+0xd8>
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 800d878:	2301      	movs	r3, #1
 800d87a:	76fb      	strb	r3, [r7, #27]
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	7e59      	ldrb	r1, [r3, #25]
 800d880:	8bbb      	ldrh	r3, [r7, #28]
 800d882:	3b04      	subs	r3, #4
 800d884:	b29a      	uxth	r2, r3
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	330d      	adds	r3, #13
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
            {
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
            }
            //prepare APDU header
            optiga_cmd_prepare_apdu_header(cmd,
 800d88c:	7ef8      	ldrb	r0, [r7, #27]
 800d88e:	f7fe fe77 	bl	800c580 <optiga_cmd_prepare_apdu_header>
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	8bba      	ldrh	r2, [r7, #28]
 800d898:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	8a3a      	ldrh	r2, [r7, #16]
 800d89e:	811a      	strh	r2, [r3, #8]
            return_status = OPTIGA_LIB_SUCCESS;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	83fb      	strh	r3, [r7, #30]
        }
        break;
 800d8a4:	e081      	b.n	800d9aa <optiga_cmd_get_data_object_handler+0x206>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
            me->chaining_ongoing = FALSE;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	761a      	strb	r2, [r3, #24]
            // check if the read was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	7b5b      	ldrb	r3, [r3, #13]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d025      	beq.n	800d902 <optiga_cmd_get_data_object_handler+0x15e>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                //check if it is out of boundary issue
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	88db      	ldrh	r3, [r3, #6]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00e      	beq.n	800d8dc <optiga_cmd_get_data_object_handler+0x138>
                {
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	7e9b      	ldrb	r3, [r3, #26]
 800d8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	769a      	strb	r2, [r3, #26]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	7e9b      	ldrb	r3, [r3, #26]
 800d8d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	769a      	strb	r2, [r3, #26]
 800d8da:	e00e      	b.n	800d8fa <optiga_cmd_get_data_object_handler+0x156>
                //flag used to setting the received buffer length to 0, in case unexpected error
                else
                {
                    //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7e9b      	ldrb	r3, [r3, #26]
 800d8e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8e4:	b2da      	uxtb	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	769a      	strb	r2, [r3, #26]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7e9a      	ldrb	r2, [r3, #26]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	769a      	strb	r2, [r3, #26]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	801a      	strh	r2, [r3, #0]
                }
                return_status = OPTIGA_CMD_ERROR;
 800d8fa:	f240 2302 	movw	r3, #514	; 0x202
 800d8fe:	83fb      	strh	r3, [r7, #30]
 800d900:	e052      	b.n	800d9a8 <optiga_cmd_get_data_object_handler+0x204>
            }
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	8b9b      	ldrh	r3, [r3, #28]
 800d906:	f248 0208 	movw	r2, #32776	; 0x8008
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d107      	bne.n	800d91e <optiga_cmd_get_data_object_handler+0x17a>
            {
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	88d2      	ldrh	r2, [r2, #6]
 800d916:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 800d918:	2300      	movs	r3, #0
 800d91a:	83fb      	strh	r3, [r7, #30]
 800d91c:	e044      	b.n	800d9a8 <optiga_cmd_get_data_object_handler+0x204>
            }
            else
            {
                //copy data from optiga comms buffer to user provided buffer
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	88db      	ldrh	r3, [r3, #6]
 800d924:	3b04      	subs	r3, #4
 800d926:	81fb      	strh	r3, [r7, #14]

                // check if the data received is greater than the size of read buffer
                if (p_optiga_read_data->bytes_to_read < data_read)
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	889b      	ldrh	r3, [r3, #4]
 800d92c:	89fa      	ldrh	r2, [r7, #14]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d907      	bls.n	800d942 <optiga_cmd_get_data_object_handler+0x19e>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800d932:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d936:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	2200      	movs	r2, #0
 800d93e:	801a      	strh	r2, [r3, #0]
                    break;
 800d940:	e033      	b.n	800d9aa <optiga_cmd_get_data_object_handler+0x206>
                }

                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	88d2      	ldrh	r2, [r2, #6]
 800d94a:	1899      	adds	r1, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f103 0211 	add.w	r2, r3, #17
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
                    break;
                }

                //copy data from optiga comms buffer to user provided buffer
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 800d954:	89fb      	ldrh	r3, [r7, #14]
 800d956:	4608      	mov	r0, r1
 800d958:	4611      	mov	r1, r2
 800d95a:	461a      	mov	r2, r3
 800d95c:	f7fb fffc 	bl	8009958 <pal_os_memcpy>
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	88da      	ldrh	r2, [r3, #6]
 800d964:	89fb      	ldrh	r3, [r7, #14]
 800d966:	4413      	add	r3, r2
 800d968:	b29a      	uxth	r2, r3
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	80da      	strh	r2, [r3, #6]

                if ((p_optiga_read_data->last_read_size > data_read) ||
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	891b      	ldrh	r3, [r3, #8]
 800d972:	89fa      	ldrh	r2, [r7, #14]
 800d974:	429a      	cmp	r2, r3
 800d976:	d305      	bcc.n	800d984 <optiga_cmd_get_data_object_handler+0x1e0>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	88da      	ldrh	r2, [r3, #6]
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	889b      	ldrh	r3, [r3, #4]
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                              data_read);

                p_optiga_read_data->accumulated_size += data_read;

                if ((p_optiga_read_data->last_read_size > data_read) ||
 800d980:	429a      	cmp	r2, r3
 800d982:	d10b      	bne.n	800d99c <optiga_cmd_get_data_object_handler+0x1f8>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
                {
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	697a      	ldr	r2, [r7, #20]
 800d98a:	88d2      	ldrh	r2, [r2, #6]
 800d98c:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	2200      	movs	r2, #0
 800d992:	80da      	strh	r2, [r3, #6]
                    p_optiga_read_data->last_read_size = 0;
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2200      	movs	r2, #0
 800d998:	811a      	strh	r2, [r3, #8]
 800d99a:	e002      	b.n	800d9a2 <optiga_cmd_get_data_object_handler+0x1fe>
                }
                else
                {
                    me->chaining_ongoing = TRUE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	761a      	strb	r2, [r3, #24]
                }
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
                return_status = OPTIGA_LIB_SUCCESS;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	83fb      	strh	r3, [r7, #30]
            }
        }
        break;
 800d9a6:	e7ff      	b.n	800d9a8 <optiga_cmd_get_data_object_handler+0x204>
 800d9a8:	bf00      	nop
        default:
            break;
    }

    return (return_status);
 800d9aa:	8bfb      	ldrh	r3, [r7, #30]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3720      	adds	r7, #32
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af04      	add	r7, sp, #16
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	607a      	str	r2, [r7, #4]
 800d9c0:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800d9c2:	7afa      	ldrb	r2, [r7, #11]
 800d9c4:	2306      	movs	r3, #6
 800d9c6:	9300      	str	r3, [sp, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	9301      	str	r3, [sp, #4]
 800d9cc:	2381      	movs	r3, #129	; 0x81
 800d9ce:	9302      	str	r3, [sp, #8]
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	4a04      	ldr	r2, [pc, #16]	; (800d9e8 <optiga_cmd_get_data_object+0x34>)
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	f7fe fe30 	bl	800c63c <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800d9dc:	2300      	movs	r3, #0
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	0800d7a5 	.word	0x0800d7a5

0800d9ec <optiga_cmd_set_data_object_handler>:

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	613b      	str	r3, [r7, #16]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800d9fa:	f240 2302 	movw	r3, #514	; 0x202
 800d9fe:	82fb      	strh	r3, [r7, #22]
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800da00:	2304      	movs	r3, #4
 800da02:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	7d9b      	ldrb	r3, [r3, #22]
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d003      	beq.n	800da14 <optiga_cmd_set_data_object_handler+0x28>
 800da0c:	2b03      	cmp	r3, #3
 800da0e:	f000 8086 	beq.w	800db1e <optiga_cmd_set_data_object_handler+0x132>
            OPTIGA_CMD_LOG_MESSAGE("Response of set data command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 800da12:	e098      	b.n	800db46 <optiga_cmd_set_data_object_handler+0x15a>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {

            OPTIGA_CMD_LOG_MESSAGE("Sending set data command...");
            me->chaining_ongoing = FALSE;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	761a      	strb	r2, [r3, #24]
            //oid
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	89fb      	ldrh	r3, [r7, #14]
 800da20:	3308      	adds	r3, #8
 800da22:	4413      	add	r3, r2
 800da24:	1d5a      	adds	r2, r3, #5
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	4610      	mov	r0, r2
 800da2c:	4619      	mov	r1, r3
 800da2e:	f7fe fb75 	bl	800c11c <optiga_common_set_uint16>
                                     p_optiga_write_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800da32:	89fb      	ldrh	r3, [r7, #14]
 800da34:	3302      	adds	r3, #2
 800da36:	81fb      	strh	r3, [r7, #14]

            //offset
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	89fb      	ldrh	r3, [r7, #14]
 800da3e:	3308      	adds	r3, #8
 800da40:	4413      	add	r3, r2
 800da42:	1d59      	adds	r1, r3, #5
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	885a      	ldrh	r2, [r3, #2]
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	88db      	ldrh	r3, [r3, #6]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_optiga_write_data->oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            //offset
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800da4c:	4413      	add	r3, r2
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4608      	mov	r0, r1
 800da52:	4619      	mov	r1, r3
 800da54:	f7fe fb62 	bl	800c11c <optiga_common_set_uint16>
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800da58:	89fb      	ldrh	r3, [r7, #14]
 800da5a:	3302      	adds	r3, #2
 800da5c:	81fb      	strh	r3, [r7, #14]

            // Check maximum size that can be written, based on optiga comms buffer size
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	889b      	ldrh	r3, [r3, #4]
 800da62:	461a      	mov	r2, r3
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	88db      	ldrh	r3, [r3, #6]
 800da68:	1ad2      	subs	r2, r2, r3
 800da6a:	89fb      	ldrh	r3, [r7, #14]
 800da6c:	f5c3 63c2 	rsb	r3, r3, #1552	; 0x610
 800da70:	3305      	adds	r3, #5
 800da72:	4293      	cmp	r3, r2
 800da74:	bfa8      	it	ge
 800da76:	4613      	movge	r3, r2
 800da78:	81bb      	strh	r3, [r7, #12]
                               ((p_optiga_write_data->size) - p_optiga_write_data->written_size));

            // APDU header size + oid 2 bytes + offset 2 bytes + size of data to send
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 800da7a:	89bb      	ldrh	r3, [r7, #12]
 800da7c:	3308      	adds	r3, #8
 800da7e:	817b      	strh	r3, [r7, #10]
                                    OPTIGA_CMD_UINT16_SIZE_IN_BYTES + size_to_send;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800da80:	897b      	ldrh	r3, [r7, #10]
 800da82:	f240 6215 	movw	r2, #1557	; 0x615
 800da86:	4293      	cmp	r3, r2
 800da88:	d903      	bls.n	800da92 <optiga_cmd_set_data_object_handler+0xa6>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800da8a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800da8e:	82fb      	strh	r3, [r7, #22]
                break;
 800da90:	e059      	b.n	800db46 <optiga_cmd_set_data_object_handler+0x15a>
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	7e59      	ldrb	r1, [r3, #25]
 800da96:	89bb      	ldrh	r3, [r7, #12]
 800da98:	3304      	adds	r3, #4
 800da9a:	b29a      	uxth	r2, r3
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	330d      	adds	r3, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 800daa2:	2082      	movs	r0, #130	; 0x82
 800daa4:	f7fe fd6c 	bl	800c580 <optiga_cmd_prepare_apdu_header>
                                           me->cmd_param,
                                           (OPTIGA_CMD_APDU_HEADER_SIZE + size_to_send),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
            //data to be written
            if (OPTIGA_UTIL_COUNT_DATA_OBJECT == me->cmd_param)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	7e5b      	ldrb	r3, [r3, #25]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d108      	bne.n	800dac2 <optiga_cmd_set_data_object_handler+0xd6>
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	89fb      	ldrh	r3, [r7, #14]
 800dab6:	6939      	ldr	r1, [r7, #16]
 800dab8:	7b89      	ldrb	r1, [r1, #14]
 800daba:	4413      	add	r3, r2
 800dabc:	460a      	mov	r2, r1
 800dabe:	735a      	strb	r2, [r3, #13]
 800dac0:	e010      	b.n	800dae4 <optiga_cmd_set_data_object_handler+0xf8>
            }
            else
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	89fb      	ldrh	r3, [r7, #14]
 800dac8:	3308      	adds	r3, #8
 800daca:	4413      	add	r3, r2
 800dacc:	1d59      	adds	r1, r3, #5
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	693a      	ldr	r2, [r7, #16]
 800dad4:	88d2      	ldrh	r2, [r2, #6]
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
            }
            else
            {
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800dad6:	441a      	add	r2, r3
 800dad8:	89bb      	ldrh	r3, [r7, #12]
 800dada:	4608      	mov	r0, r1
 800dadc:	4611      	mov	r1, r2
 800dade:	461a      	mov	r2, r3
 800dae0:	f7fb ff3a 	bl	8009958 <pal_os_memcpy>
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
                              size_to_send);
            }
            p_optiga_write_data->written_size += size_to_send;
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	88da      	ldrh	r2, [r3, #6]
 800dae8:	89bb      	ldrh	r3, [r7, #12]
 800daea:	4413      	add	r3, r2
 800daec:	b29a      	uxth	r2, r3
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	80da      	strh	r2, [r3, #6]

            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	89f9      	ldrh	r1, [r7, #14]
 800daf8:	89ba      	ldrh	r2, [r7, #12]
 800dafa:	440a      	add	r2, r1
 800dafc:	b292      	uxth	r2, r2
 800dafe:	809a      	strh	r2, [r3, #4]

            // check if chaining is required based on size written and the user requested write
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	88da      	ldrh	r2, [r3, #6]
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	889b      	ldrh	r3, [r3, #4]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d005      	beq.n	800db18 <optiga_cmd_set_data_object_handler+0x12c>
            {
                me->chaining_ongoing = TRUE;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	761a      	strb	r2, [r3, #24]
                // For chaining, the 2nd loop will be Write only
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	765a      	strb	r2, [r3, #25]
            }
            return_status = OPTIGA_LIB_SUCCESS;
 800db18:	2300      	movs	r3, #0
 800db1a:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800db1c:	e013      	b.n	800db46 <optiga_cmd_set_data_object_handler+0x15a>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for set data command...");
            // check if the write was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	7b5b      	ldrb	r3, [r3, #13]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00b      	beq.n	800db40 <optiga_cmd_set_data_object_handler+0x154>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing set data response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	7e9b      	ldrb	r3, [r3, #26]
 800db2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db30:	b2da      	uxtb	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	769a      	strb	r2, [r3, #26]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	7e9a      	ldrb	r2, [r3, #26]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	769a      	strb	r2, [r3, #26]
                break;
 800db3e:	e002      	b.n	800db46 <optiga_cmd_set_data_object_handler+0x15a>
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of set data command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800db40:	2300      	movs	r3, #0
 800db42:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800db44:	bf00      	nop
        default:
            break;
    }
    return (return_status);
 800db46:	8afb      	ldrh	r3, [r7, #22]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <optiga_cmd_set_data_object>:


optiga_lib_status_t optiga_cmd_set_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_set_data_object_params_t * params)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	af04      	add	r7, sp, #16
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	460b      	mov	r3, r1
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800db5e:	7afa      	ldrb	r2, [r7, #11]
 800db60:	2306      	movs	r3, #6
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	2382      	movs	r3, #130	; 0x82
 800db6a:	9302      	str	r3, [sp, #8]
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	4611      	mov	r1, r2
 800db70:	4a04      	ldr	r2, [pc, #16]	; (800db84 <optiga_cmd_set_data_object+0x34>)
 800db72:	2302      	movs	r3, #2
 800db74:	f7fe fd62 	bl	800c63c <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_SET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	0800d9ed 	.word	0x0800d9ed

0800db88 <optiga_cmd_get_random_handler>:
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	613b      	str	r3, [r7, #16]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800db96:	f240 2302 	movw	r3, #514	; 0x202
 800db9a:	82fb      	strh	r3, [r7, #22]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800db9c:	2304      	movs	r3, #4
 800db9e:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	7d9b      	ldrb	r3, [r3, #22]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d002      	beq.n	800dbae <optiga_cmd_get_random_handler+0x26>
 800dba8:	2b03      	cmp	r3, #3
 800dbaa:	d021      	beq.n	800dbf0 <optiga_cmd_get_random_handler+0x68>
            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 800dbac:	e041      	b.n	800dc32 <optiga_cmd_get_random_handler+0xaa>
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending get random command...");

            /// Copy the random data length
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	89fb      	ldrh	r3, [r7, #14]
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	4413      	add	r3, r2
 800dbb8:	1d5a      	adds	r2, r3, #5
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	f7fe faab 	bl	800c11c <optiga_common_set_uint16>
                                     p_random_params->random_data_length);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800dbc6:	89fb      	ldrh	r3, [r7, #14]
 800dbc8:	3302      	adds	r3, #2
 800dbca:	81fb      	strh	r3, [r7, #14]

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	7e59      	ldrb	r1, [r3, #25]
 800dbd0:	89fb      	ldrh	r3, [r7, #14]
 800dbd2:	3b04      	subs	r3, #4
 800dbd4:	b29a      	uxth	r2, r3
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	330d      	adds	r3, #13
            /// Copy the random data length
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     p_random_params->random_data_length);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
 800dbdc:	208c      	movs	r0, #140	; 0x8c
 800dbde:	f7fe fccf 	bl	800c580 <optiga_cmd_prepare_apdu_header>
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	89fa      	ldrh	r2, [r7, #14]
 800dbe8:	809a      	strh	r2, [r3, #4]

            return_status = OPTIGA_LIB_SUCCESS;
 800dbea:	2300      	movs	r3, #0
 800dbec:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800dbee:	e020      	b.n	800dc32 <optiga_cmd_get_random_handler+0xaa>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for get random command...");
            // check if the random data retrieval app was successful
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	7b5b      	ldrb	r3, [r3, #13]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00b      	beq.n	800dc12 <optiga_cmd_get_random_handler+0x8a>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing get random response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	7e9b      	ldrb	r3, [r3, #26]
 800dbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	769a      	strb	r2, [r3, #26]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	7e9a      	ldrb	r2, [r3, #26]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	769a      	strb	r2, [r3, #26]
                break;
 800dc10:	e00f      	b.n	800dc32 <optiga_cmd_get_random_handler+0xaa>
            }
            
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_random_params->random_data,
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	6859      	ldr	r1, [r3, #4]
                          me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f103 0211 	add.w	r2, r3, #17
                          p_random_params->random_data_length);
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	881b      	ldrh	r3, [r3, #0]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                break;
            }
            
            //copy data from optiga comms buffer to user provided buffer
            pal_os_memcpy(p_random_params->random_data,
 800dc22:	4608      	mov	r0, r1
 800dc24:	4611      	mov	r1, r2
 800dc26:	461a      	mov	r2, r3
 800dc28:	f7fb fe96 	bl	8009958 <pal_os_memcpy>
                          me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                          p_random_params->random_data_length);

            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800dc30:	bf00      	nop
        default:
            break;
    }

    return (return_status);
 800dc32:	8afb      	ldrh	r3, [r7, #22]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3718      	adds	r7, #24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <optiga_cmd_get_random>:


optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08a      	sub	sp, #40	; 0x28
 800dc40:	af04      	add	r7, sp, #16
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	460b      	mov	r3, r1
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
 800dc4a:	2306      	movs	r3, #6
 800dc4c:	75fb      	strb	r3, [r7, #23]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    optiga_cmd_execute(me,
 800dc4e:	7afa      	ldrb	r2, [r7, #11]
 800dc50:	7dfb      	ldrb	r3, [r7, #23]
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	9301      	str	r3, [sp, #4]
 800dc58:	238c      	movs	r3, #140	; 0x8c
 800dc5a:	9302      	str	r3, [sp, #8]
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	4611      	mov	r1, r2
 800dc60:	4a04      	ldr	r2, [pc, #16]	; (800dc74 <optiga_cmd_get_random+0x38>)
 800dc62:	2302      	movs	r3, #2
 800dc64:	f7fe fcea 	bl	800c63c <optiga_cmd_execute>
                       cmd_handler_state,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_RANDOM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	0800db89 	.word	0x0800db89

0800dc78 <optiga_cmd_calc_sign_handler>:
#ifdef OPTIGA_CRYPT_ECDSA_SIGN_ENABLED
/*
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t *)me->p_input;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	613b      	str	r3, [r7, #16]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800dc86:	f240 2302 	movw	r3, #514	; 0x202
 800dc8a:	82fb      	strh	r3, [r7, #22]
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800dc8c:	2304      	movs	r3, #4
 800dc8e:	81bb      	strh	r3, [r7, #12]

    switch ((uint8_t)me->cmd_next_execution_state)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	7d9b      	ldrb	r3, [r3, #22]
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d002      	beq.n	800dc9e <optiga_cmd_calc_sign_handler+0x26>
 800dc98:	2b03      	cmp	r3, #3
 800dc9a:	d069      	beq.n	800dd70 <optiga_cmd_calc_sign_handler+0xf8>
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
            }
        }
        break;
        default:
            break;
 800dc9c:	e0a8      	b.n	800ddf0 <optiga_cmd_calc_sign_handler+0x178>
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            // APDU headed length + TLV of Digest + TLV of signature key OID
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate sign command..");
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_ecdsa_sign->digest_length +
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	7b9b      	ldrb	r3, [r3, #14]
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	330c      	adds	r3, #12
 800dca6:	81fb      	strh	r3, [r7, #14]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800dca8:	89fb      	ldrh	r3, [r7, #14]
 800dcaa:	f240 6215 	movw	r2, #1557	; 0x615
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d907      	bls.n	800dcc2 <optiga_cmd_calc_sign_handler+0x4a>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800dcb2:	f44f 7301 	mov.w	r3, #516	; 0x204
 800dcb6:	82fb      	strh	r3, [r7, #22]
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	801a      	strh	r2, [r3, #0]
                break;
 800dcc0:	e096      	b.n	800ddf0 <optiga_cmd_calc_sign_handler+0x178>
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_DIGEST_TAG,
                                          p_optiga_ecdsa_sign->digest_length,
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	7b9b      	ldrb	r3, [r3, #14]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_DIGEST_TAG,
 800dcc6:	b299      	uxth	r1, r3
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f103 020d 	add.w	r2, r3, #13
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                break;
            }
            // Tag and length for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_DIGEST_TAG,
 800dcd0:	f107 030c 	add.w	r3, r7, #12
 800dcd4:	2001      	movs	r0, #1
 800dcd6:	f7fe fc75 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	89bb      	ldrh	r3, [r7, #12]
 800dce0:	3308      	adds	r3, #8
 800dce2:	4413      	add	r3, r2
 800dce4:	1d59      	adds	r1, r3, #5
                          p_optiga_ecdsa_sign->p_digest,
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	681a      	ldr	r2, [r3, #0]
                          p_optiga_ecdsa_sign->digest_length);
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	7b9b      	ldrb	r3, [r3, #14]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_DIGEST_TAG,
                                          p_optiga_ecdsa_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //Digest data
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800dcee:	4608      	mov	r0, r1
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f7fb fe30 	bl	8009958 <pal_os_memcpy>
                          p_optiga_ecdsa_sign->p_digest,
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	7b9b      	ldrb	r3, [r3, #14]
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	89bb      	ldrh	r3, [r7, #12]
 800dd00:	4413      	add	r3, r2
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	81bb      	strh	r3, [r7, #12]

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_OID_TAG,
                                          OPTIGA_CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f103 020d 	add.w	r2, r3, #13
                          p_optiga_ecdsa_sign->digest_length);

            index_for_data += p_optiga_ecdsa_sign->digest_length;

            // Tag and length for OID of signature key
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_OID_TAG,
 800dd0e:	f107 030c 	add.w	r3, r7, #12
 800dd12:	2003      	movs	r0, #3
 800dd14:	2102      	movs	r1, #2
 800dd16:	f7fe fc55 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                          OPTIGA_CMD_SIGN_OID_LEN,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);
            //oid
            private_key_oid = me->session_oid;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	8a9b      	ldrh	r3, [r3, #20]
 800dd1e:	82bb      	strh	r3, [r7, #20]
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_ecdsa_sign->private_key_oid)
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	899b      	ldrh	r3, [r3, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <optiga_cmd_calc_sign_handler+0xb6>
            {
                private_key_oid = (uint16_t)p_optiga_ecdsa_sign->private_key_oid;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	899b      	ldrh	r3, [r3, #12]
 800dd2c:	82bb      	strh	r3, [r7, #20]
            }
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	89bb      	ldrh	r3, [r7, #12]
 800dd34:	3308      	adds	r3, #8
 800dd36:	4413      	add	r3, r2
 800dd38:	1d5a      	adds	r2, r3, #5
 800dd3a:	8abb      	ldrh	r3, [r7, #20]
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	4619      	mov	r1, r3
 800dd40:	f7fe f9ec 	bl	800c11c <optiga_common_set_uint16>
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800dd44:	89bb      	ldrh	r3, [r7, #12]
 800dd46:	3302      	adds	r3, #2
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	81bb      	strh	r3, [r7, #12]

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7e59      	ldrb	r1, [r3, #25]
 800dd50:	89bb      	ldrh	r3, [r7, #12]
 800dd52:	3b04      	subs	r3, #4
 800dd54:	b29a      	uxth	r2, r3
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	330d      	adds	r3, #13
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
                                     private_key_oid);
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

            // prepare apdu
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
 800dd5c:	20b1      	movs	r0, #177	; 0xb1
 800dd5e:	f7fe fc0f 	bl	800c580 <optiga_cmd_prepare_apdu_header>
                                           me->cmd_param,
                                           (index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	89ba      	ldrh	r2, [r7, #12]
 800dd68:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800dd6e:	e03f      	b.n	800ddf0 <optiga_cmd_calc_sign_handler+0x178>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	7b5b      	ldrb	r3, [r3, #13]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d12a      	bne.n	800ddd0 <optiga_cmd_calc_sign_handler+0x158>
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	881b      	ldrh	r3, [r3, #0]
 800dd80:	461a      	mov	r2, r3
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	88db      	ldrh	r3, [r3, #6]
 800dd88:	3b04      	subs	r3, #4
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate sign command...");
            // check if the calculate signature command was successful
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
            {
                // if the received signature length is greater than the user provided signature buffer length
                if ((*(p_optiga_ecdsa_sign->p_signature_length)) <
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	da07      	bge.n	800dd9e <optiga_cmd_calc_sign_handler+0x126>
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                    *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	2200      	movs	r2, #0
 800dd94:	801a      	strh	r2, [r3, #0]
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800dd96:	f44f 7301 	mov.w	r3, #516	; 0x204
 800dd9a:	82fb      	strh	r3, [r7, #22]
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
            }
        }
        break;
 800dd9c:	e027      	b.n	800ddee <optiga_cmd_calc_sign_handler+0x176>
                    *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                }
                else
                {
                    *(p_optiga_ecdsa_sign->p_signature_length) = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	6812      	ldr	r2, [r2, #0]
 800dda6:	88d2      	ldrh	r2, [r2, #6]
 800dda8:	3a04      	subs	r2, #4
 800ddaa:	b292      	uxth	r2, r2
 800ddac:	801a      	strh	r2, [r3, #0]
                    //copy signed data from optiga comms buffer to user provided buffer

                    pal_os_memcpy(p_optiga_ecdsa_sign->p_signature,
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	6859      	ldr	r1, [r3, #4]
                                  me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f103 0211 	add.w	r2, r3, #17
                                  *(p_optiga_ecdsa_sign->p_signature_length));
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	881b      	ldrh	r3, [r3, #0]
                else
                {
                    *(p_optiga_ecdsa_sign->p_signature_length) = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
                    //copy signed data from optiga comms buffer to user provided buffer

                    pal_os_memcpy(p_optiga_ecdsa_sign->p_signature,
 800ddc0:	4608      	mov	r0, r1
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	f7fb fdc7 	bl	8009958 <pal_os_memcpy>
                                  me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
                                  *(p_optiga_ecdsa_sign->p_signature_length));
                    OPTIGA_CMD_LOG_MESSAGE("Response of calculate sign command is processed...");
                    return_status = OPTIGA_LIB_SUCCESS;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	82fb      	strh	r3, [r7, #22]
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
            }
        }
        break;
 800ddce:	e00e      	b.n	800ddee <optiga_cmd_calc_sign_handler+0x176>
            else
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate sign response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	7e9b      	ldrb	r3, [r3, #26]
 800ddd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	769a      	strb	r2, [r3, #26]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	7e9a      	ldrb	r2, [r3, #26]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	769a      	strb	r2, [r3, #26]
                *(p_optiga_ecdsa_sign->p_signature_length) = 0x00;
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	2200      	movs	r2, #0
 800ddec:	801a      	strh	r2, [r3, #0]
            }
        }
        break;
 800ddee:	bf00      	nop
        default:
            break;
    }

    return (return_status);
 800ddf0:	8afb      	ldrh	r3, [r7, #22]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3718      	adds	r7, #24
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop

0800ddfc <optiga_cmd_calc_sign>:


optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08a      	sub	sp, #40	; 0x28
 800de00:	af04      	add	r7, sp, #16
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	460b      	mov	r3, r1
 800de06:	607a      	str	r2, [r7, #4]
 800de08:	72fb      	strb	r3, [r7, #11]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
 800de0a:	f240 2303 	movw	r3, #515	; 0x203
 800de0e:	82fb      	strh	r3, [r7, #22]
    optiga_calc_sign_params_t * p_optiga_ecdsa_sign = (optiga_calc_sign_params_t*)params;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	613b      	str	r3, [r7, #16]
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
 800de14:	2306      	movs	r3, #6
 800de16:	757b      	strb	r3, [r7, #21]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_ecdsa_sign->private_key_oid)
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	899b      	ldrh	r3, [r3, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d106      	bne.n	800de2e <optiga_cmd_calc_sign+0x32>
        {
            if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	8a9b      	ldrh	r3, [r3, #20]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d100      	bne.n	800de2a <optiga_cmd_calc_sign+0x2e>
            {
                break;
 800de28:	e010      	b.n	800de4c <optiga_cmd_calc_sign+0x50>
            }
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
 800de2a:	2305      	movs	r3, #5
 800de2c:	757b      	strb	r3, [r7, #21]
        }


        optiga_cmd_execute(me,
 800de2e:	7afa      	ldrb	r2, [r7, #11]
 800de30:	7d7b      	ldrb	r3, [r7, #21]
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	23b1      	movs	r3, #177	; 0xb1
 800de3a:	9302      	str	r3, [sp, #8]
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	4611      	mov	r1, r2
 800de40:	4a05      	ldr	r2, [pc, #20]	; (800de58 <optiga_cmd_calc_sign+0x5c>)
 800de42:	2302      	movs	r3, #2
 800de44:	f7fe fbfa 	bl	800c63c <optiga_cmd_execute>
                           cmd_handler_state,
                           params,
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
 800de48:	2300      	movs	r3, #0
 800de4a:	82fb      	strh	r3, [r7, #22]
    } while (FALSE);
    return (return_status);
 800de4c:	8afb      	ldrh	r3, [r7, #22]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3718      	adds	r7, #24
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	0800dc79 	.word	0x0800dc79

0800de5c <optiga_cmd_verify_sign_handler>:
#ifdef OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800de6a:	2304      	movs	r3, #4
 800de6c:	81bb      	strh	r3, [r7, #12]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800de6e:	f240 2302 	movw	r3, #514	; 0x202
 800de72:	82fb      	strh	r3, [r7, #22]

    switch ((uint8_t)me->cmd_next_execution_state)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	7d9b      	ldrb	r3, [r3, #22]
 800de78:	2b02      	cmp	r3, #2
 800de7a:	d003      	beq.n	800de84 <optiga_cmd_verify_sign_handler+0x28>
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	f000 80ce 	beq.w	800e01e <optiga_cmd_verify_sign_handler+0x1c2>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 800de82:	e0e0      	b.n	800e046 <optiga_cmd_verify_sign_handler+0x1ea>
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	791b      	ldrb	r3, [r3, #4]
 800de88:	b29a      	uxth	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	899b      	ldrh	r3, [r3, #12]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800de8e:	4413      	add	r3, r2
 800de90:	b29a      	uxth	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	7b9b      	ldrb	r3, [r3, #14]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800de96:	2b00      	cmp	r3, #0
 800de98:	d005      	beq.n	800dea6 <optiga_cmd_verify_sign_handler+0x4a>
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	889b      	ldrh	r3, [r3, #4]
        {
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
            // APDU header length + TLV of digest + TLV of signature +
            // If public key from OID (TLV of public key OID)
            // If public key from host (TLV of algo ID + TLV of public key)
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800dea0:	3309      	adds	r3, #9
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	e000      	b.n	800dea8 <optiga_cmd_verify_sign_handler+0x4c>
 800dea6:	2305      	movs	r3, #5
 800dea8:	4413      	add	r3, r2
 800deaa:	b29b      	uxth	r3, r3
 800deac:	330a      	adds	r3, #10
 800deae:	81fb      	strh	r3, [r7, #14]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
                                     (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES):
                                    (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG + OPTIGA_CMD_TAG_LENGTH_SIZE +
                                     p_optiga_verify_sign->public_key->length));
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800deb0:	89fb      	ldrh	r3, [r7, #14]
 800deb2:	f240 6215 	movw	r2, #1557	; 0x615
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d903      	bls.n	800dec2 <optiga_cmd_verify_sign_handler+0x66>
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800deba:	f44f 7301 	mov.w	r3, #516	; 0x204
 800debe:	82fb      	strh	r3, [r7, #22]
                break;
 800dec0:	e0c1      	b.n	800e046 <optiga_cmd_verify_sign_handler+0x1ea>
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	791b      	ldrb	r3, [r3, #4]
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 800dec6:	b299      	uxth	r1, r3
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f103 020d 	add.w	r2, r3, #13
            {
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                break;
            }
            //TLV formation for digest
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 800ded0:	f107 030c 	add.w	r3, r7, #12
 800ded4:	2001      	movs	r0, #1
 800ded6:	f7fe fb75 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	89bb      	ldrh	r3, [r7, #12]
 800dee0:	3308      	adds	r3, #8
 800dee2:	4413      	add	r3, r2
 800dee4:	1d59      	adds	r1, r3, #5
                          p_optiga_verify_sign->p_digest,
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	681a      	ldr	r2, [r3, #0]
                          p_optiga_verify_sign->digest_length);
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	791b      	ldrb	r3, [r3, #4]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
                                          p_optiga_verify_sign->digest_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800deee:	4608      	mov	r0, r1
 800def0:	4611      	mov	r1, r2
 800def2:	461a      	mov	r2, r3
 800def4:	f7fb fd30 	bl	8009958 <pal_os_memcpy>
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	791b      	ldrb	r3, [r3, #4]
 800defc:	b29a      	uxth	r2, r3
 800defe:	89bb      	ldrh	r3, [r7, #12]
 800df00:	4413      	add	r3, r2
 800df02:	b29b      	uxth	r3, r3
 800df04:	81bb      	strh	r3, [r7, #12]

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	8999      	ldrh	r1, [r3, #12]
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f103 020d 	add.w	r2, r3, #13
                          p_optiga_verify_sign->p_digest,
                          p_optiga_verify_sign->digest_length);
            index_for_data += p_optiga_verify_sign->digest_length;

            //TLV formation for signature
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 800df12:	f107 030c 	add.w	r3, r7, #12
 800df16:	2002      	movs	r0, #2
 800df18:	f7fe fb54 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	89bb      	ldrh	r3, [r7, #12]
 800df22:	3308      	adds	r3, #8
 800df24:	4413      	add	r3, r2
 800df26:	1d59      	adds	r1, r3, #5
                          p_optiga_verify_sign->p_signature,
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	689a      	ldr	r2, [r3, #8]
                          p_optiga_verify_sign->signature_length);
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	899b      	ldrh	r3, [r3, #12]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
                                          p_optiga_verify_sign->signature_length,
                                          me->p_optiga->optiga_comms_buffer,
                                          &index_for_data);

            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800df30:	4608      	mov	r0, r1
 800df32:	4611      	mov	r1, r2
 800df34:	461a      	mov	r2, r3
 800df36:	f7fb fd0f 	bl	8009958 <pal_os_memcpy>
                          p_optiga_verify_sign->p_signature,
                          p_optiga_verify_sign->signature_length);
            index_for_data += p_optiga_verify_sign->signature_length;
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	899a      	ldrh	r2, [r3, #12]
 800df3e:	89bb      	ldrh	r3, [r7, #12]
 800df40:	4413      	add	r3, r2
 800df42:	b29b      	uxth	r3, r3
 800df44:	81bb      	strh	r3, [r7, #12]

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	7b9b      	ldrb	r3, [r3, #14]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d11a      	bne.n	800df84 <optiga_cmd_verify_sign_handler+0x128>
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f103 020d 	add.w	r2, r3, #13
            index_for_data += p_optiga_verify_sign->signature_length;

            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
            {
                //TLV formation for public key certificate OID
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 800df56:	f107 030c 	add.w	r3, r7, #12
 800df5a:	2004      	movs	r0, #4
 800df5c:	2102      	movs	r1, #2
 800df5e:	f7fe fb31 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	89bb      	ldrh	r3, [r7, #12]
 800df68:	3308      	adds	r3, #8
 800df6a:	4413      	add	r3, r2
 800df6c:	1d5a      	adds	r2, r3, #5
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	8a9b      	ldrh	r3, [r3, #20]
 800df72:	4610      	mov	r0, r2
 800df74:	4619      	mov	r1, r3
 800df76:	f7fe f8d1 	bl	800c11c <optiga_common_set_uint16>
                                         p_optiga_verify_sign->certificate_oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800df7a:	89bb      	ldrh	r3, [r7, #12]
 800df7c:	3302      	adds	r3, #2
 800df7e:	b29b      	uxth	r3, r3
 800df80:	81bb      	strh	r3, [r7, #12]
 800df82:	e03a      	b.n	800dffa <optiga_cmd_verify_sign_handler+0x19e>
            else
            {
                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f103 020d 	add.w	r2, r3, #13
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            else
            {
                //TLV formation for public key from host
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 800df8c:	f107 030c 	add.w	r3, r7, #12
 800df90:	2005      	movs	r0, #5
 800df92:	2101      	movs	r1, #1
 800df94:	f7fe fb16 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_VERIFY_ALGO_ID_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	89bb      	ldrh	r3, [r7, #12]
 800df9e:	1c59      	adds	r1, r3, #1
 800dfa0:	b289      	uxth	r1, r1
 800dfa2:	81b9      	strh	r1, [r7, #12]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	691b      	ldr	r3, [r3, #16]
 800dfaa:	7999      	ldrb	r1, [r3, #6]
 800dfac:	1813      	adds	r3, r2, r0
 800dfae:	460a      	mov	r2, r1
 800dfb0:	735a      	strb	r2, [r3, #13]

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	691b      	ldr	r3, [r3, #16]
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 800dfb6:	8899      	ldrh	r1, [r3, #4]
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f103 020d 	add.w	r2, r3, #13
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;

                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 800dfc0:	f107 030c 	add.w	r3, r7, #12
 800dfc4:	2006      	movs	r0, #6
 800dfc6:	f7fe fafd 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	89bb      	ldrh	r3, [r7, #12]
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	4413      	add	r3, r2
 800dfd4:	1d59      	adds	r1, r3, #5
                              p_optiga_verify_sign->public_key->public_key,
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	681a      	ldr	r2, [r3, #0]
                              p_optiga_verify_sign->public_key->length);
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	889b      	ldrh	r3, [r3, #4]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
                                              p_optiga_verify_sign->public_key->length,
                                              me->p_optiga->optiga_comms_buffer,
                                              &index_for_data);

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800dfe2:	4608      	mov	r0, r1
 800dfe4:	4611      	mov	r1, r2
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	f7fb fcb6 	bl	8009958 <pal_os_memcpy>
                              p_optiga_verify_sign->public_key->public_key,
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	691b      	ldr	r3, [r3, #16]
 800dff0:	889a      	ldrh	r2, [r3, #4]
 800dff2:	89bb      	ldrh	r3, [r7, #12]
 800dff4:	4413      	add	r3, r2
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	81bb      	strh	r3, [r7, #12]
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	7e59      	ldrb	r1, [r3, #25]
 800dffe:	89bb      	ldrh	r3, [r7, #12]
 800e000:	3b04      	subs	r3, #4
 800e002:	b29a      	uxth	r2, r3
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	330d      	adds	r3, #13
                              p_optiga_verify_sign->public_key->length);
                index_for_data += p_optiga_verify_sign->public_key->length;
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 800e00a:	20b2      	movs	r0, #178	; 0xb2
 800e00c:	f7fe fab8 	bl	800c580 <optiga_cmd_prepare_apdu_header>
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	89ba      	ldrh	r2, [r7, #12]
 800e016:	809a      	strh	r2, [r3, #4]

            return_status = OPTIGA_LIB_SUCCESS;
 800e018:	2300      	movs	r3, #0
 800e01a:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800e01c:	e013      	b.n	800e046 <optiga_cmd_verify_sign_handler+0x1ea>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	7b5b      	ldrb	r3, [r3, #13]
 800e024:	2bff      	cmp	r3, #255	; 0xff
 800e026:	d10b      	bne.n	800e040 <optiga_cmd_verify_sign_handler+0x1e4>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	7e9b      	ldrb	r3, [r3, #26]
 800e02c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e030:	b2da      	uxtb	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	769a      	strb	r2, [r3, #26]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	7e9a      	ldrb	r2, [r3, #26]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	769a      	strb	r2, [r3, #26]
                break;
 800e03e:	e002      	b.n	800e046 <optiga_cmd_verify_sign_handler+0x1ea>
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800e040:	2300      	movs	r3, #0
 800e042:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800e044:	bf00      	nop
        default:
            break;
    }

    return (return_status);
 800e046:	8afb      	ldrh	r3, [r7, #22]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <optiga_cmd_verify_sign>:

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af04      	add	r7, sp, #16
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	460b      	mov	r3, r1
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800e05e:	7afa      	ldrb	r2, [r7, #11]
 800e060:	2306      	movs	r3, #6
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	23b2      	movs	r3, #178	; 0xb2
 800e06a:	9302      	str	r3, [sp, #8]
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	4611      	mov	r1, r2
 800e070:	4a04      	ldr	r2, [pc, #16]	; (800e084 <optiga_cmd_verify_sign+0x34>)
 800e072:	2302      	movs	r3, #2
 800e074:	f7fe fae2 	bl	800c63c <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	0800de5d 	.word	0x0800de5d

0800e088 <optiga_cmd_calc_hash_set_current_hash_sequence>:
#endif //OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED

#ifdef OPTIGA_CRYPT_HASH_ENABLED

_STATIC_H void optiga_cmd_calc_hash_set_current_hash_sequence(const optiga_cmd_t * me)
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	60fb      	str	r3, [r7, #12]
    uint32_t apparent_comms_buffer_size = (OPTIGA_MAX_COMMS_BUFFER_SIZE - (OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_HASH_HEADER_SIZE \
 800e096:	f44f 63c1 	mov.w	r3, #1544	; 0x608
 800e09a:	60bb      	str	r3, [r7, #8]
                                          + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER));

    p_optiga_calc_hash->current_hash_sequence = p_optiga_calc_hash->hash_sequence;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	7b1a      	ldrb	r2, [r3, #12]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	735a      	strb	r2, [r3, #13]

    // Check for hash sequence as S&F
    if(OPTIGA_CRYPT_HASH_START_FINAL == p_optiga_calc_hash->hash_sequence)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	7b1b      	ldrb	r3, [r3, #12]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d11d      	bne.n	800e0e8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x60>
    {
        // Calculate the apparent comms buffer size and compare with hash data length
        if(apparent_comms_buffer_size < p_optiga_calc_hash->p_hash_data->length)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	685a      	ldr	r2, [r3, #4]
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d917      	bls.n	800e0e8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x60>
        {
            // sent data is 0 hence change the hash sequence to S
            if( 0 == p_optiga_calc_hash->data_sent)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d103      	bne.n	800e0c8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x40>
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_START;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	735a      	strb	r2, [r3, #13]
 800e0c6:	e00f      	b.n	800e0e8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x60>
            }
            // sent data is greater than 0 and next fragment is greater than apparent_comms_buffer_size hence change the hash sequence to C
            else if((p_optiga_calc_hash->data_sent + apparent_comms_buffer_size) < p_optiga_calc_hash->p_hash_data->length)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	691a      	ldr	r2, [r3, #16]
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	441a      	add	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d203      	bcs.n	800e0e2 <optiga_cmd_calc_hash_set_current_hash_sequence+0x5a>
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2202      	movs	r2, #2
 800e0de:	735a      	strb	r2, [r3, #13]
 800e0e0:	e002      	b.n	800e0e8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x60>
            }
            // sent data is greater than 0 and next fragment is less than apparent_comms_buffer_size hence change the hash sequence to F
            else
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2203      	movs	r2, #3
 800e0e6:	735a      	strb	r2, [r3, #13]
            }
        }
    }
}
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop

0800e0f4 <optiga_cmd_calc_hash_handler>:

/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
 800e0f4:	b590      	push	{r4, r7, lr}
 800e0f6:	b087      	sub	sp, #28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800e102:	2304      	movs	r3, #4
 800e104:	817b      	strh	r3, [r7, #10]
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800e106:	f240 2302 	movw	r3, #514	; 0x202
 800e10a:	82fb      	strh	r3, [r7, #22]


    switch ((uint8_t)me->cmd_next_execution_state)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	7d9b      	ldrb	r3, [r3, #22]
 800e110:	2b02      	cmp	r3, #2
 800e112:	d003      	beq.n	800e11c <optiga_cmd_calc_hash_handler+0x28>
 800e114:	2b03      	cmp	r3, #3
 800e116:	f000 8115 	beq.w	800e344 <optiga_cmd_calc_hash_handler+0x250>
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 800e11a:	e183      	b.n	800e424 <optiga_cmd_calc_hash_handler+0x330>

    switch ((uint8_t)me->cmd_next_execution_state)
    {
        case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
        {
            optiga_cmd_calc_hash_set_current_hash_sequence(me);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff ffb3 	bl	800e088 <optiga_cmd_calc_hash_set_current_hash_sequence>
            OPTIGA_CMD_LOG_MESSAGE("Sending calculate hash command..");
            //Hash Input
            // tag setting
            me->chaining_ongoing = FALSE;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	761a      	strb	r2, [r3, #24]

            // add data if available
            if (NULL != p_optiga_calc_hash->p_hash_data)
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d055      	beq.n	800e1dc <optiga_cmd_calc_hash_handler+0xe8>
            {
                 //lint --e{734} suppress "length_to_hash parameter is of uint16 type, while the arguments used for
                 //calculating are of uint32 type. The final value calculated never crosses uint16 max value and for
                 // future use case, explicit type-casting is not done "
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	685a      	ldr	r2, [r3, #4]
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	1ad2      	subs	r2, r2, r3
 800e13c:	897b      	ldrh	r3, [r7, #10]
 800e13e:	425b      	negs	r3, r3
 800e140:	4619      	mov	r1, r3
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	69db      	ldr	r3, [r3, #28]
 800e146:	1acb      	subs	r3, r1, r3
 800e148:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 800e14c:	4293      	cmp	r3, r2
 800e14e:	bf28      	it	cs
 800e150:	4613      	movcs	r3, r2
 800e152:	60fb      	str	r3, [r7, #12]
                                       p_optiga_calc_hash->apparent_context_size),(p_optiga_calc_hash->p_hash_data->length - p_optiga_calc_hash->data_sent));

                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	897b      	ldrh	r3, [r7, #10]
 800e15a:	1c59      	adds	r1, r3, #1
 800e15c:	b289      	uxth	r1, r1
 800e15e:	8179      	strh	r1, [r7, #10]
 800e160:	4618      	mov	r0, r3
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	7b59      	ldrb	r1, [r3, #13]
 800e166:	1813      	adds	r3, r2, r0
 800e168:	460a      	mov	r2, r1
 800e16a:	735a      	strb	r2, [r3, #13]

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	897b      	ldrh	r3, [r7, #10]
 800e172:	3308      	adds	r3, #8
 800e174:	4413      	add	r3, r2
 800e176:	1d5a      	adds	r2, r3, #5
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	4610      	mov	r0, r2
 800e17e:	4619      	mov	r1, r3
 800e180:	f7fd ffcc 	bl	800c11c <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800e184:	897b      	ldrh	r3, [r7, #10]
 800e186:	3302      	adds	r3, #2
 800e188:	b29b      	uxth	r3, r3
 800e18a:	817b      	strh	r3, [r7, #10]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	897b      	ldrh	r3, [r7, #10]
 800e192:	3308      	adds	r3, #8
 800e194:	4413      	add	r3, r2
 800e196:	1d59      	adds	r1, r3, #5
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	691b      	ldr	r3, [r3, #16]

                // add length
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800e1a2:	4413      	add	r3, r2
 800e1a4:	4608      	mov	r0, r1
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	f7fb fbd5 	bl	8009958 <pal_os_memcpy>
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
                              length_to_hash);
                index_for_data += length_to_hash;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	897b      	ldrh	r3, [r7, #10]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	817b      	strh	r3, [r7, #10]

                p_optiga_calc_hash->data_sent += length_to_hash;
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	691a      	ldr	r2, [r3, #16]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	441a      	add	r2, r3
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	611a      	str	r2, [r3, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	691a      	ldr	r2, [r3, #16]
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d053      	beq.n	800e27c <optiga_cmd_calc_hash_handler+0x188>
                {
                    me->chaining_ongoing = TRUE;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	761a      	strb	r2, [r3, #24]
 800e1da:	e04f      	b.n	800e27c <optiga_cmd_calc_hash_handler+0x188>
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d03f      	beq.n	800e264 <optiga_cmd_calc_hash_handler+0x170>
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	7b59      	ldrb	r1, [r3, #13]
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f103 020d 	add.w	r2, r3, #13
                }
            }
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
            {
                //OID data
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
 800e1f0:	f107 030a 	add.w	r3, r7, #10
 800e1f4:	4608      	mov	r0, r1
 800e1f6:	2106      	movs	r1, #6
 800e1f8:	f7fe f9e4 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	897b      	ldrh	r3, [r7, #10]
 800e202:	3308      	adds	r3, #8
 800e204:	4413      	add	r3, r2
 800e206:	1d5a      	adds	r2, r3, #5
                                          p_optiga_calc_hash->p_hash_oid->oid);
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	681b      	ldr	r3, [r3, #0]
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
                                              OPTIGA_CMD_OID_DATA_LENGTH,
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800e20c:	881b      	ldrh	r3, [r3, #0]
 800e20e:	4610      	mov	r0, r2
 800e210:	4619      	mov	r1, r3
 800e212:	f7fd ff83 	bl	800c11c <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800e216:	897b      	ldrh	r3, [r7, #10]
 800e218:	3302      	adds	r3, #2
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	817b      	strh	r3, [r7, #10]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	897b      	ldrh	r3, [r7, #10]
 800e224:	3308      	adds	r3, #8
 800e226:	4413      	add	r3, r2
 800e228:	1d5a      	adds	r2, r3, #5
                                          p_optiga_calc_hash->p_hash_oid->offset);
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	681b      	ldr	r3, [r3, #0]
                                              (uint16_t*)&index_for_data);

                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800e22e:	885b      	ldrh	r3, [r3, #2]
 800e230:	4610      	mov	r0, r2
 800e232:	4619      	mov	r1, r3
 800e234:	f7fd ff72 	bl	800c11c <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800e238:	897b      	ldrh	r3, [r7, #10]
 800e23a:	3302      	adds	r3, #2
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	817b      	strh	r3, [r7, #10]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	897b      	ldrh	r3, [r7, #10]
 800e246:	3308      	adds	r3, #8
 800e248:	4413      	add	r3, r2
 800e24a:	1d5a      	adds	r2, r3, #5
                                          p_optiga_calc_hash->p_hash_oid->length);
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	681b      	ldr	r3, [r3, #0]
                                          p_optiga_calc_hash->p_hash_oid->oid);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          p_optiga_calc_hash->p_hash_oid->offset);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800e250:	889b      	ldrh	r3, [r3, #4]
 800e252:	4610      	mov	r0, r2
 800e254:	4619      	mov	r1, r3
 800e256:	f7fd ff61 	bl	800c11c <optiga_common_set_uint16>
                                          p_optiga_calc_hash->p_hash_oid->length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800e25a:	897b      	ldrh	r3, [r7, #10]
 800e25c:	3302      	adds	r3, #2
 800e25e:	b29b      	uxth	r3, r3
 800e260:	817b      	strh	r3, [r7, #10]
 800e262:	e00b      	b.n	800e27c <optiga_cmd_calc_hash_handler+0x188>
            }
            else
            {
                // Tag header in case of sequence as START
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	7b59      	ldrb	r1, [r3, #13]
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f103 020d 	add.w	r2, r3, #13
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
            }
            else
            {
                // Tag header in case of sequence as START
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
 800e270:	f107 030a 	add.w	r3, r7, #10
 800e274:	4608      	mov	r0, r1
 800e276:	2100      	movs	r1, #0
 800e278:	f7fe f9a4 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
                                               (uint16_t*)&index_for_data);
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d03b      	beq.n	800e2fc <optiga_cmd_calc_hash_handler+0x208>
                (0 != p_optiga_calc_hash->apparent_context_size))
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	69db      	ldr	r3, [r3, #28]
                                               OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                               me->p_optiga->optiga_comms_buffer,
                                               (uint16_t*)&index_for_data);
            }
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d037      	beq.n	800e2fc <optiga_cmd_calc_hash_handler+0x208>
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	897b      	ldrh	r3, [r7, #10]
 800e292:	1c59      	adds	r1, r3, #1
 800e294:	b289      	uxth	r1, r1
 800e296:	8179      	strh	r1, [r7, #10]
 800e298:	4413      	add	r3, r2
 800e29a:	2206      	movs	r2, #6
 800e29c:	735a      	strb	r2, [r3, #13]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	897b      	ldrh	r3, [r7, #10]
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	4413      	add	r3, r2
 800e2a8:	1d5a      	adds	r2, r3, #5
                                          (uint16_t )p_optiga_calc_hash->p_hash_context->context_buffer_length);
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	685b      	ldr	r3, [r3, #4]
            //Hash Context
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
                (0 != p_optiga_calc_hash->apparent_context_size))
            {
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	f7fd ff31 	bl	800c11c <optiga_common_set_uint16>
                                          (uint16_t )p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800e2ba:	897b      	ldrh	r3, [r7, #10]
 800e2bc:	3302      	adds	r3, #2
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	817b      	strh	r3, [r7, #10]

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	897b      	ldrh	r3, [r7, #10]
 800e2c8:	3308      	adds	r3, #8
 800e2ca:	4413      	add	r3, r2
 800e2cc:	1d59      	adds	r1, r3, #5
                              p_optiga_calc_hash->p_hash_context->context_buffer,
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	681a      	ldr	r2, [r3, #0]
                              (uint16_t)p_optiga_calc_hash->p_hash_context->context_buffer_length);
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	b29b      	uxth	r3, r3
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
                                          (uint16_t )p_optiga_calc_hash->p_hash_context->context_buffer_length);
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;

                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800e2dc:	4608      	mov	r0, r1
 800e2de:	4611      	mov	r1, r2
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f7fb fb39 	bl	8009958 <pal_os_memcpy>
                              p_optiga_calc_hash->p_hash_context->context_buffer,
                              (uint16_t)p_optiga_calc_hash->p_hash_context->context_buffer_length);

                index_for_data += (uint16_t)p_optiga_calc_hash->p_hash_context->context_buffer_length;
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	897b      	ldrh	r3, [r7, #10]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	817b      	strh	r3, [r7, #10]
                p_optiga_calc_hash->apparent_context_size = 0;
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	61da      	str	r2, [r3, #28]
            }

            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	7e1b      	ldrb	r3, [r3, #24]
 800e300:	2b01      	cmp	r3, #1
 800e302:	d10d      	bne.n	800e320 <optiga_cmd_calc_hash_handler+0x22c>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7e1b      	ldrb	r3, [r3, #24]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d109      	bne.n	800e320 <optiga_cmd_calc_hash_handler+0x22c>
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
                                              OPTIGA_CMD_ZERO_LENGTH_OR_VALUE,
                                              me->p_optiga->optiga_comms_buffer,
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f103 020d 	add.w	r2, r3, #13
            }

            //Export Option
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
            {
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
 800e314:	f107 030a 	add.w	r3, r7, #10
 800e318:	2007      	movs	r0, #7
 800e31a:	2100      	movs	r1, #0
 800e31c:	f7fe f952 	bl	800c5c4 <optiga_cmd_prepare_tag_header>
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7e59      	ldrb	r1, [r3, #25]
 800e324:	897b      	ldrh	r3, [r7, #10]
 800e326:	3b04      	subs	r3, #4
 800e328:	b29a      	uxth	r2, r3
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	330d      	adds	r3, #13
                                              me->p_optiga->optiga_comms_buffer,
                                              (uint16_t*)&index_for_data);
            }

            //form apdu header
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 800e330:	20b0      	movs	r0, #176	; 0xb0
 800e332:	f7fe f925 	bl	800c580 <optiga_cmd_prepare_apdu_header>
                                           me->cmd_param,
                                           (uint16_t)(index_for_data - OPTIGA_CMD_APDU_INDATA_OFFSET),
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);

            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	897a      	ldrh	r2, [r7, #10]
 800e33c:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 800e33e:	2300      	movs	r3, #0
 800e340:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800e342:	e06f      	b.n	800e424 <optiga_cmd_calc_hash_handler+0x330>
        case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
        {
            OPTIGA_CMD_LOG_MESSAGE("Processing response for calculate hash command...");
            // check for response status code
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	7b5b      	ldrb	r3, [r3, #13]
 800e34a:	2bff      	cmp	r3, #255	; 0xff
 800e34c:	d10b      	bne.n	800e366 <optiga_cmd_calc_hash_handler+0x272>
            {
                OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                //lint --e{835} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                //lint --e{845} suppress "SET_DEV_ERROR_NOTIFICATION is generically written for any unsigned interger value"
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	7e9b      	ldrb	r3, [r3, #26]
 800e352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e356:	b2da      	uxtb	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	769a      	strb	r2, [r3, #26]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	7e9a      	ldrb	r2, [r3, #26]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	769a      	strb	r2, [r3, #26]
                break;
 800e364:	e05e      	b.n	800e424 <optiga_cmd_calc_hash_handler+0x330>
            }
            // Copy the digest to buffer, if chaining is false and digest out buffer is not NULL
            if((FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_out_digest))
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	7e1b      	ldrb	r3, [r3, #24]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d120      	bne.n	800e3b0 <optiga_cmd_calc_hash_handler+0x2bc>
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	695b      	ldr	r3, [r3, #20]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d01c      	beq.n	800e3b0 <optiga_cmd_calc_hash_handler+0x2bc>
            {
                // If the out data tag is not the digest out then return failure
                if (OPTIGA_CRYPT_HASH_START_FINAL != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	7c5b      	ldrb	r3, [r3, #17]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d000      	beq.n	800e382 <optiga_cmd_calc_hash_handler+0x28e>
                {
                   break;
 800e380:	e050      	b.n	800e424 <optiga_cmd_calc_hash_handler+0x330>
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f103 0212 	add.w	r2, r3, #18
 800e38a:	f107 0308 	add.w	r3, r7, #8
 800e38e:	4610      	mov	r0, r2
 800e390:	4619      	mov	r1, r3
 800e392:	f7fd fef7 	bl	800c184 <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	695a      	ldr	r2, [r3, #20]
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	3314      	adds	r3, #20
                   break;
                }
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);

                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 800e3a0:	8939      	ldrh	r1, [r7, #8]
 800e3a2:	460c      	mov	r4, r1
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	4622      	mov	r2, r4
 800e3aa:	f7fb fad5 	bl	8009958 <pal_os_memcpy>
 800e3ae:	e036      	b.n	800e41e <optiga_cmd_calc_hash_handler+0x32a>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
            }
            // Copy the intermediate hash context
            else if ((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_hash_context))
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	7e1b      	ldrb	r3, [r3, #24]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d132      	bne.n	800e41e <optiga_cmd_calc_hash_handler+0x32a>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	7e1b      	ldrb	r3, [r3, #24]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d12e      	bne.n	800e41e <optiga_cmd_calc_hash_handler+0x32a>
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d02a      	beq.n	800e41e <optiga_cmd_calc_hash_handler+0x32a>
            {
                // If the out data tag is not the intermediate tag then return failure
                if (OPTIGA_CRYPT_INTERMEDIATE != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	7c5b      	ldrb	r3, [r3, #17]
 800e3ce:	2b06      	cmp	r3, #6
 800e3d0:	d000      	beq.n	800e3d4 <optiga_cmd_calc_hash_handler+0x2e0>
                {
                    break;
 800e3d2:	e027      	b.n	800e424 <optiga_cmd_calc_hash_handler+0x330>
                }

                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f103 0212 	add.w	r2, r3, #18
 800e3dc:	f107 0308 	add.w	r3, r7, #8
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	f7fd fece 	bl	800c184 <optiga_common_get_uint16>
                                         OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &out_data_size);
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	893a      	ldrh	r2, [r7, #8]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d203      	bcs.n	800e3fc <optiga_cmd_calc_hash_handler+0x308>
                {
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800e3f4:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e3f8:	82fb      	strh	r3, [r7, #22]
                    break;
 800e3fa:	e013      	b.n	800e424 <optiga_cmd_calc_hash_handler+0x330>
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	681a      	ldr	r2, [r3, #0]
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	3314      	adds	r3, #20
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing calculate hash response...");
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
                    break;
                }

                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
 800e408:	8939      	ldrh	r1, [r7, #8]
 800e40a:	460c      	mov	r4, r1
 800e40c:	4610      	mov	r0, r2
 800e40e:	4619      	mov	r1, r3
 800e410:	4622      	mov	r2, r4
 800e412:	f7fb faa1 	bl	8009958 <pal_os_memcpy>
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
                              OPTIGA_CMD_NO_OF_BYTES_IN_TAG], out_data_size);
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	893a      	ldrh	r2, [r7, #8]
 800e41c:	605a      	str	r2, [r3, #4]
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
 800e41e:	2300      	movs	r3, #0
 800e420:	82fb      	strh	r3, [r7, #22]
        }
        break;
 800e422:	bf00      	nop
        default:
            break;
    }

    return (return_status);
 800e424:	8afb      	ldrh	r3, [r7, #22]
}
 800e426:	4618      	mov	r0, r3
 800e428:	371c      	adds	r7, #28
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd90      	pop	{r4, r7, pc}
 800e42e:	bf00      	nop

0800e430 <optiga_cmd_calc_hash>:

optiga_lib_status_t optiga_cmd_calc_hash(optiga_cmd_t * me,
                                         uint8_t cmd_param,
                                         optiga_calc_hash_params_t * params)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08a      	sub	sp, #40	; 0x28
 800e434:	af04      	add	r7, sp, #16
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	460b      	mov	r3, r1
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	72fb      	strb	r3, [r7, #11]
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	617b      	str	r3, [r7, #20]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    p_optiga_calc_hash->data_sent = 0;
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	2200      	movs	r2, #0
 800e446:	611a      	str	r2, [r3, #16]

    optiga_cmd_execute(me,
 800e448:	7afa      	ldrb	r2, [r7, #11]
 800e44a:	2306      	movs	r3, #6
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	9301      	str	r3, [sp, #4]
 800e452:	23b0      	movs	r3, #176	; 0xb0
 800e454:	9302      	str	r3, [sp, #8]
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	4611      	mov	r1, r2
 800e45a:	4a04      	ldr	r2, [pc, #16]	; (800e46c <optiga_cmd_calc_hash+0x3c>)
 800e45c:	2302      	movs	r3, #2
 800e45e:	f7fe f8ed 	bl	800c63c <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_HASH, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3718      	adds	r7, #24
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	0800e0f5 	.word	0x0800e0f5

0800e470 <encode_der_integer>:
 * @return The number of bytes of the ASN.1 encoded stream on success, 0 on error
 * @note   The parameters to this function must not be NULL.
 */
static size_t encode_der_integer(const uint8_t* data, size_t data_len,
                                 uint8_t* out_buf, size_t out_buf_len)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08e      	sub	sp, #56	; 0x38
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	603b      	str	r3, [r7, #0]
    // all write access must be smaller or equal to this pointer
    const uint8_t* const out_end = out_buf + out_buf_len - 1;
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	3b01      	subs	r3, #1
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4413      	add	r3, r2
 800e486:	62fb      	str	r3, [r7, #44]	; 0x2c

    // fixed position fields
    uint8_t* const tag_field = &out_buf[ASN1_DER_TAG_OFFSET];
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t* const length_field = &out_buf[ASN1_DER_LEN_OFFSET];
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	3301      	adds	r3, #1
 800e490:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t* const integer_field_start = &out_buf[ASN1_DER_VAL_OFFSET];
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	3302      	adds	r3, #2
 800e496:	623b      	str	r3, [r7, #32]

    // write pointer
    uint8_t* integer_field_cur = integer_field_start;
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	637b      	str	r3, [r7, #52]	; 0x34

    // search for beginning of integer
    const uint8_t* cur_data = data;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	633b      	str	r3, [r7, #48]	; 0x30
    const uint8_t* const data_end = data + data_len;
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	61fb      	str	r3, [r7, #28]

    // check if something to encode, else next loop condition overflows
    if (data_len == 0) {
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d101      	bne.n	800e4b2 <encode_der_integer+0x42>
        return 0;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	e044      	b.n	800e53c <encode_der_integer+0xcc>
    }

    // don't check the last byte, it will always be a data byte
    for(; cur_data < (data_end - 1); cur_data++) {
 800e4b2:	e007      	b.n	800e4c4 <encode_der_integer+0x54>
        if (*cur_data != 0x00) {
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d000      	beq.n	800e4be <encode_der_integer+0x4e>
            break;
 800e4bc:	e007      	b.n	800e4ce <encode_der_integer+0x5e>
    if (data_len == 0) {
        return 0;
    }

    // don't check the last byte, it will always be a data byte
    for(; cur_data < (data_end - 1); cur_data++) {
 800e4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	633b      	str	r3, [r7, #48]	; 0x30
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	1e5a      	subs	r2, r3, #1
 800e4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d8f2      	bhi.n	800e4b4 <encode_der_integer+0x44>
            break;
        }
    }

    // check if stuffing byte needed
    if (*cur_data & DER_UINT_MASK) {
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	b25b      	sxtb	r3, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	da02      	bge.n	800e4e0 <encode_der_integer+0x70>
        integer_field_cur++;
 800e4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4dc:	3301      	adds	r3, #1
 800e4de:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // calculate number of bytes left in data
    const size_t write_length = data_end - cur_data;
 800e4e0:	69fa      	ldr	r2, [r7, #28]
 800e4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e4:	1ad3      	subs	r3, r2, r3
 800e4e6:	61bb      	str	r3, [r7, #24]
    // check if it fits in the output buffer
    if ((integer_field_cur + write_length - 1) > out_end) {
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4ee:	441a      	add	r2, r3
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d901      	bls.n	800e4fa <encode_der_integer+0x8a>
        // Prevented out-of-bounds write
        return 0;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e020      	b.n	800e53c <encode_der_integer+0xcc>
    }

    // ensure we can encode the length
    const size_t integer_len = (integer_field_cur + write_length) - integer_field_start;
 800e4fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	4413      	add	r3, r2
 800e500:	461a      	mov	r2, r3
 800e502:	6a3b      	ldr	r3, [r7, #32]
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	617b      	str	r3, [r7, #20]
    if (integer_len > DER_INTEGER_MAX_LEN) {
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b7f      	cmp	r3, #127	; 0x7f
 800e50c:	d901      	bls.n	800e512 <encode_der_integer+0xa2>
        // This implementation support single-byte LENGTH fields only
        return 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	e014      	b.n	800e53c <encode_der_integer+0xcc>
    }

    // commit writes
    memcpy(integer_field_cur, cur_data, write_length);
 800e512:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e514:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	f003 fff4 	bl	8012504 <memcpy>
    *tag_field = DER_TAG_INTEGER;
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51e:	2202      	movs	r2, #2
 800e520:	701a      	strb	r2, [r3, #0]
    *length_field = integer_len;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	b2da      	uxtb	r2, r3
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	701a      	strb	r2, [r3, #0]
    // check if we have a stuffing byte, and explicitly zero it
    if (integer_field_cur != integer_field_start) {
 800e52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e52c:	6a3b      	ldr	r3, [r7, #32]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d002      	beq.n	800e538 <encode_der_integer+0xc8>
        *integer_field_start = 0x00;
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	2200      	movs	r2, #0
 800e536:	701a      	strb	r2, [r3, #0]
    }

    return integer_len + ASN1_DER_VAL_OFFSET;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	3302      	adds	r3, #2
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3738      	adds	r7, #56	; 0x38
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <ecdsa_rs_to_asn1_integers>:

bool ecdsa_rs_to_asn1_integers(const uint8_t* r, const uint8_t* s, size_t rs_len,
                               uint8_t* asn_sig, size_t* asn_sig_len)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b088      	sub	sp, #32
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
 800e550:	603b      	str	r3, [r7, #0]
    if (r == NULL || s == NULL || asn_sig == NULL || asn_sig_len == NULL) {
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d008      	beq.n	800e56a <ecdsa_rs_to_asn1_integers+0x26>
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d005      	beq.n	800e56a <ecdsa_rs_to_asn1_integers+0x26>
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <ecdsa_rs_to_asn1_integers+0x26>
 800e564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e566:	2b00      	cmp	r3, #0
 800e568:	d101      	bne.n	800e56e <ecdsa_rs_to_asn1_integers+0x2a>
        // No NULL paramters allowed
        return false;
 800e56a:	2300      	movs	r3, #0
 800e56c:	e027      	b.n	800e5be <ecdsa_rs_to_asn1_integers+0x7a>
    }

    // encode R component
    const size_t out_len_r = encode_der_integer(r, rs_len, asn_sig, *asn_sig_len);
 800e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	6879      	ldr	r1, [r7, #4]
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	f7ff ff7a 	bl	800e470 <encode_der_integer>
 800e57c:	61f8      	str	r0, [r7, #28]
    if (out_len_r == 0) {
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d101      	bne.n	800e588 <ecdsa_rs_to_asn1_integers+0x44>
        // error while encoding R as DER INTEGER
        return false;
 800e584:	2300      	movs	r3, #0
 800e586:	e01a      	b.n	800e5be <ecdsa_rs_to_asn1_integers+0x7a>
    }

    uint8_t* const s_start = asn_sig + out_len_r;
 800e588:	683a      	ldr	r2, [r7, #0]
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	4413      	add	r3, r2
 800e58e:	61bb      	str	r3, [r7, #24]
    const size_t s_len = *asn_sig_len - out_len_r;
 800e590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	1ad3      	subs	r3, r2, r3
 800e598:	617b      	str	r3, [r7, #20]

    // encode S component
    const size_t out_len_s = encode_der_integer(s, rs_len, s_start, s_len);
 800e59a:	68b8      	ldr	r0, [r7, #8]
 800e59c:	6879      	ldr	r1, [r7, #4]
 800e59e:	69ba      	ldr	r2, [r7, #24]
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	f7ff ff65 	bl	800e470 <encode_der_integer>
 800e5a6:	6138      	str	r0, [r7, #16]
    if (out_len_s == 0) {
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d101      	bne.n	800e5b2 <ecdsa_rs_to_asn1_integers+0x6e>
        // error while encoding S as DER INTEGER
        return false;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	e005      	b.n	800e5be <ecdsa_rs_to_asn1_integers+0x7a>
    }

    *asn_sig_len = out_len_r + out_len_s;
 800e5b2:	69fa      	ldr	r2, [r7, #28]
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	441a      	add	r2, r3
 800e5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ba:	601a      	str	r2, [r3, #0]

    return true;
 800e5bc:	2301      	movs	r3, #1
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3720      	adds	r7, #32
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop

0800e5c8 <decode_asn1_uint>:
 * @return The number of bytes advanced in the ASN.1 stream on success, 0 on failure
 * @note   The parameters to this function must not be NULL.
 */
static size_t decode_asn1_uint(const uint8_t* asn1, size_t asn1_len,
                               uint8_t* out_int, size_t* out_int_len)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b08a      	sub	sp, #40	; 0x28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	603b      	str	r3, [r7, #0]
    if (asn1_len < (ASN1_DER_VAL_OFFSET + 1)) {
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	d801      	bhi.n	800e5e0 <decode_asn1_uint+0x18>
        // Not enough data to decode anything
        return 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	e06a      	b.n	800e6b6 <decode_asn1_uint+0xee>
    }

    // all read access must be before this pointer
    const uint8_t* const asn1_end = asn1 + asn1_len;
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	61fb      	str	r3, [r7, #28]

    // fixed position fields
    const uint8_t* const tag_field = &asn1[ASN1_DER_TAG_OFFSET];
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	61bb      	str	r3, [r7, #24]
    const uint8_t* const length_field = &asn1[ASN1_DER_LEN_OFFSET];
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	617b      	str	r3, [r7, #20]

    if (*tag_field != DER_TAG_INTEGER) {
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	d001      	beq.n	800e5fe <decode_asn1_uint+0x36>
        // Not an DER INTEGER
        return 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e05b      	b.n	800e6b6 <decode_asn1_uint+0xee>
    }

    if (*length_field == 0 || *length_field > DER_INTEGER_MAX_LEN) {
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d005      	beq.n	800e612 <decode_asn1_uint+0x4a>
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	b25b      	sxtb	r3, r3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	da01      	bge.n	800e616 <decode_asn1_uint+0x4e>
        // Invalid length value
        return  0;
 800e612:	2300      	movs	r3, #0
 800e614:	e04f      	b.n	800e6b6 <decode_asn1_uint+0xee>
    }

    uint8_t integer_length = *length_field;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t* integer_field_cur = &asn1[ASN1_DER_VAL_OFFSET];
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	3302      	adds	r3, #2
 800e622:	623b      	str	r3, [r7, #32]

    if ((integer_field_cur + integer_length - 1) > (asn1_end - 1)) {
 800e624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e628:	3b01      	subs	r3, #1
 800e62a:	6a3a      	ldr	r2, [r7, #32]
 800e62c:	441a      	add	r2, r3
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	3b01      	subs	r3, #1
 800e632:	429a      	cmp	r2, r3
 800e634:	d901      	bls.n	800e63a <decode_asn1_uint+0x72>
        // prevented out-of-bounds read
        return 0;
 800e636:	2300      	movs	r3, #0
 800e638:	e03d      	b.n	800e6b6 <decode_asn1_uint+0xee>
    }

    // one byte can never be a stuffing byte
    if (integer_length > 1) {
 800e63a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d911      	bls.n	800e666 <decode_asn1_uint+0x9e>
        if (*integer_field_cur == 0x00) {
 800e642:	6a3b      	ldr	r3, [r7, #32]
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d107      	bne.n	800e65a <decode_asn1_uint+0x92>
            // remove stuffing byte
            integer_length--;
 800e64a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e64e:	3b01      	subs	r3, #1
 800e650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            integer_field_cur++;
 800e654:	6a3b      	ldr	r3, [r7, #32]
 800e656:	3301      	adds	r3, #1
 800e658:	623b      	str	r3, [r7, #32]
        }

        if (*integer_field_cur == 0x00) {
 800e65a:	6a3b      	ldr	r3, [r7, #32]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d101      	bne.n	800e666 <decode_asn1_uint+0x9e>
            // second zero byte is an encoding error
            return 0;
 800e662:	2300      	movs	r3, #0
 800e664:	e027      	b.n	800e6b6 <decode_asn1_uint+0xee>
        }
    }

    if (integer_length > *out_int_len) {
 800e666:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d901      	bls.n	800e676 <decode_asn1_uint+0xae>
        // prevented out-of-bounds write
        return 0;
 800e672:	2300      	movs	r3, #0
 800e674:	e01f      	b.n	800e6b6 <decode_asn1_uint+0xee>
    }

    // insert padding zeros to ensure position of least significant byte matches
    const size_t padding = *out_int_len - integer_length;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e67e:	1ad3      	subs	r3, r2, r3
 800e680:	613b      	str	r3, [r7, #16]
    memset(out_int, 0, padding);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	2100      	movs	r1, #0
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	f003 ff47 	bl	801251a <memset>

    memcpy(out_int + padding, integer_field_cur, integer_length);
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	441a      	add	r2, r3
 800e692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e696:	4610      	mov	r0, r2
 800e698:	6a39      	ldr	r1, [r7, #32]
 800e69a:	461a      	mov	r2, r3
 800e69c:	f003 ff32 	bl	8012504 <memcpy>
    *out_int_len = integer_length;
 800e6a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	601a      	str	r2, [r3, #0]

    // return number of consumed ASN.1 bytes
    return integer_field_cur + integer_length - tag_field;
 800e6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6ac:	6a3a      	ldr	r2, [r7, #32]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	1ad3      	subs	r3, r2, r3
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3728      	adds	r7, #40	; 0x28
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop

0800e6c0 <asn1_to_ecdsa_rs_sep>:

bool asn1_to_ecdsa_rs_sep(const uint8_t* asn1, size_t asn1_len,
                      uint8_t* r, size_t* r_len,
                      uint8_t* s, size_t* s_len)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b088      	sub	sp, #32
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
 800e6cc:	603b      	str	r3, [r7, #0]
    if (asn1 == NULL || r == NULL || r_len == NULL || s == NULL || s_len == NULL) {
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d00b      	beq.n	800e6ec <asn1_to_ecdsa_rs_sep+0x2c>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d008      	beq.n	800e6ec <asn1_to_ecdsa_rs_sep+0x2c>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d005      	beq.n	800e6ec <asn1_to_ecdsa_rs_sep+0x2c>
 800e6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <asn1_to_ecdsa_rs_sep+0x2c>
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d101      	bne.n	800e6f0 <asn1_to_ecdsa_rs_sep+0x30>
        // No NULL paramters allowed
        return false;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	e020      	b.n	800e732 <asn1_to_ecdsa_rs_sep+0x72>
    }

    // decode R component
    const size_t consumed_r = decode_asn1_uint(asn1, asn1_len, r, r_len);
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	68b9      	ldr	r1, [r7, #8]
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	f7ff ff66 	bl	800e5c8 <decode_asn1_uint>
 800e6fc:	61f8      	str	r0, [r7, #28]
    if (consumed_r == 0) {
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d101      	bne.n	800e708 <asn1_to_ecdsa_rs_sep+0x48>
        // error while decoding R component
        return false;
 800e704:	2300      	movs	r3, #0
 800e706:	e014      	b.n	800e732 <asn1_to_ecdsa_rs_sep+0x72>
    }

    const uint8_t* const asn1_s = asn1 + consumed_r;
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	4413      	add	r3, r2
 800e70e:	61bb      	str	r3, [r7, #24]
    const size_t asn1_s_len = asn1_len - consumed_r;
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	617b      	str	r3, [r7, #20]

    // decode S component
    const size_t consumed_s = decode_asn1_uint(asn1_s, asn1_s_len, s, s_len);
 800e718:	69b8      	ldr	r0, [r7, #24]
 800e71a:	6979      	ldr	r1, [r7, #20]
 800e71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	f7ff ff52 	bl	800e5c8 <decode_asn1_uint>
 800e724:	6138      	str	r0, [r7, #16]
    if (consumed_s == 0) {
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d101      	bne.n	800e730 <asn1_to_ecdsa_rs_sep+0x70>
        // error while decoding R component
        return false;
 800e72c:	2300      	movs	r3, #0
 800e72e:	e000      	b.n	800e732 <asn1_to_ecdsa_rs_sep+0x72>
    }

    return true;
 800e730:	2301      	movs	r3, #1
}
 800e732:	4618      	mov	r0, r3
 800e734:	3720      	adds	r7, #32
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop

0800e73c <asn1_to_ecdsa_rs>:

bool asn1_to_ecdsa_rs(const uint8_t* asn1, size_t asn1_len,
                      uint8_t* rs, size_t rs_len)
{
 800e73c:	b590      	push	{r4, r7, lr}
 800e73e:	b08b      	sub	sp, #44	; 0x2c
 800e740:	af02      	add	r7, sp, #8
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
 800e748:	603b      	str	r3, [r7, #0]
    if (asn1 == NULL || rs == NULL) {
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d002      	beq.n	800e756 <asn1_to_ecdsa_rs+0x1a>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <asn1_to_ecdsa_rs+0x1e>
        // No NULL paramters allowed
        return false;
 800e756:	2300      	movs	r3, #0
 800e758:	e01d      	b.n	800e796 <asn1_to_ecdsa_rs+0x5a>
    }

    if ((rs_len % 2) != 0) {
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	f003 0301 	and.w	r3, r3, #1
 800e760:	2b00      	cmp	r3, #0
 800e762:	d001      	beq.n	800e768 <asn1_to_ecdsa_rs+0x2c>
        // length of the output buffer must be 2 times the component size and even
        return false;
 800e764:	2300      	movs	r3, #0
 800e766:	e016      	b.n	800e796 <asn1_to_ecdsa_rs+0x5a>
    }

    const size_t component_length = rs_len / 2;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	085b      	lsrs	r3, r3, #1
 800e76c:	61fb      	str	r3, [r7, #28]
    size_t r_len = component_length;
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	61bb      	str	r3, [r7, #24]
    size_t s_len = component_length;
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	617b      	str	r3, [r7, #20]

    return asn1_to_ecdsa_rs_sep(asn1, asn1_len, rs, &r_len, rs + component_length, &s_len);
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	4413      	add	r3, r2
 800e77c:	f107 0418 	add.w	r4, r7, #24
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	f107 0314 	add.w	r3, r7, #20
 800e786:	9301      	str	r3, [sp, #4]
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	68b9      	ldr	r1, [r7, #8]
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	4623      	mov	r3, r4
 800e790:	f7ff ff96 	bl	800e6c0 <asn1_to_ecdsa_rs_sep>
 800e794:	4603      	mov	r3, r0
}
 800e796:	4618      	mov	r0, r3
 800e798:	3724      	adds	r7, #36	; 0x24
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd90      	pop	{r4, r7, pc}
 800e79e:	bf00      	nop

0800e7a0 <mbedtls_mpi_zeroize>:
#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
    mbedtls_platform_zeroize( v, ciL * n );
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	f003 fb6d 	bl	8011e90 <mbedtls_platform_zeroize>
}
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	609a      	str	r2, [r3, #8]
}
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d100      	bne.n	800e7f0 <mbedtls_mpi_free+0x10>
        return;
 800e7ee:	e019      	b.n	800e824 <mbedtls_mpi_free+0x44>

    if( X->p != NULL )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d00c      	beq.n	800e812 <mbedtls_mpi_free+0x32>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	689a      	ldr	r2, [r3, #8]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	4610      	mov	r0, r2
 800e802:	4619      	mov	r1, r3
 800e804:	f7ff ffcc 	bl	800e7a0 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	689b      	ldr	r3, [r3, #8]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f003 fe71 	bl	80124f4 <free>
    }

    X->s = 1;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2201      	movs	r2, #1
 800e816:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	609a      	str	r2, [r3, #8]
}
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop

0800e82c <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	f242 7210 	movw	r2, #10000	; 0x2710
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d902      	bls.n	800e846 <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800e840:	f06f 030f 	mvn.w	r3, #15
 800e844:	e032      	b.n	800e8ac <mbedtls_mpi_grow+0x80>

    if( X->n < nblimbs )
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d22c      	bcs.n	800e8aa <mbedtls_mpi_grow+0x7e>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800e850:	6838      	ldr	r0, [r7, #0]
 800e852:	2104      	movs	r1, #4
 800e854:	f003 fe18 	bl	8012488 <calloc>
 800e858:	4603      	mov	r3, r0
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d102      	bne.n	800e868 <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800e862:	f06f 030f 	mvn.w	r3, #15
 800e866:	e021      	b.n	800e8ac <mbedtls_mpi_grow+0x80>

        if( X->p != NULL )
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d016      	beq.n	800e89e <mbedtls_mpi_grow+0x72>
        {
            memcpy( p, X->p, X->n * ciL );
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689a      	ldr	r2, [r3, #8]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	4611      	mov	r1, r2
 800e87e:	461a      	mov	r2, r3
 800e880:	f003 fe40 	bl	8012504 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	689a      	ldr	r2, [r3, #8]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	4610      	mov	r0, r2
 800e88e:	4619      	mov	r1, r3
 800e890:	f7ff ff86 	bl	800e7a0 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	4618      	mov	r0, r3
 800e89a:	f003 fe2b 	bl	80124f4 <free>
        }

        X->n = nblimbs;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	683a      	ldr	r2, [r7, #0]
 800e8a2:	605a      	str	r2, [r3, #4]
        X->p = p;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	60fb      	str	r3, [r7, #12]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d101      	bne.n	800e8ce <mbedtls_mpi_copy+0x1a>
        return( 0 );
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	e04c      	b.n	800e968 <mbedtls_mpi_copy+0xb4>

    if( Y->p == NULL )
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d104      	bne.n	800e8e0 <mbedtls_mpi_copy+0x2c>
    {
        mbedtls_mpi_free( X );
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7ff ff82 	bl	800e7e0 <mbedtls_mpi_free>
        return( 0 );
 800e8dc:	2300      	movs	r3, #0
 800e8de:	e043      	b.n	800e968 <mbedtls_mpi_copy+0xb4>
    }

    for( i = Y->n - 1; i > 0; i-- )
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	60bb      	str	r3, [r7, #8]
 800e8e8:	e00b      	b.n	800e902 <mbedtls_mpi_copy+0x4e>
        if( Y->p[i] != 0 )
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	689a      	ldr	r2, [r3, #8]
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d000      	beq.n	800e8fc <mbedtls_mpi_copy+0x48>
            break;
 800e8fa:	e005      	b.n	800e908 <mbedtls_mpi_copy+0x54>
    {
        mbedtls_mpi_free( X );
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	60bb      	str	r3, [r7, #8]
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1f0      	bne.n	800e8ea <mbedtls_mpi_copy+0x36>
        if( Y->p[i] != 0 )
            break;
    i++;
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	3301      	adds	r3, #1
 800e90c:	60bb      	str	r3, [r7, #8]

    X->s = Y->s;
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	601a      	str	r2, [r3, #0]

    if( X->n < i )
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	685a      	ldr	r2, [r3, #4]
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d208      	bcs.n	800e932 <mbedtls_mpi_copy+0x7e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	68b9      	ldr	r1, [r7, #8]
 800e924:	f7ff ff82 	bl	800e82c <mbedtls_mpi_grow>
 800e928:	60f8      	str	r0, [r7, #12]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00f      	beq.n	800e950 <mbedtls_mpi_copy+0x9c>
 800e930:	e019      	b.n	800e966 <mbedtls_mpi_copy+0xb2>
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	689a      	ldr	r2, [r3, #8]
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	18d1      	adds	r1, r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	4608      	mov	r0, r1
 800e948:	2100      	movs	r1, #0
 800e94a:	461a      	mov	r2, r3
 800e94c:	f003 fde5 	bl	801251a <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6899      	ldr	r1, [r3, #8]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	689a      	ldr	r2, [r3, #8]
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4608      	mov	r0, r1
 800e95e:	4611      	mov	r1, r2
 800e960:	461a      	mov	r2, r3
 800e962:	f003 fdcf 	bl	8012504 <memcpy>

cleanup:

    return( ret );
 800e966:	68fb      	ldr	r3, [r7, #12]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	2101      	movs	r1, #1
 800e97e:	f7ff ff55 	bl	800e82c <mbedtls_mpi_grow>
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d000      	beq.n	800e98c <mbedtls_mpi_lset+0x1c>
 800e98a:	e019      	b.n	800e9c0 <mbedtls_mpi_lset+0x50>
    memset( X->p, 0, X->n * ciL );
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	689a      	ldr	r2, [r3, #8]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4610      	mov	r0, r2
 800e998:	2100      	movs	r1, #0
 800e99a:	461a      	mov	r2, r3
 800e99c:	f003 fdbd 	bl	801251a <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	2a00      	cmp	r2, #0
 800e9a8:	bfb8      	it	lt
 800e9aa:	4252      	neglt	r2, r2
 800e9ac:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	da02      	bge.n	800e9ba <mbedtls_mpi_lset+0x4a>
 800e9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b8:	e000      	b.n	800e9bc <mbedtls_mpi_lset+0x4c>
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 800e9c0:	68fb      	ldr	r3, [r7, #12]
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop

0800e9cc <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	015a      	lsls	r2, r3, #5
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d801      	bhi.n	800e9e6 <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	e00d      	b.n	800ea02 <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	689a      	ldr	r2, [r3, #8]
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	095b      	lsrs	r3, r3, #5
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4413      	add	r3, r2
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	f003 031f 	and.w	r3, r3, #31
 800e9fa:	fa22 f303 	lsr.w	r3, r2, r3
 800e9fe:	f003 0301 	and.w	r3, r3, #1
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	370c      	adds	r7, #12
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop

0800ea10 <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800ea18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea1c:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60fb      	str	r3, [r7, #12]
 800ea22:	e00b      	b.n	800ea3c <mbedtls_clz+0x2c>
    {
        if( x & mask ) break;
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	4013      	ands	r3, r2
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d000      	beq.n	800ea30 <mbedtls_clz+0x20>
 800ea2e:	e008      	b.n	800ea42 <mbedtls_clz+0x32>

        mask >>= 1;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	085b      	lsrs	r3, r3, #1
 800ea34:	60bb      	str	r3, [r7, #8]
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	60fb      	str	r3, [r7, #12]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b1f      	cmp	r3, #31
 800ea40:	d9f0      	bls.n	800ea24 <mbedtls_clz+0x14>
        if( x & mask ) break;

        mask >>= 1;
    }

    return j;
 800ea42:	68fb      	ldr	r3, [r7, #12]
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3714      	adds	r7, #20
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d101      	bne.n	800ea64 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 800ea60:	2300      	movs	r3, #0
 800ea62:	e024      	b.n	800eaae <mbedtls_mpi_bitlen+0x5e>

    for( i = X->n - 1; i > 0; i-- )
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	3b01      	subs	r3, #1
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	e00b      	b.n	800ea86 <mbedtls_mpi_bitlen+0x36>
        if( X->p[i] != 0 )
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	689a      	ldr	r2, [r3, #8]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d000      	beq.n	800ea80 <mbedtls_mpi_bitlen+0x30>
            break;
 800ea7e:	e005      	b.n	800ea8c <mbedtls_mpi_bitlen+0x3c>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	3b01      	subs	r3, #1
 800ea84:	60fb      	str	r3, [r7, #12]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1f0      	bne.n	800ea6e <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	689a      	ldr	r2, [r3, #8]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7ff ffb9 	bl	800ea10 <mbedtls_clz>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	f1c3 0320 	rsb	r3, r3, #32
 800eaa4:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	015a      	lsls	r2, r3, #5
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	4413      	add	r3, r2
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop

0800eab8 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7ff ffc5 	bl	800ea50 <mbedtls_mpi_bitlen>
 800eac6:	4603      	mov	r3, r0
 800eac8:	3307      	adds	r3, #7
 800eaca:	08db      	lsrs	r3, r3, #3
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3708      	adds	r7, #8
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	089b      	lsrs	r3, r3, #2
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	f002 0203 	and.w	r2, r2, #3
 800eaea:	2a00      	cmp	r2, #0
 800eaec:	bf14      	ite	ne
 800eaee:	2201      	movne	r2, #1
 800eaf0:	2200      	moveq	r2, #0
 800eaf2:	b2d2      	uxtb	r2, r2
 800eaf4:	4413      	add	r3, r2
 800eaf6:	613b      	str	r3, [r7, #16]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d00e      	beq.n	800eb20 <mbedtls_mpi_read_binary+0x4c>
    {
        mbedtls_mpi_free( X );
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7ff fe6c 	bl	800e7e0 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 800eb08:	68f8      	ldr	r0, [r7, #12]
 800eb0a:	f7ff fe57 	bl	800e7bc <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	6939      	ldr	r1, [r7, #16]
 800eb12:	f7ff fe8b 	bl	800e82c <mbedtls_mpi_grow>
 800eb16:	61f8      	str	r0, [r7, #28]
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d000      	beq.n	800eb20 <mbedtls_mpi_read_binary+0x4c>
 800eb1e:	e02f      	b.n	800eb80 <mbedtls_mpi_read_binary+0xac>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	2100      	movs	r1, #0
 800eb24:	f7ff ff24 	bl	800e970 <mbedtls_mpi_lset>
 800eb28:	61f8      	str	r0, [r7, #28]
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d000      	beq.n	800eb32 <mbedtls_mpi_read_binary+0x5e>
 800eb30:	e026      	b.n	800eb80 <mbedtls_mpi_read_binary+0xac>

    for( i = buflen, j = 0; i > 0; i--, j++ )
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	61bb      	str	r3, [r7, #24]
 800eb36:	2300      	movs	r3, #0
 800eb38:	617b      	str	r3, [r7, #20]
 800eb3a:	e01e      	b.n	800eb7a <mbedtls_mpi_read_binary+0xa6>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6899      	ldr	r1, [r3, #8]
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	089b      	lsrs	r3, r3, #2
 800eb44:	009a      	lsls	r2, r3, #2
 800eb46:	440a      	add	r2, r1
 800eb48:	68f9      	ldr	r1, [r7, #12]
 800eb4a:	6889      	ldr	r1, [r1, #8]
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	440b      	add	r3, r1
 800eb50:	6819      	ldr	r1, [r3, #0]
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	3b01      	subs	r3, #1
 800eb56:	68b8      	ldr	r0, [r7, #8]
 800eb58:	4403      	add	r3, r0
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f003 0303 	and.w	r3, r3, #3
 800eb64:	00db      	lsls	r3, r3, #3
 800eb66:	fa00 f303 	lsl.w	r3, r0, r3
 800eb6a:	430b      	orrs	r3, r1
 800eb6c:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 800eb6e:	69bb      	ldr	r3, [r7, #24]
 800eb70:	3b01      	subs	r3, #1
 800eb72:	61bb      	str	r3, [r7, #24]
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	3301      	adds	r3, #1
 800eb78:	617b      	str	r3, [r7, #20]
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1dd      	bne.n	800eb3c <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
 800eb80:	69fb      	ldr	r3, [r7, #28]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3720      	adds	r7, #32
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop

0800eb8c <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b088      	sub	sp, #32
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	009b      	lsls	r3, r3, #2
 800eb9e:	613b      	str	r3, [r7, #16]

    if( stored_bytes < buflen )
 800eba0:	693a      	ldr	r2, [r7, #16]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d210      	bcs.n	800ebca <mbedtls_mpi_write_binary+0x3e>
        /* There is enough space in the output buffer. Write initial
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	61fb      	str	r3, [r7, #28]
        p = buf + buflen - stored_bytes;
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	68ba      	ldr	r2, [r7, #8]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	61bb      	str	r3, [r7, #24]
        memset( buf, 0, buflen - stored_bytes );
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	68b8      	ldr	r0, [r7, #8]
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	f003 fca9 	bl	801251a <memset>
 800ebc8:	e01f      	b.n	800ec0a <mbedtls_mpi_write_binary+0x7e>
    }
    else
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	61fb      	str	r3, [r7, #28]
        p = buf;
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	61bb      	str	r3, [r7, #24]
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	617b      	str	r3, [r7, #20]
 800ebd6:	e014      	b.n	800ec02 <mbedtls_mpi_write_binary+0x76>
        {
            if( GET_BYTE( X, i ) != 0 )
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	689a      	ldr	r2, [r3, #8]
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	089b      	lsrs	r3, r3, #2
 800ebe0:	009b      	lsls	r3, r3, #2
 800ebe2:	4413      	add	r3, r2
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	f002 0203 	and.w	r2, r2, #3
 800ebec:	00d2      	lsls	r2, r2, #3
 800ebee:	40d3      	lsrs	r3, r2
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d002      	beq.n	800ebfc <mbedtls_mpi_write_binary+0x70>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 800ebf6:	f06f 0307 	mvn.w	r3, #7
 800ebfa:	e025      	b.n	800ec48 <mbedtls_mpi_write_binary+0xbc>
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	617b      	str	r3, [r7, #20]
 800ec02:	697a      	ldr	r2, [r7, #20]
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d3e6      	bcc.n	800ebd8 <mbedtls_mpi_write_binary+0x4c>
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	617b      	str	r3, [r7, #20]
 800ec0e:	e016      	b.n	800ec3e <mbedtls_mpi_write_binary+0xb2>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 800ec10:	69fa      	ldr	r2, [r7, #28]
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	1ad3      	subs	r3, r2, r3
 800ec16:	3b01      	subs	r3, #1
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	6891      	ldr	r1, [r2, #8]
 800ec20:	697a      	ldr	r2, [r7, #20]
 800ec22:	0892      	lsrs	r2, r2, #2
 800ec24:	0092      	lsls	r2, r2, #2
 800ec26:	440a      	add	r2, r1
 800ec28:	6812      	ldr	r2, [r2, #0]
 800ec2a:	6979      	ldr	r1, [r7, #20]
 800ec2c:	f001 0103 	and.w	r1, r1, #3
 800ec30:	00c9      	lsls	r1, r1, #3
 800ec32:	40ca      	lsrs	r2, r1
 800ec34:	b2d2      	uxtb	r2, r2
 800ec36:	701a      	strb	r2, [r3, #0]
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	617b      	str	r3, [r7, #20]
 800ec3e:	697a      	ldr	r2, [r7, #20]
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d3e4      	bcc.n	800ec10 <mbedtls_mpi_write_binary+0x84>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3720      	adds	r7, #32
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	095b      	lsrs	r3, r3, #5
 800ec62:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	f003 031f 	and.w	r3, r3, #31
 800ec6a:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff feef 	bl	800ea50 <mbedtls_mpi_bitlen>
 800ec72:	4602      	mov	r2, r0
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	4413      	add	r3, r2
 800ec78:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	015a      	lsls	r2, r3, #5
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d213      	bcs.n	800ecae <mbedtls_mpi_shift_l+0x5e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	095b      	lsrs	r3, r3, #5
 800ec8a:	69ba      	ldr	r2, [r7, #24]
 800ec8c:	f002 021f 	and.w	r2, r2, #31
 800ec90:	2a00      	cmp	r2, #0
 800ec92:	bf14      	ite	ne
 800ec94:	2201      	movne	r2, #1
 800ec96:	2200      	moveq	r2, #0
 800ec98:	b2d2      	uxtb	r2, r2
 800ec9a:	4413      	add	r3, r2
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	4619      	mov	r1, r3
 800eca0:	f7ff fdc4 	bl	800e82c <mbedtls_mpi_grow>
 800eca4:	61f8      	str	r0, [r7, #28]
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d000      	beq.n	800ecae <mbedtls_mpi_shift_l+0x5e>
 800ecac:	e06c      	b.n	800ed88 <mbedtls_mpi_shift_l+0x138>

    ret = 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d02f      	beq.n	800ed18 <mbedtls_mpi_shift_l+0xc8>
    {
        for( i = X->n; i > v0; i-- )
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	61bb      	str	r3, [r7, #24]
 800ecbe:	e016      	b.n	800ecee <mbedtls_mpi_shift_l+0x9e>
            X->p[i - 1] = X->p[i - v0 - 1];
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	689a      	ldr	r2, [r3, #8]
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecca:	3b01      	subs	r3, #1
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	441a      	add	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6899      	ldr	r1, [r3, #8]
 800ecd4:	69b8      	ldr	r0, [r7, #24]
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	1ac3      	subs	r3, r0, r3
 800ecda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecde:	3b01      	subs	r3, #1
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	440b      	add	r3, r1
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	6013      	str	r3, [r2, #0]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	3b01      	subs	r3, #1
 800ecec:	61bb      	str	r3, [r7, #24]
 800ecee:	69ba      	ldr	r2, [r7, #24]
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d8e4      	bhi.n	800ecc0 <mbedtls_mpi_shift_l+0x70>
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 800ecf6:	e00c      	b.n	800ed12 <mbedtls_mpi_shift_l+0xc2>
            X->p[i - 1] = 0;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	689a      	ldr	r2, [r3, #8]
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed02:	3b01      	subs	r3, #1
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	4413      	add	r3, r2
 800ed08:	2200      	movs	r2, #0
 800ed0a:	601a      	str	r2, [r3, #0]
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	61bb      	str	r3, [r7, #24]
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d1ef      	bne.n	800ecf8 <mbedtls_mpi_shift_l+0xa8>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d034      	beq.n	800ed88 <mbedtls_mpi_shift_l+0x138>
    {
        for( i = v0; i < X->n; i++ )
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	61bb      	str	r3, [r7, #24]
 800ed22:	e02c      	b.n	800ed7e <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	689a      	ldr	r2, [r3, #8]
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	4413      	add	r3, r2
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	f1c2 0220 	rsb	r2, r2, #32
 800ed36:	40d3      	lsrs	r3, r2
 800ed38:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	689a      	ldr	r2, [r3, #8]
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4413      	add	r3, r2
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	6891      	ldr	r1, [r2, #8]
 800ed48:	69ba      	ldr	r2, [r7, #24]
 800ed4a:	0092      	lsls	r2, r2, #2
 800ed4c:	440a      	add	r2, r1
 800ed4e:	6811      	ldr	r1, [r2, #0]
 800ed50:	68fa      	ldr	r2, [r7, #12]
 800ed52:	fa01 f202 	lsl.w	r2, r1, r2
 800ed56:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	689a      	ldr	r2, [r3, #8]
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4413      	add	r3, r2
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	6891      	ldr	r1, [r2, #8]
 800ed66:	69ba      	ldr	r2, [r7, #24]
 800ed68:	0092      	lsls	r2, r2, #2
 800ed6a:	440a      	add	r2, r1
 800ed6c:	6811      	ldr	r1, [r2, #0]
 800ed6e:	697a      	ldr	r2, [r7, #20]
 800ed70:	430a      	orrs	r2, r1
 800ed72:	601a      	str	r2, [r3, #0]
            r0 = r1;
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	617b      	str	r3, [r7, #20]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	61bb      	str	r3, [r7, #24]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	685a      	ldr	r2, [r3, #4]
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d8cd      	bhi.n	800ed24 <mbedtls_mpi_shift_l+0xd4>
        }
    }

cleanup:

    return( ret );
 800ed88:	69fb      	ldr	r3, [r7, #28]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3720      	adds	r7, #32
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop

0800ed94 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b088      	sub	sp, #32
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	61bb      	str	r3, [r7, #24]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	095b      	lsrs	r3, r3, #5
 800eda6:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	f003 031f 	and.w	r3, r3, #31
 800edae:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685a      	ldr	r2, [r3, #4]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d307      	bcc.n	800edca <mbedtls_mpi_shift_r+0x36>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	685a      	ldr	r2, [r3, #4]
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d108      	bne.n	800edd6 <mbedtls_mpi_shift_r+0x42>
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d005      	beq.n	800edd6 <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	2100      	movs	r1, #0
 800edce:	f7ff fdcf 	bl	800e970 <mbedtls_mpi_lset>
 800edd2:	4603      	mov	r3, r0
 800edd4:	e074      	b.n	800eec0 <mbedtls_mpi_shift_r+0x12c>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d02a      	beq.n	800ee32 <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 800eddc:	2300      	movs	r3, #0
 800edde:	61fb      	str	r3, [r7, #28]
 800ede0:	e010      	b.n	800ee04 <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	689a      	ldr	r2, [r3, #8]
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	4413      	add	r3, r2
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	6891      	ldr	r1, [r2, #8]
 800edf0:	69f8      	ldr	r0, [r7, #28]
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	4402      	add	r2, r0
 800edf6:	0092      	lsls	r2, r2, #2
 800edf8:	440a      	add	r2, r1
 800edfa:	6812      	ldr	r2, [r2, #0]
 800edfc:	601a      	str	r2, [r3, #0]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	3301      	adds	r3, #1
 800ee02:	61fb      	str	r3, [r7, #28]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	685a      	ldr	r2, [r3, #4]
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	1ad2      	subs	r2, r2, r3
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d8e7      	bhi.n	800ede2 <mbedtls_mpi_shift_r+0x4e>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 800ee12:	e009      	b.n	800ee28 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	689a      	ldr	r2, [r3, #8]
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	4413      	add	r3, r2
 800ee1e:	2200      	movs	r2, #0
 800ee20:	601a      	str	r2, [r3, #0]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	3301      	adds	r3, #1
 800ee26:	61fb      	str	r3, [r7, #28]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d8f0      	bhi.n	800ee14 <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d042      	beq.n	800eebe <mbedtls_mpi_shift_r+0x12a>
    {
        for( i = X->n; i > 0; i-- )
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	61fb      	str	r3, [r7, #28]
 800ee3e:	e03b      	b.n	800eeb8 <mbedtls_mpi_shift_r+0x124>
        {
            r1 = X->p[i - 1] << (biL - v1);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	689a      	ldr	r2, [r3, #8]
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee4a:	3b01      	subs	r3, #1
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	f1c2 0220 	rsb	r2, r2, #32
 800ee58:	4093      	lsls	r3, r2
 800ee5a:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	689a      	ldr	r2, [r3, #8]
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee66:	3b01      	subs	r3, #1
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	441a      	add	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6899      	ldr	r1, [r3, #8]
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee76:	3b01      	subs	r3, #1
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	440b      	add	r3, r1
 800ee7c:	6819      	ldr	r1, [r3, #0]
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	fa21 f303 	lsr.w	r3, r1, r3
 800ee84:	6013      	str	r3, [r2, #0]
            X->p[i - 1] |= r0;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	689a      	ldr	r2, [r3, #8]
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee90:	3b01      	subs	r3, #1
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	441a      	add	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6899      	ldr	r1, [r3, #8]
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eea0:	3b01      	subs	r3, #1
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	440b      	add	r3, r1
 800eea6:	6819      	ldr	r1, [r3, #0]
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	430b      	orrs	r3, r1
 800eeac:	6013      	str	r3, [r2, #0]
            r0 = r1;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	61bb      	str	r3, [r7, #24]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	61fb      	str	r3, [r7, #28]
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1c0      	bne.n	800ee40 <mbedtls_mpi_shift_r+0xac>
            X->p[i - 1] |= r0;
            r0 = r1;
        }
    }

    return( 0 );
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3720      	adds	r7, #32
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	685b      	ldr	r3, [r3, #4]
 800eed6:	60fb      	str	r3, [r7, #12]
 800eed8:	e00e      	b.n	800eef8 <mbedtls_mpi_cmp_abs+0x30>
        if( X->p[i - 1] != 0 )
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	689a      	ldr	r2, [r3, #8]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eee4:	3b01      	subs	r3, #1
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4413      	add	r3, r2
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d000      	beq.n	800eef2 <mbedtls_mpi_cmp_abs+0x2a>
            break;
 800eef0:	e005      	b.n	800eefe <mbedtls_mpi_cmp_abs+0x36>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	3b01      	subs	r3, #1
 800eef6:	60fb      	str	r3, [r7, #12]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1ed      	bne.n	800eeda <mbedtls_mpi_cmp_abs+0x12>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	60bb      	str	r3, [r7, #8]
 800ef04:	e00e      	b.n	800ef24 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	689a      	ldr	r2, [r3, #8]
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef10:	3b01      	subs	r3, #1
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	4413      	add	r3, r2
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d000      	beq.n	800ef1e <mbedtls_mpi_cmp_abs+0x56>
            break;
 800ef1c:	e005      	b.n	800ef2a <mbedtls_mpi_cmp_abs+0x62>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	3b01      	subs	r3, #1
 800ef22:	60bb      	str	r3, [r7, #8]
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1ed      	bne.n	800ef06 <mbedtls_mpi_cmp_abs+0x3e>
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d104      	bne.n	800ef3a <mbedtls_mpi_cmp_abs+0x72>
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <mbedtls_mpi_cmp_abs+0x72>
        return( 0 );
 800ef36:	2300      	movs	r3, #0
 800ef38:	e041      	b.n	800efbe <mbedtls_mpi_cmp_abs+0xf6>

    if( i > j ) return(  1 );
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d901      	bls.n	800ef46 <mbedtls_mpi_cmp_abs+0x7e>
 800ef42:	2301      	movs	r3, #1
 800ef44:	e03b      	b.n	800efbe <mbedtls_mpi_cmp_abs+0xf6>
    if( j > i ) return( -1 );
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d902      	bls.n	800ef54 <mbedtls_mpi_cmp_abs+0x8c>
 800ef4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef52:	e034      	b.n	800efbe <mbedtls_mpi_cmp_abs+0xf6>

    for( ; i > 0; i-- )
 800ef54:	e02f      	b.n	800efb6 <mbedtls_mpi_cmp_abs+0xee>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	689a      	ldr	r2, [r3, #8]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef60:	3b01      	subs	r3, #1
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4413      	add	r3, r2
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	6899      	ldr	r1, [r3, #8]
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef72:	3b01      	subs	r3, #1
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	440b      	add	r3, r1
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d901      	bls.n	800ef82 <mbedtls_mpi_cmp_abs+0xba>
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e01d      	b.n	800efbe <mbedtls_mpi_cmp_abs+0xf6>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	689a      	ldr	r2, [r3, #8]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef8c:	3b01      	subs	r3, #1
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	4413      	add	r3, r2
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	6899      	ldr	r1, [r3, #8]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	440b      	add	r3, r1
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d202      	bcs.n	800efb0 <mbedtls_mpi_cmp_abs+0xe8>
 800efaa:	f04f 33ff 	mov.w	r3, #4294967295
 800efae:	e006      	b.n	800efbe <mbedtls_mpi_cmp_abs+0xf6>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	3b01      	subs	r3, #1
 800efb4:	60fb      	str	r3, [r7, #12]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1cc      	bne.n	800ef56 <mbedtls_mpi_cmp_abs+0x8e>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr
 800efca:	bf00      	nop

0800efcc <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e00e      	b.n	800effc <mbedtls_mpi_cmp_mpi+0x30>
        if( X->p[i - 1] != 0 )
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	689a      	ldr	r2, [r3, #8]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800efe8:	3b01      	subs	r3, #1
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	4413      	add	r3, r2
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d000      	beq.n	800eff6 <mbedtls_mpi_cmp_mpi+0x2a>
            break;
 800eff4:	e005      	b.n	800f002 <mbedtls_mpi_cmp_mpi+0x36>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	3b01      	subs	r3, #1
 800effa:	60fb      	str	r3, [r7, #12]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1ed      	bne.n	800efde <mbedtls_mpi_cmp_mpi+0x12>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	60bb      	str	r3, [r7, #8]
 800f008:	e00e      	b.n	800f028 <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	689a      	ldr	r2, [r3, #8]
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f014:	3b01      	subs	r3, #1
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	4413      	add	r3, r2
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d000      	beq.n	800f022 <mbedtls_mpi_cmp_mpi+0x56>
            break;
 800f020:	e005      	b.n	800f02e <mbedtls_mpi_cmp_mpi+0x62>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	3b01      	subs	r3, #1
 800f026:	60bb      	str	r3, [r7, #8]
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1ed      	bne.n	800f00a <mbedtls_mpi_cmp_mpi+0x3e>
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d104      	bne.n	800f03e <mbedtls_mpi_cmp_mpi+0x72>
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d101      	bne.n	800f03e <mbedtls_mpi_cmp_mpi+0x72>
        return( 0 );
 800f03a:	2300      	movs	r3, #0
 800f03c:	e05a      	b.n	800f0f4 <mbedtls_mpi_cmp_mpi+0x128>

    if( i > j ) return(  X->s );
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	429a      	cmp	r2, r3
 800f044:	d902      	bls.n	800f04c <mbedtls_mpi_cmp_mpi+0x80>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	e053      	b.n	800f0f4 <mbedtls_mpi_cmp_mpi+0x128>
    if( j > i ) return( -Y->s );
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	429a      	cmp	r2, r3
 800f052:	d903      	bls.n	800f05c <mbedtls_mpi_cmp_mpi+0x90>
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	425b      	negs	r3, r3
 800f05a:	e04b      	b.n	800f0f4 <mbedtls_mpi_cmp_mpi+0x128>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	dd05      	ble.n	800f070 <mbedtls_mpi_cmp_mpi+0xa4>
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	da01      	bge.n	800f070 <mbedtls_mpi_cmp_mpi+0xa4>
 800f06c:	2301      	movs	r3, #1
 800f06e:	e041      	b.n	800f0f4 <mbedtls_mpi_cmp_mpi+0x128>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	dd06      	ble.n	800f086 <mbedtls_mpi_cmp_mpi+0xba>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	da02      	bge.n	800f086 <mbedtls_mpi_cmp_mpi+0xba>
 800f080:	f04f 33ff 	mov.w	r3, #4294967295
 800f084:	e036      	b.n	800f0f4 <mbedtls_mpi_cmp_mpi+0x128>

    for( ; i > 0; i-- )
 800f086:	e031      	b.n	800f0ec <mbedtls_mpi_cmp_mpi+0x120>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	689a      	ldr	r2, [r3, #8]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f092:	3b01      	subs	r3, #1
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	4413      	add	r3, r2
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	6899      	ldr	r1, [r3, #8]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0a4:	3b01      	subs	r3, #1
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	440b      	add	r3, r1
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d902      	bls.n	800f0b6 <mbedtls_mpi_cmp_mpi+0xea>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	e01e      	b.n	800f0f4 <mbedtls_mpi_cmp_mpi+0x128>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	689a      	ldr	r2, [r3, #8]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	6899      	ldr	r1, [r3, #8]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	440b      	add	r3, r1
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d203      	bcs.n	800f0e6 <mbedtls_mpi_cmp_mpi+0x11a>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	425b      	negs	r3, r3
 800f0e4:	e006      	b.n	800f0f4 <mbedtls_mpi_cmp_mpi+0x128>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	3b01      	subs	r3, #1
 800f0ea:	60fb      	str	r3, [r7, #12]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1ca      	bne.n	800f088 <mbedtls_mpi_cmp_mpi+0xbc>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	bfb8      	it	lt
 800f110:	425b      	neglt	r3, r3
 800f112:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	da02      	bge.n	800f120 <mbedtls_mpi_cmp_int+0x20>
 800f11a:	f04f 33ff 	mov.w	r3, #4294967295
 800f11e:	e000      	b.n	800f122 <mbedtls_mpi_cmp_int+0x22>
 800f120:	2301      	movs	r3, #1
 800f122:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 800f124:	2301      	movs	r3, #1
 800f126:	613b      	str	r3, [r7, #16]
    Y.p = p;
 800f128:	f107 0308 	add.w	r3, r7, #8
 800f12c:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800f12e:	f107 030c 	add.w	r3, r7, #12
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	4619      	mov	r1, r3
 800f136:	f7ff ff49 	bl	800efcc <mbedtls_mpi_cmp_mpi>
 800f13a:	4603      	mov	r3, r0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3718      	adds	r7, #24
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b08c      	sub	sp, #48	; 0x30
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	429a      	cmp	r2, r3
 800f156:	d105      	bne.n	800f164 <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	617b      	str	r3, [r7, #20]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	60bb      	str	r3, [r7, #8]
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800f164:	68fa      	ldr	r2, [r7, #12]
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d008      	beq.n	800f17e <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	68b9      	ldr	r1, [r7, #8]
 800f170:	f7ff fba0 	bl	800e8b4 <mbedtls_mpi_copy>
 800f174:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d000      	beq.n	800f17e <mbedtls_mpi_add_abs+0x3a>
 800f17c:	e08c      	b.n	800f298 <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2201      	movs	r2, #1
 800f182:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	627b      	str	r3, [r7, #36]	; 0x24
 800f18a:	e00e      	b.n	800f1aa <mbedtls_mpi_add_abs+0x66>
        if( B->p[j - 1] != 0 )
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	689a      	ldr	r2, [r3, #8]
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f196:	3b01      	subs	r3, #1
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	4413      	add	r3, r2
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d000      	beq.n	800f1a4 <mbedtls_mpi_add_abs+0x60>
            break;
 800f1a2:	e005      	b.n	800f1b0 <mbedtls_mpi_add_abs+0x6c>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a6:	3b01      	subs	r3, #1
 800f1a8:	627b      	str	r3, [r7, #36]	; 0x24
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d1ed      	bne.n	800f18c <mbedtls_mpi_add_abs+0x48>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1b4:	f7ff fb3a 	bl	800e82c <mbedtls_mpi_grow>
 800f1b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d000      	beq.n	800f1c2 <mbedtls_mpi_add_abs+0x7e>
 800f1c0:	e06a      	b.n	800f298 <mbedtls_mpi_add_abs+0x154>

    o = B->p; p = X->p; c = 0;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	623b      	str	r3, [r7, #32]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	61fb      	str	r3, [r7, #28]
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1d6:	e02c      	b.n	800f232 <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 800f1d8:	6a3b      	ldr	r3, [r7, #32]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	441a      	add	r2, r3
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	601a      	str	r2, [r3, #0]
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	bf34      	ite	cc
 800f1f4:	2301      	movcc	r3, #1
 800f1f6:	2300      	movcs	r3, #0
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	441a      	add	r2, r3
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	429a      	cmp	r2, r3
 800f210:	bf34      	ite	cc
 800f212:	2301      	movcc	r3, #1
 800f214:	2300      	movcs	r3, #0
 800f216:	b2db      	uxtb	r3, r3
 800f218:	461a      	mov	r2, r3
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	4413      	add	r3, r2
 800f21e:	61bb      	str	r3, [r7, #24]
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 800f220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f222:	3301      	adds	r3, #1
 800f224:	62bb      	str	r3, [r7, #40]	; 0x28
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	3304      	adds	r3, #4
 800f22a:	623b      	str	r3, [r7, #32]
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	3304      	adds	r3, #4
 800f230:	61fb      	str	r3, [r7, #28]
 800f232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f236:	429a      	cmp	r2, r3
 800f238:	d3ce      	bcc.n	800f1d8 <mbedtls_mpi_add_abs+0x94>
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 800f23a:	e02a      	b.n	800f292 <mbedtls_mpi_add_abs+0x14e>
    {
        if( i >= X->n )
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	685a      	ldr	r2, [r3, #4]
 800f240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f242:	429a      	cmp	r2, r3
 800f244:	d810      	bhi.n	800f268 <mbedtls_mpi_add_abs+0x124>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800f246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f248:	3301      	adds	r3, #1
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	4619      	mov	r1, r3
 800f24e:	f7ff faed 	bl	800e82c <mbedtls_mpi_grow>
 800f252:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f256:	2b00      	cmp	r3, #0
 800f258:	d000      	beq.n	800f25c <mbedtls_mpi_add_abs+0x118>
 800f25a:	e01d      	b.n	800f298 <mbedtls_mpi_add_abs+0x154>
            p = X->p + i;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	689a      	ldr	r2, [r3, #8]
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	441a      	add	r2, r3
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	601a      	str	r2, [r3, #0]
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	bf34      	ite	cc
 800f27e:	2301      	movcc	r3, #1
 800f280:	2300      	movcs	r3, #0
 800f282:	b2db      	uxtb	r3, r3
 800f284:	61bb      	str	r3, [r7, #24]
 800f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f288:	3301      	adds	r3, #1
 800f28a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	3304      	adds	r3, #4
 800f290:	61fb      	str	r3, [r7, #28]
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1d1      	bne.n	800f23c <mbedtls_mpi_add_abs+0xf8>
        *p += c; c = ( *p < c ); i++; p++;
    }

cleanup:

    return( ret );
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3730      	adds	r7, #48	; 0x30
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop

0800f2a4 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b089      	sub	sp, #36	; 0x24
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	61bb      	str	r3, [r7, #24]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	61fb      	str	r3, [r7, #28]
 800f2b8:	e02b      	b.n	800f312 <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	bf34      	ite	cc
 800f2c4:	2301      	movcc	r3, #1
 800f2c6:	2300      	movcs	r3, #0
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	617b      	str	r3, [r7, #20]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	1ad2      	subs	r2, r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	bf34      	ite	cc
 800f2e4:	2301      	movcc	r3, #1
 800f2e6:	2300      	movcs	r3, #0
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	61bb      	str	r3, [r7, #24]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	1ad2      	subs	r2, r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	601a      	str	r2, [r3, #0]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	3301      	adds	r3, #1
 800f304:	61fb      	str	r3, [r7, #28]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	3304      	adds	r3, #4
 800f30a:	60bb      	str	r3, [r7, #8]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	3304      	adds	r3, #4
 800f310:	607b      	str	r3, [r7, #4]
 800f312:	69fa      	ldr	r2, [r7, #28]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	429a      	cmp	r2, r3
 800f318:	d3cf      	bcc.n	800f2ba <mpi_sub_hlp+0x16>
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 800f31a:	e013      	b.n	800f344 <mpi_sub_hlp+0xa0>
    {
        z = ( *d < c ); *d -= c;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	429a      	cmp	r2, r3
 800f324:	bf34      	ite	cc
 800f326:	2301      	movcc	r3, #1
 800f328:	2300      	movcs	r3, #0
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	617b      	str	r3, [r7, #20]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	1ad2      	subs	r2, r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	601a      	str	r2, [r3, #0]
        c = z; d++;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	61bb      	str	r3, [r7, #24]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	3304      	adds	r3, #4
 800f342:	607b      	str	r3, [r7, #4]
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 800f344:	69bb      	ldr	r3, [r7, #24]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1e8      	bne.n	800f31c <mpi_sub_hlp+0x78>
    {
        z = ( *d < c ); *d -= c;
        c = z; d++;
    }
}
 800f34a:	3724      	adds	r7, #36	; 0x24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b08a      	sub	sp, #40	; 0x28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	607a      	str	r2, [r7, #4]
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f360:	68b8      	ldr	r0, [r7, #8]
 800f362:	6879      	ldr	r1, [r7, #4]
 800f364:	f7ff fdb0 	bl	800eec8 <mbedtls_mpi_cmp_abs>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	da02      	bge.n	800f374 <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800f36e:	f06f 0309 	mvn.w	r3, #9
 800f372:	e04d      	b.n	800f410 <mbedtls_mpi_sub_abs+0xbc>

    mbedtls_mpi_init( &TB );
 800f374:	f107 0314 	add.w	r3, r7, #20
 800f378:	4618      	mov	r0, r3
 800f37a:	f7ff fa1f 	bl	800e7bc <mbedtls_mpi_init>

    if( X == B )
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	429a      	cmp	r2, r3
 800f384:	d10d      	bne.n	800f3a2 <mbedtls_mpi_sub_abs+0x4e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800f386:	f107 0314 	add.w	r3, r7, #20
 800f38a:	4618      	mov	r0, r3
 800f38c:	6879      	ldr	r1, [r7, #4]
 800f38e:	f7ff fa91 	bl	800e8b4 <mbedtls_mpi_copy>
 800f392:	6278      	str	r0, [r7, #36]	; 0x24
 800f394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	d000      	beq.n	800f39c <mbedtls_mpi_sub_abs+0x48>
 800f39a:	e033      	b.n	800f404 <mbedtls_mpi_sub_abs+0xb0>
        B = &TB;
 800f39c:	f107 0314 	add.w	r3, r7, #20
 800f3a0:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d008      	beq.n	800f3bc <mbedtls_mpi_sub_abs+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	68b9      	ldr	r1, [r7, #8]
 800f3ae:	f7ff fa81 	bl	800e8b4 <mbedtls_mpi_copy>
 800f3b2:	6278      	str	r0, [r7, #36]	; 0x24
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d000      	beq.n	800f3bc <mbedtls_mpi_sub_abs+0x68>
 800f3ba:	e023      	b.n	800f404 <mbedtls_mpi_sub_abs+0xb0>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	601a      	str	r2, [r3, #0]

    ret = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	627b      	str	r3, [r7, #36]	; 0x24

    for( n = B->n; n > 0; n-- )
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	623b      	str	r3, [r7, #32]
 800f3cc:	e00e      	b.n	800f3ec <mbedtls_mpi_sub_abs+0x98>
        if( B->p[n - 1] != 0 )
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	689a      	ldr	r2, [r3, #8]
 800f3d2:	6a3b      	ldr	r3, [r7, #32]
 800f3d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	4413      	add	r3, r2
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d000      	beq.n	800f3e6 <mbedtls_mpi_sub_abs+0x92>
            break;
 800f3e4:	e005      	b.n	800f3f2 <mbedtls_mpi_sub_abs+0x9e>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 800f3e6:	6a3b      	ldr	r3, [r7, #32]
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	623b      	str	r3, [r7, #32]
 800f3ec:	6a3b      	ldr	r3, [r7, #32]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1ed      	bne.n	800f3ce <mbedtls_mpi_sub_abs+0x7a>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	689a      	ldr	r2, [r3, #8]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	6a38      	ldr	r0, [r7, #32]
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	461a      	mov	r2, r3
 800f400:	f7ff ff50 	bl	800f2a4 <mpi_sub_hlp>

cleanup:

    mbedtls_mpi_free( &TB );
 800f404:	f107 0314 	add.w	r3, r7, #20
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff f9e9 	bl	800e7e0 <mbedtls_mpi_free>

    return( ret );
 800f40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f410:	4618      	mov	r0, r3
 800f412:	3728      	adds	r7, #40	; 0x28
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	613b      	str	r3, [r7, #16]
    if( A->s * B->s < 0 )
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	6812      	ldr	r2, [r2, #0]
 800f432:	fb02 f303 	mul.w	r3, r2, r3
 800f436:	2b00      	cmp	r3, #0
 800f438:	da23      	bge.n	800f482 <mbedtls_mpi_add_mpi+0x6a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800f43a:	68b8      	ldr	r0, [r7, #8]
 800f43c:	6879      	ldr	r1, [r7, #4]
 800f43e:	f7ff fd43 	bl	800eec8 <mbedtls_mpi_cmp_abs>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	db0d      	blt.n	800f464 <mbedtls_mpi_add_mpi+0x4c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	68b9      	ldr	r1, [r7, #8]
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	f7ff ff81 	bl	800f354 <mbedtls_mpi_sub_abs>
 800f452:	6178      	str	r0, [r7, #20]
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d000      	beq.n	800f45c <mbedtls_mpi_add_mpi+0x44>
 800f45a:	e01f      	b.n	800f49c <mbedtls_mpi_add_mpi+0x84>
            X->s =  s;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	693a      	ldr	r2, [r7, #16]
 800f460:	601a      	str	r2, [r3, #0]
 800f462:	e01b      	b.n	800f49c <mbedtls_mpi_add_mpi+0x84>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	6879      	ldr	r1, [r7, #4]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	f7ff ff73 	bl	800f354 <mbedtls_mpi_sub_abs>
 800f46e:	6178      	str	r0, [r7, #20]
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d000      	beq.n	800f478 <mbedtls_mpi_add_mpi+0x60>
 800f476:	e011      	b.n	800f49c <mbedtls_mpi_add_mpi+0x84>
            X->s = -s;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	425a      	negs	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	601a      	str	r2, [r3, #0]
 800f480:	e00c      	b.n	800f49c <mbedtls_mpi_add_mpi+0x84>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	68b9      	ldr	r1, [r7, #8]
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	f7ff fe5c 	bl	800f144 <mbedtls_mpi_add_abs>
 800f48c:	6178      	str	r0, [r7, #20]
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d000      	beq.n	800f496 <mbedtls_mpi_add_mpi+0x7e>
 800f494:	e002      	b.n	800f49c <mbedtls_mpi_add_mpi+0x84>
        X->s = s;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	693a      	ldr	r2, [r7, #16]
 800f49a:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 800f49c:	697b      	ldr	r3, [r7, #20]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3718      	adds	r7, #24
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop

0800f4a8 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	613b      	str	r3, [r7, #16]
    if( A->s * B->s > 0 )
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	6812      	ldr	r2, [r2, #0]
 800f4c2:	fb02 f303 	mul.w	r3, r2, r3
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	dd23      	ble.n	800f512 <mbedtls_mpi_sub_mpi+0x6a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800f4ca:	68b8      	ldr	r0, [r7, #8]
 800f4cc:	6879      	ldr	r1, [r7, #4]
 800f4ce:	f7ff fcfb 	bl	800eec8 <mbedtls_mpi_cmp_abs>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	db0d      	blt.n	800f4f4 <mbedtls_mpi_sub_mpi+0x4c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800f4d8:	68f8      	ldr	r0, [r7, #12]
 800f4da:	68b9      	ldr	r1, [r7, #8]
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	f7ff ff39 	bl	800f354 <mbedtls_mpi_sub_abs>
 800f4e2:	6178      	str	r0, [r7, #20]
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d000      	beq.n	800f4ec <mbedtls_mpi_sub_mpi+0x44>
 800f4ea:	e01f      	b.n	800f52c <mbedtls_mpi_sub_mpi+0x84>
            X->s =  s;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	693a      	ldr	r2, [r7, #16]
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	e01b      	b.n	800f52c <mbedtls_mpi_sub_mpi+0x84>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	6879      	ldr	r1, [r7, #4]
 800f4f8:	68ba      	ldr	r2, [r7, #8]
 800f4fa:	f7ff ff2b 	bl	800f354 <mbedtls_mpi_sub_abs>
 800f4fe:	6178      	str	r0, [r7, #20]
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d000      	beq.n	800f508 <mbedtls_mpi_sub_mpi+0x60>
 800f506:	e011      	b.n	800f52c <mbedtls_mpi_sub_mpi+0x84>
            X->s = -s;
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	425a      	negs	r2, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	601a      	str	r2, [r3, #0]
 800f510:	e00c      	b.n	800f52c <mbedtls_mpi_sub_mpi+0x84>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	68b9      	ldr	r1, [r7, #8]
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	f7ff fe14 	bl	800f144 <mbedtls_mpi_add_abs>
 800f51c:	6178      	str	r0, [r7, #20]
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d000      	beq.n	800f526 <mbedtls_mpi_sub_mpi+0x7e>
 800f524:	e002      	b.n	800f52c <mbedtls_mpi_sub_mpi+0x84>
        X->s = s;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	693a      	ldr	r2, [r7, #16]
 800f52a:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 800f52c:	697b      	ldr	r3, [r7, #20]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3718      	adds	r7, #24
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop

0800f538 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b088      	sub	sp, #32
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	bfb8      	it	lt
 800f54a:	425b      	neglt	r3, r3
 800f54c:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2b00      	cmp	r3, #0
 800f552:	da02      	bge.n	800f55a <mbedtls_mpi_add_int+0x22>
 800f554:	f04f 33ff 	mov.w	r3, #4294967295
 800f558:	e000      	b.n	800f55c <mbedtls_mpi_add_int+0x24>
 800f55a:	2301      	movs	r3, #1
 800f55c:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800f55e:	2301      	movs	r3, #1
 800f560:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800f562:	f107 0310 	add.w	r3, r7, #16
 800f566:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 800f568:	f107 0314 	add.w	r3, r7, #20
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	68b9      	ldr	r1, [r7, #8]
 800f570:	461a      	mov	r2, r3
 800f572:	f7ff ff51 	bl	800f418 <mbedtls_mpi_add_mpi>
 800f576:	4603      	mov	r3, r0
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3720      	adds	r7, #32
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b088      	sub	sp, #32
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	bfb8      	it	lt
 800f592:	425b      	neglt	r3, r3
 800f594:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	da02      	bge.n	800f5a2 <mbedtls_mpi_sub_int+0x22>
 800f59c:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a0:	e000      	b.n	800f5a4 <mbedtls_mpi_sub_int+0x24>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800f5aa:	f107 0310 	add.w	r3, r7, #16
 800f5ae:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800f5b0:	f107 0314 	add.w	r3, r7, #20
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	68b9      	ldr	r1, [r7, #8]
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	f7ff ff75 	bl	800f4a8 <mbedtls_mpi_sub_mpi>
 800f5be:	4603      	mov	r3, r0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3720      	adds	r7, #32
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800f5c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f5cc:	b0c1      	sub	sp, #260	; 0x104
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800f5d4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f5d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f5dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    mbedtls_mpi_uint c = 0, t = 0;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800f5ec:	f000 be38 	b.w	8010260 <mpi_mul_hlp+0xc98>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 800f5f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f5f4:	1d13      	adds	r3, r2, #4
 800f5f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f5fa:	6813      	ldr	r3, [r2, #0]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f04f 0100 	mov.w	r1, #0
 800f602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f606:	461a      	mov	r2, r3
 800f608:	f04f 0300 	mov.w	r3, #0
 800f60c:	fb02 f501 	mul.w	r5, r2, r1
 800f610:	fb00 f403 	mul.w	r4, r0, r3
 800f614:	442c      	add	r4, r5
 800f616:	fba0 2302 	umull	r2, r3, r0, r2
 800f61a:	18e1      	adds	r1, r4, r3
 800f61c:	460b      	mov	r3, r1
 800f61e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f622:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f626:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f62a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f62e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800f632:	001b      	movs	r3, r3
 800f634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f638:	2300      	movs	r3, #0
 800f63a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f63e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f646:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f64a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f64e:	4413      	add	r3, r2
 800f650:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f654:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f65c:	429a      	cmp	r2, r3
 800f65e:	bf34      	ite	cc
 800f660:	2301      	movcc	r3, #1
 800f662:	2300      	movcs	r3, #0
 800f664:	b2db      	uxtb	r3, r3
 800f666:	461a      	mov	r2, r3
 800f668:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f66c:	4413      	add	r3, r2
 800f66e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f672:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f67c:	4413      	add	r3, r2
 800f67e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f68c:	429a      	cmp	r2, r3
 800f68e:	bf8c      	ite	hi
 800f690:	2301      	movhi	r3, #1
 800f692:	2300      	movls	r3, #0
 800f694:	b2db      	uxtb	r3, r3
 800f696:	461a      	mov	r2, r3
 800f698:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f69c:	4413      	add	r3, r2
 800f69e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f6a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f6a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f6aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f6ae:	1d13      	adds	r3, r2, #4
 800f6b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f6b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f6b8:	6013      	str	r3, [r2, #0]
 800f6ba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f6be:	1d13      	adds	r3, r2, #4
 800f6c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f6c4:	6813      	ldr	r3, [r2, #0]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f04f 0100 	mov.w	r1, #0
 800f6cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	f04f 0300 	mov.w	r3, #0
 800f6d6:	fb02 f501 	mul.w	r5, r2, r1
 800f6da:	fb00 f403 	mul.w	r4, r0, r3
 800f6de:	442c      	add	r4, r5
 800f6e0:	fba0 2302 	umull	r2, r3, r0, r2
 800f6e4:	18e1      	adds	r1, r4, r3
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f6ec:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f6f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f6f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f6f8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800f6fc:	001b      	movs	r3, r3
 800f6fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f702:	2300      	movs	r3, #0
 800f704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f70c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f710:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f718:	4413      	add	r3, r2
 800f71a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f71e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f726:	429a      	cmp	r2, r3
 800f728:	bf34      	ite	cc
 800f72a:	2301      	movcc	r3, #1
 800f72c:	2300      	movcs	r3, #0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	461a      	mov	r2, r3
 800f732:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f736:	4413      	add	r3, r2
 800f738:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f73c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f746:	4413      	add	r3, r2
 800f748:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f74c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f756:	429a      	cmp	r2, r3
 800f758:	bf8c      	ite	hi
 800f75a:	2301      	movhi	r3, #1
 800f75c:	2300      	movls	r3, #0
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	461a      	mov	r2, r3
 800f762:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f766:	4413      	add	r3, r2
 800f768:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f76c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f770:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f774:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f778:	1d13      	adds	r3, r2, #4
 800f77a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f77e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f782:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 800f784:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f788:	1d13      	adds	r3, r2, #4
 800f78a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f78e:	6813      	ldr	r3, [r2, #0]
 800f790:	4618      	mov	r0, r3
 800f792:	f04f 0100 	mov.w	r1, #0
 800f796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f79a:	461a      	mov	r2, r3
 800f79c:	f04f 0300 	mov.w	r3, #0
 800f7a0:	fb02 f501 	mul.w	r5, r2, r1
 800f7a4:	fb00 f403 	mul.w	r4, r0, r3
 800f7a8:	442c      	add	r4, r5
 800f7aa:	fba0 2302 	umull	r2, r3, r0, r2
 800f7ae:	18e1      	adds	r1, r4, r3
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f7b6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f7ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f7be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f7c2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800f7c6:	001b      	movs	r3, r3
 800f7c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f7d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f7da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f7de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f7e2:	4413      	add	r3, r2
 800f7e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f7e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f7ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	bf34      	ite	cc
 800f7f4:	2301      	movcc	r3, #1
 800f7f6:	2300      	movcs	r3, #0
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f800:	4413      	add	r3, r2
 800f802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f810:	4413      	add	r3, r2
 800f812:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f816:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f820:	429a      	cmp	r2, r3
 800f822:	bf8c      	ite	hi
 800f824:	2301      	movhi	r3, #1
 800f826:	2300      	movls	r3, #0
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	461a      	mov	r2, r3
 800f82c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f830:	4413      	add	r3, r2
 800f832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f836:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f83a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f83e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f842:	1d13      	adds	r3, r2, #4
 800f844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f848:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f852:	1d13      	adds	r3, r2, #4
 800f854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f858:	6813      	ldr	r3, [r2, #0]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f04f 0100 	mov.w	r1, #0
 800f860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f864:	461a      	mov	r2, r3
 800f866:	f04f 0300 	mov.w	r3, #0
 800f86a:	fb02 f501 	mul.w	r5, r2, r1
 800f86e:	fb00 f403 	mul.w	r4, r0, r3
 800f872:	442c      	add	r4, r5
 800f874:	fba0 2302 	umull	r2, r3, r0, r2
 800f878:	18e1      	adds	r1, r4, r3
 800f87a:	460b      	mov	r3, r1
 800f87c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f880:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f884:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f888:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f88c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800f890:	001b      	movs	r3, r3
 800f892:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f896:	2300      	movs	r3, #0
 800f898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f89c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f8a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f8a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f8a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f8b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f8b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	bf34      	ite	cc
 800f8be:	2301      	movcc	r3, #1
 800f8c0:	2300      	movcs	r3, #0
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f8ca:	4413      	add	r3, r2
 800f8cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f8d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f8da:	4413      	add	r3, r2
 800f8dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f8e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	bf8c      	ite	hi
 800f8ee:	2301      	movhi	r3, #1
 800f8f0:	2300      	movls	r3, #0
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f8fa:	4413      	add	r3, r2
 800f8fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f900:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f904:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f908:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f90c:	1d13      	adds	r3, r2, #4
 800f90e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f916:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 800f918:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f91c:	1d13      	adds	r3, r2, #4
 800f91e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f922:	6813      	ldr	r3, [r2, #0]
 800f924:	4618      	mov	r0, r3
 800f926:	f04f 0100 	mov.w	r1, #0
 800f92a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f92e:	461a      	mov	r2, r3
 800f930:	f04f 0300 	mov.w	r3, #0
 800f934:	fb02 f501 	mul.w	r5, r2, r1
 800f938:	fb00 f403 	mul.w	r4, r0, r3
 800f93c:	442c      	add	r4, r5
 800f93e:	fba0 2302 	umull	r2, r3, r0, r2
 800f942:	18e1      	adds	r1, r4, r3
 800f944:	460b      	mov	r3, r1
 800f946:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f94a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f94e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f952:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f956:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800f95a:	001b      	movs	r3, r3
 800f95c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f960:	2300      	movs	r3, #0
 800f962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f96a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f96e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f976:	4413      	add	r3, r2
 800f978:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f97c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f984:	429a      	cmp	r2, r3
 800f986:	bf34      	ite	cc
 800f988:	2301      	movcc	r3, #1
 800f98a:	2300      	movcs	r3, #0
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	461a      	mov	r2, r3
 800f990:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f994:	4413      	add	r3, r2
 800f996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f99a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9a4:	4413      	add	r3, r2
 800f9a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f9aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	bf8c      	ite	hi
 800f9b8:	2301      	movhi	r3, #1
 800f9ba:	2300      	movls	r3, #0
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	461a      	mov	r2, r3
 800f9c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f9c4:	4413      	add	r3, r2
 800f9c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f9ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f9ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f9d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f9d6:	1d13      	adds	r3, r2, #4
 800f9d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f9dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9e0:	6013      	str	r3, [r2, #0]
 800f9e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f9e6:	1d13      	adds	r3, r2, #4
 800f9e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f9ec:	6813      	ldr	r3, [r2, #0]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f04f 0100 	mov.w	r1, #0
 800f9f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	f04f 0300 	mov.w	r3, #0
 800f9fe:	fb02 f501 	mul.w	r5, r2, r1
 800fa02:	fb00 f403 	mul.w	r4, r0, r3
 800fa06:	442c      	add	r4, r5
 800fa08:	fba0 2302 	umull	r2, r3, r0, r2
 800fa0c:	18e1      	adds	r1, r4, r3
 800fa0e:	460b      	mov	r3, r1
 800fa10:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fa14:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fa18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fa1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fa20:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fa24:	001b      	movs	r3, r3
 800fa26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fa30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fa38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fa3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa40:	4413      	add	r3, r2
 800fa42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fa46:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fa4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	bf34      	ite	cc
 800fa52:	2301      	movcc	r3, #1
 800fa54:	2300      	movcs	r3, #0
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	461a      	mov	r2, r3
 800fa5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fa5e:	4413      	add	r3, r2
 800fa60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fa64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa6e:	4413      	add	r3, r2
 800fa70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fa74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	bf8c      	ite	hi
 800fa82:	2301      	movhi	r3, #1
 800fa84:	2300      	movls	r3, #0
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	461a      	mov	r2, r3
 800fa8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fa8e:	4413      	add	r3, r2
 800fa90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fa94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fa98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800faa0:	1d13      	adds	r3, r2, #4
 800faa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800faa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800faaa:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 800faac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fab0:	1d13      	adds	r3, r2, #4
 800fab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fab6:	6813      	ldr	r3, [r2, #0]
 800fab8:	4618      	mov	r0, r3
 800faba:	f04f 0100 	mov.w	r1, #0
 800fabe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fac2:	461a      	mov	r2, r3
 800fac4:	f04f 0300 	mov.w	r3, #0
 800fac8:	fb02 f501 	mul.w	r5, r2, r1
 800facc:	fb00 f403 	mul.w	r4, r0, r3
 800fad0:	442c      	add	r4, r5
 800fad2:	fba0 2302 	umull	r2, r3, r0, r2
 800fad6:	18e1      	adds	r1, r4, r3
 800fad8:	460b      	mov	r3, r1
 800fada:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fade:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fae2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fae6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800faea:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800faee:	001b      	movs	r3, r3
 800faf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800faf4:	2300      	movs	r3, #0
 800faf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fafa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fafe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fb02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fb06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fb0a:	4413      	add	r3, r2
 800fb0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fb10:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fb14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	bf34      	ite	cc
 800fb1c:	2301      	movcc	r3, #1
 800fb1e:	2300      	movcs	r3, #0
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	461a      	mov	r2, r3
 800fb24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb28:	4413      	add	r3, r2
 800fb2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fb2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb38:	4413      	add	r3, r2
 800fb3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fb3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	bf8c      	ite	hi
 800fb4c:	2301      	movhi	r3, #1
 800fb4e:	2300      	movls	r3, #0
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	461a      	mov	r2, r3
 800fb54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb58:	4413      	add	r3, r2
 800fb5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fb5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fb66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fb6a:	1d13      	adds	r3, r2, #4
 800fb6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fb70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb74:	6013      	str	r3, [r2, #0]
 800fb76:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fb7a:	1d13      	adds	r3, r2, #4
 800fb7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fb80:	6813      	ldr	r3, [r2, #0]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f04f 0100 	mov.w	r1, #0
 800fb88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	f04f 0300 	mov.w	r3, #0
 800fb92:	fb02 f501 	mul.w	r5, r2, r1
 800fb96:	fb00 f403 	mul.w	r4, r0, r3
 800fb9a:	442c      	add	r4, r5
 800fb9c:	fba0 2302 	umull	r2, r3, r0, r2
 800fba0:	18e1      	adds	r1, r4, r3
 800fba2:	460b      	mov	r3, r1
 800fba4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fba8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fbac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fbb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fbb4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fbb8:	001b      	movs	r3, r3
 800fbba:	67bb      	str	r3, [r7, #120]	; 0x78
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fbc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fbc6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fbca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fbce:	4413      	add	r3, r2
 800fbd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fbd4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fbd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	bf34      	ite	cc
 800fbe0:	2301      	movcc	r3, #1
 800fbe2:	2300      	movcs	r3, #0
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fbec:	4413      	add	r3, r2
 800fbee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fbf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fbfc:	4413      	add	r3, r2
 800fbfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fc02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	bf8c      	ite	hi
 800fc10:	2301      	movhi	r3, #1
 800fc12:	2300      	movls	r3, #0
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	461a      	mov	r2, r3
 800fc18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fc1c:	4413      	add	r3, r2
 800fc1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fc22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fc26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fc2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fc2e:	1d13      	adds	r3, r2, #4
 800fc30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fc34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fc38:	6013      	str	r3, [r2, #0]

        MULADDC_CORE   MULADDC_CORE
 800fc3a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fc3e:	1d13      	adds	r3, r2, #4
 800fc40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fc44:	6813      	ldr	r3, [r2, #0]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f04f 0100 	mov.w	r1, #0
 800fc4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fc50:	461a      	mov	r2, r3
 800fc52:	f04f 0300 	mov.w	r3, #0
 800fc56:	fb02 f501 	mul.w	r5, r2, r1
 800fc5a:	fb00 f403 	mul.w	r4, r0, r3
 800fc5e:	442c      	add	r4, r5
 800fc60:	fba0 2302 	umull	r2, r3, r0, r2
 800fc64:	18e1      	adds	r1, r4, r3
 800fc66:	460b      	mov	r3, r1
 800fc68:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fc6c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fc70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fc74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fc78:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fc7c:	001b      	movs	r3, r3
 800fc7e:	673b      	str	r3, [r7, #112]	; 0x70
 800fc80:	2300      	movs	r3, #0
 800fc82:	677b      	str	r3, [r7, #116]	; 0x74
 800fc84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fc8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fc8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fc92:	4413      	add	r3, r2
 800fc94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fc98:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fc9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fca0:	429a      	cmp	r2, r3
 800fca2:	bf34      	ite	cc
 800fca4:	2301      	movcc	r3, #1
 800fca6:	2300      	movcs	r3, #0
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	461a      	mov	r2, r3
 800fcac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fcb0:	4413      	add	r3, r2
 800fcb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fcb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fcc0:	4413      	add	r3, r2
 800fcc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fcc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	bf8c      	ite	hi
 800fcd4:	2301      	movhi	r3, #1
 800fcd6:	2300      	movls	r3, #0
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	461a      	mov	r2, r3
 800fcdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fce0:	4413      	add	r3, r2
 800fce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fce6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fcea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fcee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fcf2:	1d13      	adds	r3, r2, #4
 800fcf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fcf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fcfc:	6013      	str	r3, [r2, #0]
 800fcfe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fd02:	1d13      	adds	r3, r2, #4
 800fd04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fd08:	6813      	ldr	r3, [r2, #0]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f04f 0100 	mov.w	r1, #0
 800fd10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fd14:	461a      	mov	r2, r3
 800fd16:	f04f 0300 	mov.w	r3, #0
 800fd1a:	fb02 f501 	mul.w	r5, r2, r1
 800fd1e:	fb00 f403 	mul.w	r4, r0, r3
 800fd22:	442c      	add	r4, r5
 800fd24:	fba0 2302 	umull	r2, r3, r0, r2
 800fd28:	18e1      	adds	r1, r4, r3
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fd30:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fd34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fd38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fd3c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fd40:	001b      	movs	r3, r3
 800fd42:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd44:	2300      	movs	r3, #0
 800fd46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fd48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fd4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fd52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd56:	4413      	add	r3, r2
 800fd58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fd5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fd60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd64:	429a      	cmp	r2, r3
 800fd66:	bf34      	ite	cc
 800fd68:	2301      	movcc	r3, #1
 800fd6a:	2300      	movcs	r3, #0
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	461a      	mov	r2, r3
 800fd70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd74:	4413      	add	r3, r2
 800fd76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fd7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fd84:	4413      	add	r3, r2
 800fd86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fd8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fd94:	429a      	cmp	r2, r3
 800fd96:	bf8c      	ite	hi
 800fd98:	2301      	movhi	r3, #1
 800fd9a:	2300      	movls	r3, #0
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	461a      	mov	r2, r3
 800fda0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fda4:	4413      	add	r3, r2
 800fda6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fdaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fdae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fdb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fdb6:	1d13      	adds	r3, r2, #4
 800fdb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fdbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fdc0:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 800fdc2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fdc6:	1d13      	adds	r3, r2, #4
 800fdc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fdcc:	6813      	ldr	r3, [r2, #0]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f04f 0100 	mov.w	r1, #0
 800fdd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fdd8:	461a      	mov	r2, r3
 800fdda:	f04f 0300 	mov.w	r3, #0
 800fdde:	fb02 f501 	mul.w	r5, r2, r1
 800fde2:	fb00 f403 	mul.w	r4, r0, r3
 800fde6:	442c      	add	r4, r5
 800fde8:	fba0 2302 	umull	r2, r3, r0, r2
 800fdec:	18e1      	adds	r1, r4, r3
 800fdee:	460b      	mov	r3, r1
 800fdf0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fdf4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fdf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fdfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fe00:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fe04:	001b      	movs	r3, r3
 800fe06:	663b      	str	r3, [r7, #96]	; 0x60
 800fe08:	2300      	movs	r3, #0
 800fe0a:	667b      	str	r3, [r7, #100]	; 0x64
 800fe0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe12:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fe16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fe1a:	4413      	add	r3, r2
 800fe1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fe20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fe24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	bf34      	ite	cc
 800fe2c:	2301      	movcc	r3, #1
 800fe2e:	2300      	movcs	r3, #0
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	461a      	mov	r2, r3
 800fe34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe38:	4413      	add	r3, r2
 800fe3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fe48:	4413      	add	r3, r2
 800fe4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fe4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	bf8c      	ite	hi
 800fe5c:	2301      	movhi	r3, #1
 800fe5e:	2300      	movls	r3, #0
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	461a      	mov	r2, r3
 800fe64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe68:	4413      	add	r3, r2
 800fe6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fe76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fe7a:	1d13      	adds	r3, r2, #4
 800fe7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fe80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800fe8a:	1d13      	adds	r3, r2, #4
 800fe8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fe90:	6813      	ldr	r3, [r2, #0]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f04f 0100 	mov.w	r1, #0
 800fe98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	f04f 0300 	mov.w	r3, #0
 800fea2:	fb02 f501 	mul.w	r5, r2, r1
 800fea6:	fb00 f403 	mul.w	r4, r0, r3
 800feaa:	442c      	add	r4, r5
 800feac:	fba0 2302 	umull	r2, r3, r0, r2
 800feb0:	18e1      	adds	r1, r4, r3
 800feb2:	460b      	mov	r3, r1
 800feb4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800feb8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800febc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fec0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fec4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fec8:	001b      	movs	r3, r3
 800feca:	65bb      	str	r3, [r7, #88]	; 0x58
 800fecc:	2300      	movs	r3, #0
 800fece:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fed2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fed6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800feda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fede:	4413      	add	r3, r2
 800fee0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fee4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800feec:	429a      	cmp	r2, r3
 800feee:	bf34      	ite	cc
 800fef0:	2301      	movcc	r3, #1
 800fef2:	2300      	movcs	r3, #0
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	461a      	mov	r2, r3
 800fef8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fefc:	4413      	add	r3, r2
 800fefe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ff02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ff0c:	4413      	add	r3, r2
 800ff0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ff12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	bf8c      	ite	hi
 800ff20:	2301      	movhi	r3, #1
 800ff22:	2300      	movls	r3, #0
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	461a      	mov	r2, r3
 800ff28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ff2c:	4413      	add	r3, r2
 800ff2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ff32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ff36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ff3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ff3e:	1d13      	adds	r3, r2, #4
 800ff40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ff44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ff48:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 800ff4a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ff4e:	1d13      	adds	r3, r2, #4
 800ff50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ff54:	6813      	ldr	r3, [r2, #0]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f04f 0100 	mov.w	r1, #0
 800ff5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ff60:	461a      	mov	r2, r3
 800ff62:	f04f 0300 	mov.w	r3, #0
 800ff66:	fb02 f501 	mul.w	r5, r2, r1
 800ff6a:	fb00 f403 	mul.w	r4, r0, r3
 800ff6e:	442c      	add	r4, r5
 800ff70:	fba0 2302 	umull	r2, r3, r0, r2
 800ff74:	18e1      	adds	r1, r4, r3
 800ff76:	460b      	mov	r3, r1
 800ff78:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800ff7c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800ff80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ff84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ff88:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800ff8c:	001b      	movs	r3, r3
 800ff8e:	653b      	str	r3, [r7, #80]	; 0x50
 800ff90:	2300      	movs	r3, #0
 800ff92:	657b      	str	r3, [r7, #84]	; 0x54
 800ff94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ff9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ff9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ffa8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ffac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	bf34      	ite	cc
 800ffb4:	2301      	movcc	r3, #1
 800ffb6:	2300      	movcs	r3, #0
 800ffb8:	b2db      	uxtb	r3, r3
 800ffba:	461a      	mov	r2, r3
 800ffbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ffc0:	4413      	add	r3, r2
 800ffc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ffc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ffd0:	4413      	add	r3, r2
 800ffd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ffd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	bf8c      	ite	hi
 800ffe4:	2301      	movhi	r3, #1
 800ffe6:	2300      	movls	r3, #0
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	461a      	mov	r2, r3
 800ffec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fff0:	4413      	add	r3, r2
 800fff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fffa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fffe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010002:	1d13      	adds	r3, r2, #4
 8010004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010008:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801000c:	6013      	str	r3, [r2, #0]
 801000e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010012:	1d13      	adds	r3, r2, #4
 8010014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010018:	6813      	ldr	r3, [r2, #0]
 801001a:	4618      	mov	r0, r3
 801001c:	f04f 0100 	mov.w	r1, #0
 8010020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010024:	461a      	mov	r2, r3
 8010026:	f04f 0300 	mov.w	r3, #0
 801002a:	fb02 f501 	mul.w	r5, r2, r1
 801002e:	fb00 f403 	mul.w	r4, r0, r3
 8010032:	442c      	add	r4, r5
 8010034:	fba0 2302 	umull	r2, r3, r0, r2
 8010038:	18e1      	adds	r1, r4, r3
 801003a:	460b      	mov	r3, r1
 801003c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8010040:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8010044:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010048:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801004c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8010050:	001b      	movs	r3, r3
 8010052:	64bb      	str	r3, [r7, #72]	; 0x48
 8010054:	2300      	movs	r3, #0
 8010056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801005a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801005e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010066:	4413      	add	r3, r2
 8010068:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801006c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010074:	429a      	cmp	r2, r3
 8010076:	bf34      	ite	cc
 8010078:	2301      	movcc	r3, #1
 801007a:	2300      	movcs	r3, #0
 801007c:	b2db      	uxtb	r3, r3
 801007e:	461a      	mov	r2, r3
 8010080:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010084:	4413      	add	r3, r2
 8010086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801008a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010094:	4413      	add	r3, r2
 8010096:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801009a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80100a4:	429a      	cmp	r2, r3
 80100a6:	bf8c      	ite	hi
 80100a8:	2301      	movhi	r3, #1
 80100aa:	2300      	movls	r3, #0
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	461a      	mov	r2, r3
 80100b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80100b4:	4413      	add	r3, r2
 80100b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80100ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80100be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80100c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80100c6:	1d13      	adds	r3, r2, #4
 80100c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80100cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80100d0:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 80100d2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80100d6:	1d13      	adds	r3, r2, #4
 80100d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80100dc:	6813      	ldr	r3, [r2, #0]
 80100de:	4618      	mov	r0, r3
 80100e0:	f04f 0100 	mov.w	r1, #0
 80100e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80100e8:	461a      	mov	r2, r3
 80100ea:	f04f 0300 	mov.w	r3, #0
 80100ee:	fb02 f501 	mul.w	r5, r2, r1
 80100f2:	fb00 f403 	mul.w	r4, r0, r3
 80100f6:	442c      	add	r4, r5
 80100f8:	fba0 2302 	umull	r2, r3, r0, r2
 80100fc:	18e1      	adds	r1, r4, r3
 80100fe:	460b      	mov	r3, r1
 8010100:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8010104:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8010108:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801010c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010110:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8010114:	469a      	mov	sl, r3
 8010116:	f04f 0b00 	mov.w	fp, #0
 801011a:	4653      	mov	r3, sl
 801011c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010120:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010128:	4413      	add	r3, r2
 801012a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801012e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010136:	429a      	cmp	r2, r3
 8010138:	bf34      	ite	cc
 801013a:	2301      	movcc	r3, #1
 801013c:	2300      	movcs	r3, #0
 801013e:	b2db      	uxtb	r3, r3
 8010140:	461a      	mov	r2, r3
 8010142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010146:	4413      	add	r3, r2
 8010148:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801014c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010156:	4413      	add	r3, r2
 8010158:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801015c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010166:	429a      	cmp	r2, r3
 8010168:	bf8c      	ite	hi
 801016a:	2301      	movhi	r3, #1
 801016c:	2300      	movls	r3, #0
 801016e:	b2db      	uxtb	r3, r3
 8010170:	461a      	mov	r2, r3
 8010172:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010176:	4413      	add	r3, r2
 8010178:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801017c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010180:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010184:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010188:	1d13      	adds	r3, r2, #4
 801018a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801018e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010192:	6013      	str	r3, [r2, #0]
 8010194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010198:	1d13      	adds	r3, r2, #4
 801019a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801019e:	6813      	ldr	r3, [r2, #0]
 80101a0:	4618      	mov	r0, r3
 80101a2:	f04f 0100 	mov.w	r1, #0
 80101a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80101aa:	461a      	mov	r2, r3
 80101ac:	f04f 0300 	mov.w	r3, #0
 80101b0:	fb02 f501 	mul.w	r5, r2, r1
 80101b4:	fb00 f403 	mul.w	r4, r0, r3
 80101b8:	442c      	add	r4, r5
 80101ba:	fba0 2302 	umull	r2, r3, r0, r2
 80101be:	18e1      	adds	r1, r4, r3
 80101c0:	460b      	mov	r3, r1
 80101c2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80101c6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80101ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80101ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80101d2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80101d6:	4698      	mov	r8, r3
 80101d8:	f04f 0900 	mov.w	r9, #0
 80101dc:	4643      	mov	r3, r8
 80101de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80101e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80101e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80101ea:	4413      	add	r3, r2
 80101ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80101f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80101f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80101f8:	429a      	cmp	r2, r3
 80101fa:	bf34      	ite	cc
 80101fc:	2301      	movcc	r3, #1
 80101fe:	2300      	movcs	r3, #0
 8010200:	b2db      	uxtb	r3, r3
 8010202:	461a      	mov	r2, r3
 8010204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010208:	4413      	add	r3, r2
 801020a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801020e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010218:	4413      	add	r3, r2
 801021a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801021e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010228:	429a      	cmp	r2, r3
 801022a:	bf8c      	ite	hi
 801022c:	2301      	movhi	r3, #1
 801022e:	2300      	movls	r3, #0
 8010230:	b2db      	uxtb	r3, r3
 8010232:	461a      	mov	r2, r3
 8010234:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010238:	4413      	add	r3, r2
 801023a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801023e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010242:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010246:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801024a:	1d13      	adds	r3, r2, #4
 801024c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010250:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010254:	6013      	str	r3, [r2, #0]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8010256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801025a:	3b10      	subs	r3, #16
 801025c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010264:	2b0f      	cmp	r3, #15
 8010266:	f63f a9c3 	bhi.w	800f5f0 <mpi_mul_hlp+0x28>
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 801026a:	e314      	b.n	8010896 <mpi_mul_hlp+0x12ce>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 801026c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010270:	1d13      	adds	r3, r2, #4
 8010272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010276:	6813      	ldr	r3, [r2, #0]
 8010278:	4618      	mov	r0, r3
 801027a:	f04f 0100 	mov.w	r1, #0
 801027e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010282:	461a      	mov	r2, r3
 8010284:	f04f 0300 	mov.w	r3, #0
 8010288:	fb02 f501 	mul.w	r5, r2, r1
 801028c:	fb00 f403 	mul.w	r4, r0, r3
 8010290:	442c      	add	r4, r5
 8010292:	fba0 2302 	umull	r2, r3, r0, r2
 8010296:	18e1      	adds	r1, r4, r3
 8010298:	460b      	mov	r3, r1
 801029a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 801029e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 80102a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80102aa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80102ae:	001b      	movs	r3, r3
 80102b0:	643b      	str	r3, [r7, #64]	; 0x40
 80102b2:	2300      	movs	r3, #0
 80102b4:	647b      	str	r3, [r7, #68]	; 0x44
 80102b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80102bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80102c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102c4:	4413      	add	r3, r2
 80102c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80102ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80102ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102d2:	429a      	cmp	r2, r3
 80102d4:	bf34      	ite	cc
 80102d6:	2301      	movcc	r3, #1
 80102d8:	2300      	movcs	r3, #0
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	461a      	mov	r2, r3
 80102de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102e2:	4413      	add	r3, r2
 80102e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80102e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102f2:	4413      	add	r3, r2
 80102f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80102f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010302:	429a      	cmp	r2, r3
 8010304:	bf8c      	ite	hi
 8010306:	2301      	movhi	r3, #1
 8010308:	2300      	movls	r3, #0
 801030a:	b2db      	uxtb	r3, r3
 801030c:	461a      	mov	r2, r3
 801030e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010312:	4413      	add	r3, r2
 8010314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801031c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010320:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010324:	1d13      	adds	r3, r2, #4
 8010326:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801032a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801032e:	6013      	str	r3, [r2, #0]
 8010330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010334:	1d13      	adds	r3, r2, #4
 8010336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801033a:	6813      	ldr	r3, [r2, #0]
 801033c:	4618      	mov	r0, r3
 801033e:	f04f 0100 	mov.w	r1, #0
 8010342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010346:	461a      	mov	r2, r3
 8010348:	f04f 0300 	mov.w	r3, #0
 801034c:	fb02 f501 	mul.w	r5, r2, r1
 8010350:	fb00 f403 	mul.w	r4, r0, r3
 8010354:	442c      	add	r4, r5
 8010356:	fba0 2302 	umull	r2, r3, r0, r2
 801035a:	18e1      	adds	r1, r4, r3
 801035c:	460b      	mov	r3, r1
 801035e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8010362:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8010366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801036a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801036e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8010372:	001b      	movs	r3, r3
 8010374:	63bb      	str	r3, [r7, #56]	; 0x38
 8010376:	2300      	movs	r3, #0
 8010378:	63fb      	str	r3, [r7, #60]	; 0x3c
 801037a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010380:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010388:	4413      	add	r3, r2
 801038a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801038e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010396:	429a      	cmp	r2, r3
 8010398:	bf34      	ite	cc
 801039a:	2301      	movcc	r3, #1
 801039c:	2300      	movcs	r3, #0
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	461a      	mov	r2, r3
 80103a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80103a6:	4413      	add	r3, r2
 80103a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80103ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103b6:	4413      	add	r3, r2
 80103b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80103bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103c6:	429a      	cmp	r2, r3
 80103c8:	bf8c      	ite	hi
 80103ca:	2301      	movhi	r3, #1
 80103cc:	2300      	movls	r3, #0
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	461a      	mov	r2, r3
 80103d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80103d6:	4413      	add	r3, r2
 80103d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80103dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80103e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80103e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80103e8:	1d13      	adds	r3, r2, #4
 80103ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80103ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103f2:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 80103f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80103f8:	1d13      	adds	r3, r2, #4
 80103fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80103fe:	6813      	ldr	r3, [r2, #0]
 8010400:	4618      	mov	r0, r3
 8010402:	f04f 0100 	mov.w	r1, #0
 8010406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801040a:	461a      	mov	r2, r3
 801040c:	f04f 0300 	mov.w	r3, #0
 8010410:	fb02 f501 	mul.w	r5, r2, r1
 8010414:	fb00 f403 	mul.w	r4, r0, r3
 8010418:	442c      	add	r4, r5
 801041a:	fba0 2302 	umull	r2, r3, r0, r2
 801041e:	18e1      	adds	r1, r4, r3
 8010420:	460b      	mov	r3, r1
 8010422:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8010426:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 801042a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801042e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010432:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8010436:	001b      	movs	r3, r3
 8010438:	633b      	str	r3, [r7, #48]	; 0x30
 801043a:	2300      	movs	r3, #0
 801043c:	637b      	str	r3, [r7, #52]	; 0x34
 801043e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010444:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801044c:	4413      	add	r3, r2
 801044e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010452:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801045a:	429a      	cmp	r2, r3
 801045c:	bf34      	ite	cc
 801045e:	2301      	movcc	r3, #1
 8010460:	2300      	movcs	r3, #0
 8010462:	b2db      	uxtb	r3, r3
 8010464:	461a      	mov	r2, r3
 8010466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801046a:	4413      	add	r3, r2
 801046c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801047a:	4413      	add	r3, r2
 801047c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801048a:	429a      	cmp	r2, r3
 801048c:	bf8c      	ite	hi
 801048e:	2301      	movhi	r3, #1
 8010490:	2300      	movls	r3, #0
 8010492:	b2db      	uxtb	r3, r3
 8010494:	461a      	mov	r2, r3
 8010496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801049a:	4413      	add	r3, r2
 801049c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80104a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80104a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80104a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80104ac:	1d13      	adds	r3, r2, #4
 80104ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80104b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104b6:	6013      	str	r3, [r2, #0]
 80104b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80104bc:	1d13      	adds	r3, r2, #4
 80104be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80104c2:	6813      	ldr	r3, [r2, #0]
 80104c4:	4618      	mov	r0, r3
 80104c6:	f04f 0100 	mov.w	r1, #0
 80104ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80104ce:	461a      	mov	r2, r3
 80104d0:	f04f 0300 	mov.w	r3, #0
 80104d4:	fb02 f501 	mul.w	r5, r2, r1
 80104d8:	fb00 f403 	mul.w	r4, r0, r3
 80104dc:	442c      	add	r4, r5
 80104de:	fba0 2302 	umull	r2, r3, r0, r2
 80104e2:	18e1      	adds	r1, r4, r3
 80104e4:	460b      	mov	r3, r1
 80104e6:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 80104ea:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 80104ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80104f6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80104fa:	001b      	movs	r3, r3
 80104fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80104fe:	2300      	movs	r3, #0
 8010500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010508:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801050c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010510:	4413      	add	r3, r2
 8010512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010516:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801051a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801051e:	429a      	cmp	r2, r3
 8010520:	bf34      	ite	cc
 8010522:	2301      	movcc	r3, #1
 8010524:	2300      	movcs	r3, #0
 8010526:	b2db      	uxtb	r3, r3
 8010528:	461a      	mov	r2, r3
 801052a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801052e:	4413      	add	r3, r2
 8010530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801053e:	4413      	add	r3, r2
 8010540:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801054e:	429a      	cmp	r2, r3
 8010550:	bf8c      	ite	hi
 8010552:	2301      	movhi	r3, #1
 8010554:	2300      	movls	r3, #0
 8010556:	b2db      	uxtb	r3, r3
 8010558:	461a      	mov	r2, r3
 801055a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801055e:	4413      	add	r3, r2
 8010560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010568:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801056c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010570:	1d13      	adds	r3, r2, #4
 8010572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801057a:	6013      	str	r3, [r2, #0]

        MULADDC_CORE   MULADDC_CORE
 801057c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010580:	1d13      	adds	r3, r2, #4
 8010582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010586:	6813      	ldr	r3, [r2, #0]
 8010588:	4618      	mov	r0, r3
 801058a:	f04f 0100 	mov.w	r1, #0
 801058e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010592:	461a      	mov	r2, r3
 8010594:	f04f 0300 	mov.w	r3, #0
 8010598:	fb02 f501 	mul.w	r5, r2, r1
 801059c:	fb00 f403 	mul.w	r4, r0, r3
 80105a0:	442c      	add	r4, r5
 80105a2:	fba0 2302 	umull	r2, r3, r0, r2
 80105a6:	18e1      	adds	r1, r4, r3
 80105a8:	460b      	mov	r3, r1
 80105aa:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 80105ae:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 80105b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80105ba:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80105be:	001b      	movs	r3, r3
 80105c0:	623b      	str	r3, [r7, #32]
 80105c2:	2300      	movs	r3, #0
 80105c4:	627b      	str	r3, [r7, #36]	; 0x24
 80105c6:	6a3b      	ldr	r3, [r7, #32]
 80105c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80105cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80105d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80105d4:	4413      	add	r3, r2
 80105d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80105da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80105de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80105e2:	429a      	cmp	r2, r3
 80105e4:	bf34      	ite	cc
 80105e6:	2301      	movcc	r3, #1
 80105e8:	2300      	movcs	r3, #0
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	461a      	mov	r2, r3
 80105ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105f2:	4413      	add	r3, r2
 80105f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80105f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010602:	4413      	add	r3, r2
 8010604:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010608:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010612:	429a      	cmp	r2, r3
 8010614:	bf8c      	ite	hi
 8010616:	2301      	movhi	r3, #1
 8010618:	2300      	movls	r3, #0
 801061a:	b2db      	uxtb	r3, r3
 801061c:	461a      	mov	r2, r3
 801061e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010622:	4413      	add	r3, r2
 8010624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801062c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010630:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010634:	1d13      	adds	r3, r2, #4
 8010636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801063a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801063e:	6013      	str	r3, [r2, #0]
 8010640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010644:	1d13      	adds	r3, r2, #4
 8010646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801064a:	6813      	ldr	r3, [r2, #0]
 801064c:	4618      	mov	r0, r3
 801064e:	f04f 0100 	mov.w	r1, #0
 8010652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010656:	461a      	mov	r2, r3
 8010658:	f04f 0300 	mov.w	r3, #0
 801065c:	fb02 f501 	mul.w	r5, r2, r1
 8010660:	fb00 f403 	mul.w	r4, r0, r3
 8010664:	442c      	add	r4, r5
 8010666:	fba0 2302 	umull	r2, r3, r0, r2
 801066a:	18e1      	adds	r1, r4, r3
 801066c:	460b      	mov	r3, r1
 801066e:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8010672:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8010676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801067a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801067e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8010682:	001b      	movs	r3, r3
 8010684:	61bb      	str	r3, [r7, #24]
 8010686:	2300      	movs	r3, #0
 8010688:	61fb      	str	r3, [r7, #28]
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010690:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010698:	4413      	add	r3, r2
 801069a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801069e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80106a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80106a6:	429a      	cmp	r2, r3
 80106a8:	bf34      	ite	cc
 80106aa:	2301      	movcc	r3, #1
 80106ac:	2300      	movcs	r3, #0
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	461a      	mov	r2, r3
 80106b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80106b6:	4413      	add	r3, r2
 80106b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80106bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106c6:	4413      	add	r3, r2
 80106c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80106cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106d6:	429a      	cmp	r2, r3
 80106d8:	bf8c      	ite	hi
 80106da:	2301      	movhi	r3, #1
 80106dc:	2300      	movls	r3, #0
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	461a      	mov	r2, r3
 80106e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80106e6:	4413      	add	r3, r2
 80106e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80106ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80106f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80106f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80106f8:	1d13      	adds	r3, r2, #4
 80106fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80106fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010702:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
 8010704:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010708:	1d13      	adds	r3, r2, #4
 801070a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801070e:	6813      	ldr	r3, [r2, #0]
 8010710:	4618      	mov	r0, r3
 8010712:	f04f 0100 	mov.w	r1, #0
 8010716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801071a:	461a      	mov	r2, r3
 801071c:	f04f 0300 	mov.w	r3, #0
 8010720:	fb02 f501 	mul.w	r5, r2, r1
 8010724:	fb00 f403 	mul.w	r4, r0, r3
 8010728:	442c      	add	r4, r5
 801072a:	fba0 2302 	umull	r2, r3, r0, r2
 801072e:	18e1      	adds	r1, r4, r3
 8010730:	460b      	mov	r3, r1
 8010732:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8010736:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 801073a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801073e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010742:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8010746:	001b      	movs	r3, r3
 8010748:	613b      	str	r3, [r7, #16]
 801074a:	2300      	movs	r3, #0
 801074c:	617b      	str	r3, [r7, #20]
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010754:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801075c:	4413      	add	r3, r2
 801075e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010762:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801076a:	429a      	cmp	r2, r3
 801076c:	bf34      	ite	cc
 801076e:	2301      	movcc	r3, #1
 8010770:	2300      	movcs	r3, #0
 8010772:	b2db      	uxtb	r3, r3
 8010774:	461a      	mov	r2, r3
 8010776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801077a:	4413      	add	r3, r2
 801077c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010780:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801078a:	4413      	add	r3, r2
 801078c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010790:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801079a:	429a      	cmp	r2, r3
 801079c:	bf8c      	ite	hi
 801079e:	2301      	movhi	r3, #1
 80107a0:	2300      	movls	r3, #0
 80107a2:	b2db      	uxtb	r3, r3
 80107a4:	461a      	mov	r2, r3
 80107a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107aa:	4413      	add	r3, r2
 80107ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80107b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80107b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80107bc:	1d13      	adds	r3, r2, #4
 80107be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80107c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107c6:	6013      	str	r3, [r2, #0]
 80107c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80107cc:	1d13      	adds	r3, r2, #4
 80107ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80107d2:	6813      	ldr	r3, [r2, #0]
 80107d4:	4618      	mov	r0, r3
 80107d6:	f04f 0100 	mov.w	r1, #0
 80107da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80107de:	461a      	mov	r2, r3
 80107e0:	f04f 0300 	mov.w	r3, #0
 80107e4:	fb02 f501 	mul.w	r5, r2, r1
 80107e8:	fb00 f403 	mul.w	r4, r0, r3
 80107ec:	442c      	add	r4, r5
 80107ee:	fba0 2302 	umull	r2, r3, r0, r2
 80107f2:	18e1      	adds	r1, r4, r3
 80107f4:	460b      	mov	r3, r1
 80107f6:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 80107fa:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 80107fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010806:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801080a:	001b      	movs	r3, r3
 801080c:	60bb      	str	r3, [r7, #8]
 801080e:	2300      	movs	r3, #0
 8010810:	60fb      	str	r3, [r7, #12]
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010818:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801081c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010820:	4413      	add	r3, r2
 8010822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010826:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801082a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801082e:	429a      	cmp	r2, r3
 8010830:	bf34      	ite	cc
 8010832:	2301      	movcc	r3, #1
 8010834:	2300      	movcs	r3, #0
 8010836:	b2db      	uxtb	r3, r3
 8010838:	461a      	mov	r2, r3
 801083a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801083e:	4413      	add	r3, r2
 8010840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801084e:	4413      	add	r3, r2
 8010850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801085e:	429a      	cmp	r2, r3
 8010860:	bf8c      	ite	hi
 8010862:	2301      	movhi	r3, #1
 8010864:	2300      	movls	r3, #0
 8010866:	b2db      	uxtb	r3, r3
 8010868:	461a      	mov	r2, r3
 801086a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801086e:	4413      	add	r3, r2
 8010870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010878:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801087c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010880:	1d13      	adds	r3, r2, #4
 8010882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801088a:	6013      	str	r3, [r2, #0]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 801088c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010890:	3b08      	subs	r3, #8
 8010892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801089a:	2b07      	cmp	r3, #7
 801089c:	f63f ace6 	bhi.w	801026c <mpi_mul_hlp+0xca4>
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80108a0:	e066      	b.n	8010970 <mpi_mul_hlp+0x13a8>
    {
        MULADDC_INIT
        MULADDC_CORE
 80108a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80108a6:	1d1a      	adds	r2, r3, #4
 80108a8:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f04f 0100 	mov.w	r1, #0
 80108b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80108b8:	461a      	mov	r2, r3
 80108ba:	f04f 0300 	mov.w	r3, #0
 80108be:	fb02 f501 	mul.w	r5, r2, r1
 80108c2:	fb00 f403 	mul.w	r4, r0, r3
 80108c6:	442c      	add	r4, r5
 80108c8:	fba0 2302 	umull	r2, r3, r0, r2
 80108cc:	18e1      	adds	r1, r4, r3
 80108ce:	460b      	mov	r3, r1
 80108d0:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 80108d4:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 80108d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80108e0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80108e4:	001b      	movs	r3, r3
 80108e6:	603b      	str	r3, [r7, #0]
 80108e8:	2300      	movs	r3, #0
 80108ea:	607b      	str	r3, [r7, #4]
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80108f2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80108f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108fa:	4413      	add	r3, r2
 80108fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010900:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010908:	429a      	cmp	r2, r3
 801090a:	bf34      	ite	cc
 801090c:	2301      	movcc	r3, #1
 801090e:	2300      	movcs	r3, #0
 8010910:	b2db      	uxtb	r3, r3
 8010912:	461a      	mov	r2, r3
 8010914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010918:	4413      	add	r3, r2
 801091a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801091e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010928:	4413      	add	r3, r2
 801092a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801092e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010938:	429a      	cmp	r2, r3
 801093a:	bf8c      	ite	hi
 801093c:	2301      	movhi	r3, #1
 801093e:	2300      	movls	r3, #0
 8010940:	b2db      	uxtb	r3, r3
 8010942:	461a      	mov	r2, r3
 8010944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010948:	4413      	add	r3, r2
 801094a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801094e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010952:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010956:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801095a:	1d1a      	adds	r2, r3, #4
 801095c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010960:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010964:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8010966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801096a:	3b01      	subs	r3, #1
 801096c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010974:	2b00      	cmp	r3, #0
 8010976:	d194      	bne.n	80108a2 <mpi_mul_hlp+0x12da>
        MULADDC_CORE
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 8010978:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801097c:	3301      	adds	r3, #1
 801097e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    do {
        *d += c; c = ( *d < c ); d++;
 8010982:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801098c:	441a      	add	r2, r3
 801098e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010992:	601a      	str	r2, [r3, #0]
 8010994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801099e:	429a      	cmp	r2, r3
 80109a0:	bf34      	ite	cc
 80109a2:	2301      	movcc	r3, #1
 80109a4:	2300      	movcs	r3, #0
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80109ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80109b0:	3304      	adds	r3, #4
 80109b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    }
    while( c != 0 );
 80109b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1e1      	bne.n	8010982 <mpi_mul_hlp+0x13ba>
}
 80109be:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80109c2:	46bd      	mov	sp, r7
 80109c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop

080109cc <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80109cc:	b590      	push	{r4, r7, lr}
 80109ce:	b08f      	sub	sp, #60	; 0x3c
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TA, TB;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 80109d8:	f107 0320 	add.w	r3, r7, #32
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fd feed 	bl	800e7bc <mbedtls_mpi_init>
 80109e2:	f107 0314 	add.w	r3, r7, #20
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fd fee8 	bl	800e7bc <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80109ec:	68fa      	ldr	r2, [r7, #12]
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d10d      	bne.n	8010a10 <mbedtls_mpi_mul_mpi+0x44>
 80109f4:	f107 0320 	add.w	r3, r7, #32
 80109f8:	4618      	mov	r0, r3
 80109fa:	68b9      	ldr	r1, [r7, #8]
 80109fc:	f7fd ff5a 	bl	800e8b4 <mbedtls_mpi_copy>
 8010a00:	6378      	str	r0, [r7, #52]	; 0x34
 8010a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d000      	beq.n	8010a0a <mbedtls_mpi_mul_mpi+0x3e>
 8010a08:	e07b      	b.n	8010b02 <mbedtls_mpi_mul_mpi+0x136>
 8010a0a:	f107 0320 	add.w	r3, r7, #32
 8010a0e:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8010a10:	68fa      	ldr	r2, [r7, #12]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d10d      	bne.n	8010a34 <mbedtls_mpi_mul_mpi+0x68>
 8010a18:	f107 0314 	add.w	r3, r7, #20
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	6879      	ldr	r1, [r7, #4]
 8010a20:	f7fd ff48 	bl	800e8b4 <mbedtls_mpi_copy>
 8010a24:	6378      	str	r0, [r7, #52]	; 0x34
 8010a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d000      	beq.n	8010a2e <mbedtls_mpi_mul_mpi+0x62>
 8010a2c:	e069      	b.n	8010b02 <mbedtls_mpi_mul_mpi+0x136>
 8010a2e:	f107 0314 	add.w	r3, r7, #20
 8010a32:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	633b      	str	r3, [r7, #48]	; 0x30
 8010a3a:	e00e      	b.n	8010a5a <mbedtls_mpi_mul_mpi+0x8e>
        if( A->p[i - 1] != 0 )
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	689a      	ldr	r2, [r3, #8]
 8010a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010a46:	3b01      	subs	r3, #1
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	4413      	add	r3, r2
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d000      	beq.n	8010a54 <mbedtls_mpi_mul_mpi+0x88>
            break;
 8010a52:	e005      	b.n	8010a60 <mbedtls_mpi_mul_mpi+0x94>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 8010a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a56:	3b01      	subs	r3, #1
 8010a58:	633b      	str	r3, [r7, #48]	; 0x30
 8010a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d1ed      	bne.n	8010a3c <mbedtls_mpi_mul_mpi+0x70>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a66:	e00e      	b.n	8010a86 <mbedtls_mpi_mul_mpi+0xba>
        if( B->p[j - 1] != 0 )
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	689a      	ldr	r2, [r3, #8]
 8010a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010a72:	3b01      	subs	r3, #1
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	4413      	add	r3, r2
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d000      	beq.n	8010a80 <mbedtls_mpi_mul_mpi+0xb4>
            break;
 8010a7e:	e005      	b.n	8010a8c <mbedtls_mpi_mul_mpi+0xc0>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 8010a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a82:	3b01      	subs	r3, #1
 8010a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1ed      	bne.n	8010a68 <mbedtls_mpi_mul_mpi+0x9c>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8010a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a90:	4413      	add	r3, r2
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	4619      	mov	r1, r3
 8010a96:	f7fd fec9 	bl	800e82c <mbedtls_mpi_grow>
 8010a9a:	6378      	str	r0, [r7, #52]	; 0x34
 8010a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d000      	beq.n	8010aa4 <mbedtls_mpi_mul_mpi+0xd8>
 8010aa2:	e02e      	b.n	8010b02 <mbedtls_mpi_mul_mpi+0x136>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8010aa4:	68f8      	ldr	r0, [r7, #12]
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	f7fd ff62 	bl	800e970 <mbedtls_mpi_lset>
 8010aac:	6378      	str	r0, [r7, #52]	; 0x34
 8010aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d000      	beq.n	8010ab6 <mbedtls_mpi_mul_mpi+0xea>
 8010ab4:	e025      	b.n	8010b02 <mbedtls_mpi_mul_mpi+0x136>

    for( ; j > 0; j-- )
 8010ab6:	e019      	b.n	8010aec <mbedtls_mpi_mul_mpi+0x120>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	6899      	ldr	r1, [r3, #8]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	689a      	ldr	r2, [r3, #8]
 8010ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010ac6:	3b01      	subs	r3, #1
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	18d4      	adds	r4, r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	689a      	ldr	r2, [r3, #8]
 8010ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010ad6:	3b01      	subs	r3, #1
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	4413      	add	r3, r2
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ae0:	4622      	mov	r2, r4
 8010ae2:	f7fe fd71 	bl	800f5c8 <mpi_mul_hlp>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( ; j > 0; j-- )
 8010ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae8:	3b01      	subs	r3, #1
 8010aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d1e2      	bne.n	8010ab8 <mbedtls_mpi_mul_mpi+0xec>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	6812      	ldr	r2, [r2, #0]
 8010afa:	fb02 f203 	mul.w	r2, r2, r3
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	601a      	str	r2, [r3, #0]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8010b02:	f107 0314 	add.w	r3, r7, #20
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7fd fe6a 	bl	800e7e0 <mbedtls_mpi_free>
 8010b0c:	f107 0320 	add.w	r3, r7, #32
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fd fe65 	bl	800e7e0 <mbedtls_mpi_free>

    return( ret );
 8010b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	373c      	adds	r7, #60	; 0x3c
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd90      	pop	{r4, r7, pc}

08010b20 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 8010b30:	2301      	movs	r3, #1
 8010b32:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 8010b34:	f107 0310 	add.w	r3, r7, #16
 8010b38:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8010b3e:	f107 0314 	add.w	r3, r7, #20
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	68b9      	ldr	r1, [r7, #8]
 8010b46:	461a      	mov	r2, r3
 8010b48:	f7ff ff40 	bl	80109cc <mbedtls_mpi_mul_mpi>
 8010b4c:	4603      	mov	r3, r0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3720      	adds	r7, #32
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop

08010b58 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 8010b58:	b5b0      	push	{r4, r5, r7, lr}
 8010b5a:	b088      	sub	sp, #32
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
 8010b64:	603b      	str	r3, [r7, #0]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d003      	beq.n	8010b74 <mbedtls_int_div_int+0x1c>
 8010b6c:	68fa      	ldr	r2, [r7, #12]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d309      	bcc.n	8010b88 <mbedtls_int_div_int+0x30>
    {
        if (r != NULL) *r = ~0;
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d003      	beq.n	8010b82 <mbedtls_int_div_int+0x2a>
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b80:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 8010b82:	f04f 33ff 	mov.w	r3, #4294967295
 8010b86:	e037      	b.n	8010bf8 <mbedtls_int_div_int+0xa0>
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	f04f 0300 	mov.w	r3, #0
 8010b90:	0015      	movs	r5, r2
 8010b92:	2400      	movs	r4, #0
 8010b94:	e9c7 4504 	strd	r4, r5, [r7, #16]
    dividend |= (mbedtls_t_udbl) u0;
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	f04f 0300 	mov.w	r3, #0
 8010ba0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010ba4:	ea42 0200 	orr.w	r2, r2, r0
 8010ba8:	ea43 0301 	orr.w	r3, r3, r1
 8010bac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    quotient = dividend / d;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	f04f 0300 	mov.w	r3, #0
 8010bb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010bbc:	f001 f998 	bl	8011ef0 <__aeabi_uldivmod>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
 8010bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	bf08      	it	eq
 8010bd0:	2a00      	cmpeq	r2, #0
 8010bd2:	d305      	bcc.n	8010be0 <mbedtls_int_div_int+0x88>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
 8010bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd8:	f04f 0300 	mov.w	r3, #0
 8010bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if( r != NULL )
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d007      	beq.n	8010bf6 <mbedtls_int_div_int+0x9e>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
 8010be6:	693a      	ldr	r2, [r7, #16]
 8010be8:	69bb      	ldr	r3, [r7, #24]
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	fb01 f303 	mul.w	r3, r1, r3
 8010bf0:	1ad2      	subs	r2, r2, r3
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	601a      	str	r2, [r3, #0]

    return (mbedtls_mpi_uint) quotient;
 8010bf6:	69bb      	ldr	r3, [r7, #24]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3720      	adds	r7, #32
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bdb0      	pop	{r4, r5, r7, pc}

08010c00 <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 8010c00:	b590      	push	{r4, r7, lr}
 8010c02:	b099      	sub	sp, #100	; 0x64
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]
 8010c0c:	603b      	str	r3, [r7, #0]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8010c0e:	6838      	ldr	r0, [r7, #0]
 8010c10:	2100      	movs	r1, #0
 8010c12:	f7fe fa75 	bl	800f100 <mbedtls_mpi_cmp_int>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d102      	bne.n	8010c22 <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 8010c1c:	f06f 030b 	mvn.w	r3, #11
 8010c20:	e29c      	b.n	801115c <mbedtls_mpi_div_mpi+0x55c>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8010c22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fd fdc8 	bl	800e7bc <mbedtls_mpi_init>
 8010c2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fd fdc3 	bl	800e7bc <mbedtls_mpi_init>
 8010c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7fd fdbe 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 8010c40:	f107 031c 	add.w	r3, r7, #28
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7fd fdb9 	bl	800e7bc <mbedtls_mpi_init>
 8010c4a:	f107 0310 	add.w	r3, r7, #16
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fd fdb4 	bl	800e7bc <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	6839      	ldr	r1, [r7, #0]
 8010c58:	f7fe f936 	bl	800eec8 <mbedtls_mpi_cmp_abs>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	da19      	bge.n	8010c96 <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d008      	beq.n	8010c7a <mbedtls_mpi_div_mpi+0x7a>
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	f7fd fe80 	bl	800e970 <mbedtls_mpi_lset>
 8010c70:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d000      	beq.n	8010c7a <mbedtls_mpi_div_mpi+0x7a>
 8010c78:	e256      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d008      	beq.n	8010c92 <mbedtls_mpi_div_mpi+0x92>
 8010c80:	68b8      	ldr	r0, [r7, #8]
 8010c82:	6879      	ldr	r1, [r7, #4]
 8010c84:	f7fd fe16 	bl	800e8b4 <mbedtls_mpi_copy>
 8010c88:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d000      	beq.n	8010c92 <mbedtls_mpi_div_mpi+0x92>
 8010c90:	e24a      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
        return( 0 );
 8010c92:	2300      	movs	r3, #0
 8010c94:	e262      	b.n	801115c <mbedtls_mpi_div_mpi+0x55c>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 8010c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	6879      	ldr	r1, [r7, #4]
 8010c9e:	f7fd fe09 	bl	800e8b4 <mbedtls_mpi_copy>
 8010ca2:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d000      	beq.n	8010cac <mbedtls_mpi_div_mpi+0xac>
 8010caa:	e23d      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8010cac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	6839      	ldr	r1, [r7, #0]
 8010cb4:	f7fd fdfe 	bl	800e8b4 <mbedtls_mpi_copy>
 8010cb8:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d000      	beq.n	8010cc2 <mbedtls_mpi_div_mpi+0xc2>
 8010cc0:	e232      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
    X.s = Y.s = 1;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8010cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc8:	643b      	str	r3, [r7, #64]	; 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	3302      	adds	r3, #2
 8010cd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cd4:	4610      	mov	r0, r2
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	f7fd fda8 	bl	800e82c <mbedtls_mpi_grow>
 8010cdc:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d000      	beq.n	8010ce6 <mbedtls_mpi_div_mpi+0xe6>
 8010ce4:	e220      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8010ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010cea:	4618      	mov	r0, r3
 8010cec:	2100      	movs	r1, #0
 8010cee:	f7fd fe3f 	bl	800e970 <mbedtls_mpi_lset>
 8010cf2:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d000      	beq.n	8010cfc <mbedtls_mpi_div_mpi+0xfc>
 8010cfa:	e215      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8010cfc:	f107 031c 	add.w	r3, r7, #28
 8010d00:	4618      	mov	r0, r3
 8010d02:	2102      	movs	r1, #2
 8010d04:	f7fd fd92 	bl	800e82c <mbedtls_mpi_grow>
 8010d08:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d000      	beq.n	8010d12 <mbedtls_mpi_div_mpi+0x112>
 8010d10:	e20a      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8010d12:	f107 0310 	add.w	r3, r7, #16
 8010d16:	4618      	mov	r0, r3
 8010d18:	2103      	movs	r1, #3
 8010d1a:	f7fd fd87 	bl	800e82c <mbedtls_mpi_grow>
 8010d1e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d000      	beq.n	8010d28 <mbedtls_mpi_div_mpi+0x128>
 8010d26:	e1ff      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 8010d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7fd fe8f 	bl	800ea50 <mbedtls_mpi_bitlen>
 8010d32:	4603      	mov	r3, r0
 8010d34:	f003 031f 	and.w	r3, r3, #31
 8010d38:	657b      	str	r3, [r7, #84]	; 0x54
    if( k < biL - 1 )
 8010d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d3c:	2b1e      	cmp	r3, #30
 8010d3e:	d819      	bhi.n	8010d74 <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 8010d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d42:	f1c3 031f 	rsb	r3, r3, #31
 8010d46:	657b      	str	r3, [r7, #84]	; 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8010d48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d50:	f7fd ff7e 	bl	800ec50 <mbedtls_mpi_shift_l>
 8010d54:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d000      	beq.n	8010d5e <mbedtls_mpi_div_mpi+0x15e>
 8010d5c:	e1e4      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 8010d5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010d62:	4618      	mov	r0, r3
 8010d64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d66:	f7fd ff73 	bl	800ec50 <mbedtls_mpi_shift_l>
 8010d6a:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d002      	beq.n	8010d78 <mbedtls_mpi_div_mpi+0x178>
 8010d72:	e1d9      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
    }
    else k = 0;
 8010d74:	2300      	movs	r3, #0
 8010d76:	657b      	str	r3, [r7, #84]	; 0x54

    n = X.n - 1;
 8010d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	653b      	str	r3, [r7, #80]	; 0x50
    t = Y.n - 1;
 8010d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d80:	3b01      	subs	r3, #1
 8010d82:	64fb      	str	r3, [r7, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8010d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	015b      	lsls	r3, r3, #5
 8010d8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010d90:	4610      	mov	r0, r2
 8010d92:	4619      	mov	r1, r3
 8010d94:	f7fd ff5c 	bl	800ec50 <mbedtls_mpi_shift_l>
 8010d98:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d000      	beq.n	8010da2 <mbedtls_mpi_div_mpi+0x1a2>
 8010da0:	e1c2      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8010da2:	e018      	b.n	8010dd6 <mbedtls_mpi_div_mpi+0x1d6>
    {
        Z.p[n - t]++;
 8010da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010da6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010daa:	1acb      	subs	r3, r1, r3
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	4413      	add	r3, r2
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	3201      	adds	r2, #1
 8010db4:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 8010db6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010dba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010dc2:	4608      	mov	r0, r1
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	f7fe fb6e 	bl	800f4a8 <mbedtls_mpi_sub_mpi>
 8010dcc:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d000      	beq.n	8010dd6 <mbedtls_mpi_div_mpi+0x1d6>
 8010dd4:	e1a8      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8010dd6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010dda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010dde:	4610      	mov	r0, r2
 8010de0:	4619      	mov	r1, r3
 8010de2:	f7fe f8f3 	bl	800efcc <mbedtls_mpi_cmp_mpi>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	dadb      	bge.n	8010da4 <mbedtls_mpi_div_mpi+0x1a4>
    {
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8010dec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010df0:	1ad3      	subs	r3, r2, r3
 8010df2:	015b      	lsls	r3, r3, #5
 8010df4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010df8:	4610      	mov	r0, r2
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	f7fd ffca 	bl	800ed94 <mbedtls_mpi_shift_r>
 8010e00:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d000      	beq.n	8010e0a <mbedtls_mpi_div_mpi+0x20a>
 8010e08:	e18e      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>

    for( i = n; i > t ; i-- )
 8010e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e0e:	e14a      	b.n	80110a6 <mbedtls_mpi_div_mpi+0x4a6>
    {
        if( X.p[i] >= Y.p[t] )
 8010e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	4413      	add	r3, r2
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	440b      	add	r3, r1
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d30c      	bcc.n	8010e42 <mbedtls_mpi_div_mpi+0x242>
            Z.p[i - t - 1] = ~0;
 8010e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e2e:	1acb      	subs	r3, r1, r3
 8010e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010e34:	3b01      	subs	r3, #1
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	4413      	add	r3, r2
 8010e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e3e:	601a      	str	r2, [r3, #0]
 8010e40:	e020      	b.n	8010e84 <mbedtls_mpi_div_mpi+0x284>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8010e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e48:	1acb      	subs	r3, r1, r3
 8010e4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010e4e:	3b01      	subs	r3, #1
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	18d4      	adds	r4, r2, r3
 8010e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e58:	009b      	lsls	r3, r3, #2
 8010e5a:	4413      	add	r3, r2
 8010e5c:	6818      	ldr	r0, [r3, #0]
 8010e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010e66:	3b01      	subs	r3, #1
 8010e68:	009b      	lsls	r3, r3, #2
 8010e6a:	4413      	add	r3, r2
 8010e6c:	6819      	ldr	r1, [r3, #0]
                                                            Y.p[t], NULL);
 8010e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	4413      	add	r3, r2
    {
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	461a      	mov	r2, r3
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	f7ff fe6c 	bl	8010b58 <mbedtls_int_div_int>
 8010e80:	4603      	mov	r3, r0
 8010e82:	6023      	str	r3, [r4, #0]
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 8010e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e8a:	1acb      	subs	r3, r1, r3
 8010e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010e90:	3b01      	subs	r3, #1
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	4413      	add	r3, r2
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	3201      	adds	r2, #1
 8010e9a:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 8010e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ea2:	1acb      	subs	r3, r1, r3
 8010ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010ea8:	3b01      	subs	r3, #1
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	4413      	add	r3, r2
 8010eae:	681a      	ldr	r2, [r3, #0]
 8010eb0:	3a01      	subs	r2, #1
 8010eb2:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8010eb4:	f107 031c 	add.w	r3, r7, #28
 8010eb8:	4618      	mov	r0, r3
 8010eba:	2100      	movs	r1, #0
 8010ebc:	f7fd fd58 	bl	800e970 <mbedtls_mpi_lset>
 8010ec0:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d000      	beq.n	8010eca <mbedtls_mpi_div_mpi+0x2ca>
 8010ec8:	e12e      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8010eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d008      	beq.n	8010ee4 <mbedtls_mpi_div_mpi+0x2e4>
 8010ed2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ed6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010eda:	3b01      	subs	r3, #1
 8010edc:	009b      	lsls	r3, r3, #2
 8010ede:	440b      	add	r3, r1
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	e000      	b.n	8010ee6 <mbedtls_mpi_div_mpi+0x2e6>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	3304      	adds	r3, #4
 8010eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ef0:	0092      	lsls	r2, r2, #2
 8010ef2:	440a      	add	r2, r1
 8010ef4:	6812      	ldr	r2, [r2, #0]
 8010ef6:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8010ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010efa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010efe:	1acb      	subs	r3, r1, r3
 8010f00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010f04:	3b01      	subs	r3, #1
 8010f06:	009b      	lsls	r3, r3, #2
 8010f08:	4413      	add	r3, r2
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f107 011c 	add.w	r1, r7, #28
 8010f10:	f107 021c 	add.w	r2, r7, #28
 8010f14:	4608      	mov	r0, r1
 8010f16:	4611      	mov	r1, r2
 8010f18:	461a      	mov	r2, r3
 8010f1a:	f7ff fe01 	bl	8010b20 <mbedtls_mpi_mul_int>
 8010f1e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d000      	beq.n	8010f28 <mbedtls_mpi_div_mpi+0x328>
 8010f26:	e0ff      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8010f28:	f107 0310 	add.w	r3, r7, #16
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	2100      	movs	r1, #0
 8010f30:	f7fd fd1e 	bl	800e970 <mbedtls_mpi_lset>
 8010f34:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d000      	beq.n	8010f3e <mbedtls_mpi_div_mpi+0x33e>
 8010f3c:	e0f4      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8010f3e:	69ba      	ldr	r2, [r7, #24]
 8010f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d908      	bls.n	8010f58 <mbedtls_mpi_div_mpi+0x358>
 8010f46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010f4e:	3b02      	subs	r3, #2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	440b      	add	r3, r1
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	e000      	b.n	8010f5a <mbedtls_mpi_div_mpi+0x35a>
 8010f58:	2300      	movs	r3, #0
 8010f5a:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	1d1a      	adds	r2, r3, #4
 8010f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d008      	beq.n	8010f78 <mbedtls_mpi_div_mpi+0x378>
 8010f66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	440b      	add	r3, r1
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	e000      	b.n	8010f7a <mbedtls_mpi_div_mpi+0x37a>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	3308      	adds	r3, #8
 8010f80:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010f82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f84:	0092      	lsls	r2, r2, #2
 8010f86:	440a      	add	r2, r1
 8010f88:	6812      	ldr	r2, [r2, #0]
 8010f8a:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 8010f8c:	f107 021c 	add.w	r2, r7, #28
 8010f90:	f107 0310 	add.w	r3, r7, #16
 8010f94:	4610      	mov	r0, r2
 8010f96:	4619      	mov	r1, r3
 8010f98:	f7fe f818 	bl	800efcc <mbedtls_mpi_cmp_mpi>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f73f af7c 	bgt.w	8010e9c <mbedtls_mpi_div_mpi+0x29c>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8010fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010faa:	1acb      	subs	r3, r1, r3
 8010fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	009b      	lsls	r3, r3, #2
 8010fb4:	4413      	add	r3, r2
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f107 011c 	add.w	r1, r7, #28
 8010fbc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010fc0:	4608      	mov	r0, r1
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	f7ff fdab 	bl	8010b20 <mbedtls_mpi_mul_int>
 8010fca:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d000      	beq.n	8010fd4 <mbedtls_mpi_div_mpi+0x3d4>
 8010fd2:	e0a9      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8010fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	015b      	lsls	r3, r3, #5
 8010fe2:	f107 021c 	add.w	r2, r7, #28
 8010fe6:	4610      	mov	r0, r2
 8010fe8:	4619      	mov	r1, r3
 8010fea:	f7fd fe31 	bl	800ec50 <mbedtls_mpi_shift_l>
 8010fee:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d000      	beq.n	8010ff8 <mbedtls_mpi_div_mpi+0x3f8>
 8010ff6:	e097      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8010ff8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010ffc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011000:	f107 031c 	add.w	r3, r7, #28
 8011004:	4608      	mov	r0, r1
 8011006:	4611      	mov	r1, r2
 8011008:	461a      	mov	r2, r3
 801100a:	f7fe fa4d 	bl	800f4a8 <mbedtls_mpi_sub_mpi>
 801100e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011012:	2b00      	cmp	r3, #0
 8011014:	d000      	beq.n	8011018 <mbedtls_mpi_div_mpi+0x418>
 8011016:	e087      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8011018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801101c:	4618      	mov	r0, r3
 801101e:	2100      	movs	r1, #0
 8011020:	f7fe f86e 	bl	800f100 <mbedtls_mpi_cmp_int>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	da3a      	bge.n	80110a0 <mbedtls_mpi_div_mpi+0x4a0>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 801102a:	f107 021c 	add.w	r2, r7, #28
 801102e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011032:	4610      	mov	r0, r2
 8011034:	4619      	mov	r1, r3
 8011036:	f7fd fc3d 	bl	800e8b4 <mbedtls_mpi_copy>
 801103a:	65f8      	str	r0, [r7, #92]	; 0x5c
 801103c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801103e:	2b00      	cmp	r3, #0
 8011040:	d000      	beq.n	8011044 <mbedtls_mpi_div_mpi+0x444>
 8011042:	e071      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8011044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011048:	1ad3      	subs	r3, r2, r3
 801104a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801104e:	3b01      	subs	r3, #1
 8011050:	015b      	lsls	r3, r3, #5
 8011052:	f107 021c 	add.w	r2, r7, #28
 8011056:	4610      	mov	r0, r2
 8011058:	4619      	mov	r1, r3
 801105a:	f7fd fdf9 	bl	800ec50 <mbedtls_mpi_shift_l>
 801105e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011062:	2b00      	cmp	r3, #0
 8011064:	d000      	beq.n	8011068 <mbedtls_mpi_div_mpi+0x468>
 8011066:	e05f      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8011068:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801106c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011070:	f107 031c 	add.w	r3, r7, #28
 8011074:	4608      	mov	r0, r1
 8011076:	4611      	mov	r1, r2
 8011078:	461a      	mov	r2, r3
 801107a:	f7fe f9cd 	bl	800f418 <mbedtls_mpi_add_mpi>
 801107e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011082:	2b00      	cmp	r3, #0
 8011084:	d000      	beq.n	8011088 <mbedtls_mpi_div_mpi+0x488>
 8011086:	e04f      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
            Z.p[i - t - 1]--;
 8011088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801108a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801108c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801108e:	1acb      	subs	r3, r1, r3
 8011090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011094:	3b01      	subs	r3, #1
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4413      	add	r3, r2
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	3a01      	subs	r2, #1
 801109e:	601a      	str	r2, [r3, #0]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 80110a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80110a2:	3b01      	subs	r3, #1
 80110a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80110a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80110a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110aa:	429a      	cmp	r2, r3
 80110ac:	f63f aeb0 	bhi.w	8010e10 <mbedtls_mpi_div_mpi+0x210>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d012      	beq.n	80110dc <mbedtls_mpi_div_mpi+0x4dc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80110b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	4619      	mov	r1, r3
 80110be:	f7fd fbf9 	bl	800e8b4 <mbedtls_mpi_copy>
 80110c2:	65f8      	str	r0, [r7, #92]	; 0x5c
 80110c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d000      	beq.n	80110cc <mbedtls_mpi_div_mpi+0x4cc>
 80110ca:	e02d      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
        Q->s = A->s * B->s;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	683a      	ldr	r2, [r7, #0]
 80110d2:	6812      	ldr	r2, [r2, #0]
 80110d4:	fb02 f203 	mul.w	r2, r2, r3
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d022      	beq.n	8011128 <mbedtls_mpi_div_mpi+0x528>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80110e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80110e6:	4618      	mov	r0, r3
 80110e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80110ea:	f7fd fe53 	bl	800ed94 <mbedtls_mpi_shift_r>
 80110ee:	65f8      	str	r0, [r7, #92]	; 0x5c
 80110f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d000      	beq.n	80110f8 <mbedtls_mpi_div_mpi+0x4f8>
 80110f6:	e017      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>
        X.s = A->s;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	643b      	str	r3, [r7, #64]	; 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80110fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011102:	68b8      	ldr	r0, [r7, #8]
 8011104:	4619      	mov	r1, r3
 8011106:	f7fd fbd5 	bl	800e8b4 <mbedtls_mpi_copy>
 801110a:	65f8      	str	r0, [r7, #92]	; 0x5c
 801110c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801110e:	2b00      	cmp	r3, #0
 8011110:	d000      	beq.n	8011114 <mbedtls_mpi_div_mpi+0x514>
 8011112:	e009      	b.n	8011128 <mbedtls_mpi_div_mpi+0x528>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 8011114:	68b8      	ldr	r0, [r7, #8]
 8011116:	2100      	movs	r1, #0
 8011118:	f7fd fff2 	bl	800f100 <mbedtls_mpi_cmp_int>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d102      	bne.n	8011128 <mbedtls_mpi_div_mpi+0x528>
            R->s = 1;
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	2201      	movs	r2, #1
 8011126:	601a      	str	r2, [r3, #0]
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8011128:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801112c:	4618      	mov	r0, r3
 801112e:	f7fd fb57 	bl	800e7e0 <mbedtls_mpi_free>
 8011132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011136:	4618      	mov	r0, r3
 8011138:	f7fd fb52 	bl	800e7e0 <mbedtls_mpi_free>
 801113c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011140:	4618      	mov	r0, r3
 8011142:	f7fd fb4d 	bl	800e7e0 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8011146:	f107 031c 	add.w	r3, r7, #28
 801114a:	4618      	mov	r0, r3
 801114c:	f7fd fb48 	bl	800e7e0 <mbedtls_mpi_free>
 8011150:	f107 0310 	add.w	r3, r7, #16
 8011154:	4618      	mov	r0, r3
 8011156:	f7fd fb43 	bl	800e7e0 <mbedtls_mpi_free>

    return( ret );
 801115a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 801115c:	4618      	mov	r0, r3
 801115e:	3764      	adds	r7, #100	; 0x64
 8011160:	46bd      	mov	sp, r7
 8011162:	bd90      	pop	{r4, r7, pc}

08011164 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b086      	sub	sp, #24
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	607a      	str	r2, [r7, #4]
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	2100      	movs	r1, #0
 8011174:	f7fd ffc4 	bl	800f100 <mbedtls_mpi_cmp_int>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	da02      	bge.n	8011184 <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 801117e:	f06f 0309 	mvn.w	r3, #9
 8011182:	e02f      	b.n	80111e4 <mbedtls_mpi_mod_mpi+0x80>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 8011184:	2000      	movs	r0, #0
 8011186:	68f9      	ldr	r1, [r7, #12]
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f7ff fd38 	bl	8010c00 <mbedtls_mpi_div_mpi>
 8011190:	6178      	str	r0, [r7, #20]
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d000      	beq.n	801119a <mbedtls_mpi_mod_mpi+0x36>
 8011198:	e023      	b.n	80111e2 <mbedtls_mpi_mod_mpi+0x7e>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 801119a:	e009      	b.n	80111b0 <mbedtls_mpi_mod_mpi+0x4c>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	68f9      	ldr	r1, [r7, #12]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	f7fe f939 	bl	800f418 <mbedtls_mpi_add_mpi>
 80111a6:	6178      	str	r0, [r7, #20]
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d000      	beq.n	80111b0 <mbedtls_mpi_mod_mpi+0x4c>
 80111ae:	e018      	b.n	80111e2 <mbedtls_mpi_mod_mpi+0x7e>
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 80111b0:	68f8      	ldr	r0, [r7, #12]
 80111b2:	2100      	movs	r1, #0
 80111b4:	f7fd ffa4 	bl	800f100 <mbedtls_mpi_cmp_int>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	dbee      	blt.n	801119c <mbedtls_mpi_mod_mpi+0x38>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80111be:	e009      	b.n	80111d4 <mbedtls_mpi_mod_mpi+0x70>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 80111c0:	68f8      	ldr	r0, [r7, #12]
 80111c2:	68f9      	ldr	r1, [r7, #12]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	f7fe f96f 	bl	800f4a8 <mbedtls_mpi_sub_mpi>
 80111ca:	6178      	str	r0, [r7, #20]
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d000      	beq.n	80111d4 <mbedtls_mpi_mod_mpi+0x70>
 80111d2:	e006      	b.n	80111e2 <mbedtls_mpi_mod_mpi+0x7e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80111d4:	68f8      	ldr	r0, [r7, #12]
 80111d6:	6879      	ldr	r1, [r7, #4]
 80111d8:	f7fd fef8 	bl	800efcc <mbedtls_mpi_cmp_mpi>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	daee      	bge.n	80111c0 <mbedtls_mpi_mod_mpi+0x5c>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
 80111e2:	697b      	ldr	r3, [r7, #20]
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3718      	adds	r7, #24
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
 80111ec:	b480      	push	{r7}
 80111ee:	b087      	sub	sp, #28
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint x, m0 = N->p[0];
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	689b      	ldr	r3, [r3, #8]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	60fb      	str	r3, [r7, #12]
    unsigned int i;

    x  = m0;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	617b      	str	r3, [r7, #20]
    x += ( ( m0 + 2 ) & 4 ) << 1;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	3302      	adds	r3, #2
 8011206:	f003 0304 	and.w	r3, r3, #4
 801120a:	005b      	lsls	r3, r3, #1
 801120c:	697a      	ldr	r2, [r7, #20]
 801120e:	4413      	add	r3, r2
 8011210:	617b      	str	r3, [r7, #20]

    for( i = biL; i >= 8; i /= 2 )
 8011212:	2320      	movs	r3, #32
 8011214:	613b      	str	r3, [r7, #16]
 8011216:	e00c      	b.n	8011232 <mpi_montg_init+0x46>
        x *= ( 2 - ( m0 * x ) );
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	697a      	ldr	r2, [r7, #20]
 801121c:	fb02 f303 	mul.w	r3, r2, r3
 8011220:	f1c3 0202 	rsb	r2, r3, #2
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	fb02 f303 	mul.w	r3, r2, r3
 801122a:	617b      	str	r3, [r7, #20]
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	085b      	lsrs	r3, r3, #1
 8011230:	613b      	str	r3, [r7, #16]
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	2b07      	cmp	r3, #7
 8011236:	d8ef      	bhi.n	8011218 <mpi_montg_init+0x2c>
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	425a      	negs	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	601a      	str	r2, [r3, #0]
}
 8011240:	371c      	adds	r7, #28
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop

0801124c <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b08a      	sub	sp, #40	; 0x28
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
 8011258:	603b      	str	r3, [r7, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 801125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125c:	685a      	ldr	r2, [r3, #4]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	3301      	adds	r3, #1
 8011264:	429a      	cmp	r2, r3
 8011266:	d303      	bcc.n	8011270 <mpi_montmul+0x24>
 8011268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d102      	bne.n	8011276 <mpi_montmul+0x2a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8011270:	f06f 0303 	mvn.w	r3, #3
 8011274:	e075      	b.n	8011362 <mpi_montmul+0x116>

    memset( T->p, 0, T->n * ciL );
 8011276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011278:	689a      	ldr	r2, [r3, #8]
 801127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4610      	mov	r0, r2
 8011282:	2100      	movs	r1, #0
 8011284:	461a      	mov	r2, r3
 8011286:	f001 f948 	bl	801251a <memset>

    d = T->p;
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	623b      	str	r3, [r7, #32]
    n = N->n;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	61fb      	str	r3, [r7, #28]
    m = ( B->n < n ) ? B->n : n;
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	685a      	ldr	r2, [r3, #4]
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	4293      	cmp	r3, r2
 801129e:	bf28      	it	cs
 80112a0:	4613      	movcs	r3, r2
 80112a2:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < n; i++ )
 80112a4:	2300      	movs	r3, #0
 80112a6:	627b      	str	r3, [r7, #36]	; 0x24
 80112a8:	e032      	b.n	8011310 <mpi_montmul+0xc4>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	689a      	ldr	r2, [r3, #8]
 80112ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b0:	009b      	lsls	r3, r3, #2
 80112b2:	4413      	add	r3, r2
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	617b      	str	r3, [r7, #20]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80112b8:	6a3b      	ldr	r3, [r7, #32]
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	689b      	ldr	r3, [r3, #8]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	6979      	ldr	r1, [r7, #20]
 80112c4:	fb01 f303 	mul.w	r3, r1, r3
 80112c8:	4413      	add	r3, r2
 80112ca:	683a      	ldr	r2, [r7, #0]
 80112cc:	fb02 f303 	mul.w	r3, r2, r3
 80112d0:	613b      	str	r3, [r7, #16]

        mpi_mul_hlp( m, B->p, d, u0 );
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	689b      	ldr	r3, [r3, #8]
 80112d6:	69b8      	ldr	r0, [r7, #24]
 80112d8:	4619      	mov	r1, r3
 80112da:	6a3a      	ldr	r2, [r7, #32]
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	f7fe f973 	bl	800f5c8 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	69f8      	ldr	r0, [r7, #28]
 80112e8:	4619      	mov	r1, r3
 80112ea:	6a3a      	ldr	r2, [r7, #32]
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	f7fe f96b 	bl	800f5c8 <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
 80112f2:	6a3b      	ldr	r3, [r7, #32]
 80112f4:	1d1a      	adds	r2, r3, #4
 80112f6:	623a      	str	r2, [r7, #32]
 80112f8:	697a      	ldr	r2, [r7, #20]
 80112fa:	601a      	str	r2, [r3, #0]
 80112fc:	69fb      	ldr	r3, [r7, #28]
 80112fe:	3301      	adds	r3, #1
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	6a3a      	ldr	r2, [r7, #32]
 8011304:	4413      	add	r3, r2
 8011306:	2200      	movs	r2, #0
 8011308:	601a      	str	r2, [r3, #0]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 801130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130c:	3301      	adds	r3, #1
 801130e:	627b      	str	r3, [r7, #36]	; 0x24
 8011310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	429a      	cmp	r2, r3
 8011316:	d3c8      	bcc.n	80112aa <mpi_montmul+0x5e>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	689a      	ldr	r2, [r3, #8]
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	3301      	adds	r3, #1
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	4610      	mov	r0, r2
 8011324:	6a39      	ldr	r1, [r7, #32]
 8011326:	461a      	mov	r2, r3
 8011328:	f001 f8ec 	bl	8012504 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	6879      	ldr	r1, [r7, #4]
 8011330:	f7fd fdca 	bl	800eec8 <mbedtls_mpi_cmp_abs>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	db09      	blt.n	801134e <mpi_montmul+0x102>
        mpi_sub_hlp( n, N->p, A->p );
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	689a      	ldr	r2, [r3, #8]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	689b      	ldr	r3, [r3, #8]
 8011342:	69f8      	ldr	r0, [r7, #28]
 8011344:	4611      	mov	r1, r2
 8011346:	461a      	mov	r2, r3
 8011348:	f7fd ffac 	bl	800f2a4 <mpi_sub_hlp>
 801134c:	e008      	b.n	8011360 <mpi_montmul+0x114>
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	689a      	ldr	r2, [r3, #8]
 8011352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011354:	689b      	ldr	r3, [r3, #8]
 8011356:	69f8      	ldr	r0, [r7, #28]
 8011358:	4611      	mov	r1, r2
 801135a:	461a      	mov	r2, r3
 801135c:	f7fd ffa2 	bl	800f2a4 <mpi_sub_hlp>

    return( 0 );
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3728      	adds	r7, #40	; 0x28
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop

0801136c <mpi_montred>:
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b08a      	sub	sp, #40	; 0x28
 8011370:	af02      	add	r7, sp, #8
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
 8011378:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint z = 1;
 801137a:	2301      	movs	r3, #1
 801137c:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 801137e:	69fb      	ldr	r3, [r7, #28]
 8011380:	613b      	str	r3, [r7, #16]
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	617b      	str	r3, [r7, #20]
    U.p = &z;
 8011386:	f107 031c 	add.w	r3, r7, #28
 801138a:	61bb      	str	r3, [r7, #24]

    return( mpi_montmul( A, &U, N, mm, T ) );
 801138c:	f107 0210 	add.w	r2, r7, #16
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	4611      	mov	r1, r2
 8011398:	68ba      	ldr	r2, [r7, #8]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f7ff ff56 	bl	801124c <mpi_montmul>
 80113a0:	4603      	mov	r3, r0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3720      	adds	r7, #32
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop

080113ac <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
 80113ac:	b5b0      	push	{r4, r5, r7, lr}
 80113ae:	f5ad 6dce 	sub.w	sp, sp, #1648	; 0x670
 80113b2:	af02      	add	r7, sp, #8
 80113b4:	f107 040c 	add.w	r4, r7, #12
 80113b8:	6020      	str	r0, [r4, #0]
 80113ba:	f107 0008 	add.w	r0, r7, #8
 80113be:	6001      	str	r1, [r0, #0]
 80113c0:	1d39      	adds	r1, r7, #4
 80113c2:	600a      	str	r2, [r1, #0]
 80113c4:	463a      	mov	r2, r7
 80113c6:	6013      	str	r3, [r2, #0]
    int ret;
    size_t wbits, wsize, one = 1;
 80113c8:	2301      	movs	r3, #1
 80113ca:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80113ce:	463b      	mov	r3, r7
 80113d0:	6818      	ldr	r0, [r3, #0]
 80113d2:	2100      	movs	r1, #0
 80113d4:	f7fd fe94 	bl	800f100 <mbedtls_mpi_cmp_int>
 80113d8:	4603      	mov	r3, r0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	dd07      	ble.n	80113ee <mbedtls_mpi_exp_mod+0x42>
 80113de:	463b      	mov	r3, r7
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f003 0301 	and.w	r3, r3, #1
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d102      	bne.n	80113f4 <mbedtls_mpi_exp_mod+0x48>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80113ee:	f06f 0303 	mvn.w	r3, #3
 80113f2:	e3d3      	b.n	8011b9c <mbedtls_mpi_exp_mod+0x7f0>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 80113f4:	1d3b      	adds	r3, r7, #4
 80113f6:	6818      	ldr	r0, [r3, #0]
 80113f8:	2100      	movs	r1, #0
 80113fa:	f7fd fe81 	bl	800f100 <mbedtls_mpi_cmp_int>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b00      	cmp	r3, #0
 8011402:	da02      	bge.n	801140a <mbedtls_mpi_exp_mod+0x5e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8011404:	f06f 0303 	mvn.w	r3, #3
 8011408:	e3c8      	b.n	8011b9c <mbedtls_mpi_exp_mod+0x7f0>

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
 801140a:	f207 6234 	addw	r2, r7, #1588	; 0x634
 801140e:	463b      	mov	r3, r7
 8011410:	4610      	mov	r0, r2
 8011412:	6819      	ldr	r1, [r3, #0]
 8011414:	f7ff feea 	bl	80111ec <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
 8011418:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801141c:	4618      	mov	r0, r3
 801141e:	f7fd f9cd 	bl	800e7bc <mbedtls_mpi_init>
 8011422:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8011426:	4618      	mov	r0, r3
 8011428:	f7fd f9c8 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
 801142c:	f107 0310 	add.w	r3, r7, #16
 8011430:	4618      	mov	r0, r3
 8011432:	f7fd f9c3 	bl	800e7bc <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
 8011436:	f107 031c 	add.w	r3, r7, #28
 801143a:	4618      	mov	r0, r3
 801143c:	2100      	movs	r1, #0
 801143e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8011442:	f001 f86a 	bl	801251a <memset>

    i = mbedtls_mpi_bitlen( E );
 8011446:	1d3b      	adds	r3, r7, #4
 8011448:	6818      	ldr	r0, [r3, #0]
 801144a:	f7fd fb01 	bl	800ea50 <mbedtls_mpi_bitlen>
 801144e:	f8c7 0658 	str.w	r0, [r7, #1624]	; 0x658

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8011452:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011456:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 801145a:	d213      	bcs.n	8011484 <mbedtls_mpi_exp_mod+0xd8>
 801145c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011460:	2bef      	cmp	r3, #239	; 0xef
 8011462:	d80d      	bhi.n	8011480 <mbedtls_mpi_exp_mod+0xd4>
 8011464:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011468:	2b4f      	cmp	r3, #79	; 0x4f
 801146a:	d807      	bhi.n	801147c <mbedtls_mpi_exp_mod+0xd0>
 801146c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011470:	2b17      	cmp	r3, #23
 8011472:	d901      	bls.n	8011478 <mbedtls_mpi_exp_mod+0xcc>
 8011474:	2303      	movs	r3, #3
 8011476:	e006      	b.n	8011486 <mbedtls_mpi_exp_mod+0xda>
 8011478:	2301      	movs	r3, #1
 801147a:	e004      	b.n	8011486 <mbedtls_mpi_exp_mod+0xda>
 801147c:	2304      	movs	r3, #4
 801147e:	e002      	b.n	8011486 <mbedtls_mpi_exp_mod+0xda>
 8011480:	2305      	movs	r3, #5
 8011482:	e000      	b.n	8011486 <mbedtls_mpi_exp_mod+0xda>
 8011484:	2306      	movs	r3, #6
 8011486:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
 801148a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 801148e:	2b06      	cmp	r3, #6
 8011490:	d902      	bls.n	8011498 <mbedtls_mpi_exp_mod+0xec>
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
 8011492:	2306      	movs	r3, #6
 8011494:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c

    j = N->n + 1;
 8011498:	463b      	mov	r3, r7
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	3301      	adds	r3, #1
 80114a0:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80114a4:	f107 030c 	add.w	r3, r7, #12
 80114a8:	6818      	ldr	r0, [r3, #0]
 80114aa:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 80114ae:	f7fd f9bd 	bl	800e82c <mbedtls_mpi_grow>
 80114b2:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 80114b6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d000      	beq.n	80114c0 <mbedtls_mpi_exp_mod+0x114>
 80114be:	e329      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 80114c0:	f107 031c 	add.w	r3, r7, #28
 80114c4:	330c      	adds	r3, #12
 80114c6:	4618      	mov	r0, r3
 80114c8:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 80114cc:	f7fd f9ae 	bl	800e82c <mbedtls_mpi_grow>
 80114d0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 80114d4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d000      	beq.n	80114de <mbedtls_mpi_exp_mod+0x132>
 80114dc:	e31a      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 80114de:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 80114e2:	005b      	lsls	r3, r3, #1
 80114e4:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 80114e8:	4610      	mov	r0, r2
 80114ea:	4619      	mov	r1, r3
 80114ec:	f7fd f99e 	bl	800e82c <mbedtls_mpi_grow>
 80114f0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 80114f4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d000      	beq.n	80114fe <mbedtls_mpi_exp_mod+0x152>
 80114fc:	e30a      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 80114fe:	f107 0308 	add.w	r3, r7, #8
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801150a:	bf0c      	ite	eq
 801150c:	2301      	moveq	r3, #1
 801150e:	2300      	movne	r3, #0
 8011510:	b2db      	uxtb	r3, r3
 8011512:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
    if( neg )
 8011516:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 801151a:	2b00      	cmp	r3, #0
 801151c:	d017      	beq.n	801154e <mbedtls_mpi_exp_mod+0x1a2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 801151e:	f107 0210 	add.w	r2, r7, #16
 8011522:	f107 0308 	add.w	r3, r7, #8
 8011526:	4610      	mov	r0, r2
 8011528:	6819      	ldr	r1, [r3, #0]
 801152a:	f7fd f9c3 	bl	800e8b4 <mbedtls_mpi_copy>
 801152e:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011532:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011536:	2b00      	cmp	r3, #0
 8011538:	d000      	beq.n	801153c <mbedtls_mpi_exp_mod+0x190>
 801153a:	e2eb      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
        Apos.s = 1;
 801153c:	f107 0310 	add.w	r3, r7, #16
 8011540:	2201      	movs	r2, #1
 8011542:	601a      	str	r2, [r3, #0]
        A = &Apos;
 8011544:	f107 0308 	add.w	r3, r7, #8
 8011548:	f107 0210 	add.w	r2, r7, #16
 801154c:	601a      	str	r2, [r3, #0]
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 801154e:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8011552:	2b00      	cmp	r3, #0
 8011554:	d004      	beq.n	8011560 <mbedtls_mpi_exp_mod+0x1b4>
 8011556:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d13c      	bne.n	80115da <mbedtls_mpi_exp_mod+0x22e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 8011560:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8011564:	4618      	mov	r0, r3
 8011566:	2101      	movs	r1, #1
 8011568:	f7fd fa02 	bl	800e970 <mbedtls_mpi_lset>
 801156c:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011570:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011574:	2b00      	cmp	r3, #0
 8011576:	d000      	beq.n	801157a <mbedtls_mpi_exp_mod+0x1ce>
 8011578:	e2cc      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 801157a:	463b      	mov	r3, r7
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	019b      	lsls	r3, r3, #6
 8011582:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 8011586:	4610      	mov	r0, r2
 8011588:	4619      	mov	r1, r3
 801158a:	f7fd fb61 	bl	800ec50 <mbedtls_mpi_shift_l>
 801158e:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011592:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011596:	2b00      	cmp	r3, #0
 8011598:	d000      	beq.n	801159c <mbedtls_mpi_exp_mod+0x1f0>
 801159a:	e2bb      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 801159c:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 80115a0:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 80115a4:	463b      	mov	r3, r7
 80115a6:	4608      	mov	r0, r1
 80115a8:	4611      	mov	r1, r2
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	f7ff fdda 	bl	8011164 <mbedtls_mpi_mod_mpi>
 80115b0:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 80115b4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d000      	beq.n	80115be <mbedtls_mpi_exp_mod+0x212>
 80115bc:	e2aa      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

        if( _RR != NULL )
 80115be:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d008      	beq.n	80115d8 <mbedtls_mpi_exp_mod+0x22c>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 80115c6:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80115ca:	f8d7 0678 	ldr.w	r0, [r7, #1656]	; 0x678
 80115ce:	4619      	mov	r1, r3
 80115d0:	220c      	movs	r2, #12
 80115d2:	f000 ff97 	bl	8012504 <memcpy>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );

        if( _RR != NULL )
 80115d6:	e008      	b.n	80115ea <mbedtls_mpi_exp_mod+0x23e>
 80115d8:	e007      	b.n	80115ea <mbedtls_mpi_exp_mod+0x23e>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 80115da:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80115de:	4618      	mov	r0, r3
 80115e0:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 80115e4:	220c      	movs	r2, #12
 80115e6:	f000 ff8d 	bl	8012504 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 80115ea:	f107 0208 	add.w	r2, r7, #8
 80115ee:	463b      	mov	r3, r7
 80115f0:	6810      	ldr	r0, [r2, #0]
 80115f2:	6819      	ldr	r1, [r3, #0]
 80115f4:	f7fd fcea 	bl	800efcc <mbedtls_mpi_cmp_mpi>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	db12      	blt.n	8011624 <mbedtls_mpi_exp_mod+0x278>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 80115fe:	f107 031c 	add.w	r3, r7, #28
 8011602:	f103 010c 	add.w	r1, r3, #12
 8011606:	f107 0208 	add.w	r2, r7, #8
 801160a:	463b      	mov	r3, r7
 801160c:	4608      	mov	r0, r1
 801160e:	6811      	ldr	r1, [r2, #0]
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	f7ff fda7 	bl	8011164 <mbedtls_mpi_mod_mpi>
 8011616:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 801161a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801161e:	2b00      	cmp	r3, #0
 8011620:	d011      	beq.n	8011646 <mbedtls_mpi_exp_mod+0x29a>
 8011622:	e277      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 8011624:	f107 031c 	add.w	r3, r7, #28
 8011628:	f103 020c 	add.w	r2, r3, #12
 801162c:	f107 0308 	add.w	r3, r7, #8
 8011630:	4610      	mov	r0, r2
 8011632:	6819      	ldr	r1, [r3, #0]
 8011634:	f7fd f93e 	bl	800e8b4 <mbedtls_mpi_copy>
 8011638:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 801163c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011640:	2b00      	cmp	r3, #0
 8011642:	d000      	beq.n	8011646 <mbedtls_mpi_exp_mod+0x29a>
 8011644:	e266      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 8011646:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 801164a:	f107 031c 	add.w	r3, r7, #28
 801164e:	f103 000c 	add.w	r0, r3, #12
 8011652:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8011656:	463b      	mov	r3, r7
 8011658:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 801165c:	9200      	str	r2, [sp, #0]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	4623      	mov	r3, r4
 8011662:	f7ff fdf3 	bl	801124c <mpi_montmul>
 8011666:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 801166a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801166e:	2b00      	cmp	r3, #0
 8011670:	d000      	beq.n	8011674 <mbedtls_mpi_exp_mod+0x2c8>
 8011672:	e24f      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 8011674:	f107 030c 	add.w	r3, r7, #12
 8011678:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 801167c:	6818      	ldr	r0, [r3, #0]
 801167e:	4611      	mov	r1, r2
 8011680:	f7fd f918 	bl	800e8b4 <mbedtls_mpi_copy>
 8011684:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011688:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801168c:	2b00      	cmp	r3, #0
 801168e:	d000      	beq.n	8011692 <mbedtls_mpi_exp_mod+0x2e6>
 8011690:	e240      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 8011692:	f8d7 5634 	ldr.w	r5, [r7, #1588]	; 0x634
 8011696:	f107 020c 	add.w	r2, r7, #12
 801169a:	463b      	mov	r3, r7
 801169c:	f207 641c 	addw	r4, r7, #1564	; 0x61c
 80116a0:	6810      	ldr	r0, [r2, #0]
 80116a2:	6819      	ldr	r1, [r3, #0]
 80116a4:	462a      	mov	r2, r5
 80116a6:	4623      	mov	r3, r4
 80116a8:	f7ff fe60 	bl	801136c <mpi_montred>
 80116ac:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 80116b0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d000      	beq.n	80116ba <mbedtls_mpi_exp_mod+0x30e>
 80116b8:	e22c      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

    if( wsize > 1 )
 80116ba:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80116be:	2b01      	cmp	r3, #1
 80116c0:	f240 80d2 	bls.w	8011868 <mbedtls_mpi_exp_mod+0x4bc>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 80116c4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80116c8:	3b01      	subs	r3, #1
 80116ca:	461a      	mov	r2, r3
 80116cc:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 80116d0:	4093      	lsls	r3, r2
 80116d2:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 80116d6:	f107 011c 	add.w	r1, r7, #28
 80116da:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 80116de:	4613      	mov	r3, r2
 80116e0:	005b      	lsls	r3, r3, #1
 80116e2:	4413      	add	r3, r2
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	18ca      	adds	r2, r1, r3
 80116e8:	463b      	mov	r3, r7
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	3301      	adds	r3, #1
 80116f0:	4610      	mov	r0, r2
 80116f2:	4619      	mov	r1, r3
 80116f4:	f7fd f89a 	bl	800e82c <mbedtls_mpi_grow>
 80116f8:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 80116fc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011700:	2b00      	cmp	r3, #0
 8011702:	d000      	beq.n	8011706 <mbedtls_mpi_exp_mod+0x35a>
 8011704:	e206      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 8011706:	f107 011c 	add.w	r1, r7, #28
 801170a:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 801170e:	4613      	mov	r3, r2
 8011710:	005b      	lsls	r3, r3, #1
 8011712:	4413      	add	r3, r2
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	18ca      	adds	r2, r1, r3
 8011718:	f107 031c 	add.w	r3, r7, #28
 801171c:	330c      	adds	r3, #12
 801171e:	4610      	mov	r0, r2
 8011720:	4619      	mov	r1, r3
 8011722:	f7fd f8c7 	bl	800e8b4 <mbedtls_mpi_copy>
 8011726:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 801172a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801172e:	2b00      	cmp	r3, #0
 8011730:	d000      	beq.n	8011734 <mbedtls_mpi_exp_mod+0x388>
 8011732:	e1ef      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

        for( i = 0; i < wsize - 1; i++ )
 8011734:	2300      	movs	r3, #0
 8011736:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 801173a:	e027      	b.n	801178c <mbedtls_mpi_exp_mod+0x3e0>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 801173c:	f107 011c 	add.w	r1, r7, #28
 8011740:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 8011744:	4613      	mov	r3, r2
 8011746:	005b      	lsls	r3, r3, #1
 8011748:	4413      	add	r3, r2
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	18c8      	adds	r0, r1, r3
 801174e:	f107 011c 	add.w	r1, r7, #28
 8011752:	f8d7 2640 	ldr.w	r2, [r7, #1600]	; 0x640
 8011756:	4613      	mov	r3, r2
 8011758:	005b      	lsls	r3, r3, #1
 801175a:	4413      	add	r3, r2
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	4419      	add	r1, r3
 8011760:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8011764:	463b      	mov	r3, r7
 8011766:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 801176a:	9200      	str	r2, [sp, #0]
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	4623      	mov	r3, r4
 8011770:	f7ff fd6c 	bl	801124c <mpi_montmul>
 8011774:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011778:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801177c:	2b00      	cmp	r3, #0
 801177e:	d000      	beq.n	8011782 <mbedtls_mpi_exp_mod+0x3d6>
 8011780:	e1c8      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 8011782:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011786:	3301      	adds	r3, #1
 8011788:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 801178c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8011790:	1e5a      	subs	r2, r3, #1
 8011792:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011796:	429a      	cmp	r2, r3
 8011798:	d8d0      	bhi.n	801173c <mbedtls_mpi_exp_mod+0x390>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 801179a:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 801179e:	3301      	adds	r3, #1
 80117a0:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 80117a4:	e057      	b.n	8011856 <mbedtls_mpi_exp_mod+0x4aa>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 80117a6:	f107 011c 	add.w	r1, r7, #28
 80117aa:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 80117ae:	4613      	mov	r3, r2
 80117b0:	005b      	lsls	r3, r3, #1
 80117b2:	4413      	add	r3, r2
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	18ca      	adds	r2, r1, r3
 80117b8:	463b      	mov	r3, r7
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	3301      	adds	r3, #1
 80117c0:	4610      	mov	r0, r2
 80117c2:	4619      	mov	r1, r3
 80117c4:	f7fd f832 	bl	800e82c <mbedtls_mpi_grow>
 80117c8:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 80117cc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d000      	beq.n	80117d6 <mbedtls_mpi_exp_mod+0x42a>
 80117d4:	e19e      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 80117d6:	f107 011c 	add.w	r1, r7, #28
 80117da:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 80117de:	4613      	mov	r3, r2
 80117e0:	005b      	lsls	r3, r3, #1
 80117e2:	4413      	add	r3, r2
 80117e4:	009b      	lsls	r3, r3, #2
 80117e6:	18c8      	adds	r0, r1, r3
 80117e8:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80117ec:	1e5a      	subs	r2, r3, #1
 80117ee:	f107 011c 	add.w	r1, r7, #28
 80117f2:	4613      	mov	r3, r2
 80117f4:	005b      	lsls	r3, r3, #1
 80117f6:	4413      	add	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	440b      	add	r3, r1
 80117fc:	4619      	mov	r1, r3
 80117fe:	f7fd f859 	bl	800e8b4 <mbedtls_mpi_copy>
 8011802:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011806:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801180a:	2b00      	cmp	r3, #0
 801180c:	d000      	beq.n	8011810 <mbedtls_mpi_exp_mod+0x464>
 801180e:	e181      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 8011810:	f107 011c 	add.w	r1, r7, #28
 8011814:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8011818:	4613      	mov	r3, r2
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	4413      	add	r3, r2
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	18c8      	adds	r0, r1, r3
 8011822:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8011826:	f107 031c 	add.w	r3, r7, #28
 801182a:	f103 010c 	add.w	r1, r3, #12
 801182e:	463b      	mov	r3, r7
 8011830:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 8011834:	9200      	str	r2, [sp, #0]
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	4623      	mov	r3, r4
 801183a:	f7ff fd07 	bl	801124c <mpi_montmul>
 801183e:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011842:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011846:	2b00      	cmp	r3, #0
 8011848:	d000      	beq.n	801184c <mbedtls_mpi_exp_mod+0x4a0>
 801184a:	e163      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 801184c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011850:	3301      	adds	r3, #1
 8011852:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8011856:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 801185a:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 801185e:	409a      	lsls	r2, r3
 8011860:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011864:	429a      	cmp	r2, r3
 8011866:	d89e      	bhi.n	80117a6 <mbedtls_mpi_exp_mod+0x3fa>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 8011868:	1d3b      	adds	r3, r7, #4
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    bufsize = 0;
 8011872:	2300      	movs	r3, #0
 8011874:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
    nbits   = 0;
 8011878:	2300      	movs	r3, #0
 801187a:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
    wbits   = 0;
 801187e:	2300      	movs	r3, #0
 8011880:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
    state   = 0;
 8011884:	2300      	movs	r3, #0
 8011886:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

    while( 1 )
    {
        if( bufsize == 0 )
 801188a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 801188e:	2b00      	cmp	r3, #0
 8011890:	d110      	bne.n	80118b4 <mbedtls_mpi_exp_mod+0x508>
        {
            if( nblimbs == 0 )
 8011892:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8011896:	2b00      	cmp	r3, #0
 8011898:	d104      	bne.n	80118a4 <mbedtls_mpi_exp_mod+0x4f8>
                break;
 801189a:	bf00      	nop
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 801189c:	2300      	movs	r3, #0
 801189e:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 80118a2:	e0f5      	b.n	8011a90 <mbedtls_mpi_exp_mod+0x6e4>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 80118a4:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80118a8:	3b01      	subs	r3, #1
 80118aa:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 80118ae:	2320      	movs	r3, #32
 80118b0:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
        }

        bufsize--;
 80118b4:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80118b8:	3b01      	subs	r3, #1
 80118ba:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650

        ei = (E->p[nblimbs] >> bufsize) & 1;
 80118be:	1d3b      	adds	r3, r7, #4
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	689a      	ldr	r2, [r3, #8]
 80118c4:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4413      	add	r3, r2
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80118d2:	fa22 f303 	lsr.w	r3, r2, r3
 80118d6:	f003 0301 	and.w	r3, r3, #1
 80118da:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 80118de:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d104      	bne.n	80118f0 <mbedtls_mpi_exp_mod+0x544>
 80118e6:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d100      	bne.n	80118f0 <mbedtls_mpi_exp_mod+0x544>
            continue;
 80118ee:	e08a      	b.n	8011a06 <mbedtls_mpi_exp_mod+0x65a>

        if( ei == 0 && state == 1 )
 80118f0:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d11b      	bne.n	8011930 <mbedtls_mpi_exp_mod+0x584>
 80118f8:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	d117      	bne.n	8011930 <mbedtls_mpi_exp_mod+0x584>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8011900:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8011904:	f107 010c 	add.w	r1, r7, #12
 8011908:	f107 020c 	add.w	r2, r7, #12
 801190c:	463b      	mov	r3, r7
 801190e:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8011912:	9000      	str	r0, [sp, #0]
 8011914:	6808      	ldr	r0, [r1, #0]
 8011916:	6811      	ldr	r1, [r2, #0]
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	4623      	mov	r3, r4
 801191c:	f7ff fc96 	bl	801124c <mpi_montmul>
 8011920:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011924:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011928:	2b00      	cmp	r3, #0
 801192a:	d000      	beq.n	801192e <mbedtls_mpi_exp_mod+0x582>
 801192c:	e0f2      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
            continue;
 801192e:	e06a      	b.n	8011a06 <mbedtls_mpi_exp_mod+0x65a>
        }

        /*
         * add ei to current window
         */
        state = 2;
 8011930:	2302      	movs	r3, #2
 8011932:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648

        nbits++;
 8011936:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 801193a:	3301      	adds	r3, #1
 801193c:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
        wbits |= ( ei << ( wsize - nbits ) );
 8011940:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8011944:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	461a      	mov	r2, r3
 801194c:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 8011950:	4093      	lsls	r3, r2
 8011952:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 8011956:	4313      	orrs	r3, r2
 8011958:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

        if( nbits == wsize )
 801195c:	f8d7 264c 	ldr.w	r2, [r7, #1612]	; 0x64c
 8011960:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8011964:	429a      	cmp	r2, r3
 8011966:	d14e      	bne.n	8011a06 <mbedtls_mpi_exp_mod+0x65a>
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 8011968:	2300      	movs	r3, #0
 801196a:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 801196e:	e01b      	b.n	80119a8 <mbedtls_mpi_exp_mod+0x5fc>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8011970:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8011974:	f107 010c 	add.w	r1, r7, #12
 8011978:	f107 020c 	add.w	r2, r7, #12
 801197c:	463b      	mov	r3, r7
 801197e:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8011982:	9000      	str	r0, [sp, #0]
 8011984:	6808      	ldr	r0, [r1, #0]
 8011986:	6811      	ldr	r1, [r2, #0]
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	4623      	mov	r3, r4
 801198c:	f7ff fc5e 	bl	801124c <mpi_montmul>
 8011990:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011994:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011998:	2b00      	cmp	r3, #0
 801199a:	d000      	beq.n	801199e <mbedtls_mpi_exp_mod+0x5f2>
 801199c:	e0ba      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 801199e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80119a2:	3301      	adds	r3, #1
 80119a4:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 80119a8:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 80119ac:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d3dd      	bcc.n	8011970 <mbedtls_mpi_exp_mod+0x5c4>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 80119b4:	f107 011c 	add.w	r1, r7, #28
 80119b8:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 80119bc:	4613      	mov	r3, r2
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	4413      	add	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	18cd      	adds	r5, r1, r3
 80119c6:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 80119ca:	f107 020c 	add.w	r2, r7, #12
 80119ce:	463b      	mov	r3, r7
 80119d0:	f207 611c 	addw	r1, r7, #1564	; 0x61c
 80119d4:	9100      	str	r1, [sp, #0]
 80119d6:	6810      	ldr	r0, [r2, #0]
 80119d8:	4629      	mov	r1, r5
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	4623      	mov	r3, r4
 80119de:	f7ff fc35 	bl	801124c <mpi_montmul>
 80119e2:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 80119e6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d000      	beq.n	80119f0 <mbedtls_mpi_exp_mod+0x644>
 80119ee:	e091      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

            state--;
 80119f0:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80119f4:	3b01      	subs	r3, #1
 80119f6:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
            nbits = 0;
 80119fa:	2300      	movs	r3, #0
 80119fc:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
            wbits = 0;
 8011a00:	2300      	movs	r3, #0
 8011a02:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
        }
    }
 8011a06:	e740      	b.n	801188a <mbedtls_mpi_exp_mod+0x4de>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 8011a08:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8011a0c:	f107 010c 	add.w	r1, r7, #12
 8011a10:	f107 020c 	add.w	r2, r7, #12
 8011a14:	463b      	mov	r3, r7
 8011a16:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8011a1a:	9000      	str	r0, [sp, #0]
 8011a1c:	6808      	ldr	r0, [r1, #0]
 8011a1e:	6811      	ldr	r1, [r2, #0]
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	4623      	mov	r3, r4
 8011a24:	f7ff fc12 	bl	801124c <mpi_montmul>
 8011a28:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011a2c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d000      	beq.n	8011a36 <mbedtls_mpi_exp_mod+0x68a>
 8011a34:	e06e      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

        wbits <<= 1;
 8011a36:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8011a3a:	005b      	lsls	r3, r3, #1
 8011a3c:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660

        if( ( wbits & ( one << wsize ) ) != 0 )
 8011a40:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8011a44:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 8011a48:	409a      	lsls	r2, r3
 8011a4a:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8011a4e:	4013      	ands	r3, r2
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d018      	beq.n	8011a86 <mbedtls_mpi_exp_mod+0x6da>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 8011a54:	f8d7 4634 	ldr.w	r4, [r7, #1588]	; 0x634
 8011a58:	f107 020c 	add.w	r2, r7, #12
 8011a5c:	f107 031c 	add.w	r3, r7, #28
 8011a60:	f103 050c 	add.w	r5, r3, #12
 8011a64:	463b      	mov	r3, r7
 8011a66:	f207 611c 	addw	r1, r7, #1564	; 0x61c
 8011a6a:	9100      	str	r1, [sp, #0]
 8011a6c:	6810      	ldr	r0, [r2, #0]
 8011a6e:	4629      	mov	r1, r5
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	4623      	mov	r3, r4
 8011a74:	f7ff fbea 	bl	801124c <mpi_montmul>
 8011a78:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011a7c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d000      	beq.n	8011a86 <mbedtls_mpi_exp_mod+0x6da>
 8011a84:	e046      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 8011a86:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8011a90:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8011a94:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d3b5      	bcc.n	8011a08 <mbedtls_mpi_exp_mod+0x65c>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 8011a9c:	f8d7 5634 	ldr.w	r5, [r7, #1588]	; 0x634
 8011aa0:	f107 020c 	add.w	r2, r7, #12
 8011aa4:	463b      	mov	r3, r7
 8011aa6:	f207 641c 	addw	r4, r7, #1564	; 0x61c
 8011aaa:	6810      	ldr	r0, [r2, #0]
 8011aac:	6819      	ldr	r1, [r3, #0]
 8011aae:	462a      	mov	r2, r5
 8011ab0:	4623      	mov	r3, r4
 8011ab2:	f7ff fc5b 	bl	801136c <mpi_montred>
 8011ab6:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011aba:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d000      	beq.n	8011ac4 <mbedtls_mpi_exp_mod+0x718>
 8011ac2:	e027      	b.n	8011b14 <mbedtls_mpi_exp_mod+0x768>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 8011ac4:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d023      	beq.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
 8011acc:	1d3b      	adds	r3, r7, #4
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d01e      	beq.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
 8011ad6:	1d3b      	adds	r3, r7, #4
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	689b      	ldr	r3, [r3, #8]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f003 0301 	and.w	r3, r3, #1
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d016      	beq.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
    {
        X->s = -1;
 8011ae6:	f107 030c 	add.w	r3, r7, #12
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f04f 32ff 	mov.w	r2, #4294967295
 8011af0:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 8011af2:	f107 010c 	add.w	r1, r7, #12
 8011af6:	463a      	mov	r2, r7
 8011af8:	f107 030c 	add.w	r3, r7, #12
 8011afc:	6808      	ldr	r0, [r1, #0]
 8011afe:	6811      	ldr	r1, [r2, #0]
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	f7fd fc89 	bl	800f418 <mbedtls_mpi_add_mpi>
 8011b06:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
 8011b0a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d000      	beq.n	8011b14 <mbedtls_mpi_exp_mod+0x768>
 8011b12:	bf00      	nop
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8011b14:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8011b20:	4093      	lsls	r3, r2
 8011b22:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8011b26:	e010      	b.n	8011b4a <mbedtls_mpi_exp_mod+0x79e>
        mbedtls_mpi_free( &W[i] );
 8011b28:	f107 011c 	add.w	r1, r7, #28
 8011b2c:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8011b30:	4613      	mov	r3, r2
 8011b32:	005b      	lsls	r3, r3, #1
 8011b34:	4413      	add	r3, r2
 8011b36:	009b      	lsls	r3, r3, #2
 8011b38:	440b      	add	r3, r1
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7fc fe50 	bl	800e7e0 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8011b40:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011b44:	3301      	adds	r3, #1
 8011b46:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8011b4a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8011b4e:	f8d7 2644 	ldr.w	r2, [r7, #1604]	; 0x644
 8011b52:	409a      	lsls	r2, r3
 8011b54:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d8e5      	bhi.n	8011b28 <mbedtls_mpi_exp_mod+0x77c>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 8011b5c:	f107 031c 	add.w	r3, r7, #28
 8011b60:	330c      	adds	r3, #12
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7fc fe3c 	bl	800e7e0 <mbedtls_mpi_free>
 8011b68:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fc fe37 	bl	800e7e0 <mbedtls_mpi_free>
 8011b72:	f107 0310 	add.w	r3, r7, #16
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7fc fe32 	bl	800e7e0 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 8011b7c:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d004      	beq.n	8011b8e <mbedtls_mpi_exp_mod+0x7e2>
 8011b84:	f8d7 3678 	ldr.w	r3, [r7, #1656]	; 0x678
 8011b88:	689b      	ldr	r3, [r3, #8]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d104      	bne.n	8011b98 <mbedtls_mpi_exp_mod+0x7ec>
        mbedtls_mpi_free( &RR );
 8011b8e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fc fe24 	bl	800e7e0 <mbedtls_mpi_free>

    return( ret );
 8011b98:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f507 67cd 	add.w	r7, r7, #1640	; 0x668
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ba6:	bf00      	nop

08011ba8 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fc fe02 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	330c      	adds	r3, #12
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7fc fdfd 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	3318      	adds	r3, #24
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7fc fdf8 	bl	800e7bc <mbedtls_mpi_init>
}
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop

08011bd4 <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2200      	movs	r2, #0
 8011be0:	701a      	strb	r2, [r3, #0]
    mbedtls_mpi_init( &grp->P );
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	3304      	adds	r3, #4
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fc fde8 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3310      	adds	r3, #16
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7fc fde3 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	331c      	adds	r3, #28
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7fc fdde 	bl	800e7bc <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	3328      	adds	r3, #40	; 0x28
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7ff ffcf 	bl	8011ba8 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	334c      	adds	r3, #76	; 0x4c
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7fc fdd4 	bl	800e7bc <mbedtls_mpi_init>
    grp->pbits = 0;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2200      	movs	r2, #0
 8011c18:	659a      	str	r2, [r3, #88]	; 0x58
    grp->nbits = 0;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	65da      	str	r2, [r3, #92]	; 0x5c
    grp->h = 0;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2200      	movs	r2, #0
 8011c24:	661a      	str	r2, [r3, #96]	; 0x60
    grp->modp = NULL;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	665a      	str	r2, [r3, #100]	; 0x64
    grp->t_pre = NULL;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	669a      	str	r2, [r3, #104]	; 0x68
    grp->t_post = NULL;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2200      	movs	r2, #0
 8011c36:	66da      	str	r2, [r3, #108]	; 0x6c
    grp->t_data = NULL;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	671a      	str	r2, [r3, #112]	; 0x70
    grp->T = NULL;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2200      	movs	r2, #0
 8011c42:	675a      	str	r2, [r3, #116]	; 0x74
    grp->T_size = 0;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2200      	movs	r2, #0
 8011c48:	679a      	str	r2, [r3, #120]	; 0x78
}
 8011c4a:	3708      	adds	r7, #8
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
    if( pt == NULL )
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d100      	bne.n	8011c60 <mbedtls_ecp_point_free+0x10>
        return;
 8011c5e:	e00d      	b.n	8011c7c <mbedtls_ecp_point_free+0x2c>

    mbedtls_mpi_free( &( pt->X ) );
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fc fdbc 	bl	800e7e0 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	330c      	adds	r3, #12
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7fc fdb7 	bl	800e7e0 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	3318      	adds	r3, #24
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7fc fdb2 	bl	800e7e0 <mbedtls_mpi_free>
}
 8011c7c:	3708      	adds	r7, #8
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
 8011c82:	bf00      	nop

08011c84 <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
    size_t i;

    if( grp == NULL )
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d100      	bne.n	8011c94 <mbedtls_ecp_group_free+0x10>
        return;
 8011c92:	e03f      	b.n	8011d14 <mbedtls_ecp_group_free+0x90>

    if( grp->h != 1 )
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d018      	beq.n	8011cce <mbedtls_ecp_group_free+0x4a>
    {
        mbedtls_mpi_free( &grp->P );
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	3304      	adds	r3, #4
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7fc fd9d 	bl	800e7e0 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	3310      	adds	r3, #16
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7fc fd98 	bl	800e7e0 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	331c      	adds	r3, #28
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7fc fd93 	bl	800e7e0 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	3328      	adds	r3, #40	; 0x28
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7ff ffc6 	bl	8011c50 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	334c      	adds	r3, #76	; 0x4c
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fc fd89 	bl	800e7e0 <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d01a      	beq.n	8011d0c <mbedtls_ecp_group_free+0x88>
    {
        for( i = 0; i < grp->T_size; i++ )
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	60fb      	str	r3, [r7, #12]
 8011cda:	e00d      	b.n	8011cf8 <mbedtls_ecp_group_free+0x74>
            mbedtls_ecp_point_free( &grp->T[i] );
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8011ce0:	68fa      	ldr	r2, [r7, #12]
 8011ce2:	4613      	mov	r3, r2
 8011ce4:	00db      	lsls	r3, r3, #3
 8011ce6:	4413      	add	r3, r2
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	440b      	add	r3, r1
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7ff ffaf 	bl	8011c50 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	60fb      	str	r3, [r7, #12]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d8ec      	bhi.n	8011cdc <mbedtls_ecp_group_free+0x58>
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d06:	4618      	mov	r0, r3
 8011d08:	f000 fbf4 	bl	80124f4 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	217c      	movs	r1, #124	; 0x7c
 8011d10:	f000 f8be 	bl	8011e90 <mbedtls_platform_zeroize>
}
 8011d14:	3710      	adds	r7, #16
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop

08011d1c <ecp_mpi_load>:
/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b085      	sub	sp, #20
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]
    X->s = 1;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	601a      	str	r2, [r3, #0]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	089a      	lsrs	r2, r3, #2
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	605a      	str	r2, [r3, #4]
    X->p = (mbedtls_mpi_uint *) p;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	68ba      	ldr	r2, [r7, #8]
 8011d3a:	609a      	str	r2, [r3, #8]
}
 8011d3c:	3714      	adds	r7, #20
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d44:	4770      	bx	lr
 8011d46:	bf00      	nop

08011d48 <ecp_mpi_set1>:

/*
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b083      	sub	sp, #12
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2201      	movs	r2, #1
 8011d54:	601a      	str	r2, [r3, #0]
    X->n = 1;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2201      	movs	r2, #1
 8011d5a:	605a      	str	r2, [r3, #4]
    X->p = one;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	4a03      	ldr	r2, [pc, #12]	; (8011d6c <ecp_mpi_set1+0x24>)
 8011d60:	609a      	str	r2, [r3, #8]
}
 8011d62:	370c      	adds	r7, #12
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr
 8011d6c:	1ffed574 	.word	0x1ffed574

08011d70 <ecp_group_load>:
                           const mbedtls_mpi_uint *a,  size_t alen,
                           const mbedtls_mpi_uint *b,  size_t blen,
                           const mbedtls_mpi_uint *gx, size_t gxlen,
                           const mbedtls_mpi_uint *gy, size_t gylen,
                           const mbedtls_mpi_uint *n,  size_t nlen)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	607a      	str	r2, [r7, #4]
 8011d7c:	603b      	str	r3, [r7, #0]
    ecp_mpi_load( &grp->P, p, plen );
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	3304      	adds	r3, #4
 8011d82:	4618      	mov	r0, r3
 8011d84:	68b9      	ldr	r1, [r7, #8]
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	f7ff ffc8 	bl	8011d1c <ecp_mpi_load>
    if( a != NULL )
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d006      	beq.n	8011da0 <ecp_group_load+0x30>
        ecp_mpi_load( &grp->A, a, alen );
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	3310      	adds	r3, #16
 8011d96:	4618      	mov	r0, r3
 8011d98:	6839      	ldr	r1, [r7, #0]
 8011d9a:	69ba      	ldr	r2, [r7, #24]
 8011d9c:	f7ff ffbe 	bl	8011d1c <ecp_mpi_load>
    ecp_mpi_load( &grp->B, b, blen );
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	331c      	adds	r3, #28
 8011da4:	4618      	mov	r0, r3
 8011da6:	69f9      	ldr	r1, [r7, #28]
 8011da8:	6a3a      	ldr	r2, [r7, #32]
 8011daa:	f7ff ffb7 	bl	8011d1c <ecp_mpi_load>
    ecp_mpi_load( &grp->N, n, nlen );
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	334c      	adds	r3, #76	; 0x4c
 8011db2:	4618      	mov	r0, r3
 8011db4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011db8:	f7ff ffb0 	bl	8011d1c <ecp_mpi_load>

    ecp_mpi_load( &grp->G.X, gx, gxlen );
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	3328      	adds	r3, #40	; 0x28
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dc6:	f7ff ffa9 	bl	8011d1c <ecp_mpi_load>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	3334      	adds	r3, #52	; 0x34
 8011dce:	4618      	mov	r0, r3
 8011dd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dd4:	f7ff ffa2 	bl	8011d1c <ecp_mpi_load>
    ecp_mpi_set1( &grp->G.Z );
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	3340      	adds	r3, #64	; 0x40
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7ff ffb3 	bl	8011d48 <ecp_mpi_set1>

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	3304      	adds	r3, #4
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7fc fe32 	bl	800ea50 <mbedtls_mpi_bitlen>
 8011dec:	4602      	mov	r2, r0
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	659a      	str	r2, [r3, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	334c      	adds	r3, #76	; 0x4c
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fc fe2a 	bl	800ea50 <mbedtls_mpi_bitlen>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	65da      	str	r2, [r3, #92]	; 0x5c

    grp->h = 1;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	2201      	movs	r2, #1
 8011e06:	661a      	str	r2, [r3, #96]	; 0x60

    return( 0 );
 8011e08:	2300      	movs	r3, #0
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop

08011e14 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b08c      	sub	sp, #48	; 0x30
 8011e18:	af0a      	add	r7, sp, #40	; 0x28
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	70fb      	strb	r3, [r7, #3]
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f7ff ff2f 	bl	8011c84 <mbedtls_ecp_group_free>

    grp->id = id;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	78fa      	ldrb	r2, [r7, #3]
 8011e2a:	701a      	strb	r2, [r3, #0]

    switch( id )
 8011e2c:	78fb      	ldrb	r3, [r7, #3]
 8011e2e:	2b03      	cmp	r3, #3
 8011e30:	d119      	bne.n	8011e66 <mbedtls_ecp_group_load+0x52>
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
            return( LOAD_GROUP( secp256r1 ) );
 8011e32:	2300      	movs	r3, #0
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	4b10      	ldr	r3, [pc, #64]	; (8011e78 <mbedtls_ecp_group_load+0x64>)
 8011e38:	9301      	str	r3, [sp, #4]
 8011e3a:	2320      	movs	r3, #32
 8011e3c:	9302      	str	r3, [sp, #8]
 8011e3e:	4b0f      	ldr	r3, [pc, #60]	; (8011e7c <mbedtls_ecp_group_load+0x68>)
 8011e40:	9303      	str	r3, [sp, #12]
 8011e42:	2320      	movs	r3, #32
 8011e44:	9304      	str	r3, [sp, #16]
 8011e46:	4b0e      	ldr	r3, [pc, #56]	; (8011e80 <mbedtls_ecp_group_load+0x6c>)
 8011e48:	9305      	str	r3, [sp, #20]
 8011e4a:	2320      	movs	r3, #32
 8011e4c:	9306      	str	r3, [sp, #24]
 8011e4e:	4b0d      	ldr	r3, [pc, #52]	; (8011e84 <mbedtls_ecp_group_load+0x70>)
 8011e50:	9307      	str	r3, [sp, #28]
 8011e52:	2320      	movs	r3, #32
 8011e54:	9308      	str	r3, [sp, #32]
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	490b      	ldr	r1, [pc, #44]	; (8011e88 <mbedtls_ecp_group_load+0x74>)
 8011e5a:	2220      	movs	r2, #32
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	f7ff ff87 	bl	8011d70 <ecp_group_load>
 8011e62:	4603      	mov	r3, r0
 8011e64:	e003      	b.n	8011e6e <mbedtls_ecp_group_load+0x5a>
            grp->modp = ecp_mod_p448;
            return( ecp_use_curve448( grp ) );
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff ff0c 	bl	8011c84 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8011e6c:	4b07      	ldr	r3, [pc, #28]	; (8011e8c <mbedtls_ecp_group_load+0x78>)
    }
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	08013dd4 	.word	0x08013dd4
 8011e7c:	08013df4 	.word	0x08013df4
 8011e80:	08013e14 	.word	0x08013e14
 8011e84:	08013e34 	.word	0x08013e34
 8011e88:	08013db4 	.word	0x08013db4
 8011e8c:	ffffb180 	.word	0xffffb180

08011e90 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8011e9a:	4b04      	ldr	r3, [pc, #16]	; (8011eac <mbedtls_platform_zeroize+0x1c>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	683a      	ldr	r2, [r7, #0]
 8011ea4:	4798      	blx	r3
}
 8011ea6:	3708      	adds	r7, #8
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	1ffed578 	.word	0x1ffed578

08011eb0 <main>:
 * \retval
 *  0 on success
 *  1 on failure
 */
int main(Void)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
	//Return value
	int32_t status = (int32_t) 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	607b      	str	r3, [r7, #4]

	// Initialisation of DAVE Apps
    if (DAVE_Init() == DAVE_STATUS_FAILURE)
 8011eba:	f7f7 f8bd 	bl	8009038 <DAVE_Init>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d100      	bne.n	8011ec6 <main+0x16>
    {
        /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
        while (1U) { }
 8011ec4:	e7fe      	b.n	8011ec4 <main+0x14>
    }

    pal_logger_init(&logger_console);
 8011ec6:	4809      	ldr	r0, [pc, #36]	; (8011eec <main+0x3c>)
 8011ec8:	f7f7 fb34 	bl	8009534 <pal_logger_init>

    pal_os_timer_delay_in_milliseconds(100);
 8011ecc:	2064      	movs	r0, #100	; 0x64
 8011ece:	f7f7 fd8d 	bl	80099ec <pal_os_timer_delay_in_milliseconds>

//    optiga_shell_wait_for_user();

    qi_auth_ptx_prx_test();
 8011ed2:	f7ef fc69 	bl	80017a8 <qi_auth_ptx_prx_test>

	return ((status == 0)? 0:1);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	bf14      	ite	ne
 8011edc:	2301      	movne	r3, #1
 8011ede:	2300      	moveq	r3, #0
 8011ee0:	b2db      	uxtb	r3, r3
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3708      	adds	r7, #8
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	1ffed12c 	.word	0x1ffed12c

08011ef0 <__aeabi_uldivmod>:
 8011ef0:	b94b      	cbnz	r3, 8011f06 <__aeabi_uldivmod+0x16>
 8011ef2:	b942      	cbnz	r2, 8011f06 <__aeabi_uldivmod+0x16>
 8011ef4:	2900      	cmp	r1, #0
 8011ef6:	bf08      	it	eq
 8011ef8:	2800      	cmpeq	r0, #0
 8011efa:	d002      	beq.n	8011f02 <__aeabi_uldivmod+0x12>
 8011efc:	f04f 31ff 	mov.w	r1, #4294967295
 8011f00:	4608      	mov	r0, r1
 8011f02:	f000 b83b 	b.w	8011f7c <__aeabi_idiv0>
 8011f06:	b082      	sub	sp, #8
 8011f08:	46ec      	mov	ip, sp
 8011f0a:	e92d 5000 	stmdb	sp!, {ip, lr}
 8011f0e:	f000 f81d 	bl	8011f4c <__gnu_uldivmod_helper>
 8011f12:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011f16:	b002      	add	sp, #8
 8011f18:	bc0c      	pop	{r2, r3}
 8011f1a:	4770      	bx	lr

08011f1c <__gnu_ldivmod_helper>:
 8011f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f20:	9c06      	ldr	r4, [sp, #24]
 8011f22:	4615      	mov	r5, r2
 8011f24:	4606      	mov	r6, r0
 8011f26:	460f      	mov	r7, r1
 8011f28:	4698      	mov	r8, r3
 8011f2a:	f000 f829 	bl	8011f80 <__divdi3>
 8011f2e:	fb05 f301 	mul.w	r3, r5, r1
 8011f32:	fb00 3808 	mla	r8, r0, r8, r3
 8011f36:	fba5 2300 	umull	r2, r3, r5, r0
 8011f3a:	1ab2      	subs	r2, r6, r2
 8011f3c:	4443      	add	r3, r8
 8011f3e:	eb67 0303 	sbc.w	r3, r7, r3
 8011f42:	e9c4 2300 	strd	r2, r3, [r4]
 8011f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f4a:	bf00      	nop

08011f4c <__gnu_uldivmod_helper>:
 8011f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f50:	9c06      	ldr	r4, [sp, #24]
 8011f52:	4690      	mov	r8, r2
 8011f54:	4606      	mov	r6, r0
 8011f56:	460f      	mov	r7, r1
 8011f58:	461d      	mov	r5, r3
 8011f5a:	f000 f95f 	bl	801221c <__udivdi3>
 8011f5e:	fb00 f505 	mul.w	r5, r0, r5
 8011f62:	fba0 2308 	umull	r2, r3, r0, r8
 8011f66:	fb08 5501 	mla	r5, r8, r1, r5
 8011f6a:	1ab2      	subs	r2, r6, r2
 8011f6c:	442b      	add	r3, r5
 8011f6e:	eb67 0303 	sbc.w	r3, r7, r3
 8011f72:	e9c4 2300 	strd	r2, r3, [r4]
 8011f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f7a:	bf00      	nop

08011f7c <__aeabi_idiv0>:
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop

08011f80 <__divdi3>:
 8011f80:	2900      	cmp	r1, #0
 8011f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f86:	f2c0 80a6 	blt.w	80120d6 <__divdi3+0x156>
 8011f8a:	2600      	movs	r6, #0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f2c0 809c 	blt.w	80120ca <__divdi3+0x14a>
 8011f92:	4688      	mov	r8, r1
 8011f94:	4694      	mov	ip, r2
 8011f96:	469e      	mov	lr, r3
 8011f98:	4615      	mov	r5, r2
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	460f      	mov	r7, r1
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d13d      	bne.n	801201e <__divdi3+0x9e>
 8011fa2:	428a      	cmp	r2, r1
 8011fa4:	d959      	bls.n	801205a <__divdi3+0xda>
 8011fa6:	fab2 f382 	clz	r3, r2
 8011faa:	b13b      	cbz	r3, 8011fbc <__divdi3+0x3c>
 8011fac:	f1c3 0220 	rsb	r2, r3, #32
 8011fb0:	409f      	lsls	r7, r3
 8011fb2:	fa20 f202 	lsr.w	r2, r0, r2
 8011fb6:	409d      	lsls	r5, r3
 8011fb8:	4317      	orrs	r7, r2
 8011fba:	409c      	lsls	r4, r3
 8011fbc:	0c29      	lsrs	r1, r5, #16
 8011fbe:	0c22      	lsrs	r2, r4, #16
 8011fc0:	fbb7 fef1 	udiv	lr, r7, r1
 8011fc4:	b2a8      	uxth	r0, r5
 8011fc6:	fb01 771e 	mls	r7, r1, lr, r7
 8011fca:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8011fce:	fb00 f30e 	mul.w	r3, r0, lr
 8011fd2:	42bb      	cmp	r3, r7
 8011fd4:	d90a      	bls.n	8011fec <__divdi3+0x6c>
 8011fd6:	197f      	adds	r7, r7, r5
 8011fd8:	f10e 32ff 	add.w	r2, lr, #4294967295
 8011fdc:	f080 8105 	bcs.w	80121ea <__divdi3+0x26a>
 8011fe0:	42bb      	cmp	r3, r7
 8011fe2:	f240 8102 	bls.w	80121ea <__divdi3+0x26a>
 8011fe6:	f1ae 0e02 	sub.w	lr, lr, #2
 8011fea:	442f      	add	r7, r5
 8011fec:	1aff      	subs	r7, r7, r3
 8011fee:	b2a4      	uxth	r4, r4
 8011ff0:	fbb7 f3f1 	udiv	r3, r7, r1
 8011ff4:	fb01 7713 	mls	r7, r1, r3, r7
 8011ff8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8011ffc:	fb00 f003 	mul.w	r0, r0, r3
 8012000:	42b8      	cmp	r0, r7
 8012002:	d908      	bls.n	8012016 <__divdi3+0x96>
 8012004:	197f      	adds	r7, r7, r5
 8012006:	f103 32ff 	add.w	r2, r3, #4294967295
 801200a:	f080 80f0 	bcs.w	80121ee <__divdi3+0x26e>
 801200e:	42b8      	cmp	r0, r7
 8012010:	f240 80ed 	bls.w	80121ee <__divdi3+0x26e>
 8012014:	3b02      	subs	r3, #2
 8012016:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 801201a:	2200      	movs	r2, #0
 801201c:	e003      	b.n	8012026 <__divdi3+0xa6>
 801201e:	428b      	cmp	r3, r1
 8012020:	d90f      	bls.n	8012042 <__divdi3+0xc2>
 8012022:	2200      	movs	r2, #0
 8012024:	4613      	mov	r3, r2
 8012026:	1c34      	adds	r4, r6, #0
 8012028:	bf18      	it	ne
 801202a:	2401      	movne	r4, #1
 801202c:	4260      	negs	r0, r4
 801202e:	f04f 0500 	mov.w	r5, #0
 8012032:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8012036:	4058      	eors	r0, r3
 8012038:	4051      	eors	r1, r2
 801203a:	1900      	adds	r0, r0, r4
 801203c:	4169      	adcs	r1, r5
 801203e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012042:	fab3 f283 	clz	r2, r3
 8012046:	2a00      	cmp	r2, #0
 8012048:	f040 8086 	bne.w	8012158 <__divdi3+0x1d8>
 801204c:	428b      	cmp	r3, r1
 801204e:	d302      	bcc.n	8012056 <__divdi3+0xd6>
 8012050:	4584      	cmp	ip, r0
 8012052:	f200 80db 	bhi.w	801220c <__divdi3+0x28c>
 8012056:	2301      	movs	r3, #1
 8012058:	e7e5      	b.n	8012026 <__divdi3+0xa6>
 801205a:	b912      	cbnz	r2, 8012062 <__divdi3+0xe2>
 801205c:	2301      	movs	r3, #1
 801205e:	fbb3 f5f2 	udiv	r5, r3, r2
 8012062:	fab5 f085 	clz	r0, r5
 8012066:	2800      	cmp	r0, #0
 8012068:	d13b      	bne.n	80120e2 <__divdi3+0x162>
 801206a:	1b78      	subs	r0, r7, r5
 801206c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8012070:	fa1f fc85 	uxth.w	ip, r5
 8012074:	2201      	movs	r2, #1
 8012076:	fbb0 f8fe 	udiv	r8, r0, lr
 801207a:	0c21      	lsrs	r1, r4, #16
 801207c:	fb0e 0718 	mls	r7, lr, r8, r0
 8012080:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8012084:	fb0c f308 	mul.w	r3, ip, r8
 8012088:	42bb      	cmp	r3, r7
 801208a:	d907      	bls.n	801209c <__divdi3+0x11c>
 801208c:	197f      	adds	r7, r7, r5
 801208e:	f108 31ff 	add.w	r1, r8, #4294967295
 8012092:	d202      	bcs.n	801209a <__divdi3+0x11a>
 8012094:	42bb      	cmp	r3, r7
 8012096:	f200 80bd 	bhi.w	8012214 <__divdi3+0x294>
 801209a:	4688      	mov	r8, r1
 801209c:	1aff      	subs	r7, r7, r3
 801209e:	b2a4      	uxth	r4, r4
 80120a0:	fbb7 f3fe 	udiv	r3, r7, lr
 80120a4:	fb0e 7713 	mls	r7, lr, r3, r7
 80120a8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80120ac:	fb0c fc03 	mul.w	ip, ip, r3
 80120b0:	45bc      	cmp	ip, r7
 80120b2:	d907      	bls.n	80120c4 <__divdi3+0x144>
 80120b4:	197f      	adds	r7, r7, r5
 80120b6:	f103 31ff 	add.w	r1, r3, #4294967295
 80120ba:	d202      	bcs.n	80120c2 <__divdi3+0x142>
 80120bc:	45bc      	cmp	ip, r7
 80120be:	f200 80a7 	bhi.w	8012210 <__divdi3+0x290>
 80120c2:	460b      	mov	r3, r1
 80120c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80120c8:	e7ad      	b.n	8012026 <__divdi3+0xa6>
 80120ca:	4252      	negs	r2, r2
 80120cc:	ea6f 0606 	mvn.w	r6, r6
 80120d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80120d4:	e75d      	b.n	8011f92 <__divdi3+0x12>
 80120d6:	4240      	negs	r0, r0
 80120d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80120dc:	f04f 36ff 	mov.w	r6, #4294967295
 80120e0:	e754      	b.n	8011f8c <__divdi3+0xc>
 80120e2:	f1c0 0220 	rsb	r2, r0, #32
 80120e6:	fa24 f102 	lsr.w	r1, r4, r2
 80120ea:	fa07 f300 	lsl.w	r3, r7, r0
 80120ee:	4085      	lsls	r5, r0
 80120f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80120f4:	40d7      	lsrs	r7, r2
 80120f6:	4319      	orrs	r1, r3
 80120f8:	fbb7 f2fe 	udiv	r2, r7, lr
 80120fc:	0c0b      	lsrs	r3, r1, #16
 80120fe:	fb0e 7712 	mls	r7, lr, r2, r7
 8012102:	fa1f fc85 	uxth.w	ip, r5
 8012106:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801210a:	fb0c f702 	mul.w	r7, ip, r2
 801210e:	429f      	cmp	r7, r3
 8012110:	fa04 f400 	lsl.w	r4, r4, r0
 8012114:	d907      	bls.n	8012126 <__divdi3+0x1a6>
 8012116:	195b      	adds	r3, r3, r5
 8012118:	f102 30ff 	add.w	r0, r2, #4294967295
 801211c:	d274      	bcs.n	8012208 <__divdi3+0x288>
 801211e:	429f      	cmp	r7, r3
 8012120:	d972      	bls.n	8012208 <__divdi3+0x288>
 8012122:	3a02      	subs	r2, #2
 8012124:	442b      	add	r3, r5
 8012126:	1bdf      	subs	r7, r3, r7
 8012128:	b289      	uxth	r1, r1
 801212a:	fbb7 f8fe 	udiv	r8, r7, lr
 801212e:	fb0e 7318 	mls	r3, lr, r8, r7
 8012132:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012136:	fb0c f708 	mul.w	r7, ip, r8
 801213a:	429f      	cmp	r7, r3
 801213c:	d908      	bls.n	8012150 <__divdi3+0x1d0>
 801213e:	195b      	adds	r3, r3, r5
 8012140:	f108 31ff 	add.w	r1, r8, #4294967295
 8012144:	d25c      	bcs.n	8012200 <__divdi3+0x280>
 8012146:	429f      	cmp	r7, r3
 8012148:	d95a      	bls.n	8012200 <__divdi3+0x280>
 801214a:	f1a8 0802 	sub.w	r8, r8, #2
 801214e:	442b      	add	r3, r5
 8012150:	1bd8      	subs	r0, r3, r7
 8012152:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8012156:	e78e      	b.n	8012076 <__divdi3+0xf6>
 8012158:	f1c2 0320 	rsb	r3, r2, #32
 801215c:	fa2c f103 	lsr.w	r1, ip, r3
 8012160:	fa0e fe02 	lsl.w	lr, lr, r2
 8012164:	fa20 f703 	lsr.w	r7, r0, r3
 8012168:	ea41 0e0e 	orr.w	lr, r1, lr
 801216c:	fa08 f002 	lsl.w	r0, r8, r2
 8012170:	fa28 f103 	lsr.w	r1, r8, r3
 8012174:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8012178:	4338      	orrs	r0, r7
 801217a:	fbb1 f8f5 	udiv	r8, r1, r5
 801217e:	0c03      	lsrs	r3, r0, #16
 8012180:	fb05 1118 	mls	r1, r5, r8, r1
 8012184:	fa1f f78e 	uxth.w	r7, lr
 8012188:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 801218c:	fb07 f308 	mul.w	r3, r7, r8
 8012190:	428b      	cmp	r3, r1
 8012192:	fa0c fc02 	lsl.w	ip, ip, r2
 8012196:	d909      	bls.n	80121ac <__divdi3+0x22c>
 8012198:	eb11 010e 	adds.w	r1, r1, lr
 801219c:	f108 39ff 	add.w	r9, r8, #4294967295
 80121a0:	d230      	bcs.n	8012204 <__divdi3+0x284>
 80121a2:	428b      	cmp	r3, r1
 80121a4:	d92e      	bls.n	8012204 <__divdi3+0x284>
 80121a6:	f1a8 0802 	sub.w	r8, r8, #2
 80121aa:	4471      	add	r1, lr
 80121ac:	1ac9      	subs	r1, r1, r3
 80121ae:	b280      	uxth	r0, r0
 80121b0:	fbb1 f3f5 	udiv	r3, r1, r5
 80121b4:	fb05 1113 	mls	r1, r5, r3, r1
 80121b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80121bc:	fb07 f703 	mul.w	r7, r7, r3
 80121c0:	428f      	cmp	r7, r1
 80121c2:	d908      	bls.n	80121d6 <__divdi3+0x256>
 80121c4:	eb11 010e 	adds.w	r1, r1, lr
 80121c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80121cc:	d216      	bcs.n	80121fc <__divdi3+0x27c>
 80121ce:	428f      	cmp	r7, r1
 80121d0:	d914      	bls.n	80121fc <__divdi3+0x27c>
 80121d2:	3b02      	subs	r3, #2
 80121d4:	4471      	add	r1, lr
 80121d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80121da:	1bc9      	subs	r1, r1, r7
 80121dc:	fba3 890c 	umull	r8, r9, r3, ip
 80121e0:	4549      	cmp	r1, r9
 80121e2:	d309      	bcc.n	80121f8 <__divdi3+0x278>
 80121e4:	d005      	beq.n	80121f2 <__divdi3+0x272>
 80121e6:	2200      	movs	r2, #0
 80121e8:	e71d      	b.n	8012026 <__divdi3+0xa6>
 80121ea:	4696      	mov	lr, r2
 80121ec:	e6fe      	b.n	8011fec <__divdi3+0x6c>
 80121ee:	4613      	mov	r3, r2
 80121f0:	e711      	b.n	8012016 <__divdi3+0x96>
 80121f2:	4094      	lsls	r4, r2
 80121f4:	4544      	cmp	r4, r8
 80121f6:	d2f6      	bcs.n	80121e6 <__divdi3+0x266>
 80121f8:	3b01      	subs	r3, #1
 80121fa:	e7f4      	b.n	80121e6 <__divdi3+0x266>
 80121fc:	4603      	mov	r3, r0
 80121fe:	e7ea      	b.n	80121d6 <__divdi3+0x256>
 8012200:	4688      	mov	r8, r1
 8012202:	e7a5      	b.n	8012150 <__divdi3+0x1d0>
 8012204:	46c8      	mov	r8, r9
 8012206:	e7d1      	b.n	80121ac <__divdi3+0x22c>
 8012208:	4602      	mov	r2, r0
 801220a:	e78c      	b.n	8012126 <__divdi3+0x1a6>
 801220c:	4613      	mov	r3, r2
 801220e:	e70a      	b.n	8012026 <__divdi3+0xa6>
 8012210:	3b02      	subs	r3, #2
 8012212:	e757      	b.n	80120c4 <__divdi3+0x144>
 8012214:	f1a8 0802 	sub.w	r8, r8, #2
 8012218:	442f      	add	r7, r5
 801221a:	e73f      	b.n	801209c <__divdi3+0x11c>

0801221c <__udivdi3>:
 801221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012220:	2b00      	cmp	r3, #0
 8012222:	d144      	bne.n	80122ae <__udivdi3+0x92>
 8012224:	428a      	cmp	r2, r1
 8012226:	4615      	mov	r5, r2
 8012228:	4604      	mov	r4, r0
 801222a:	d94f      	bls.n	80122cc <__udivdi3+0xb0>
 801222c:	fab2 f782 	clz	r7, r2
 8012230:	460e      	mov	r6, r1
 8012232:	b14f      	cbz	r7, 8012248 <__udivdi3+0x2c>
 8012234:	f1c7 0320 	rsb	r3, r7, #32
 8012238:	40b9      	lsls	r1, r7
 801223a:	fa20 f603 	lsr.w	r6, r0, r3
 801223e:	fa02 f507 	lsl.w	r5, r2, r7
 8012242:	430e      	orrs	r6, r1
 8012244:	fa00 f407 	lsl.w	r4, r0, r7
 8012248:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801224c:	0c23      	lsrs	r3, r4, #16
 801224e:	fbb6 f0fe 	udiv	r0, r6, lr
 8012252:	b2af      	uxth	r7, r5
 8012254:	fb0e 6110 	mls	r1, lr, r0, r6
 8012258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801225c:	fb07 f100 	mul.w	r1, r7, r0
 8012260:	4299      	cmp	r1, r3
 8012262:	d909      	bls.n	8012278 <__udivdi3+0x5c>
 8012264:	195b      	adds	r3, r3, r5
 8012266:	f100 32ff 	add.w	r2, r0, #4294967295
 801226a:	f080 80ec 	bcs.w	8012446 <__udivdi3+0x22a>
 801226e:	4299      	cmp	r1, r3
 8012270:	f240 80e9 	bls.w	8012446 <__udivdi3+0x22a>
 8012274:	3802      	subs	r0, #2
 8012276:	442b      	add	r3, r5
 8012278:	1a5a      	subs	r2, r3, r1
 801227a:	b2a4      	uxth	r4, r4
 801227c:	fbb2 f3fe 	udiv	r3, r2, lr
 8012280:	fb0e 2213 	mls	r2, lr, r3, r2
 8012284:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8012288:	fb07 f703 	mul.w	r7, r7, r3
 801228c:	4297      	cmp	r7, r2
 801228e:	d908      	bls.n	80122a2 <__udivdi3+0x86>
 8012290:	1952      	adds	r2, r2, r5
 8012292:	f103 31ff 	add.w	r1, r3, #4294967295
 8012296:	f080 80d8 	bcs.w	801244a <__udivdi3+0x22e>
 801229a:	4297      	cmp	r7, r2
 801229c:	f240 80d5 	bls.w	801244a <__udivdi3+0x22e>
 80122a0:	3b02      	subs	r3, #2
 80122a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80122a6:	2600      	movs	r6, #0
 80122a8:	4631      	mov	r1, r6
 80122aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122ae:	428b      	cmp	r3, r1
 80122b0:	d847      	bhi.n	8012342 <__udivdi3+0x126>
 80122b2:	fab3 f683 	clz	r6, r3
 80122b6:	2e00      	cmp	r6, #0
 80122b8:	d148      	bne.n	801234c <__udivdi3+0x130>
 80122ba:	428b      	cmp	r3, r1
 80122bc:	d302      	bcc.n	80122c4 <__udivdi3+0xa8>
 80122be:	4282      	cmp	r2, r0
 80122c0:	f200 80cd 	bhi.w	801245e <__udivdi3+0x242>
 80122c4:	2001      	movs	r0, #1
 80122c6:	4631      	mov	r1, r6
 80122c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122cc:	b912      	cbnz	r2, 80122d4 <__udivdi3+0xb8>
 80122ce:	2501      	movs	r5, #1
 80122d0:	fbb5 f5f2 	udiv	r5, r5, r2
 80122d4:	fab5 f885 	clz	r8, r5
 80122d8:	f1b8 0f00 	cmp.w	r8, #0
 80122dc:	d177      	bne.n	80123ce <__udivdi3+0x1b2>
 80122de:	1b4a      	subs	r2, r1, r5
 80122e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80122e4:	b2af      	uxth	r7, r5
 80122e6:	2601      	movs	r6, #1
 80122e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80122ec:	0c23      	lsrs	r3, r4, #16
 80122ee:	fb0e 2110 	mls	r1, lr, r0, r2
 80122f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80122f6:	fb07 f300 	mul.w	r3, r7, r0
 80122fa:	428b      	cmp	r3, r1
 80122fc:	d907      	bls.n	801230e <__udivdi3+0xf2>
 80122fe:	1949      	adds	r1, r1, r5
 8012300:	f100 32ff 	add.w	r2, r0, #4294967295
 8012304:	d202      	bcs.n	801230c <__udivdi3+0xf0>
 8012306:	428b      	cmp	r3, r1
 8012308:	f200 80ba 	bhi.w	8012480 <__udivdi3+0x264>
 801230c:	4610      	mov	r0, r2
 801230e:	1ac9      	subs	r1, r1, r3
 8012310:	b2a4      	uxth	r4, r4
 8012312:	fbb1 f3fe 	udiv	r3, r1, lr
 8012316:	fb0e 1113 	mls	r1, lr, r3, r1
 801231a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801231e:	fb07 f703 	mul.w	r7, r7, r3
 8012322:	42a7      	cmp	r7, r4
 8012324:	d908      	bls.n	8012338 <__udivdi3+0x11c>
 8012326:	1964      	adds	r4, r4, r5
 8012328:	f103 32ff 	add.w	r2, r3, #4294967295
 801232c:	f080 808f 	bcs.w	801244e <__udivdi3+0x232>
 8012330:	42a7      	cmp	r7, r4
 8012332:	f240 808c 	bls.w	801244e <__udivdi3+0x232>
 8012336:	3b02      	subs	r3, #2
 8012338:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801233c:	4631      	mov	r1, r6
 801233e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012342:	2600      	movs	r6, #0
 8012344:	4630      	mov	r0, r6
 8012346:	4631      	mov	r1, r6
 8012348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801234c:	f1c6 0420 	rsb	r4, r6, #32
 8012350:	fa22 f504 	lsr.w	r5, r2, r4
 8012354:	40b3      	lsls	r3, r6
 8012356:	432b      	orrs	r3, r5
 8012358:	fa20 fc04 	lsr.w	ip, r0, r4
 801235c:	fa01 f706 	lsl.w	r7, r1, r6
 8012360:	fa21 f504 	lsr.w	r5, r1, r4
 8012364:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012368:	ea4c 0707 	orr.w	r7, ip, r7
 801236c:	fbb5 f8fe 	udiv	r8, r5, lr
 8012370:	0c39      	lsrs	r1, r7, #16
 8012372:	fb0e 5518 	mls	r5, lr, r8, r5
 8012376:	fa1f fc83 	uxth.w	ip, r3
 801237a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 801237e:	fb0c f108 	mul.w	r1, ip, r8
 8012382:	42a9      	cmp	r1, r5
 8012384:	fa02 f206 	lsl.w	r2, r2, r6
 8012388:	d904      	bls.n	8012394 <__udivdi3+0x178>
 801238a:	18ed      	adds	r5, r5, r3
 801238c:	f108 34ff 	add.w	r4, r8, #4294967295
 8012390:	d367      	bcc.n	8012462 <__udivdi3+0x246>
 8012392:	46a0      	mov	r8, r4
 8012394:	1a6d      	subs	r5, r5, r1
 8012396:	b2bf      	uxth	r7, r7
 8012398:	fbb5 f4fe 	udiv	r4, r5, lr
 801239c:	fb0e 5514 	mls	r5, lr, r4, r5
 80123a0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80123a4:	fb0c fc04 	mul.w	ip, ip, r4
 80123a8:	458c      	cmp	ip, r1
 80123aa:	d904      	bls.n	80123b6 <__udivdi3+0x19a>
 80123ac:	18c9      	adds	r1, r1, r3
 80123ae:	f104 35ff 	add.w	r5, r4, #4294967295
 80123b2:	d35c      	bcc.n	801246e <__udivdi3+0x252>
 80123b4:	462c      	mov	r4, r5
 80123b6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80123ba:	ebcc 0101 	rsb	r1, ip, r1
 80123be:	fba4 2302 	umull	r2, r3, r4, r2
 80123c2:	4299      	cmp	r1, r3
 80123c4:	d348      	bcc.n	8012458 <__udivdi3+0x23c>
 80123c6:	d044      	beq.n	8012452 <__udivdi3+0x236>
 80123c8:	4620      	mov	r0, r4
 80123ca:	2600      	movs	r6, #0
 80123cc:	e76c      	b.n	80122a8 <__udivdi3+0x8c>
 80123ce:	f1c8 0420 	rsb	r4, r8, #32
 80123d2:	fa01 f308 	lsl.w	r3, r1, r8
 80123d6:	fa05 f508 	lsl.w	r5, r5, r8
 80123da:	fa20 f704 	lsr.w	r7, r0, r4
 80123de:	40e1      	lsrs	r1, r4
 80123e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80123e4:	431f      	orrs	r7, r3
 80123e6:	fbb1 f6fe 	udiv	r6, r1, lr
 80123ea:	0c3a      	lsrs	r2, r7, #16
 80123ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80123f0:	fa1f fc85 	uxth.w	ip, r5
 80123f4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80123f8:	fb0c f206 	mul.w	r2, ip, r6
 80123fc:	429a      	cmp	r2, r3
 80123fe:	fa00 f408 	lsl.w	r4, r0, r8
 8012402:	d907      	bls.n	8012414 <__udivdi3+0x1f8>
 8012404:	195b      	adds	r3, r3, r5
 8012406:	f106 31ff 	add.w	r1, r6, #4294967295
 801240a:	d237      	bcs.n	801247c <__udivdi3+0x260>
 801240c:	429a      	cmp	r2, r3
 801240e:	d935      	bls.n	801247c <__udivdi3+0x260>
 8012410:	3e02      	subs	r6, #2
 8012412:	442b      	add	r3, r5
 8012414:	1a9b      	subs	r3, r3, r2
 8012416:	b2bf      	uxth	r7, r7
 8012418:	fbb3 f0fe 	udiv	r0, r3, lr
 801241c:	fb0e 3310 	mls	r3, lr, r0, r3
 8012420:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8012424:	fb0c f100 	mul.w	r1, ip, r0
 8012428:	4299      	cmp	r1, r3
 801242a:	d907      	bls.n	801243c <__udivdi3+0x220>
 801242c:	195b      	adds	r3, r3, r5
 801242e:	f100 32ff 	add.w	r2, r0, #4294967295
 8012432:	d221      	bcs.n	8012478 <__udivdi3+0x25c>
 8012434:	4299      	cmp	r1, r3
 8012436:	d91f      	bls.n	8012478 <__udivdi3+0x25c>
 8012438:	3802      	subs	r0, #2
 801243a:	442b      	add	r3, r5
 801243c:	1a5a      	subs	r2, r3, r1
 801243e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8012442:	4667      	mov	r7, ip
 8012444:	e750      	b.n	80122e8 <__udivdi3+0xcc>
 8012446:	4610      	mov	r0, r2
 8012448:	e716      	b.n	8012278 <__udivdi3+0x5c>
 801244a:	460b      	mov	r3, r1
 801244c:	e729      	b.n	80122a2 <__udivdi3+0x86>
 801244e:	4613      	mov	r3, r2
 8012450:	e772      	b.n	8012338 <__udivdi3+0x11c>
 8012452:	40b0      	lsls	r0, r6
 8012454:	4290      	cmp	r0, r2
 8012456:	d2b7      	bcs.n	80123c8 <__udivdi3+0x1ac>
 8012458:	1e60      	subs	r0, r4, #1
 801245a:	2600      	movs	r6, #0
 801245c:	e724      	b.n	80122a8 <__udivdi3+0x8c>
 801245e:	4630      	mov	r0, r6
 8012460:	e722      	b.n	80122a8 <__udivdi3+0x8c>
 8012462:	42a9      	cmp	r1, r5
 8012464:	d995      	bls.n	8012392 <__udivdi3+0x176>
 8012466:	f1a8 0802 	sub.w	r8, r8, #2
 801246a:	441d      	add	r5, r3
 801246c:	e792      	b.n	8012394 <__udivdi3+0x178>
 801246e:	458c      	cmp	ip, r1
 8012470:	d9a0      	bls.n	80123b4 <__udivdi3+0x198>
 8012472:	3c02      	subs	r4, #2
 8012474:	4419      	add	r1, r3
 8012476:	e79e      	b.n	80123b6 <__udivdi3+0x19a>
 8012478:	4610      	mov	r0, r2
 801247a:	e7df      	b.n	801243c <__udivdi3+0x220>
 801247c:	460e      	mov	r6, r1
 801247e:	e7c9      	b.n	8012414 <__udivdi3+0x1f8>
 8012480:	3802      	subs	r0, #2
 8012482:	4429      	add	r1, r5
 8012484:	e743      	b.n	801230e <__udivdi3+0xf2>
 8012486:	bf00      	nop

08012488 <calloc>:
 8012488:	460a      	mov	r2, r1
 801248a:	4903      	ldr	r1, [pc, #12]	; (8012498 <calloc+0x10>)
 801248c:	4603      	mov	r3, r0
 801248e:	6808      	ldr	r0, [r1, #0]
 8012490:	4619      	mov	r1, r3
 8012492:	f000 b84a 	b.w	801252a <_calloc_r>
 8012496:	bf00      	nop
 8012498:	1ffed5dc 	.word	0x1ffed5dc

0801249c <__errno>:
 801249c:	4b01      	ldr	r3, [pc, #4]	; (80124a4 <__errno+0x8>)
 801249e:	6818      	ldr	r0, [r3, #0]
 80124a0:	4770      	bx	lr
 80124a2:	bf00      	nop
 80124a4:	1ffed5dc 	.word	0x1ffed5dc

080124a8 <__libc_init_array>:
 80124a8:	b570      	push	{r4, r5, r6, lr}
 80124aa:	4b0e      	ldr	r3, [pc, #56]	; (80124e4 <__libc_init_array+0x3c>)
 80124ac:	4c0e      	ldr	r4, [pc, #56]	; (80124e8 <__libc_init_array+0x40>)
 80124ae:	1ae4      	subs	r4, r4, r3
 80124b0:	10a4      	asrs	r4, r4, #2
 80124b2:	2500      	movs	r5, #0
 80124b4:	461e      	mov	r6, r3
 80124b6:	42a5      	cmp	r5, r4
 80124b8:	d004      	beq.n	80124c4 <__libc_init_array+0x1c>
 80124ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80124be:	4798      	blx	r3
 80124c0:	3501      	adds	r5, #1
 80124c2:	e7f8      	b.n	80124b6 <__libc_init_array+0xe>
 80124c4:	f7f2 fc8e 	bl	8004de4 <_init>
 80124c8:	4c08      	ldr	r4, [pc, #32]	; (80124ec <__libc_init_array+0x44>)
 80124ca:	4b09      	ldr	r3, [pc, #36]	; (80124f0 <__libc_init_array+0x48>)
 80124cc:	1ae4      	subs	r4, r4, r3
 80124ce:	10a4      	asrs	r4, r4, #2
 80124d0:	2500      	movs	r5, #0
 80124d2:	461e      	mov	r6, r3
 80124d4:	42a5      	cmp	r5, r4
 80124d6:	d004      	beq.n	80124e2 <__libc_init_array+0x3a>
 80124d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80124dc:	4798      	blx	r3
 80124de:	3501      	adds	r5, #1
 80124e0:	e7f8      	b.n	80124d4 <__libc_init_array+0x2c>
 80124e2:	bd70      	pop	{r4, r5, r6, pc}
 80124e4:	1ffed5e0 	.word	0x1ffed5e0
 80124e8:	1ffed5e0 	.word	0x1ffed5e0
 80124ec:	1ffed5e0 	.word	0x1ffed5e0
 80124f0:	1ffed5e0 	.word	0x1ffed5e0

080124f4 <free>:
 80124f4:	4b02      	ldr	r3, [pc, #8]	; (8012500 <free+0xc>)
 80124f6:	4601      	mov	r1, r0
 80124f8:	6818      	ldr	r0, [r3, #0]
 80124fa:	f000 b825 	b.w	8012548 <_free_r>
 80124fe:	bf00      	nop
 8012500:	1ffed5dc 	.word	0x1ffed5dc

08012504 <memcpy>:
 8012504:	b510      	push	{r4, lr}
 8012506:	1e43      	subs	r3, r0, #1
 8012508:	440a      	add	r2, r1
 801250a:	4291      	cmp	r1, r2
 801250c:	d004      	beq.n	8012518 <memcpy+0x14>
 801250e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012516:	e7f8      	b.n	801250a <memcpy+0x6>
 8012518:	bd10      	pop	{r4, pc}

0801251a <memset>:
 801251a:	4402      	add	r2, r0
 801251c:	4603      	mov	r3, r0
 801251e:	4293      	cmp	r3, r2
 8012520:	d002      	beq.n	8012528 <memset+0xe>
 8012522:	f803 1b01 	strb.w	r1, [r3], #1
 8012526:	e7fa      	b.n	801251e <memset+0x4>
 8012528:	4770      	bx	lr

0801252a <_calloc_r>:
 801252a:	b538      	push	{r3, r4, r5, lr}
 801252c:	fb02 f401 	mul.w	r4, r2, r1
 8012530:	4621      	mov	r1, r4
 8012532:	f000 f84d 	bl	80125d0 <_malloc_r>
 8012536:	4605      	mov	r5, r0
 8012538:	b118      	cbz	r0, 8012542 <_calloc_r+0x18>
 801253a:	2100      	movs	r1, #0
 801253c:	4622      	mov	r2, r4
 801253e:	f7ff ffec 	bl	801251a <memset>
 8012542:	4628      	mov	r0, r5
 8012544:	bd38      	pop	{r3, r4, r5, pc}
	...

08012548 <_free_r>:
 8012548:	b530      	push	{r4, r5, lr}
 801254a:	2900      	cmp	r1, #0
 801254c:	d03d      	beq.n	80125ca <_free_r+0x82>
 801254e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8012552:	1f0b      	subs	r3, r1, #4
 8012554:	491d      	ldr	r1, [pc, #116]	; (80125cc <_free_r+0x84>)
 8012556:	2a00      	cmp	r2, #0
 8012558:	bfb8      	it	lt
 801255a:	189b      	addlt	r3, r3, r2
 801255c:	680a      	ldr	r2, [r1, #0]
 801255e:	460c      	mov	r4, r1
 8012560:	b912      	cbnz	r2, 8012568 <_free_r+0x20>
 8012562:	605a      	str	r2, [r3, #4]
 8012564:	600b      	str	r3, [r1, #0]
 8012566:	bd30      	pop	{r4, r5, pc}
 8012568:	4293      	cmp	r3, r2
 801256a:	d20d      	bcs.n	8012588 <_free_r+0x40>
 801256c:	6819      	ldr	r1, [r3, #0]
 801256e:	1858      	adds	r0, r3, r1
 8012570:	4290      	cmp	r0, r2
 8012572:	bf01      	itttt	eq
 8012574:	585a      	ldreq	r2, [r3, r1]
 8012576:	1852      	addeq	r2, r2, r1
 8012578:	601a      	streq	r2, [r3, #0]
 801257a:	6842      	ldreq	r2, [r0, #4]
 801257c:	605a      	str	r2, [r3, #4]
 801257e:	6023      	str	r3, [r4, #0]
 8012580:	bd30      	pop	{r4, r5, pc}
 8012582:	4299      	cmp	r1, r3
 8012584:	d803      	bhi.n	801258e <_free_r+0x46>
 8012586:	460a      	mov	r2, r1
 8012588:	6851      	ldr	r1, [r2, #4]
 801258a:	2900      	cmp	r1, #0
 801258c:	d1f9      	bne.n	8012582 <_free_r+0x3a>
 801258e:	6814      	ldr	r4, [r2, #0]
 8012590:	1915      	adds	r5, r2, r4
 8012592:	429d      	cmp	r5, r3
 8012594:	d10a      	bne.n	80125ac <_free_r+0x64>
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	4423      	add	r3, r4
 801259a:	18d0      	adds	r0, r2, r3
 801259c:	4288      	cmp	r0, r1
 801259e:	6013      	str	r3, [r2, #0]
 80125a0:	d113      	bne.n	80125ca <_free_r+0x82>
 80125a2:	6808      	ldr	r0, [r1, #0]
 80125a4:	4403      	add	r3, r0
 80125a6:	6013      	str	r3, [r2, #0]
 80125a8:	684b      	ldr	r3, [r1, #4]
 80125aa:	e00d      	b.n	80125c8 <_free_r+0x80>
 80125ac:	d902      	bls.n	80125b4 <_free_r+0x6c>
 80125ae:	230c      	movs	r3, #12
 80125b0:	6003      	str	r3, [r0, #0]
 80125b2:	bd30      	pop	{r4, r5, pc}
 80125b4:	681c      	ldr	r4, [r3, #0]
 80125b6:	1918      	adds	r0, r3, r4
 80125b8:	4288      	cmp	r0, r1
 80125ba:	bf04      	itt	eq
 80125bc:	6808      	ldreq	r0, [r1, #0]
 80125be:	6849      	ldreq	r1, [r1, #4]
 80125c0:	6059      	str	r1, [r3, #4]
 80125c2:	bf04      	itt	eq
 80125c4:	1900      	addeq	r0, r0, r4
 80125c6:	6018      	streq	r0, [r3, #0]
 80125c8:	6053      	str	r3, [r2, #4]
 80125ca:	bd30      	pop	{r4, r5, pc}
 80125cc:	1ffedd20 	.word	0x1ffedd20

080125d0 <_malloc_r>:
 80125d0:	b570      	push	{r4, r5, r6, lr}
 80125d2:	1ccc      	adds	r4, r1, #3
 80125d4:	f024 0403 	bic.w	r4, r4, #3
 80125d8:	3408      	adds	r4, #8
 80125da:	2c0c      	cmp	r4, #12
 80125dc:	bf38      	it	cc
 80125de:	240c      	movcc	r4, #12
 80125e0:	2c00      	cmp	r4, #0
 80125e2:	4606      	mov	r6, r0
 80125e4:	da03      	bge.n	80125ee <_malloc_r+0x1e>
 80125e6:	230c      	movs	r3, #12
 80125e8:	6033      	str	r3, [r6, #0]
 80125ea:	2000      	movs	r0, #0
 80125ec:	bd70      	pop	{r4, r5, r6, pc}
 80125ee:	428c      	cmp	r4, r1
 80125f0:	d3f9      	bcc.n	80125e6 <_malloc_r+0x16>
 80125f2:	4a20      	ldr	r2, [pc, #128]	; (8012674 <_malloc_r+0xa4>)
 80125f4:	6813      	ldr	r3, [r2, #0]
 80125f6:	4610      	mov	r0, r2
 80125f8:	4619      	mov	r1, r3
 80125fa:	b1a1      	cbz	r1, 8012626 <_malloc_r+0x56>
 80125fc:	680a      	ldr	r2, [r1, #0]
 80125fe:	1b12      	subs	r2, r2, r4
 8012600:	d40e      	bmi.n	8012620 <_malloc_r+0x50>
 8012602:	2a0b      	cmp	r2, #11
 8012604:	d903      	bls.n	801260e <_malloc_r+0x3e>
 8012606:	600a      	str	r2, [r1, #0]
 8012608:	188b      	adds	r3, r1, r2
 801260a:	508c      	str	r4, [r1, r2]
 801260c:	e01f      	b.n	801264e <_malloc_r+0x7e>
 801260e:	428b      	cmp	r3, r1
 8012610:	bf0d      	iteet	eq
 8012612:	685a      	ldreq	r2, [r3, #4]
 8012614:	684a      	ldrne	r2, [r1, #4]
 8012616:	605a      	strne	r2, [r3, #4]
 8012618:	6002      	streq	r2, [r0, #0]
 801261a:	bf18      	it	ne
 801261c:	460b      	movne	r3, r1
 801261e:	e016      	b.n	801264e <_malloc_r+0x7e>
 8012620:	460b      	mov	r3, r1
 8012622:	6849      	ldr	r1, [r1, #4]
 8012624:	e7e9      	b.n	80125fa <_malloc_r+0x2a>
 8012626:	4d14      	ldr	r5, [pc, #80]	; (8012678 <_malloc_r+0xa8>)
 8012628:	682b      	ldr	r3, [r5, #0]
 801262a:	b91b      	cbnz	r3, 8012634 <_malloc_r+0x64>
 801262c:	4630      	mov	r0, r6
 801262e:	f000 f8a3 	bl	8012778 <_sbrk_r>
 8012632:	6028      	str	r0, [r5, #0]
 8012634:	4630      	mov	r0, r6
 8012636:	4621      	mov	r1, r4
 8012638:	f000 f89e 	bl	8012778 <_sbrk_r>
 801263c:	1c42      	adds	r2, r0, #1
 801263e:	4603      	mov	r3, r0
 8012640:	d0d1      	beq.n	80125e6 <_malloc_r+0x16>
 8012642:	1cc5      	adds	r5, r0, #3
 8012644:	f025 0503 	bic.w	r5, r5, #3
 8012648:	4285      	cmp	r5, r0
 801264a:	d10a      	bne.n	8012662 <_malloc_r+0x92>
 801264c:	601c      	str	r4, [r3, #0]
 801264e:	f103 000b 	add.w	r0, r3, #11
 8012652:	1d1a      	adds	r2, r3, #4
 8012654:	f020 0007 	bic.w	r0, r0, #7
 8012658:	1a82      	subs	r2, r0, r2
 801265a:	d00a      	beq.n	8012672 <_malloc_r+0xa2>
 801265c:	4251      	negs	r1, r2
 801265e:	5099      	str	r1, [r3, r2]
 8012660:	bd70      	pop	{r4, r5, r6, pc}
 8012662:	4630      	mov	r0, r6
 8012664:	1ae9      	subs	r1, r5, r3
 8012666:	f000 f887 	bl	8012778 <_sbrk_r>
 801266a:	3001      	adds	r0, #1
 801266c:	d0bb      	beq.n	80125e6 <_malloc_r+0x16>
 801266e:	462b      	mov	r3, r5
 8012670:	e7ec      	b.n	801264c <_malloc_r+0x7c>
 8012672:	bd70      	pop	{r4, r5, r6, pc}
 8012674:	1ffedd20 	.word	0x1ffedd20
 8012678:	1ffedd1c 	.word	0x1ffedd1c

0801267c <iprintf>:
 801267c:	b40f      	push	{r0, r1, r2, r3}
 801267e:	4b0a      	ldr	r3, [pc, #40]	; (80126a8 <iprintf+0x2c>)
 8012680:	b513      	push	{r0, r1, r4, lr}
 8012682:	681c      	ldr	r4, [r3, #0]
 8012684:	b124      	cbz	r4, 8012690 <iprintf+0x14>
 8012686:	69a3      	ldr	r3, [r4, #24]
 8012688:	b913      	cbnz	r3, 8012690 <iprintf+0x14>
 801268a:	4620      	mov	r0, r4
 801268c:	f000 fa6e 	bl	8012b6c <__sinit>
 8012690:	ab05      	add	r3, sp, #20
 8012692:	4620      	mov	r0, r4
 8012694:	68a1      	ldr	r1, [r4, #8]
 8012696:	9a04      	ldr	r2, [sp, #16]
 8012698:	9301      	str	r3, [sp, #4]
 801269a:	f000 fcb1 	bl	8013000 <_vfiprintf_r>
 801269e:	b002      	add	sp, #8
 80126a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126a4:	b004      	add	sp, #16
 80126a6:	4770      	bx	lr
 80126a8:	1ffed5dc 	.word	0x1ffed5dc

080126ac <_puts_r>:
 80126ac:	b570      	push	{r4, r5, r6, lr}
 80126ae:	460e      	mov	r6, r1
 80126b0:	4605      	mov	r5, r0
 80126b2:	b118      	cbz	r0, 80126bc <_puts_r+0x10>
 80126b4:	6983      	ldr	r3, [r0, #24]
 80126b6:	b90b      	cbnz	r3, 80126bc <_puts_r+0x10>
 80126b8:	f000 fa58 	bl	8012b6c <__sinit>
 80126bc:	68ac      	ldr	r4, [r5, #8]
 80126be:	89a3      	ldrh	r3, [r4, #12]
 80126c0:	0719      	lsls	r1, r3, #28
 80126c2:	d501      	bpl.n	80126c8 <_puts_r+0x1c>
 80126c4:	6923      	ldr	r3, [r4, #16]
 80126c6:	b983      	cbnz	r3, 80126ea <_puts_r+0x3e>
 80126c8:	4628      	mov	r0, r5
 80126ca:	4621      	mov	r1, r4
 80126cc:	f000 f8f4 	bl	80128b8 <__swsetup_r>
 80126d0:	b158      	cbz	r0, 80126ea <_puts_r+0x3e>
 80126d2:	f04f 30ff 	mov.w	r0, #4294967295
 80126d6:	bd70      	pop	{r4, r5, r6, pc}
 80126d8:	2b00      	cmp	r3, #0
 80126da:	db0e      	blt.n	80126fa <_puts_r+0x4e>
 80126dc:	6823      	ldr	r3, [r4, #0]
 80126de:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80126e2:	701a      	strb	r2, [r3, #0]
 80126e4:	6823      	ldr	r3, [r4, #0]
 80126e6:	3301      	adds	r3, #1
 80126e8:	6023      	str	r3, [r4, #0]
 80126ea:	68a3      	ldr	r3, [r4, #8]
 80126ec:	f816 2b01 	ldrb.w	r2, [r6], #1
 80126f0:	3b01      	subs	r3, #1
 80126f2:	60a3      	str	r3, [r4, #8]
 80126f4:	2a00      	cmp	r2, #0
 80126f6:	d1ef      	bne.n	80126d8 <_puts_r+0x2c>
 80126f8:	e016      	b.n	8012728 <_puts_r+0x7c>
 80126fa:	69a2      	ldr	r2, [r4, #24]
 80126fc:	4293      	cmp	r3, r2
 80126fe:	db09      	blt.n	8012714 <_puts_r+0x68>
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012706:	701a      	strb	r2, [r3, #0]
 8012708:	6823      	ldr	r3, [r4, #0]
 801270a:	7819      	ldrb	r1, [r3, #0]
 801270c:	290a      	cmp	r1, #10
 801270e:	d1ea      	bne.n	80126e6 <_puts_r+0x3a>
 8012710:	4628      	mov	r0, r5
 8012712:	e002      	b.n	801271a <_puts_r+0x6e>
 8012714:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012718:	4628      	mov	r0, r5
 801271a:	4622      	mov	r2, r4
 801271c:	f000 f878 	bl	8012810 <__swbuf_r>
 8012720:	1c42      	adds	r2, r0, #1
 8012722:	4250      	negs	r0, r2
 8012724:	4150      	adcs	r0, r2
 8012726:	e7d3      	b.n	80126d0 <_puts_r+0x24>
 8012728:	2b00      	cmp	r3, #0
 801272a:	da15      	bge.n	8012758 <_puts_r+0xac>
 801272c:	69a2      	ldr	r2, [r4, #24]
 801272e:	4293      	cmp	r3, r2
 8012730:	db08      	blt.n	8012744 <_puts_r+0x98>
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	220a      	movs	r2, #10
 8012736:	701a      	strb	r2, [r3, #0]
 8012738:	6823      	ldr	r3, [r4, #0]
 801273a:	7819      	ldrb	r1, [r3, #0]
 801273c:	4291      	cmp	r1, r2
 801273e:	d10f      	bne.n	8012760 <_puts_r+0xb4>
 8012740:	4628      	mov	r0, r5
 8012742:	e001      	b.n	8012748 <_puts_r+0x9c>
 8012744:	4628      	mov	r0, r5
 8012746:	210a      	movs	r1, #10
 8012748:	4622      	mov	r2, r4
 801274a:	f000 f861 	bl	8012810 <__swbuf_r>
 801274e:	1c43      	adds	r3, r0, #1
 8012750:	4258      	negs	r0, r3
 8012752:	4158      	adcs	r0, r3
 8012754:	b130      	cbz	r0, 8012764 <_puts_r+0xb8>
 8012756:	e7bc      	b.n	80126d2 <_puts_r+0x26>
 8012758:	6823      	ldr	r3, [r4, #0]
 801275a:	220a      	movs	r2, #10
 801275c:	701a      	strb	r2, [r3, #0]
 801275e:	6823      	ldr	r3, [r4, #0]
 8012760:	3301      	adds	r3, #1
 8012762:	6023      	str	r3, [r4, #0]
 8012764:	200a      	movs	r0, #10
 8012766:	bd70      	pop	{r4, r5, r6, pc}

08012768 <puts>:
 8012768:	4b02      	ldr	r3, [pc, #8]	; (8012774 <puts+0xc>)
 801276a:	4601      	mov	r1, r0
 801276c:	6818      	ldr	r0, [r3, #0]
 801276e:	f7ff bf9d 	b.w	80126ac <_puts_r>
 8012772:	bf00      	nop
 8012774:	1ffed5dc 	.word	0x1ffed5dc

08012778 <_sbrk_r>:
 8012778:	b538      	push	{r3, r4, r5, lr}
 801277a:	4c06      	ldr	r4, [pc, #24]	; (8012794 <_sbrk_r+0x1c>)
 801277c:	2300      	movs	r3, #0
 801277e:	4605      	mov	r5, r0
 8012780:	4608      	mov	r0, r1
 8012782:	6023      	str	r3, [r4, #0]
 8012784:	f7f2 fafa 	bl	8004d7c <_sbrk>
 8012788:	1c43      	adds	r3, r0, #1
 801278a:	d102      	bne.n	8012792 <_sbrk_r+0x1a>
 801278c:	6823      	ldr	r3, [r4, #0]
 801278e:	b103      	cbz	r3, 8012792 <_sbrk_r+0x1a>
 8012790:	602b      	str	r3, [r5, #0]
 8012792:	bd38      	pop	{r3, r4, r5, pc}
 8012794:	1ffee3b4 	.word	0x1ffee3b4

08012798 <siprintf>:
 8012798:	b40e      	push	{r1, r2, r3}
 801279a:	b500      	push	{lr}
 801279c:	b09c      	sub	sp, #112	; 0x70
 801279e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80127a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80127a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80127aa:	9104      	str	r1, [sp, #16]
 80127ac:	9107      	str	r1, [sp, #28]
 80127ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80127b2:	ab1d      	add	r3, sp, #116	; 0x74
 80127b4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80127b8:	4908      	ldr	r1, [pc, #32]	; (80127dc <siprintf+0x44>)
 80127ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80127be:	9002      	str	r0, [sp, #8]
 80127c0:	9006      	str	r0, [sp, #24]
 80127c2:	6808      	ldr	r0, [r1, #0]
 80127c4:	9301      	str	r3, [sp, #4]
 80127c6:	a902      	add	r1, sp, #8
 80127c8:	f000 fb00 	bl	8012dcc <_svfiprintf_r>
 80127cc:	9b02      	ldr	r3, [sp, #8]
 80127ce:	2200      	movs	r2, #0
 80127d0:	701a      	strb	r2, [r3, #0]
 80127d2:	b01c      	add	sp, #112	; 0x70
 80127d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80127d8:	b003      	add	sp, #12
 80127da:	4770      	bx	lr
 80127dc:	1ffed5dc 	.word	0x1ffed5dc

080127e0 <strcat>:
 80127e0:	b510      	push	{r4, lr}
 80127e2:	4602      	mov	r2, r0
 80127e4:	4613      	mov	r3, r2
 80127e6:	3201      	adds	r2, #1
 80127e8:	781c      	ldrb	r4, [r3, #0]
 80127ea:	2c00      	cmp	r4, #0
 80127ec:	d1fa      	bne.n	80127e4 <strcat+0x4>
 80127ee:	3b01      	subs	r3, #1
 80127f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127f8:	2a00      	cmp	r2, #0
 80127fa:	d1f9      	bne.n	80127f0 <strcat+0x10>
 80127fc:	bd10      	pop	{r4, pc}

080127fe <strlen>:
 80127fe:	4603      	mov	r3, r0
 8012800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012804:	2a00      	cmp	r2, #0
 8012806:	d1fb      	bne.n	8012800 <strlen+0x2>
 8012808:	1a18      	subs	r0, r3, r0
 801280a:	3801      	subs	r0, #1
 801280c:	4770      	bx	lr
	...

08012810 <__swbuf_r>:
 8012810:	b570      	push	{r4, r5, r6, lr}
 8012812:	460d      	mov	r5, r1
 8012814:	4614      	mov	r4, r2
 8012816:	4606      	mov	r6, r0
 8012818:	b118      	cbz	r0, 8012822 <__swbuf_r+0x12>
 801281a:	6983      	ldr	r3, [r0, #24]
 801281c:	b90b      	cbnz	r3, 8012822 <__swbuf_r+0x12>
 801281e:	f000 f9a5 	bl	8012b6c <__sinit>
 8012822:	4b22      	ldr	r3, [pc, #136]	; (80128ac <__swbuf_r+0x9c>)
 8012824:	429c      	cmp	r4, r3
 8012826:	d101      	bne.n	801282c <__swbuf_r+0x1c>
 8012828:	6874      	ldr	r4, [r6, #4]
 801282a:	e008      	b.n	801283e <__swbuf_r+0x2e>
 801282c:	4b20      	ldr	r3, [pc, #128]	; (80128b0 <__swbuf_r+0xa0>)
 801282e:	429c      	cmp	r4, r3
 8012830:	d101      	bne.n	8012836 <__swbuf_r+0x26>
 8012832:	68b4      	ldr	r4, [r6, #8]
 8012834:	e003      	b.n	801283e <__swbuf_r+0x2e>
 8012836:	4b1f      	ldr	r3, [pc, #124]	; (80128b4 <__swbuf_r+0xa4>)
 8012838:	429c      	cmp	r4, r3
 801283a:	bf08      	it	eq
 801283c:	68f4      	ldreq	r4, [r6, #12]
 801283e:	69a3      	ldr	r3, [r4, #24]
 8012840:	60a3      	str	r3, [r4, #8]
 8012842:	89a3      	ldrh	r3, [r4, #12]
 8012844:	071a      	lsls	r2, r3, #28
 8012846:	d509      	bpl.n	801285c <__swbuf_r+0x4c>
 8012848:	6923      	ldr	r3, [r4, #16]
 801284a:	b13b      	cbz	r3, 801285c <__swbuf_r+0x4c>
 801284c:	6823      	ldr	r3, [r4, #0]
 801284e:	6920      	ldr	r0, [r4, #16]
 8012850:	1a18      	subs	r0, r3, r0
 8012852:	6963      	ldr	r3, [r4, #20]
 8012854:	4298      	cmp	r0, r3
 8012856:	b2ed      	uxtb	r5, r5
 8012858:	db0f      	blt.n	801287a <__swbuf_r+0x6a>
 801285a:	e008      	b.n	801286e <__swbuf_r+0x5e>
 801285c:	4630      	mov	r0, r6
 801285e:	4621      	mov	r1, r4
 8012860:	f000 f82a 	bl	80128b8 <__swsetup_r>
 8012864:	2800      	cmp	r0, #0
 8012866:	d0f1      	beq.n	801284c <__swbuf_r+0x3c>
 8012868:	f04f 30ff 	mov.w	r0, #4294967295
 801286c:	bd70      	pop	{r4, r5, r6, pc}
 801286e:	4630      	mov	r0, r6
 8012870:	4621      	mov	r1, r4
 8012872:	f000 f911 	bl	8012a98 <_fflush_r>
 8012876:	2800      	cmp	r0, #0
 8012878:	d1f6      	bne.n	8012868 <__swbuf_r+0x58>
 801287a:	68a3      	ldr	r3, [r4, #8]
 801287c:	3b01      	subs	r3, #1
 801287e:	60a3      	str	r3, [r4, #8]
 8012880:	6823      	ldr	r3, [r4, #0]
 8012882:	1c5a      	adds	r2, r3, #1
 8012884:	6022      	str	r2, [r4, #0]
 8012886:	701d      	strb	r5, [r3, #0]
 8012888:	6963      	ldr	r3, [r4, #20]
 801288a:	3001      	adds	r0, #1
 801288c:	4298      	cmp	r0, r3
 801288e:	d004      	beq.n	801289a <__swbuf_r+0x8a>
 8012890:	89a3      	ldrh	r3, [r4, #12]
 8012892:	07db      	lsls	r3, r3, #31
 8012894:	d507      	bpl.n	80128a6 <__swbuf_r+0x96>
 8012896:	2d0a      	cmp	r5, #10
 8012898:	d105      	bne.n	80128a6 <__swbuf_r+0x96>
 801289a:	4630      	mov	r0, r6
 801289c:	4621      	mov	r1, r4
 801289e:	f000 f8fb 	bl	8012a98 <_fflush_r>
 80128a2:	2800      	cmp	r0, #0
 80128a4:	d1e0      	bne.n	8012868 <__swbuf_r+0x58>
 80128a6:	4628      	mov	r0, r5
 80128a8:	bd70      	pop	{r4, r5, r6, pc}
 80128aa:	bf00      	nop
 80128ac:	08013e5c 	.word	0x08013e5c
 80128b0:	08013e7c 	.word	0x08013e7c
 80128b4:	08013e9c 	.word	0x08013e9c

080128b8 <__swsetup_r>:
 80128b8:	4b31      	ldr	r3, [pc, #196]	; (8012980 <__swsetup_r+0xc8>)
 80128ba:	b570      	push	{r4, r5, r6, lr}
 80128bc:	681d      	ldr	r5, [r3, #0]
 80128be:	4606      	mov	r6, r0
 80128c0:	460c      	mov	r4, r1
 80128c2:	b125      	cbz	r5, 80128ce <__swsetup_r+0x16>
 80128c4:	69ab      	ldr	r3, [r5, #24]
 80128c6:	b913      	cbnz	r3, 80128ce <__swsetup_r+0x16>
 80128c8:	4628      	mov	r0, r5
 80128ca:	f000 f94f 	bl	8012b6c <__sinit>
 80128ce:	4b2d      	ldr	r3, [pc, #180]	; (8012984 <__swsetup_r+0xcc>)
 80128d0:	429c      	cmp	r4, r3
 80128d2:	d101      	bne.n	80128d8 <__swsetup_r+0x20>
 80128d4:	686c      	ldr	r4, [r5, #4]
 80128d6:	e008      	b.n	80128ea <__swsetup_r+0x32>
 80128d8:	4b2b      	ldr	r3, [pc, #172]	; (8012988 <__swsetup_r+0xd0>)
 80128da:	429c      	cmp	r4, r3
 80128dc:	d101      	bne.n	80128e2 <__swsetup_r+0x2a>
 80128de:	68ac      	ldr	r4, [r5, #8]
 80128e0:	e003      	b.n	80128ea <__swsetup_r+0x32>
 80128e2:	4b2a      	ldr	r3, [pc, #168]	; (801298c <__swsetup_r+0xd4>)
 80128e4:	429c      	cmp	r4, r3
 80128e6:	bf08      	it	eq
 80128e8:	68ec      	ldreq	r4, [r5, #12]
 80128ea:	89a3      	ldrh	r3, [r4, #12]
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	0711      	lsls	r1, r2, #28
 80128f0:	d41d      	bmi.n	801292e <__swsetup_r+0x76>
 80128f2:	06d5      	lsls	r5, r2, #27
 80128f4:	d402      	bmi.n	80128fc <__swsetup_r+0x44>
 80128f6:	2209      	movs	r2, #9
 80128f8:	6032      	str	r2, [r6, #0]
 80128fa:	e038      	b.n	801296e <__swsetup_r+0xb6>
 80128fc:	0750      	lsls	r0, r2, #29
 80128fe:	d512      	bpl.n	8012926 <__swsetup_r+0x6e>
 8012900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012902:	b141      	cbz	r1, 8012916 <__swsetup_r+0x5e>
 8012904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012908:	4299      	cmp	r1, r3
 801290a:	d002      	beq.n	8012912 <__swsetup_r+0x5a>
 801290c:	4630      	mov	r0, r6
 801290e:	f7ff fe1b 	bl	8012548 <_free_r>
 8012912:	2300      	movs	r3, #0
 8012914:	6363      	str	r3, [r4, #52]	; 0x34
 8012916:	89a3      	ldrh	r3, [r4, #12]
 8012918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801291c:	81a3      	strh	r3, [r4, #12]
 801291e:	2300      	movs	r3, #0
 8012920:	6063      	str	r3, [r4, #4]
 8012922:	6923      	ldr	r3, [r4, #16]
 8012924:	6023      	str	r3, [r4, #0]
 8012926:	89a3      	ldrh	r3, [r4, #12]
 8012928:	f043 0308 	orr.w	r3, r3, #8
 801292c:	81a3      	strh	r3, [r4, #12]
 801292e:	6923      	ldr	r3, [r4, #16]
 8012930:	b94b      	cbnz	r3, 8012946 <__swsetup_r+0x8e>
 8012932:	89a3      	ldrh	r3, [r4, #12]
 8012934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801293c:	d003      	beq.n	8012946 <__swsetup_r+0x8e>
 801293e:	4630      	mov	r0, r6
 8012940:	4621      	mov	r1, r4
 8012942:	f000 f99b 	bl	8012c7c <__smakebuf_r>
 8012946:	89a3      	ldrh	r3, [r4, #12]
 8012948:	f013 0201 	ands.w	r2, r3, #1
 801294c:	d005      	beq.n	801295a <__swsetup_r+0xa2>
 801294e:	2200      	movs	r2, #0
 8012950:	60a2      	str	r2, [r4, #8]
 8012952:	6962      	ldr	r2, [r4, #20]
 8012954:	4252      	negs	r2, r2
 8012956:	61a2      	str	r2, [r4, #24]
 8012958:	e003      	b.n	8012962 <__swsetup_r+0xaa>
 801295a:	0799      	lsls	r1, r3, #30
 801295c:	bf58      	it	pl
 801295e:	6962      	ldrpl	r2, [r4, #20]
 8012960:	60a2      	str	r2, [r4, #8]
 8012962:	6922      	ldr	r2, [r4, #16]
 8012964:	b94a      	cbnz	r2, 801297a <__swsetup_r+0xc2>
 8012966:	f003 0080 	and.w	r0, r3, #128	; 0x80
 801296a:	b280      	uxth	r0, r0
 801296c:	b130      	cbz	r0, 801297c <__swsetup_r+0xc4>
 801296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012972:	81a3      	strh	r3, [r4, #12]
 8012974:	f04f 30ff 	mov.w	r0, #4294967295
 8012978:	bd70      	pop	{r4, r5, r6, pc}
 801297a:	2000      	movs	r0, #0
 801297c:	bd70      	pop	{r4, r5, r6, pc}
 801297e:	bf00      	nop
 8012980:	1ffed5dc 	.word	0x1ffed5dc
 8012984:	08013e5c 	.word	0x08013e5c
 8012988:	08013e7c 	.word	0x08013e7c
 801298c:	08013e9c 	.word	0x08013e9c

08012990 <__sflush_r>:
 8012990:	898a      	ldrh	r2, [r1, #12]
 8012992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012996:	4605      	mov	r5, r0
 8012998:	0710      	lsls	r0, r2, #28
 801299a:	460c      	mov	r4, r1
 801299c:	d457      	bmi.n	8012a4e <__sflush_r+0xbe>
 801299e:	684b      	ldr	r3, [r1, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	dc02      	bgt.n	80129aa <__sflush_r+0x1a>
 80129a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	dd18      	ble.n	80129dc <__sflush_r+0x4c>
 80129aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129ac:	b1b6      	cbz	r6, 80129dc <__sflush_r+0x4c>
 80129ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80129b2:	2300      	movs	r3, #0
 80129b4:	b292      	uxth	r2, r2
 80129b6:	682f      	ldr	r7, [r5, #0]
 80129b8:	602b      	str	r3, [r5, #0]
 80129ba:	b10a      	cbz	r2, 80129c0 <__sflush_r+0x30>
 80129bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80129be:	e010      	b.n	80129e2 <__sflush_r+0x52>
 80129c0:	6a21      	ldr	r1, [r4, #32]
 80129c2:	4628      	mov	r0, r5
 80129c4:	2301      	movs	r3, #1
 80129c6:	47b0      	blx	r6
 80129c8:	1c41      	adds	r1, r0, #1
 80129ca:	4602      	mov	r2, r0
 80129cc:	d109      	bne.n	80129e2 <__sflush_r+0x52>
 80129ce:	682b      	ldr	r3, [r5, #0]
 80129d0:	b13b      	cbz	r3, 80129e2 <__sflush_r+0x52>
 80129d2:	2b1d      	cmp	r3, #29
 80129d4:	d001      	beq.n	80129da <__sflush_r+0x4a>
 80129d6:	2b16      	cmp	r3, #22
 80129d8:	d147      	bne.n	8012a6a <__sflush_r+0xda>
 80129da:	602f      	str	r7, [r5, #0]
 80129dc:	2000      	movs	r0, #0
 80129de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e2:	89a3      	ldrh	r3, [r4, #12]
 80129e4:	075b      	lsls	r3, r3, #29
 80129e6:	d505      	bpl.n	80129f4 <__sflush_r+0x64>
 80129e8:	6863      	ldr	r3, [r4, #4]
 80129ea:	1ad2      	subs	r2, r2, r3
 80129ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129ee:	b10b      	cbz	r3, 80129f4 <__sflush_r+0x64>
 80129f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80129f2:	1ad2      	subs	r2, r2, r3
 80129f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129f6:	6a21      	ldr	r1, [r4, #32]
 80129f8:	2300      	movs	r3, #0
 80129fa:	4628      	mov	r0, r5
 80129fc:	47b0      	blx	r6
 80129fe:	1c46      	adds	r6, r0, #1
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	d105      	bne.n	8012a10 <__sflush_r+0x80>
 8012a04:	682a      	ldr	r2, [r5, #0]
 8012a06:	b11a      	cbz	r2, 8012a10 <__sflush_r+0x80>
 8012a08:	2a1d      	cmp	r2, #29
 8012a0a:	d001      	beq.n	8012a10 <__sflush_r+0x80>
 8012a0c:	2a16      	cmp	r2, #22
 8012a0e:	d119      	bne.n	8012a44 <__sflush_r+0xb4>
 8012a10:	2200      	movs	r2, #0
 8012a12:	6062      	str	r2, [r4, #4]
 8012a14:	04d9      	lsls	r1, r3, #19
 8012a16:	6922      	ldr	r2, [r4, #16]
 8012a18:	6022      	str	r2, [r4, #0]
 8012a1a:	d504      	bpl.n	8012a26 <__sflush_r+0x96>
 8012a1c:	1c42      	adds	r2, r0, #1
 8012a1e:	d101      	bne.n	8012a24 <__sflush_r+0x94>
 8012a20:	682b      	ldr	r3, [r5, #0]
 8012a22:	b903      	cbnz	r3, 8012a26 <__sflush_r+0x96>
 8012a24:	6560      	str	r0, [r4, #84]	; 0x54
 8012a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a28:	602f      	str	r7, [r5, #0]
 8012a2a:	2900      	cmp	r1, #0
 8012a2c:	d0d6      	beq.n	80129dc <__sflush_r+0x4c>
 8012a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a32:	4299      	cmp	r1, r3
 8012a34:	d002      	beq.n	8012a3c <__sflush_r+0xac>
 8012a36:	4628      	mov	r0, r5
 8012a38:	f7ff fd86 	bl	8012548 <_free_r>
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8012a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a48:	81a3      	strh	r3, [r4, #12]
 8012a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a4e:	690f      	ldr	r7, [r1, #16]
 8012a50:	2f00      	cmp	r7, #0
 8012a52:	d0c3      	beq.n	80129dc <__sflush_r+0x4c>
 8012a54:	0793      	lsls	r3, r2, #30
 8012a56:	680e      	ldr	r6, [r1, #0]
 8012a58:	bf08      	it	eq
 8012a5a:	694b      	ldreq	r3, [r1, #20]
 8012a5c:	600f      	str	r7, [r1, #0]
 8012a5e:	bf18      	it	ne
 8012a60:	2300      	movne	r3, #0
 8012a62:	ebc7 0806 	rsb	r8, r7, r6
 8012a66:	608b      	str	r3, [r1, #8]
 8012a68:	e012      	b.n	8012a90 <__sflush_r+0x100>
 8012a6a:	89a3      	ldrh	r3, [r4, #12]
 8012a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a70:	81a3      	strh	r3, [r4, #12]
 8012a72:	f04f 30ff 	mov.w	r0, #4294967295
 8012a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a7a:	4628      	mov	r0, r5
 8012a7c:	6a21      	ldr	r1, [r4, #32]
 8012a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a80:	463a      	mov	r2, r7
 8012a82:	4643      	mov	r3, r8
 8012a84:	47b0      	blx	r6
 8012a86:	2800      	cmp	r0, #0
 8012a88:	ddef      	ble.n	8012a6a <__sflush_r+0xda>
 8012a8a:	4407      	add	r7, r0
 8012a8c:	ebc0 0808 	rsb	r8, r0, r8
 8012a90:	f1b8 0f00 	cmp.w	r8, #0
 8012a94:	dcf1      	bgt.n	8012a7a <__sflush_r+0xea>
 8012a96:	e7a1      	b.n	80129dc <__sflush_r+0x4c>

08012a98 <_fflush_r>:
 8012a98:	b538      	push	{r3, r4, r5, lr}
 8012a9a:	690b      	ldr	r3, [r1, #16]
 8012a9c:	4605      	mov	r5, r0
 8012a9e:	460c      	mov	r4, r1
 8012aa0:	b1db      	cbz	r3, 8012ada <_fflush_r+0x42>
 8012aa2:	b118      	cbz	r0, 8012aac <_fflush_r+0x14>
 8012aa4:	6983      	ldr	r3, [r0, #24]
 8012aa6:	b90b      	cbnz	r3, 8012aac <_fflush_r+0x14>
 8012aa8:	f000 f860 	bl	8012b6c <__sinit>
 8012aac:	4b0c      	ldr	r3, [pc, #48]	; (8012ae0 <_fflush_r+0x48>)
 8012aae:	429c      	cmp	r4, r3
 8012ab0:	d101      	bne.n	8012ab6 <_fflush_r+0x1e>
 8012ab2:	686c      	ldr	r4, [r5, #4]
 8012ab4:	e008      	b.n	8012ac8 <_fflush_r+0x30>
 8012ab6:	4b0b      	ldr	r3, [pc, #44]	; (8012ae4 <_fflush_r+0x4c>)
 8012ab8:	429c      	cmp	r4, r3
 8012aba:	d101      	bne.n	8012ac0 <_fflush_r+0x28>
 8012abc:	68ac      	ldr	r4, [r5, #8]
 8012abe:	e003      	b.n	8012ac8 <_fflush_r+0x30>
 8012ac0:	4b09      	ldr	r3, [pc, #36]	; (8012ae8 <_fflush_r+0x50>)
 8012ac2:	429c      	cmp	r4, r3
 8012ac4:	bf08      	it	eq
 8012ac6:	68ec      	ldreq	r4, [r5, #12]
 8012ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012acc:	b12b      	cbz	r3, 8012ada <_fflush_r+0x42>
 8012ace:	4628      	mov	r0, r5
 8012ad0:	4621      	mov	r1, r4
 8012ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ad6:	f7ff bf5b 	b.w	8012990 <__sflush_r>
 8012ada:	2000      	movs	r0, #0
 8012adc:	bd38      	pop	{r3, r4, r5, pc}
 8012ade:	bf00      	nop
 8012ae0:	08013e5c 	.word	0x08013e5c
 8012ae4:	08013e7c 	.word	0x08013e7c
 8012ae8:	08013e9c 	.word	0x08013e9c

08012aec <_cleanup_r>:
 8012aec:	4901      	ldr	r1, [pc, #4]	; (8012af4 <_cleanup_r+0x8>)
 8012aee:	f000 b8a7 	b.w	8012c40 <_fwalk_reent>
 8012af2:	bf00      	nop
 8012af4:	08012a99 	.word	0x08012a99

08012af8 <std.isra.0>:
 8012af8:	2300      	movs	r3, #0
 8012afa:	b510      	push	{r4, lr}
 8012afc:	4604      	mov	r4, r0
 8012afe:	6003      	str	r3, [r0, #0]
 8012b00:	6043      	str	r3, [r0, #4]
 8012b02:	6083      	str	r3, [r0, #8]
 8012b04:	8181      	strh	r1, [r0, #12]
 8012b06:	6643      	str	r3, [r0, #100]	; 0x64
 8012b08:	81c2      	strh	r2, [r0, #14]
 8012b0a:	6103      	str	r3, [r0, #16]
 8012b0c:	6143      	str	r3, [r0, #20]
 8012b0e:	6183      	str	r3, [r0, #24]
 8012b10:	4619      	mov	r1, r3
 8012b12:	305c      	adds	r0, #92	; 0x5c
 8012b14:	2208      	movs	r2, #8
 8012b16:	f7ff fd00 	bl	801251a <memset>
 8012b1a:	4b05      	ldr	r3, [pc, #20]	; (8012b30 <std.isra.0+0x38>)
 8012b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8012b1e:	4b05      	ldr	r3, [pc, #20]	; (8012b34 <std.isra.0+0x3c>)
 8012b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b22:	4b05      	ldr	r3, [pc, #20]	; (8012b38 <std.isra.0+0x40>)
 8012b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b26:	4b05      	ldr	r3, [pc, #20]	; (8012b3c <std.isra.0+0x44>)
 8012b28:	6224      	str	r4, [r4, #32]
 8012b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8012b2c:	bd10      	pop	{r4, pc}
 8012b2e:	bf00      	nop
 8012b30:	08013531 	.word	0x08013531
 8012b34:	08013553 	.word	0x08013553
 8012b38:	0801358b 	.word	0x0801358b
 8012b3c:	080135af 	.word	0x080135af

08012b40 <__sfmoreglue>:
 8012b40:	b570      	push	{r4, r5, r6, lr}
 8012b42:	2368      	movs	r3, #104	; 0x68
 8012b44:	1e4d      	subs	r5, r1, #1
 8012b46:	435d      	muls	r5, r3
 8012b48:	460e      	mov	r6, r1
 8012b4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b4e:	f7ff fd3f 	bl	80125d0 <_malloc_r>
 8012b52:	4604      	mov	r4, r0
 8012b54:	b140      	cbz	r0, 8012b68 <__sfmoreglue+0x28>
 8012b56:	2100      	movs	r1, #0
 8012b58:	e880 0042 	stmia.w	r0, {r1, r6}
 8012b5c:	300c      	adds	r0, #12
 8012b5e:	60a0      	str	r0, [r4, #8]
 8012b60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b64:	f7ff fcd9 	bl	801251a <memset>
 8012b68:	4620      	mov	r0, r4
 8012b6a:	bd70      	pop	{r4, r5, r6, pc}

08012b6c <__sinit>:
 8012b6c:	6983      	ldr	r3, [r0, #24]
 8012b6e:	b510      	push	{r4, lr}
 8012b70:	4604      	mov	r4, r0
 8012b72:	bb33      	cbnz	r3, 8012bc2 <__sinit+0x56>
 8012b74:	6483      	str	r3, [r0, #72]	; 0x48
 8012b76:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012b78:	6503      	str	r3, [r0, #80]	; 0x50
 8012b7a:	4b12      	ldr	r3, [pc, #72]	; (8012bc4 <__sinit+0x58>)
 8012b7c:	4a12      	ldr	r2, [pc, #72]	; (8012bc8 <__sinit+0x5c>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	6282      	str	r2, [r0, #40]	; 0x28
 8012b82:	4298      	cmp	r0, r3
 8012b84:	bf04      	itt	eq
 8012b86:	2301      	moveq	r3, #1
 8012b88:	6183      	streq	r3, [r0, #24]
 8012b8a:	f000 f81f 	bl	8012bcc <__sfp>
 8012b8e:	6060      	str	r0, [r4, #4]
 8012b90:	4620      	mov	r0, r4
 8012b92:	f000 f81b 	bl	8012bcc <__sfp>
 8012b96:	60a0      	str	r0, [r4, #8]
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f000 f817 	bl	8012bcc <__sfp>
 8012b9e:	2104      	movs	r1, #4
 8012ba0:	60e0      	str	r0, [r4, #12]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	6860      	ldr	r0, [r4, #4]
 8012ba6:	f7ff ffa7 	bl	8012af8 <std.isra.0>
 8012baa:	68a0      	ldr	r0, [r4, #8]
 8012bac:	2109      	movs	r1, #9
 8012bae:	2201      	movs	r2, #1
 8012bb0:	f7ff ffa2 	bl	8012af8 <std.isra.0>
 8012bb4:	68e0      	ldr	r0, [r4, #12]
 8012bb6:	2112      	movs	r1, #18
 8012bb8:	2202      	movs	r2, #2
 8012bba:	f7ff ff9d 	bl	8012af8 <std.isra.0>
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	61a3      	str	r3, [r4, #24]
 8012bc2:	bd10      	pop	{r4, pc}
 8012bc4:	08013e58 	.word	0x08013e58
 8012bc8:	08012aed 	.word	0x08012aed

08012bcc <__sfp>:
 8012bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bce:	4b1b      	ldr	r3, [pc, #108]	; (8012c3c <__sfp+0x70>)
 8012bd0:	681e      	ldr	r6, [r3, #0]
 8012bd2:	69b3      	ldr	r3, [r6, #24]
 8012bd4:	4607      	mov	r7, r0
 8012bd6:	b913      	cbnz	r3, 8012bde <__sfp+0x12>
 8012bd8:	4630      	mov	r0, r6
 8012bda:	f7ff ffc7 	bl	8012b6c <__sinit>
 8012bde:	3648      	adds	r6, #72	; 0x48
 8012be0:	68b4      	ldr	r4, [r6, #8]
 8012be2:	6873      	ldr	r3, [r6, #4]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	d404      	bmi.n	8012bf2 <__sfp+0x26>
 8012be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012bec:	b175      	cbz	r5, 8012c0c <__sfp+0x40>
 8012bee:	3468      	adds	r4, #104	; 0x68
 8012bf0:	e7f8      	b.n	8012be4 <__sfp+0x18>
 8012bf2:	6833      	ldr	r3, [r6, #0]
 8012bf4:	b92b      	cbnz	r3, 8012c02 <__sfp+0x36>
 8012bf6:	4638      	mov	r0, r7
 8012bf8:	2104      	movs	r1, #4
 8012bfa:	f7ff ffa1 	bl	8012b40 <__sfmoreglue>
 8012bfe:	6030      	str	r0, [r6, #0]
 8012c00:	b108      	cbz	r0, 8012c06 <__sfp+0x3a>
 8012c02:	6836      	ldr	r6, [r6, #0]
 8012c04:	e7ec      	b.n	8012be0 <__sfp+0x14>
 8012c06:	230c      	movs	r3, #12
 8012c08:	603b      	str	r3, [r7, #0]
 8012c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c10:	81e3      	strh	r3, [r4, #14]
 8012c12:	2301      	movs	r3, #1
 8012c14:	81a3      	strh	r3, [r4, #12]
 8012c16:	6665      	str	r5, [r4, #100]	; 0x64
 8012c18:	6025      	str	r5, [r4, #0]
 8012c1a:	60a5      	str	r5, [r4, #8]
 8012c1c:	6065      	str	r5, [r4, #4]
 8012c1e:	6125      	str	r5, [r4, #16]
 8012c20:	6165      	str	r5, [r4, #20]
 8012c22:	61a5      	str	r5, [r4, #24]
 8012c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c28:	4629      	mov	r1, r5
 8012c2a:	2208      	movs	r2, #8
 8012c2c:	f7ff fc75 	bl	801251a <memset>
 8012c30:	6365      	str	r5, [r4, #52]	; 0x34
 8012c32:	63a5      	str	r5, [r4, #56]	; 0x38
 8012c34:	64a5      	str	r5, [r4, #72]	; 0x48
 8012c36:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012c38:	4620      	mov	r0, r4
 8012c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c3c:	08013e58 	.word	0x08013e58

08012c40 <_fwalk_reent>:
 8012c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c44:	4680      	mov	r8, r0
 8012c46:	4689      	mov	r9, r1
 8012c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012c4c:	2600      	movs	r6, #0
 8012c4e:	b194      	cbz	r4, 8012c76 <_fwalk_reent+0x36>
 8012c50:	68a5      	ldr	r5, [r4, #8]
 8012c52:	6867      	ldr	r7, [r4, #4]
 8012c54:	3f01      	subs	r7, #1
 8012c56:	d40c      	bmi.n	8012c72 <_fwalk_reent+0x32>
 8012c58:	89ab      	ldrh	r3, [r5, #12]
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d907      	bls.n	8012c6e <_fwalk_reent+0x2e>
 8012c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c62:	3301      	adds	r3, #1
 8012c64:	d003      	beq.n	8012c6e <_fwalk_reent+0x2e>
 8012c66:	4640      	mov	r0, r8
 8012c68:	4629      	mov	r1, r5
 8012c6a:	47c8      	blx	r9
 8012c6c:	4306      	orrs	r6, r0
 8012c6e:	3568      	adds	r5, #104	; 0x68
 8012c70:	e7f0      	b.n	8012c54 <_fwalk_reent+0x14>
 8012c72:	6824      	ldr	r4, [r4, #0]
 8012c74:	e7eb      	b.n	8012c4e <_fwalk_reent+0xe>
 8012c76:	4630      	mov	r0, r6
 8012c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012c7c <__smakebuf_r>:
 8012c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c7e:	898b      	ldrh	r3, [r1, #12]
 8012c80:	079d      	lsls	r5, r3, #30
 8012c82:	b091      	sub	sp, #68	; 0x44
 8012c84:	4606      	mov	r6, r0
 8012c86:	460c      	mov	r4, r1
 8012c88:	d426      	bmi.n	8012cd8 <__smakebuf_r+0x5c>
 8012c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c8e:	2900      	cmp	r1, #0
 8012c90:	da09      	bge.n	8012ca6 <__smakebuf_r+0x2a>
 8012c92:	89a3      	ldrh	r3, [r4, #12]
 8012c94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012c98:	f04f 0500 	mov.w	r5, #0
 8012c9c:	bf14      	ite	ne
 8012c9e:	2740      	movne	r7, #64	; 0x40
 8012ca0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8012ca4:	e00d      	b.n	8012cc2 <__smakebuf_r+0x46>
 8012ca6:	aa01      	add	r2, sp, #4
 8012ca8:	f000 fca8 	bl	80135fc <_fstat_r>
 8012cac:	2800      	cmp	r0, #0
 8012cae:	dbf0      	blt.n	8012c92 <__smakebuf_r+0x16>
 8012cb0:	9d02      	ldr	r5, [sp, #8]
 8012cb2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8012cb6:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8012cba:	424d      	negs	r5, r1
 8012cbc:	414d      	adcs	r5, r1
 8012cbe:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	4639      	mov	r1, r7
 8012cc6:	f7ff fc83 	bl	80125d0 <_malloc_r>
 8012cca:	b960      	cbnz	r0, 8012ce6 <__smakebuf_r+0x6a>
 8012ccc:	89a3      	ldrh	r3, [r4, #12]
 8012cce:	059a      	lsls	r2, r3, #22
 8012cd0:	d41d      	bmi.n	8012d0e <__smakebuf_r+0x92>
 8012cd2:	f043 0302 	orr.w	r3, r3, #2
 8012cd6:	81a3      	strh	r3, [r4, #12]
 8012cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012cdc:	6023      	str	r3, [r4, #0]
 8012cde:	6123      	str	r3, [r4, #16]
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	6163      	str	r3, [r4, #20]
 8012ce4:	e013      	b.n	8012d0e <__smakebuf_r+0x92>
 8012ce6:	4b0b      	ldr	r3, [pc, #44]	; (8012d14 <__smakebuf_r+0x98>)
 8012ce8:	62b3      	str	r3, [r6, #40]	; 0x28
 8012cea:	89a3      	ldrh	r3, [r4, #12]
 8012cec:	6020      	str	r0, [r4, #0]
 8012cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cf2:	81a3      	strh	r3, [r4, #12]
 8012cf4:	6120      	str	r0, [r4, #16]
 8012cf6:	6167      	str	r7, [r4, #20]
 8012cf8:	b14d      	cbz	r5, 8012d0e <__smakebuf_r+0x92>
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d00:	f000 fc8e 	bl	8013620 <_isatty_r>
 8012d04:	b118      	cbz	r0, 8012d0e <__smakebuf_r+0x92>
 8012d06:	89a3      	ldrh	r3, [r4, #12]
 8012d08:	f043 0301 	orr.w	r3, r3, #1
 8012d0c:	81a3      	strh	r3, [r4, #12]
 8012d0e:	b011      	add	sp, #68	; 0x44
 8012d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d12:	bf00      	nop
 8012d14:	08012aed 	.word	0x08012aed

08012d18 <__ssputs_r>:
 8012d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d1c:	688e      	ldr	r6, [r1, #8]
 8012d1e:	42b3      	cmp	r3, r6
 8012d20:	4682      	mov	sl, r0
 8012d22:	460c      	mov	r4, r1
 8012d24:	4690      	mov	r8, r2
 8012d26:	4699      	mov	r9, r3
 8012d28:	d340      	bcc.n	8012dac <__ssputs_r+0x94>
 8012d2a:	898a      	ldrh	r2, [r1, #12]
 8012d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012d30:	d03a      	beq.n	8012da8 <__ssputs_r+0x90>
 8012d32:	6825      	ldr	r5, [r4, #0]
 8012d34:	6909      	ldr	r1, [r1, #16]
 8012d36:	1a6f      	subs	r7, r5, r1
 8012d38:	6965      	ldr	r5, [r4, #20]
 8012d3a:	2302      	movs	r3, #2
 8012d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d40:	fb95 f5f3 	sdiv	r5, r5, r3
 8012d44:	1c7b      	adds	r3, r7, #1
 8012d46:	444b      	add	r3, r9
 8012d48:	429d      	cmp	r5, r3
 8012d4a:	bf38      	it	cc
 8012d4c:	461d      	movcc	r5, r3
 8012d4e:	0553      	lsls	r3, r2, #21
 8012d50:	d50f      	bpl.n	8012d72 <__ssputs_r+0x5a>
 8012d52:	4629      	mov	r1, r5
 8012d54:	f7ff fc3c 	bl	80125d0 <_malloc_r>
 8012d58:	4606      	mov	r6, r0
 8012d5a:	b198      	cbz	r0, 8012d84 <__ssputs_r+0x6c>
 8012d5c:	6921      	ldr	r1, [r4, #16]
 8012d5e:	463a      	mov	r2, r7
 8012d60:	f7ff fbd0 	bl	8012504 <memcpy>
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d6e:	81a3      	strh	r3, [r4, #12]
 8012d70:	e013      	b.n	8012d9a <__ssputs_r+0x82>
 8012d72:	462a      	mov	r2, r5
 8012d74:	f000 fca0 	bl	80136b8 <_realloc_r>
 8012d78:	4606      	mov	r6, r0
 8012d7a:	b970      	cbnz	r0, 8012d9a <__ssputs_r+0x82>
 8012d7c:	4650      	mov	r0, sl
 8012d7e:	6921      	ldr	r1, [r4, #16]
 8012d80:	f7ff fbe2 	bl	8012548 <_free_r>
 8012d84:	230c      	movs	r3, #12
 8012d86:	f8ca 3000 	str.w	r3, [sl]
 8012d8a:	89a3      	ldrh	r3, [r4, #12]
 8012d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d90:	81a3      	strh	r3, [r4, #12]
 8012d92:	f04f 30ff 	mov.w	r0, #4294967295
 8012d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d9a:	6126      	str	r6, [r4, #16]
 8012d9c:	6165      	str	r5, [r4, #20]
 8012d9e:	443e      	add	r6, r7
 8012da0:	1bed      	subs	r5, r5, r7
 8012da2:	6026      	str	r6, [r4, #0]
 8012da4:	60a5      	str	r5, [r4, #8]
 8012da6:	464e      	mov	r6, r9
 8012da8:	45b1      	cmp	r9, r6
 8012daa:	d200      	bcs.n	8012dae <__ssputs_r+0x96>
 8012dac:	464e      	mov	r6, r9
 8012dae:	4632      	mov	r2, r6
 8012db0:	6820      	ldr	r0, [r4, #0]
 8012db2:	4641      	mov	r1, r8
 8012db4:	f000 fc65 	bl	8013682 <memmove>
 8012db8:	68a3      	ldr	r3, [r4, #8]
 8012dba:	1b9b      	subs	r3, r3, r6
 8012dbc:	60a3      	str	r3, [r4, #8]
 8012dbe:	6823      	ldr	r3, [r4, #0]
 8012dc0:	441e      	add	r6, r3
 8012dc2:	6026      	str	r6, [r4, #0]
 8012dc4:	2000      	movs	r0, #0
 8012dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012dcc <_svfiprintf_r>:
 8012dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012dd0:	b09d      	sub	sp, #116	; 0x74
 8012dd2:	4606      	mov	r6, r0
 8012dd4:	9303      	str	r3, [sp, #12]
 8012dd6:	898b      	ldrh	r3, [r1, #12]
 8012dd8:	061c      	lsls	r4, r3, #24
 8012dda:	460d      	mov	r5, r1
 8012ddc:	4690      	mov	r8, r2
 8012dde:	d50c      	bpl.n	8012dfa <_svfiprintf_r+0x2e>
 8012de0:	690b      	ldr	r3, [r1, #16]
 8012de2:	b953      	cbnz	r3, 8012dfa <_svfiprintf_r+0x2e>
 8012de4:	2140      	movs	r1, #64	; 0x40
 8012de6:	f7ff fbf3 	bl	80125d0 <_malloc_r>
 8012dea:	6028      	str	r0, [r5, #0]
 8012dec:	6128      	str	r0, [r5, #16]
 8012dee:	b910      	cbnz	r0, 8012df6 <_svfiprintf_r+0x2a>
 8012df0:	230c      	movs	r3, #12
 8012df2:	6033      	str	r3, [r6, #0]
 8012df4:	e0cc      	b.n	8012f90 <_svfiprintf_r+0x1c4>
 8012df6:	2340      	movs	r3, #64	; 0x40
 8012df8:	616b      	str	r3, [r5, #20]
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8012dfe:	2320      	movs	r3, #32
 8012e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e04:	2330      	movs	r3, #48	; 0x30
 8012e06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e0a:	4643      	mov	r3, r8
 8012e0c:	461c      	mov	r4, r3
 8012e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e12:	b91a      	cbnz	r2, 8012e1c <_svfiprintf_r+0x50>
 8012e14:	ebb4 0908 	subs.w	r9, r4, r8
 8012e18:	d00f      	beq.n	8012e3a <_svfiprintf_r+0x6e>
 8012e1a:	e002      	b.n	8012e22 <_svfiprintf_r+0x56>
 8012e1c:	2a25      	cmp	r2, #37	; 0x25
 8012e1e:	d1f5      	bne.n	8012e0c <_svfiprintf_r+0x40>
 8012e20:	e7f8      	b.n	8012e14 <_svfiprintf_r+0x48>
 8012e22:	4630      	mov	r0, r6
 8012e24:	4629      	mov	r1, r5
 8012e26:	4642      	mov	r2, r8
 8012e28:	464b      	mov	r3, r9
 8012e2a:	f7ff ff75 	bl	8012d18 <__ssputs_r>
 8012e2e:	3001      	adds	r0, #1
 8012e30:	f000 80a9 	beq.w	8012f86 <_svfiprintf_r+0x1ba>
 8012e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e36:	444b      	add	r3, r9
 8012e38:	9309      	str	r3, [sp, #36]	; 0x24
 8012e3a:	7823      	ldrb	r3, [r4, #0]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	f000 80a2 	beq.w	8012f86 <_svfiprintf_r+0x1ba>
 8012e42:	2300      	movs	r3, #0
 8012e44:	f04f 32ff 	mov.w	r2, #4294967295
 8012e48:	9304      	str	r3, [sp, #16]
 8012e4a:	9307      	str	r3, [sp, #28]
 8012e4c:	9205      	str	r2, [sp, #20]
 8012e4e:	9306      	str	r3, [sp, #24]
 8012e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e54:	931a      	str	r3, [sp, #104]	; 0x68
 8012e56:	f104 0801 	add.w	r8, r4, #1
 8012e5a:	4644      	mov	r4, r8
 8012e5c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8012fa8 <_svfiprintf_r+0x1dc>
 8012e60:	7821      	ldrb	r1, [r4, #0]
 8012e62:	4648      	mov	r0, r9
 8012e64:	2205      	movs	r2, #5
 8012e66:	f000 fbfd 	bl	8013664 <memchr>
 8012e6a:	f108 0801 	add.w	r8, r8, #1
 8012e6e:	9b04      	ldr	r3, [sp, #16]
 8012e70:	b130      	cbz	r0, 8012e80 <_svfiprintf_r+0xb4>
 8012e72:	ebc9 0000 	rsb	r0, r9, r0
 8012e76:	2201      	movs	r2, #1
 8012e78:	4082      	lsls	r2, r0
 8012e7a:	4313      	orrs	r3, r2
 8012e7c:	9304      	str	r3, [sp, #16]
 8012e7e:	e7ec      	b.n	8012e5a <_svfiprintf_r+0x8e>
 8012e80:	06d8      	lsls	r0, r3, #27
 8012e82:	bf44      	itt	mi
 8012e84:	2220      	movmi	r2, #32
 8012e86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012e8a:	0719      	lsls	r1, r3, #28
 8012e8c:	bf44      	itt	mi
 8012e8e:	222b      	movmi	r2, #43	; 0x2b
 8012e90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012e94:	7822      	ldrb	r2, [r4, #0]
 8012e96:	2a2a      	cmp	r2, #42	; 0x2a
 8012e98:	d002      	beq.n	8012ea0 <_svfiprintf_r+0xd4>
 8012e9a:	9907      	ldr	r1, [sp, #28]
 8012e9c:	4623      	mov	r3, r4
 8012e9e:	e00e      	b.n	8012ebe <_svfiprintf_r+0xf2>
 8012ea0:	9a03      	ldr	r2, [sp, #12]
 8012ea2:	1d11      	adds	r1, r2, #4
 8012ea4:	6812      	ldr	r2, [r2, #0]
 8012ea6:	9103      	str	r1, [sp, #12]
 8012ea8:	2a00      	cmp	r2, #0
 8012eaa:	bfbb      	ittet	lt
 8012eac:	4252      	neglt	r2, r2
 8012eae:	f043 0302 	orrlt.w	r3, r3, #2
 8012eb2:	9207      	strge	r2, [sp, #28]
 8012eb4:	9207      	strlt	r2, [sp, #28]
 8012eb6:	bfb8      	it	lt
 8012eb8:	9304      	strlt	r3, [sp, #16]
 8012eba:	3401      	adds	r4, #1
 8012ebc:	e00a      	b.n	8012ed4 <_svfiprintf_r+0x108>
 8012ebe:	461c      	mov	r4, r3
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	7822      	ldrb	r2, [r4, #0]
 8012ec4:	3a30      	subs	r2, #48	; 0x30
 8012ec6:	2a09      	cmp	r2, #9
 8012ec8:	d803      	bhi.n	8012ed2 <_svfiprintf_r+0x106>
 8012eca:	200a      	movs	r0, #10
 8012ecc:	fb00 2101 	mla	r1, r0, r1, r2
 8012ed0:	e7f5      	b.n	8012ebe <_svfiprintf_r+0xf2>
 8012ed2:	9107      	str	r1, [sp, #28]
 8012ed4:	7823      	ldrb	r3, [r4, #0]
 8012ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8012ed8:	d11a      	bne.n	8012f10 <_svfiprintf_r+0x144>
 8012eda:	7863      	ldrb	r3, [r4, #1]
 8012edc:	2b2a      	cmp	r3, #42	; 0x2a
 8012ede:	d10a      	bne.n	8012ef6 <_svfiprintf_r+0x12a>
 8012ee0:	9b03      	ldr	r3, [sp, #12]
 8012ee2:	1d1a      	adds	r2, r3, #4
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	9203      	str	r2, [sp, #12]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	bfb8      	it	lt
 8012eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ef0:	3402      	adds	r4, #2
 8012ef2:	9305      	str	r3, [sp, #20]
 8012ef4:	e00c      	b.n	8012f10 <_svfiprintf_r+0x144>
 8012ef6:	1c61      	adds	r1, r4, #1
 8012ef8:	2200      	movs	r2, #0
 8012efa:	460c      	mov	r4, r1
 8012efc:	3101      	adds	r1, #1
 8012efe:	7823      	ldrb	r3, [r4, #0]
 8012f00:	3b30      	subs	r3, #48	; 0x30
 8012f02:	2b09      	cmp	r3, #9
 8012f04:	d803      	bhi.n	8012f0e <_svfiprintf_r+0x142>
 8012f06:	200a      	movs	r0, #10
 8012f08:	fb00 3202 	mla	r2, r0, r2, r3
 8012f0c:	e7f5      	b.n	8012efa <_svfiprintf_r+0x12e>
 8012f0e:	9205      	str	r2, [sp, #20]
 8012f10:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8012fac <_svfiprintf_r+0x1e0>
 8012f14:	7821      	ldrb	r1, [r4, #0]
 8012f16:	4640      	mov	r0, r8
 8012f18:	2203      	movs	r2, #3
 8012f1a:	f000 fba3 	bl	8013664 <memchr>
 8012f1e:	b138      	cbz	r0, 8012f30 <_svfiprintf_r+0x164>
 8012f20:	9a04      	ldr	r2, [sp, #16]
 8012f22:	ebc8 0000 	rsb	r0, r8, r0
 8012f26:	2340      	movs	r3, #64	; 0x40
 8012f28:	4083      	lsls	r3, r0
 8012f2a:	4313      	orrs	r3, r2
 8012f2c:	9304      	str	r3, [sp, #16]
 8012f2e:	3401      	adds	r4, #1
 8012f30:	7821      	ldrb	r1, [r4, #0]
 8012f32:	481a      	ldr	r0, [pc, #104]	; (8012f9c <_svfiprintf_r+0x1d0>)
 8012f34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f38:	2206      	movs	r2, #6
 8012f3a:	f104 0801 	add.w	r8, r4, #1
 8012f3e:	f000 fb91 	bl	8013664 <memchr>
 8012f42:	b188      	cbz	r0, 8012f68 <_svfiprintf_r+0x19c>
 8012f44:	4b16      	ldr	r3, [pc, #88]	; (8012fa0 <_svfiprintf_r+0x1d4>)
 8012f46:	b933      	cbnz	r3, 8012f56 <_svfiprintf_r+0x18a>
 8012f48:	9b03      	ldr	r3, [sp, #12]
 8012f4a:	3307      	adds	r3, #7
 8012f4c:	f023 0307 	bic.w	r3, r3, #7
 8012f50:	3308      	adds	r3, #8
 8012f52:	9303      	str	r3, [sp, #12]
 8012f54:	e013      	b.n	8012f7e <_svfiprintf_r+0x1b2>
 8012f56:	ab03      	add	r3, sp, #12
 8012f58:	9300      	str	r3, [sp, #0]
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	a904      	add	r1, sp, #16
 8012f5e:	462a      	mov	r2, r5
 8012f60:	4b10      	ldr	r3, [pc, #64]	; (8012fa4 <_svfiprintf_r+0x1d8>)
 8012f62:	f3af 8000 	nop.w
 8012f66:	e007      	b.n	8012f78 <_svfiprintf_r+0x1ac>
 8012f68:	ab03      	add	r3, sp, #12
 8012f6a:	9300      	str	r3, [sp, #0]
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	a904      	add	r1, sp, #16
 8012f70:	462a      	mov	r2, r5
 8012f72:	4b0c      	ldr	r3, [pc, #48]	; (8012fa4 <_svfiprintf_r+0x1d8>)
 8012f74:	f000 f9c2 	bl	80132fc <_printf_i>
 8012f78:	1c42      	adds	r2, r0, #1
 8012f7a:	4607      	mov	r7, r0
 8012f7c:	d003      	beq.n	8012f86 <_svfiprintf_r+0x1ba>
 8012f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f80:	443b      	add	r3, r7
 8012f82:	9309      	str	r3, [sp, #36]	; 0x24
 8012f84:	e741      	b.n	8012e0a <_svfiprintf_r+0x3e>
 8012f86:	89ab      	ldrh	r3, [r5, #12]
 8012f88:	065b      	lsls	r3, r3, #25
 8012f8a:	d401      	bmi.n	8012f90 <_svfiprintf_r+0x1c4>
 8012f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f8e:	e001      	b.n	8012f94 <_svfiprintf_r+0x1c8>
 8012f90:	f04f 30ff 	mov.w	r0, #4294967295
 8012f94:	b01d      	add	sp, #116	; 0x74
 8012f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f9a:	bf00      	nop
 8012f9c:	08013ec6 	.word	0x08013ec6
 8012fa0:	00000000 	.word	0x00000000
 8012fa4:	08012d19 	.word	0x08012d19
 8012fa8:	08013ebc 	.word	0x08013ebc
 8012fac:	08013ec2 	.word	0x08013ec2

08012fb0 <__sfputc_r>:
 8012fb0:	6893      	ldr	r3, [r2, #8]
 8012fb2:	3b01      	subs	r3, #1
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	b510      	push	{r4, lr}
 8012fb8:	6093      	str	r3, [r2, #8]
 8012fba:	da09      	bge.n	8012fd0 <__sfputc_r+0x20>
 8012fbc:	6994      	ldr	r4, [r2, #24]
 8012fbe:	42a3      	cmp	r3, r4
 8012fc0:	db02      	blt.n	8012fc8 <__sfputc_r+0x18>
 8012fc2:	b2cb      	uxtb	r3, r1
 8012fc4:	2b0a      	cmp	r3, #10
 8012fc6:	d103      	bne.n	8012fd0 <__sfputc_r+0x20>
 8012fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fcc:	f7ff bc20 	b.w	8012810 <__swbuf_r>
 8012fd0:	6813      	ldr	r3, [r2, #0]
 8012fd2:	1c58      	adds	r0, r3, #1
 8012fd4:	6010      	str	r0, [r2, #0]
 8012fd6:	7019      	strb	r1, [r3, #0]
 8012fd8:	b2c8      	uxtb	r0, r1
 8012fda:	bd10      	pop	{r4, pc}

08012fdc <__sfputs_r>:
 8012fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fde:	4606      	mov	r6, r0
 8012fe0:	460f      	mov	r7, r1
 8012fe2:	4614      	mov	r4, r2
 8012fe4:	18d5      	adds	r5, r2, r3
 8012fe6:	42ac      	cmp	r4, r5
 8012fe8:	d008      	beq.n	8012ffc <__sfputs_r+0x20>
 8012fea:	4630      	mov	r0, r6
 8012fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ff0:	463a      	mov	r2, r7
 8012ff2:	f7ff ffdd 	bl	8012fb0 <__sfputc_r>
 8012ff6:	1c43      	adds	r3, r0, #1
 8012ff8:	d1f5      	bne.n	8012fe6 <__sfputs_r+0xa>
 8012ffa:	e000      	b.n	8012ffe <__sfputs_r+0x22>
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013000 <_vfiprintf_r>:
 8013000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013004:	b09d      	sub	sp, #116	; 0x74
 8013006:	460d      	mov	r5, r1
 8013008:	4690      	mov	r8, r2
 801300a:	9303      	str	r3, [sp, #12]
 801300c:	4606      	mov	r6, r0
 801300e:	b118      	cbz	r0, 8013018 <_vfiprintf_r+0x18>
 8013010:	6983      	ldr	r3, [r0, #24]
 8013012:	b90b      	cbnz	r3, 8013018 <_vfiprintf_r+0x18>
 8013014:	f7ff fdaa 	bl	8012b6c <__sinit>
 8013018:	4b75      	ldr	r3, [pc, #468]	; (80131f0 <_vfiprintf_r+0x1f0>)
 801301a:	429d      	cmp	r5, r3
 801301c:	d101      	bne.n	8013022 <_vfiprintf_r+0x22>
 801301e:	6875      	ldr	r5, [r6, #4]
 8013020:	e008      	b.n	8013034 <_vfiprintf_r+0x34>
 8013022:	4b74      	ldr	r3, [pc, #464]	; (80131f4 <_vfiprintf_r+0x1f4>)
 8013024:	429d      	cmp	r5, r3
 8013026:	d101      	bne.n	801302c <_vfiprintf_r+0x2c>
 8013028:	68b5      	ldr	r5, [r6, #8]
 801302a:	e003      	b.n	8013034 <_vfiprintf_r+0x34>
 801302c:	4b72      	ldr	r3, [pc, #456]	; (80131f8 <_vfiprintf_r+0x1f8>)
 801302e:	429d      	cmp	r5, r3
 8013030:	bf08      	it	eq
 8013032:	68f5      	ldreq	r5, [r6, #12]
 8013034:	89ab      	ldrh	r3, [r5, #12]
 8013036:	071c      	lsls	r4, r3, #28
 8013038:	d50a      	bpl.n	8013050 <_vfiprintf_r+0x50>
 801303a:	692b      	ldr	r3, [r5, #16]
 801303c:	b143      	cbz	r3, 8013050 <_vfiprintf_r+0x50>
 801303e:	2300      	movs	r3, #0
 8013040:	9309      	str	r3, [sp, #36]	; 0x24
 8013042:	2320      	movs	r3, #32
 8013044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013048:	2330      	movs	r3, #48	; 0x30
 801304a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801304e:	e041      	b.n	80130d4 <_vfiprintf_r+0xd4>
 8013050:	4630      	mov	r0, r6
 8013052:	4629      	mov	r1, r5
 8013054:	f7ff fc30 	bl	80128b8 <__swsetup_r>
 8013058:	2800      	cmp	r0, #0
 801305a:	d0f0      	beq.n	801303e <_vfiprintf_r+0x3e>
 801305c:	f04f 30ff 	mov.w	r0, #4294967295
 8013060:	e0c2      	b.n	80131e8 <_vfiprintf_r+0x1e8>
 8013062:	9a03      	ldr	r2, [sp, #12]
 8013064:	1d11      	adds	r1, r2, #4
 8013066:	6812      	ldr	r2, [r2, #0]
 8013068:	9103      	str	r1, [sp, #12]
 801306a:	2a00      	cmp	r2, #0
 801306c:	bfbb      	ittet	lt
 801306e:	4252      	neglt	r2, r2
 8013070:	f043 0302 	orrlt.w	r3, r3, #2
 8013074:	9207      	strge	r2, [sp, #28]
 8013076:	9207      	strlt	r2, [sp, #28]
 8013078:	bfb8      	it	lt
 801307a:	9304      	strlt	r3, [sp, #16]
 801307c:	3401      	adds	r4, #1
 801307e:	7823      	ldrb	r3, [r4, #0]
 8013080:	2b2e      	cmp	r3, #46	; 0x2e
 8013082:	d07b      	beq.n	801317c <_vfiprintf_r+0x17c>
 8013084:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8013208 <_vfiprintf_r+0x208>
 8013088:	7821      	ldrb	r1, [r4, #0]
 801308a:	4640      	mov	r0, r8
 801308c:	2203      	movs	r2, #3
 801308e:	f000 fae9 	bl	8013664 <memchr>
 8013092:	b138      	cbz	r0, 80130a4 <_vfiprintf_r+0xa4>
 8013094:	9a04      	ldr	r2, [sp, #16]
 8013096:	ebc8 0000 	rsb	r0, r8, r0
 801309a:	2340      	movs	r3, #64	; 0x40
 801309c:	4083      	lsls	r3, r0
 801309e:	4313      	orrs	r3, r2
 80130a0:	9304      	str	r3, [sp, #16]
 80130a2:	3401      	adds	r4, #1
 80130a4:	7821      	ldrb	r1, [r4, #0]
 80130a6:	4855      	ldr	r0, [pc, #340]	; (80131fc <_vfiprintf_r+0x1fc>)
 80130a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80130ac:	2206      	movs	r2, #6
 80130ae:	f104 0801 	add.w	r8, r4, #1
 80130b2:	f000 fad7 	bl	8013664 <memchr>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	f000 8085 	beq.w	80131c6 <_vfiprintf_r+0x1c6>
 80130bc:	4b50      	ldr	r3, [pc, #320]	; (8013200 <_vfiprintf_r+0x200>)
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d178      	bne.n	80131b4 <_vfiprintf_r+0x1b4>
 80130c2:	9b03      	ldr	r3, [sp, #12]
 80130c4:	3307      	adds	r3, #7
 80130c6:	f023 0307 	bic.w	r3, r3, #7
 80130ca:	3308      	adds	r3, #8
 80130cc:	9303      	str	r3, [sp, #12]
 80130ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130d0:	443b      	add	r3, r7
 80130d2:	9309      	str	r3, [sp, #36]	; 0x24
 80130d4:	4643      	mov	r3, r8
 80130d6:	461c      	mov	r4, r3
 80130d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130dc:	b91a      	cbnz	r2, 80130e6 <_vfiprintf_r+0xe6>
 80130de:	ebb4 0908 	subs.w	r9, r4, r8
 80130e2:	d00e      	beq.n	8013102 <_vfiprintf_r+0x102>
 80130e4:	e002      	b.n	80130ec <_vfiprintf_r+0xec>
 80130e6:	2a25      	cmp	r2, #37	; 0x25
 80130e8:	d1f5      	bne.n	80130d6 <_vfiprintf_r+0xd6>
 80130ea:	e7f8      	b.n	80130de <_vfiprintf_r+0xde>
 80130ec:	4630      	mov	r0, r6
 80130ee:	4629      	mov	r1, r5
 80130f0:	4642      	mov	r2, r8
 80130f2:	464b      	mov	r3, r9
 80130f4:	f7ff ff72 	bl	8012fdc <__sfputs_r>
 80130f8:	3001      	adds	r0, #1
 80130fa:	d070      	beq.n	80131de <_vfiprintf_r+0x1de>
 80130fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130fe:	444b      	add	r3, r9
 8013100:	9309      	str	r3, [sp, #36]	; 0x24
 8013102:	7823      	ldrb	r3, [r4, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d06a      	beq.n	80131de <_vfiprintf_r+0x1de>
 8013108:	2300      	movs	r3, #0
 801310a:	f04f 32ff 	mov.w	r2, #4294967295
 801310e:	9304      	str	r3, [sp, #16]
 8013110:	9307      	str	r3, [sp, #28]
 8013112:	9205      	str	r2, [sp, #20]
 8013114:	9306      	str	r3, [sp, #24]
 8013116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801311a:	931a      	str	r3, [sp, #104]	; 0x68
 801311c:	f104 0801 	add.w	r8, r4, #1
 8013120:	4644      	mov	r4, r8
 8013122:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 801320c <_vfiprintf_r+0x20c>
 8013126:	7821      	ldrb	r1, [r4, #0]
 8013128:	4648      	mov	r0, r9
 801312a:	2205      	movs	r2, #5
 801312c:	f000 fa9a 	bl	8013664 <memchr>
 8013130:	f108 0801 	add.w	r8, r8, #1
 8013134:	9b04      	ldr	r3, [sp, #16]
 8013136:	b130      	cbz	r0, 8013146 <_vfiprintf_r+0x146>
 8013138:	ebc9 0000 	rsb	r0, r9, r0
 801313c:	2201      	movs	r2, #1
 801313e:	4082      	lsls	r2, r0
 8013140:	4313      	orrs	r3, r2
 8013142:	9304      	str	r3, [sp, #16]
 8013144:	e7ec      	b.n	8013120 <_vfiprintf_r+0x120>
 8013146:	06d8      	lsls	r0, r3, #27
 8013148:	bf44      	itt	mi
 801314a:	2220      	movmi	r2, #32
 801314c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013150:	0719      	lsls	r1, r3, #28
 8013152:	bf44      	itt	mi
 8013154:	222b      	movmi	r2, #43	; 0x2b
 8013156:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801315a:	7822      	ldrb	r2, [r4, #0]
 801315c:	2a2a      	cmp	r2, #42	; 0x2a
 801315e:	d080      	beq.n	8013062 <_vfiprintf_r+0x62>
 8013160:	9907      	ldr	r1, [sp, #28]
 8013162:	4623      	mov	r3, r4
 8013164:	461c      	mov	r4, r3
 8013166:	3301      	adds	r3, #1
 8013168:	7822      	ldrb	r2, [r4, #0]
 801316a:	3a30      	subs	r2, #48	; 0x30
 801316c:	2a09      	cmp	r2, #9
 801316e:	d803      	bhi.n	8013178 <_vfiprintf_r+0x178>
 8013170:	200a      	movs	r0, #10
 8013172:	fb00 2101 	mla	r1, r0, r1, r2
 8013176:	e7f5      	b.n	8013164 <_vfiprintf_r+0x164>
 8013178:	9107      	str	r1, [sp, #28]
 801317a:	e780      	b.n	801307e <_vfiprintf_r+0x7e>
 801317c:	7863      	ldrb	r3, [r4, #1]
 801317e:	2b2a      	cmp	r3, #42	; 0x2a
 8013180:	d10a      	bne.n	8013198 <_vfiprintf_r+0x198>
 8013182:	9b03      	ldr	r3, [sp, #12]
 8013184:	1d1a      	adds	r2, r3, #4
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	9203      	str	r2, [sp, #12]
 801318a:	2b00      	cmp	r3, #0
 801318c:	bfb8      	it	lt
 801318e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013192:	3402      	adds	r4, #2
 8013194:	9305      	str	r3, [sp, #20]
 8013196:	e775      	b.n	8013084 <_vfiprintf_r+0x84>
 8013198:	1c61      	adds	r1, r4, #1
 801319a:	2200      	movs	r2, #0
 801319c:	460c      	mov	r4, r1
 801319e:	3101      	adds	r1, #1
 80131a0:	7823      	ldrb	r3, [r4, #0]
 80131a2:	3b30      	subs	r3, #48	; 0x30
 80131a4:	2b09      	cmp	r3, #9
 80131a6:	d803      	bhi.n	80131b0 <_vfiprintf_r+0x1b0>
 80131a8:	200a      	movs	r0, #10
 80131aa:	fb00 3202 	mla	r2, r0, r2, r3
 80131ae:	e7f5      	b.n	801319c <_vfiprintf_r+0x19c>
 80131b0:	9205      	str	r2, [sp, #20]
 80131b2:	e767      	b.n	8013084 <_vfiprintf_r+0x84>
 80131b4:	ab03      	add	r3, sp, #12
 80131b6:	9300      	str	r3, [sp, #0]
 80131b8:	4630      	mov	r0, r6
 80131ba:	a904      	add	r1, sp, #16
 80131bc:	462a      	mov	r2, r5
 80131be:	4b11      	ldr	r3, [pc, #68]	; (8013204 <_vfiprintf_r+0x204>)
 80131c0:	f3af 8000 	nop.w
 80131c4:	e007      	b.n	80131d6 <_vfiprintf_r+0x1d6>
 80131c6:	ab03      	add	r3, sp, #12
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	4630      	mov	r0, r6
 80131cc:	a904      	add	r1, sp, #16
 80131ce:	462a      	mov	r2, r5
 80131d0:	4b0c      	ldr	r3, [pc, #48]	; (8013204 <_vfiprintf_r+0x204>)
 80131d2:	f000 f893 	bl	80132fc <_printf_i>
 80131d6:	1c42      	adds	r2, r0, #1
 80131d8:	4607      	mov	r7, r0
 80131da:	f47f af78 	bne.w	80130ce <_vfiprintf_r+0xce>
 80131de:	89ab      	ldrh	r3, [r5, #12]
 80131e0:	065b      	lsls	r3, r3, #25
 80131e2:	f53f af3b 	bmi.w	801305c <_vfiprintf_r+0x5c>
 80131e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131e8:	b01d      	add	sp, #116	; 0x74
 80131ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131ee:	bf00      	nop
 80131f0:	08013e5c 	.word	0x08013e5c
 80131f4:	08013e7c 	.word	0x08013e7c
 80131f8:	08013e9c 	.word	0x08013e9c
 80131fc:	08013ec6 	.word	0x08013ec6
 8013200:	00000000 	.word	0x00000000
 8013204:	08012fdd 	.word	0x08012fdd
 8013208:	08013ec2 	.word	0x08013ec2
 801320c:	08013ebc 	.word	0x08013ebc

08013210 <_printf_common>:
 8013210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013214:	4691      	mov	r9, r2
 8013216:	461f      	mov	r7, r3
 8013218:	688a      	ldr	r2, [r1, #8]
 801321a:	690b      	ldr	r3, [r1, #16]
 801321c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013220:	4293      	cmp	r3, r2
 8013222:	bfb8      	it	lt
 8013224:	4613      	movlt	r3, r2
 8013226:	f8c9 3000 	str.w	r3, [r9]
 801322a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801322e:	4606      	mov	r6, r0
 8013230:	460c      	mov	r4, r1
 8013232:	b112      	cbz	r2, 801323a <_printf_common+0x2a>
 8013234:	3301      	adds	r3, #1
 8013236:	f8c9 3000 	str.w	r3, [r9]
 801323a:	6823      	ldr	r3, [r4, #0]
 801323c:	0699      	lsls	r1, r3, #26
 801323e:	bf42      	ittt	mi
 8013240:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013244:	3302      	addmi	r3, #2
 8013246:	f8c9 3000 	strmi.w	r3, [r9]
 801324a:	6825      	ldr	r5, [r4, #0]
 801324c:	f015 0506 	ands.w	r5, r5, #6
 8013250:	d01c      	beq.n	801328c <_printf_common+0x7c>
 8013252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013256:	6822      	ldr	r2, [r4, #0]
 8013258:	3300      	adds	r3, #0
 801325a:	bf18      	it	ne
 801325c:	2301      	movne	r3, #1
 801325e:	0692      	lsls	r2, r2, #26
 8013260:	d51f      	bpl.n	80132a2 <_printf_common+0x92>
 8013262:	18e1      	adds	r1, r4, r3
 8013264:	1c5a      	adds	r2, r3, #1
 8013266:	2030      	movs	r0, #48	; 0x30
 8013268:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801326c:	4422      	add	r2, r4
 801326e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013272:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013276:	3302      	adds	r3, #2
 8013278:	e013      	b.n	80132a2 <_printf_common+0x92>
 801327a:	4630      	mov	r0, r6
 801327c:	4639      	mov	r1, r7
 801327e:	f104 0219 	add.w	r2, r4, #25
 8013282:	2301      	movs	r3, #1
 8013284:	47c0      	blx	r8
 8013286:	3001      	adds	r0, #1
 8013288:	d007      	beq.n	801329a <_printf_common+0x8a>
 801328a:	3501      	adds	r5, #1
 801328c:	68e3      	ldr	r3, [r4, #12]
 801328e:	f8d9 2000 	ldr.w	r2, [r9]
 8013292:	1a9b      	subs	r3, r3, r2
 8013294:	429d      	cmp	r5, r3
 8013296:	dbf0      	blt.n	801327a <_printf_common+0x6a>
 8013298:	e7db      	b.n	8013252 <_printf_common+0x42>
 801329a:	f04f 30ff 	mov.w	r0, #4294967295
 801329e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132a2:	4630      	mov	r0, r6
 80132a4:	4639      	mov	r1, r7
 80132a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132aa:	47c0      	blx	r8
 80132ac:	3001      	adds	r0, #1
 80132ae:	d0f4      	beq.n	801329a <_printf_common+0x8a>
 80132b0:	6822      	ldr	r2, [r4, #0]
 80132b2:	f8d9 5000 	ldr.w	r5, [r9]
 80132b6:	68e3      	ldr	r3, [r4, #12]
 80132b8:	f002 0206 	and.w	r2, r2, #6
 80132bc:	2a04      	cmp	r2, #4
 80132be:	bf08      	it	eq
 80132c0:	1b5d      	subeq	r5, r3, r5
 80132c2:	6922      	ldr	r2, [r4, #16]
 80132c4:	68a3      	ldr	r3, [r4, #8]
 80132c6:	bf0c      	ite	eq
 80132c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132cc:	2500      	movne	r5, #0
 80132ce:	4293      	cmp	r3, r2
 80132d0:	bfc4      	itt	gt
 80132d2:	1a9b      	subgt	r3, r3, r2
 80132d4:	18ed      	addgt	r5, r5, r3
 80132d6:	f04f 0900 	mov.w	r9, #0
 80132da:	45a9      	cmp	r9, r5
 80132dc:	da0a      	bge.n	80132f4 <_printf_common+0xe4>
 80132de:	4630      	mov	r0, r6
 80132e0:	4639      	mov	r1, r7
 80132e2:	f104 021a 	add.w	r2, r4, #26
 80132e6:	2301      	movs	r3, #1
 80132e8:	47c0      	blx	r8
 80132ea:	3001      	adds	r0, #1
 80132ec:	d0d5      	beq.n	801329a <_printf_common+0x8a>
 80132ee:	f109 0901 	add.w	r9, r9, #1
 80132f2:	e7f2      	b.n	80132da <_printf_common+0xca>
 80132f4:	2000      	movs	r0, #0
 80132f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080132fc <_printf_i>:
 80132fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013300:	460c      	mov	r4, r1
 8013302:	4617      	mov	r7, r2
 8013304:	7e22      	ldrb	r2, [r4, #24]
 8013306:	2a6e      	cmp	r2, #110	; 0x6e
 8013308:	4698      	mov	r8, r3
 801330a:	4606      	mov	r6, r0
 801330c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801330e:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8013312:	f000 80a9 	beq.w	8013468 <_printf_i+0x16c>
 8013316:	d812      	bhi.n	801333e <_printf_i+0x42>
 8013318:	2a63      	cmp	r2, #99	; 0x63
 801331a:	d023      	beq.n	8013364 <_printf_i+0x68>
 801331c:	d80a      	bhi.n	8013334 <_printf_i+0x38>
 801331e:	2a00      	cmp	r2, #0
 8013320:	f000 80b6 	beq.w	8013490 <_printf_i+0x194>
 8013324:	2a58      	cmp	r2, #88	; 0x58
 8013326:	f040 80c5 	bne.w	80134b4 <_printf_i+0x1b8>
 801332a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801332e:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8013528 <_printf_i+0x22c>
 8013332:	e051      	b.n	80133d8 <_printf_i+0xdc>
 8013334:	2a64      	cmp	r2, #100	; 0x64
 8013336:	d01e      	beq.n	8013376 <_printf_i+0x7a>
 8013338:	2a69      	cmp	r2, #105	; 0x69
 801333a:	d01c      	beq.n	8013376 <_printf_i+0x7a>
 801333c:	e0ba      	b.n	80134b4 <_printf_i+0x1b8>
 801333e:	2a73      	cmp	r2, #115	; 0x73
 8013340:	f000 80aa 	beq.w	8013498 <_printf_i+0x19c>
 8013344:	d809      	bhi.n	801335a <_printf_i+0x5e>
 8013346:	2a6f      	cmp	r2, #111	; 0x6f
 8013348:	d02b      	beq.n	80133a2 <_printf_i+0xa6>
 801334a:	2a70      	cmp	r2, #112	; 0x70
 801334c:	f040 80b2 	bne.w	80134b4 <_printf_i+0x1b8>
 8013350:	6822      	ldr	r2, [r4, #0]
 8013352:	f042 0220 	orr.w	r2, r2, #32
 8013356:	6022      	str	r2, [r4, #0]
 8013358:	e039      	b.n	80133ce <_printf_i+0xd2>
 801335a:	2a75      	cmp	r2, #117	; 0x75
 801335c:	d021      	beq.n	80133a2 <_printf_i+0xa6>
 801335e:	2a78      	cmp	r2, #120	; 0x78
 8013360:	d035      	beq.n	80133ce <_printf_i+0xd2>
 8013362:	e0a7      	b.n	80134b4 <_printf_i+0x1b8>
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	1d11      	adds	r1, r2, #4
 8013368:	6019      	str	r1, [r3, #0]
 801336a:	6813      	ldr	r3, [r2, #0]
 801336c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013374:	e0a2      	b.n	80134bc <_printf_i+0x1c0>
 8013376:	6820      	ldr	r0, [r4, #0]
 8013378:	681a      	ldr	r2, [r3, #0]
 801337a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801337e:	d003      	beq.n	8013388 <_printf_i+0x8c>
 8013380:	1d10      	adds	r0, r2, #4
 8013382:	6018      	str	r0, [r3, #0]
 8013384:	6813      	ldr	r3, [r2, #0]
 8013386:	e005      	b.n	8013394 <_printf_i+0x98>
 8013388:	0645      	lsls	r5, r0, #25
 801338a:	d5f9      	bpl.n	8013380 <_printf_i+0x84>
 801338c:	1d10      	adds	r0, r2, #4
 801338e:	6018      	str	r0, [r3, #0]
 8013390:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013394:	2b00      	cmp	r3, #0
 8013396:	da3b      	bge.n	8013410 <_printf_i+0x114>
 8013398:	222d      	movs	r2, #45	; 0x2d
 801339a:	425b      	negs	r3, r3
 801339c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80133a0:	e036      	b.n	8013410 <_printf_i+0x114>
 80133a2:	6820      	ldr	r0, [r4, #0]
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80133aa:	d003      	beq.n	80133b4 <_printf_i+0xb8>
 80133ac:	1d10      	adds	r0, r2, #4
 80133ae:	6018      	str	r0, [r3, #0]
 80133b0:	6813      	ldr	r3, [r2, #0]
 80133b2:	e004      	b.n	80133be <_printf_i+0xc2>
 80133b4:	0640      	lsls	r0, r0, #25
 80133b6:	d5f9      	bpl.n	80133ac <_printf_i+0xb0>
 80133b8:	1d10      	adds	r0, r2, #4
 80133ba:	6018      	str	r0, [r3, #0]
 80133bc:	8813      	ldrh	r3, [r2, #0]
 80133be:	7e22      	ldrb	r2, [r4, #24]
 80133c0:	f8df e164 	ldr.w	lr, [pc, #356]	; 8013528 <_printf_i+0x22c>
 80133c4:	2a6f      	cmp	r2, #111	; 0x6f
 80133c6:	bf0c      	ite	eq
 80133c8:	2208      	moveq	r2, #8
 80133ca:	220a      	movne	r2, #10
 80133cc:	e01c      	b.n	8013408 <_printf_i+0x10c>
 80133ce:	2278      	movs	r2, #120	; 0x78
 80133d0:	f8df e158 	ldr.w	lr, [pc, #344]	; 801352c <_printf_i+0x230>
 80133d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80133d8:	6822      	ldr	r2, [r4, #0]
 80133da:	6818      	ldr	r0, [r3, #0]
 80133dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80133e0:	f100 0504 	add.w	r5, r0, #4
 80133e4:	601d      	str	r5, [r3, #0]
 80133e6:	d001      	beq.n	80133ec <_printf_i+0xf0>
 80133e8:	6803      	ldr	r3, [r0, #0]
 80133ea:	e002      	b.n	80133f2 <_printf_i+0xf6>
 80133ec:	0655      	lsls	r5, r2, #25
 80133ee:	d5fb      	bpl.n	80133e8 <_printf_i+0xec>
 80133f0:	8803      	ldrh	r3, [r0, #0]
 80133f2:	07d0      	lsls	r0, r2, #31
 80133f4:	bf44      	itt	mi
 80133f6:	f042 0220 	orrmi.w	r2, r2, #32
 80133fa:	6022      	strmi	r2, [r4, #0]
 80133fc:	b91b      	cbnz	r3, 8013406 <_printf_i+0x10a>
 80133fe:	6822      	ldr	r2, [r4, #0]
 8013400:	f022 0220 	bic.w	r2, r2, #32
 8013404:	6022      	str	r2, [r4, #0]
 8013406:	2210      	movs	r2, #16
 8013408:	2000      	movs	r0, #0
 801340a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801340e:	e002      	b.n	8013416 <_printf_i+0x11a>
 8013410:	f8df e114 	ldr.w	lr, [pc, #276]	; 8013528 <_printf_i+0x22c>
 8013414:	220a      	movs	r2, #10
 8013416:	6865      	ldr	r5, [r4, #4]
 8013418:	60a5      	str	r5, [r4, #8]
 801341a:	2d00      	cmp	r5, #0
 801341c:	bfa2      	ittt	ge
 801341e:	6820      	ldrge	r0, [r4, #0]
 8013420:	f020 0004 	bicge.w	r0, r0, #4
 8013424:	6020      	strge	r0, [r4, #0]
 8013426:	b903      	cbnz	r3, 801342a <_printf_i+0x12e>
 8013428:	b165      	cbz	r5, 8013444 <_printf_i+0x148>
 801342a:	460d      	mov	r5, r1
 801342c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013430:	fb02 3310 	mls	r3, r2, r0, r3
 8013434:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8013438:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801343c:	4603      	mov	r3, r0
 801343e:	2800      	cmp	r0, #0
 8013440:	d1f4      	bne.n	801342c <_printf_i+0x130>
 8013442:	e000      	b.n	8013446 <_printf_i+0x14a>
 8013444:	460d      	mov	r5, r1
 8013446:	2a08      	cmp	r2, #8
 8013448:	d10b      	bne.n	8013462 <_printf_i+0x166>
 801344a:	6823      	ldr	r3, [r4, #0]
 801344c:	07da      	lsls	r2, r3, #31
 801344e:	d508      	bpl.n	8013462 <_printf_i+0x166>
 8013450:	6923      	ldr	r3, [r4, #16]
 8013452:	6862      	ldr	r2, [r4, #4]
 8013454:	429a      	cmp	r2, r3
 8013456:	bfde      	ittt	le
 8013458:	2330      	movle	r3, #48	; 0x30
 801345a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801345e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013462:	1b49      	subs	r1, r1, r5
 8013464:	6121      	str	r1, [r4, #16]
 8013466:	e02e      	b.n	80134c6 <_printf_i+0x1ca>
 8013468:	6825      	ldr	r5, [r4, #0]
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	6960      	ldr	r0, [r4, #20]
 801346e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8013472:	d003      	beq.n	801347c <_printf_i+0x180>
 8013474:	1d15      	adds	r5, r2, #4
 8013476:	601d      	str	r5, [r3, #0]
 8013478:	6813      	ldr	r3, [r2, #0]
 801347a:	e008      	b.n	801348e <_printf_i+0x192>
 801347c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013480:	f102 0504 	add.w	r5, r2, #4
 8013484:	601d      	str	r5, [r3, #0]
 8013486:	6813      	ldr	r3, [r2, #0]
 8013488:	d001      	beq.n	801348e <_printf_i+0x192>
 801348a:	8018      	strh	r0, [r3, #0]
 801348c:	e000      	b.n	8013490 <_printf_i+0x194>
 801348e:	6018      	str	r0, [r3, #0]
 8013490:	2300      	movs	r3, #0
 8013492:	6123      	str	r3, [r4, #16]
 8013494:	460d      	mov	r5, r1
 8013496:	e016      	b.n	80134c6 <_printf_i+0x1ca>
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	1d11      	adds	r1, r2, #4
 801349c:	6019      	str	r1, [r3, #0]
 801349e:	6815      	ldr	r5, [r2, #0]
 80134a0:	6862      	ldr	r2, [r4, #4]
 80134a2:	4628      	mov	r0, r5
 80134a4:	2100      	movs	r1, #0
 80134a6:	f000 f8dd 	bl	8013664 <memchr>
 80134aa:	b108      	cbz	r0, 80134b0 <_printf_i+0x1b4>
 80134ac:	1b40      	subs	r0, r0, r5
 80134ae:	6060      	str	r0, [r4, #4]
 80134b0:	6863      	ldr	r3, [r4, #4]
 80134b2:	e004      	b.n	80134be <_printf_i+0x1c2>
 80134b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80134bc:	2301      	movs	r3, #1
 80134be:	6123      	str	r3, [r4, #16]
 80134c0:	2300      	movs	r3, #0
 80134c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80134c6:	f8cd 8000 	str.w	r8, [sp]
 80134ca:	4630      	mov	r0, r6
 80134cc:	4621      	mov	r1, r4
 80134ce:	aa03      	add	r2, sp, #12
 80134d0:	463b      	mov	r3, r7
 80134d2:	f7ff fe9d 	bl	8013210 <_printf_common>
 80134d6:	3001      	adds	r0, #1
 80134d8:	d102      	bne.n	80134e0 <_printf_i+0x1e4>
 80134da:	f04f 30ff 	mov.w	r0, #4294967295
 80134de:	e01f      	b.n	8013520 <_printf_i+0x224>
 80134e0:	4630      	mov	r0, r6
 80134e2:	4639      	mov	r1, r7
 80134e4:	462a      	mov	r2, r5
 80134e6:	6923      	ldr	r3, [r4, #16]
 80134e8:	47c0      	blx	r8
 80134ea:	3001      	adds	r0, #1
 80134ec:	d0f5      	beq.n	80134da <_printf_i+0x1de>
 80134ee:	6823      	ldr	r3, [r4, #0]
 80134f0:	079b      	lsls	r3, r3, #30
 80134f2:	d405      	bmi.n	8013500 <_printf_i+0x204>
 80134f4:	68e0      	ldr	r0, [r4, #12]
 80134f6:	9b03      	ldr	r3, [sp, #12]
 80134f8:	4298      	cmp	r0, r3
 80134fa:	bfb8      	it	lt
 80134fc:	4618      	movlt	r0, r3
 80134fe:	e00f      	b.n	8013520 <_printf_i+0x224>
 8013500:	2500      	movs	r5, #0
 8013502:	68e3      	ldr	r3, [r4, #12]
 8013504:	9a03      	ldr	r2, [sp, #12]
 8013506:	1a9b      	subs	r3, r3, r2
 8013508:	429d      	cmp	r5, r3
 801350a:	daf3      	bge.n	80134f4 <_printf_i+0x1f8>
 801350c:	4630      	mov	r0, r6
 801350e:	4639      	mov	r1, r7
 8013510:	f104 0219 	add.w	r2, r4, #25
 8013514:	2301      	movs	r3, #1
 8013516:	47c0      	blx	r8
 8013518:	3001      	adds	r0, #1
 801351a:	d0de      	beq.n	80134da <_printf_i+0x1de>
 801351c:	3501      	adds	r5, #1
 801351e:	e7f0      	b.n	8013502 <_printf_i+0x206>
 8013520:	b004      	add	sp, #16
 8013522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013526:	bf00      	nop
 8013528:	08013ecd 	.word	0x08013ecd
 801352c:	08013ede 	.word	0x08013ede

08013530 <__sread>:
 8013530:	b510      	push	{r4, lr}
 8013532:	460c      	mov	r4, r1
 8013534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013538:	f000 f8e4 	bl	8013704 <_read_r>
 801353c:	2800      	cmp	r0, #0
 801353e:	bfab      	itete	ge
 8013540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013542:	89a3      	ldrhlt	r3, [r4, #12]
 8013544:	181b      	addge	r3, r3, r0
 8013546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801354a:	bfac      	ite	ge
 801354c:	6563      	strge	r3, [r4, #84]	; 0x54
 801354e:	81a3      	strhlt	r3, [r4, #12]
 8013550:	bd10      	pop	{r4, pc}

08013552 <__swrite>:
 8013552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013556:	461d      	mov	r5, r3
 8013558:	898b      	ldrh	r3, [r1, #12]
 801355a:	05db      	lsls	r3, r3, #23
 801355c:	4607      	mov	r7, r0
 801355e:	460c      	mov	r4, r1
 8013560:	4616      	mov	r6, r2
 8013562:	d505      	bpl.n	8013570 <__swrite+0x1e>
 8013564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013568:	2200      	movs	r2, #0
 801356a:	2302      	movs	r3, #2
 801356c:	f000 f868 	bl	8013640 <_lseek_r>
 8013570:	89a3      	ldrh	r3, [r4, #12]
 8013572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801357a:	81a3      	strh	r3, [r4, #12]
 801357c:	4638      	mov	r0, r7
 801357e:	4632      	mov	r2, r6
 8013580:	462b      	mov	r3, r5
 8013582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013586:	f000 b817 	b.w	80135b8 <_write_r>

0801358a <__sseek>:
 801358a:	b510      	push	{r4, lr}
 801358c:	460c      	mov	r4, r1
 801358e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013592:	f000 f855 	bl	8013640 <_lseek_r>
 8013596:	1c43      	adds	r3, r0, #1
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	bf15      	itete	ne
 801359c:	6560      	strne	r0, [r4, #84]	; 0x54
 801359e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80135a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80135a6:	81a3      	strheq	r3, [r4, #12]
 80135a8:	bf18      	it	ne
 80135aa:	81a3      	strhne	r3, [r4, #12]
 80135ac:	bd10      	pop	{r4, pc}

080135ae <__sclose>:
 80135ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135b2:	f000 b813 	b.w	80135dc <_close_r>
	...

080135b8 <_write_r>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	4c07      	ldr	r4, [pc, #28]	; (80135d8 <_write_r+0x20>)
 80135bc:	4605      	mov	r5, r0
 80135be:	2000      	movs	r0, #0
 80135c0:	6020      	str	r0, [r4, #0]
 80135c2:	4608      	mov	r0, r1
 80135c4:	4611      	mov	r1, r2
 80135c6:	461a      	mov	r2, r3
 80135c8:	f000 f8e0 	bl	801378c <_write>
 80135cc:	1c43      	adds	r3, r0, #1
 80135ce:	d102      	bne.n	80135d6 <_write_r+0x1e>
 80135d0:	6823      	ldr	r3, [r4, #0]
 80135d2:	b103      	cbz	r3, 80135d6 <_write_r+0x1e>
 80135d4:	602b      	str	r3, [r5, #0]
 80135d6:	bd38      	pop	{r3, r4, r5, pc}
 80135d8:	1ffee3b4 	.word	0x1ffee3b4

080135dc <_close_r>:
 80135dc:	b538      	push	{r3, r4, r5, lr}
 80135de:	4c06      	ldr	r4, [pc, #24]	; (80135f8 <_close_r+0x1c>)
 80135e0:	2300      	movs	r3, #0
 80135e2:	4605      	mov	r5, r0
 80135e4:	4608      	mov	r0, r1
 80135e6:	6023      	str	r3, [r4, #0]
 80135e8:	f000 f8a8 	bl	801373c <_close>
 80135ec:	1c43      	adds	r3, r0, #1
 80135ee:	d102      	bne.n	80135f6 <_close_r+0x1a>
 80135f0:	6823      	ldr	r3, [r4, #0]
 80135f2:	b103      	cbz	r3, 80135f6 <_close_r+0x1a>
 80135f4:	602b      	str	r3, [r5, #0]
 80135f6:	bd38      	pop	{r3, r4, r5, pc}
 80135f8:	1ffee3b4 	.word	0x1ffee3b4

080135fc <_fstat_r>:
 80135fc:	b538      	push	{r3, r4, r5, lr}
 80135fe:	4c07      	ldr	r4, [pc, #28]	; (801361c <_fstat_r+0x20>)
 8013600:	2300      	movs	r3, #0
 8013602:	4605      	mov	r5, r0
 8013604:	4608      	mov	r0, r1
 8013606:	4611      	mov	r1, r2
 8013608:	6023      	str	r3, [r4, #0]
 801360a:	f000 f89f 	bl	801374c <_fstat>
 801360e:	1c43      	adds	r3, r0, #1
 8013610:	d102      	bne.n	8013618 <_fstat_r+0x1c>
 8013612:	6823      	ldr	r3, [r4, #0]
 8013614:	b103      	cbz	r3, 8013618 <_fstat_r+0x1c>
 8013616:	602b      	str	r3, [r5, #0]
 8013618:	bd38      	pop	{r3, r4, r5, pc}
 801361a:	bf00      	nop
 801361c:	1ffee3b4 	.word	0x1ffee3b4

08013620 <_isatty_r>:
 8013620:	b538      	push	{r3, r4, r5, lr}
 8013622:	4c06      	ldr	r4, [pc, #24]	; (801363c <_isatty_r+0x1c>)
 8013624:	2300      	movs	r3, #0
 8013626:	4605      	mov	r5, r0
 8013628:	4608      	mov	r0, r1
 801362a:	6023      	str	r3, [r4, #0]
 801362c:	f000 f896 	bl	801375c <_isatty>
 8013630:	1c43      	adds	r3, r0, #1
 8013632:	d102      	bne.n	801363a <_isatty_r+0x1a>
 8013634:	6823      	ldr	r3, [r4, #0]
 8013636:	b103      	cbz	r3, 801363a <_isatty_r+0x1a>
 8013638:	602b      	str	r3, [r5, #0]
 801363a:	bd38      	pop	{r3, r4, r5, pc}
 801363c:	1ffee3b4 	.word	0x1ffee3b4

08013640 <_lseek_r>:
 8013640:	b538      	push	{r3, r4, r5, lr}
 8013642:	4c07      	ldr	r4, [pc, #28]	; (8013660 <_lseek_r+0x20>)
 8013644:	4605      	mov	r5, r0
 8013646:	2000      	movs	r0, #0
 8013648:	6020      	str	r0, [r4, #0]
 801364a:	4608      	mov	r0, r1
 801364c:	4611      	mov	r1, r2
 801364e:	461a      	mov	r2, r3
 8013650:	f000 f88c 	bl	801376c <_lseek>
 8013654:	1c43      	adds	r3, r0, #1
 8013656:	d102      	bne.n	801365e <_lseek_r+0x1e>
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	b103      	cbz	r3, 801365e <_lseek_r+0x1e>
 801365c:	602b      	str	r3, [r5, #0]
 801365e:	bd38      	pop	{r3, r4, r5, pc}
 8013660:	1ffee3b4 	.word	0x1ffee3b4

08013664 <memchr>:
 8013664:	b510      	push	{r4, lr}
 8013666:	b2c9      	uxtb	r1, r1
 8013668:	4402      	add	r2, r0
 801366a:	4290      	cmp	r0, r2
 801366c:	4603      	mov	r3, r0
 801366e:	d006      	beq.n	801367e <memchr+0x1a>
 8013670:	781c      	ldrb	r4, [r3, #0]
 8013672:	428c      	cmp	r4, r1
 8013674:	f100 0001 	add.w	r0, r0, #1
 8013678:	d1f7      	bne.n	801366a <memchr+0x6>
 801367a:	4618      	mov	r0, r3
 801367c:	bd10      	pop	{r4, pc}
 801367e:	2000      	movs	r0, #0
 8013680:	bd10      	pop	{r4, pc}

08013682 <memmove>:
 8013682:	4281      	cmp	r1, r0
 8013684:	b510      	push	{r4, lr}
 8013686:	eb01 0302 	add.w	r3, r1, r2
 801368a:	d301      	bcc.n	8013690 <memmove+0xe>
 801368c:	1e42      	subs	r2, r0, #1
 801368e:	e00b      	b.n	80136a8 <memmove+0x26>
 8013690:	4298      	cmp	r0, r3
 8013692:	d2fb      	bcs.n	801368c <memmove+0xa>
 8013694:	1881      	adds	r1, r0, r2
 8013696:	1ad2      	subs	r2, r2, r3
 8013698:	42d3      	cmn	r3, r2
 801369a:	d004      	beq.n	80136a6 <memmove+0x24>
 801369c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80136a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80136a4:	e7f8      	b.n	8013698 <memmove+0x16>
 80136a6:	bd10      	pop	{r4, pc}
 80136a8:	4299      	cmp	r1, r3
 80136aa:	d004      	beq.n	80136b6 <memmove+0x34>
 80136ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80136b4:	e7f8      	b.n	80136a8 <memmove+0x26>
 80136b6:	bd10      	pop	{r4, pc}

080136b8 <_realloc_r>:
 80136b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ba:	4607      	mov	r7, r0
 80136bc:	4615      	mov	r5, r2
 80136be:	460e      	mov	r6, r1
 80136c0:	b921      	cbnz	r1, 80136cc <_realloc_r+0x14>
 80136c2:	4611      	mov	r1, r2
 80136c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80136c8:	f7fe bf82 	b.w	80125d0 <_malloc_r>
 80136cc:	b91a      	cbnz	r2, 80136d6 <_realloc_r+0x1e>
 80136ce:	f7fe ff3b 	bl	8012548 <_free_r>
 80136d2:	4628      	mov	r0, r5
 80136d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136d6:	f000 f827 	bl	8013728 <_malloc_usable_size_r>
 80136da:	42a8      	cmp	r0, r5
 80136dc:	d20e      	bcs.n	80136fc <_realloc_r+0x44>
 80136de:	4638      	mov	r0, r7
 80136e0:	4629      	mov	r1, r5
 80136e2:	f7fe ff75 	bl	80125d0 <_malloc_r>
 80136e6:	4604      	mov	r4, r0
 80136e8:	b150      	cbz	r0, 8013700 <_realloc_r+0x48>
 80136ea:	4631      	mov	r1, r6
 80136ec:	462a      	mov	r2, r5
 80136ee:	f7fe ff09 	bl	8012504 <memcpy>
 80136f2:	4638      	mov	r0, r7
 80136f4:	4631      	mov	r1, r6
 80136f6:	f7fe ff27 	bl	8012548 <_free_r>
 80136fa:	e001      	b.n	8013700 <_realloc_r+0x48>
 80136fc:	4630      	mov	r0, r6
 80136fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013700:	4620      	mov	r0, r4
 8013702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013704 <_read_r>:
 8013704:	b538      	push	{r3, r4, r5, lr}
 8013706:	4c07      	ldr	r4, [pc, #28]	; (8013724 <_read_r+0x20>)
 8013708:	4605      	mov	r5, r0
 801370a:	2000      	movs	r0, #0
 801370c:	6020      	str	r0, [r4, #0]
 801370e:	4608      	mov	r0, r1
 8013710:	4611      	mov	r1, r2
 8013712:	461a      	mov	r2, r3
 8013714:	f000 f832 	bl	801377c <_read>
 8013718:	1c43      	adds	r3, r0, #1
 801371a:	d102      	bne.n	8013722 <_read_r+0x1e>
 801371c:	6823      	ldr	r3, [r4, #0]
 801371e:	b103      	cbz	r3, 8013722 <_read_r+0x1e>
 8013720:	602b      	str	r3, [r5, #0]
 8013722:	bd38      	pop	{r3, r4, r5, pc}
 8013724:	1ffee3b4 	.word	0x1ffee3b4

08013728 <_malloc_usable_size_r>:
 8013728:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801372c:	2800      	cmp	r0, #0
 801372e:	bfbe      	ittt	lt
 8013730:	1809      	addlt	r1, r1, r0
 8013732:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8013736:	18c0      	addlt	r0, r0, r3
 8013738:	3804      	subs	r0, #4
 801373a:	4770      	bx	lr

0801373c <_close>:
 801373c:	4b02      	ldr	r3, [pc, #8]	; (8013748 <_close+0xc>)
 801373e:	2258      	movs	r2, #88	; 0x58
 8013740:	601a      	str	r2, [r3, #0]
 8013742:	f04f 30ff 	mov.w	r0, #4294967295
 8013746:	4770      	bx	lr
 8013748:	1ffee3b4 	.word	0x1ffee3b4

0801374c <_fstat>:
 801374c:	4b02      	ldr	r3, [pc, #8]	; (8013758 <_fstat+0xc>)
 801374e:	2258      	movs	r2, #88	; 0x58
 8013750:	601a      	str	r2, [r3, #0]
 8013752:	f04f 30ff 	mov.w	r0, #4294967295
 8013756:	4770      	bx	lr
 8013758:	1ffee3b4 	.word	0x1ffee3b4

0801375c <_isatty>:
 801375c:	4b02      	ldr	r3, [pc, #8]	; (8013768 <_isatty+0xc>)
 801375e:	2258      	movs	r2, #88	; 0x58
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	2000      	movs	r0, #0
 8013764:	4770      	bx	lr
 8013766:	bf00      	nop
 8013768:	1ffee3b4 	.word	0x1ffee3b4

0801376c <_lseek>:
 801376c:	4b02      	ldr	r3, [pc, #8]	; (8013778 <_lseek+0xc>)
 801376e:	2258      	movs	r2, #88	; 0x58
 8013770:	601a      	str	r2, [r3, #0]
 8013772:	f04f 30ff 	mov.w	r0, #4294967295
 8013776:	4770      	bx	lr
 8013778:	1ffee3b4 	.word	0x1ffee3b4

0801377c <_read>:
 801377c:	4b02      	ldr	r3, [pc, #8]	; (8013788 <_read+0xc>)
 801377e:	2258      	movs	r2, #88	; 0x58
 8013780:	601a      	str	r2, [r3, #0]
 8013782:	f04f 30ff 	mov.w	r0, #4294967295
 8013786:	4770      	bx	lr
 8013788:	1ffee3b4 	.word	0x1ffee3b4

0801378c <_write>:
 801378c:	4b02      	ldr	r3, [pc, #8]	; (8013798 <_write+0xc>)
 801378e:	2258      	movs	r2, #88	; 0x58
 8013790:	601a      	str	r2, [r3, #0]
 8013792:	f04f 30ff 	mov.w	r0, #4294967295
 8013796:	4770      	bx	lr
 8013798:	1ffee3b4 	.word	0x1ffee3b4
 801379c:	6f727245 	.word	0x6f727245
 80137a0:	30203a72 	.word	0x30203a72
 80137a4:	32302578 	.word	0x32302578
 80137a8:	0a0d2058 	.word	0x0a0d2058
 80137ac:	00000000 	.word	0x00000000
 80137b0:	0003e0e0 	.word	0x0003e0e0
 80137b4:	00000114 	.word	0x00000114
 80137b8:	6f727245 	.word	0x6f727245
 80137bc:	31232072 	.word	0x31232072
 80137c0:	706f203a 	.word	0x706f203a
 80137c4:	61676974 	.word	0x61676974
 80137c8:	696e695f 	.word	0x696e695f
 80137cc:	00000d74 	.word	0x00000d74
 80137d0:	6f727245 	.word	0x6f727245
 80137d4:	31232072 	.word	0x31232072
 80137d8:	706f203a 	.word	0x706f203a
 80137dc:	61676974 	.word	0x61676974
 80137e0:	6965645f 	.word	0x6965645f
 80137e4:	0d74696e 	.word	0x0d74696e
 80137e8:	00000000 	.word	0x00000000
 80137ec:	6f727245 	.word	0x6f727245
 80137f0:	30203a72 	.word	0x30203a72
 80137f4:	32302578 	.word	0x32302578
 80137f8:	0a0d2058 	.word	0x0a0d2058
 80137fc:	00000000 	.word	0x00000000
 8013800:	00435057 	.word	0x00435057
 8013804:	00000000 	.word	0x00000000
 8013808:	0000ffff 	.word	0x0000ffff
 801380c:	0003e0e0 	.word	0x0003e0e0
 8013810:	00000114 	.word	0x00000114
 8013814:	6f727245 	.word	0x6f727245
 8013818:	31232072 	.word	0x31232072
 801381c:	706f203a 	.word	0x706f203a
 8013820:	61676974 	.word	0x61676974
 8013824:	696e695f 	.word	0x696e695f
 8013828:	00000d74 	.word	0x00000d74
 801382c:	6f727245 	.word	0x6f727245
 8013830:	31232072 	.word	0x31232072
 8013834:	706f203a 	.word	0x706f203a
 8013838:	61676974 	.word	0x61676974
 801383c:	6965645f 	.word	0x6965645f
 8013840:	0d74696e 	.word	0x0d74696e
 8013844:	00000000 	.word	0x00000000
 8013848:	72617453 	.word	0x72617453
 801384c:	50572074 	.word	0x50572074
 8013850:	69512043 	.word	0x69512043
 8013854:	74754120 	.word	0x74754120
 8013858:	65742068 	.word	0x65742068
 801385c:	6e697473 	.word	0x6e697473
 8013860:	6f722067 	.word	0x6f722067
 8013864:	6e697475 	.word	0x6e697475
 8013868:	0a0d7365 	.word	0x0a0d7365
 801386c:	00000000 	.word	0x00000000
 8013870:	6f727245 	.word	0x6f727245
 8013874:	31232072 	.word	0x31232072
 8013878:	6547203a 	.word	0x6547203a
 801387c:	69442074 	.word	0x69442074
 8013880:	74736567 	.word	0x74736567
 8013884:	00000a0d 	.word	0x00000a0d
 8013888:	74736554 	.word	0x74736554
 801388c:	3a312320 	.word	0x3a312320
 8013890:	74654720 	.word	0x74654720
 8013894:	67694420 	.word	0x67694420
 8013898:	20747365 	.word	0x20747365
 801389c:	0a0d4b4f 	.word	0x0a0d4b4f
 80138a0:	00000000 	.word	0x00000000
 80138a4:	32335b1b 	.word	0x32335b1b
 80138a8:	0000006d 	.word	0x0000006d
 80138ac:	6f727245 	.word	0x6f727245
 80138b0:	32232072 	.word	0x32232072
 80138b4:	6547203a 	.word	0x6547203a
 80138b8:	69442074 	.word	0x69442074
 80138bc:	74736567 	.word	0x74736567
 80138c0:	73657220 	.word	0x73657220
 80138c4:	736e6f70 	.word	0x736e6f70
 80138c8:	000a0d65 	.word	0x000a0d65
 80138cc:	74736554 	.word	0x74736554
 80138d0:	3a322320 	.word	0x3a322320
 80138d4:	74654720 	.word	0x74654720
 80138d8:	67694420 	.word	0x67694420
 80138dc:	20747365 	.word	0x20747365
 80138e0:	70736572 	.word	0x70736572
 80138e4:	65736e6f 	.word	0x65736e6f
 80138e8:	0d4b4f20 	.word	0x0d4b4f20
 80138ec:	0000000a 	.word	0x0000000a
 80138f0:	6f727245 	.word	0x6f727245
 80138f4:	33232072 	.word	0x33232072
 80138f8:	6547203a 	.word	0x6547203a
 80138fc:	65432074 	.word	0x65432074
 8013900:	66697472 	.word	0x66697472
 8013904:	74616369 	.word	0x74616369
 8013908:	000a0d65 	.word	0x000a0d65
 801390c:	74736554 	.word	0x74736554
 8013910:	3a332320 	.word	0x3a332320
 8013914:	74654720 	.word	0x74654720
 8013918:	72654320 	.word	0x72654320
 801391c:	69666974 	.word	0x69666974
 8013920:	65746163 	.word	0x65746163
 8013924:	0d4b4f20 	.word	0x0d4b4f20
 8013928:	0000000a 	.word	0x0000000a
 801392c:	6f727245 	.word	0x6f727245
 8013930:	34232072 	.word	0x34232072
 8013934:	4720203a 	.word	0x4720203a
 8013938:	43207465 	.word	0x43207465
 801393c:	69747265 	.word	0x69747265
 8013940:	61636966 	.word	0x61636966
 8013944:	72206574 	.word	0x72206574
 8013948:	6f707365 	.word	0x6f707365
 801394c:	0d65736e 	.word	0x0d65736e
 8013950:	0000000a 	.word	0x0000000a
 8013954:	74736554 	.word	0x74736554
 8013958:	3a342320 	.word	0x3a342320
 801395c:	74654720 	.word	0x74654720
 8013960:	72654320 	.word	0x72654320
 8013964:	69666974 	.word	0x69666974
 8013968:	65746163 	.word	0x65746163
 801396c:	73657220 	.word	0x73657220
 8013970:	736e6f70 	.word	0x736e6f70
 8013974:	4b4f2065 	.word	0x4b4f2065
 8013978:	00000a0d 	.word	0x00000a0d
 801397c:	6f727245 	.word	0x6f727245
 8013980:	36232072 	.word	0x36232072
 8013984:	6547203a 	.word	0x6547203a
 8013988:	68432074 	.word	0x68432074
 801398c:	656c6c61 	.word	0x656c6c61
 8013990:	2065676e 	.word	0x2065676e
 8013994:	75716552 	.word	0x75716552
 8013998:	0d747365 	.word	0x0d747365
 801399c:	0000000a 	.word	0x0000000a
 80139a0:	74736554 	.word	0x74736554
 80139a4:	3a362320 	.word	0x3a362320
 80139a8:	74654720 	.word	0x74654720
 80139ac:	61684320 	.word	0x61684320
 80139b0:	6e656c6c 	.word	0x6e656c6c
 80139b4:	52206567 	.word	0x52206567
 80139b8:	65757165 	.word	0x65757165
 80139bc:	4f207473 	.word	0x4f207473
 80139c0:	000a0d4b 	.word	0x000a0d4b
 80139c4:	6f727245 	.word	0x6f727245
 80139c8:	37232072 	.word	0x37232072
 80139cc:	6547203a 	.word	0x6547203a
 80139d0:	68432074 	.word	0x68432074
 80139d4:	656c6c61 	.word	0x656c6c61
 80139d8:	2065676e 	.word	0x2065676e
 80139dc:	68747541 	.word	0x68747541
 80139e0:	73655220 	.word	0x73655220
 80139e4:	736e6f70 	.word	0x736e6f70
 80139e8:	000a0d65 	.word	0x000a0d65
 80139ec:	74736554 	.word	0x74736554
 80139f0:	3a372320 	.word	0x3a372320
 80139f4:	74654720 	.word	0x74654720
 80139f8:	61684320 	.word	0x61684320
 80139fc:	6e656c6c 	.word	0x6e656c6c
 8013a00:	41206567 	.word	0x41206567
 8013a04:	20687475 	.word	0x20687475
 8013a08:	70736552 	.word	0x70736552
 8013a0c:	65736e6f 	.word	0x65736e6f
 8013a10:	0d4b4f20 	.word	0x0d4b4f20
 8013a14:	0000000a 	.word	0x0000000a
 8013a18:	6f727245 	.word	0x6f727245
 8013a1c:	38232072 	.word	0x38232072
 8013a20:	6556203a 	.word	0x6556203a
 8013a24:	79666972 	.word	0x79666972
 8013a28:	61684320 	.word	0x61684320
 8013a2c:	6e656c6c 	.word	0x6e656c6c
 8013a30:	41206567 	.word	0x41206567
 8013a34:	20687475 	.word	0x20687475
 8013a38:	70736552 	.word	0x70736552
 8013a3c:	65736e6f 	.word	0x65736e6f
 8013a40:	00000a0d 	.word	0x00000a0d
 8013a44:	74736554 	.word	0x74736554
 8013a48:	3a382320 	.word	0x3a382320
 8013a4c:	72655620 	.word	0x72655620
 8013a50:	20796669 	.word	0x20796669
 8013a54:	6c616843 	.word	0x6c616843
 8013a58:	676e656c 	.word	0x676e656c
 8013a5c:	75412065 	.word	0x75412065
 8013a60:	52206874 	.word	0x52206874
 8013a64:	6f707365 	.word	0x6f707365
 8013a68:	2065736e 	.word	0x2065736e
 8013a6c:	0a0d4b4f 	.word	0x0a0d4b4f
 8013a70:	00000000 	.word	0x00000000

08013a74 <Driver_USBD0>:
 8013a74:	08003cd1 08003d39 08003f75 08003fb1     .<..9=..u?...?..
 8013a84:	08003fe5 08004019 08004229 08004449     .?...@..)B..ID..
 8013a94:	0800473d 08004275 0800407d 08004109     =G..uB..}@...A..
 8013aa4:	08004181 080043c1 080048ad 080048d9     .A...C...H...H..

08013ab4 <device_descriptor>:
 8013ab4:	01100112 40000002 0058058b 02010001     .......@..X.....
 8013ac4:	00000100                                ....

08013ac8 <configuration_descriptor>:
 8013ac8:	003e0209 80000102 00040932 02020100     ..>.....2.......
 8013ad8:	24050001 04011000 05060224 01000624     ...$....$...$...
 8013ae8:	03810507 09ff0008 02000104 0000000a     ................
 8013af8:	02030507 07010040 40028205 00000100     ....@......@....

08013b08 <language_string>:
 8013b08:	04090304 00000000 00000000 00000000     ................
	...

08013b70 <manufacturer_string>:
 8013b70:	00490312 0066006e 006e0069 006f0065     ..I.n.f.i.n.e.o.
 8013b80:	0000006e 00000000 00000000 00000000     n...............
	...

08013bd8 <product_string>:
 8013bd8:	00490310 00580046 00430020 00430044     ..I.F.X. .C.D.C.
	...

08013c40 <cunit_logger_channel_config>:
 8013c40:	00002580 10010808 00000000              .%..........

08013c4c <cunit_logger_tx_pin_config>:
 8013c4c:	00000088 00000001 00000002              ............

08013c58 <cunit_logger_tx_pin>:
 8013c58:	48028500 00000001 08013c4c              ...H....L<..

08013c64 <cunit_logger_config>:
 8013c64:	08013c40 0800715d 08009505 0800951d     @<..]q..........
	...
 8013c88:	08013c58 04000000 00000304              X<..........

08013c94 <cunit_logger_rx_pin_config>:
 8013c94:	00000000 00000001 00000002              ............

08013ca0 <tick_timer_intr>:
 8013ca0:	01003f31                                1?..

08013ca4 <scheduler_timer_intr>:
 8013ca4:	01003d39                                9=..

08013ca8 <i2c_master_0_sda_pin_config>:
 8013ca8:	000000d0 00000001 00000000              ............

08013cb4 <i2c_master_0_scl_pin_config>:
 8013cb4:	000000d0 00000001 00000000              ............

08013cc0 <i2c_master_0_channel_config>:
 8013cc0:	00061a80 00000000                       ........

08013cc8 <i2c_master_0_config>:
 8013cc8:	08013cc0 08008ce5 08008cbd 08008c99     .<..............
 8013cd8:	080092a9 080092c1 0800933d 08009349     ........=...I...
 8013ce8:	080092d9 05050000 00005a5b              ........[Z..

08013cf4 <reset_pin>:
 8013cf4:	48028100 00000080 00000001 00000000     ...H............
 8013d04:	0000000b                                ....

08013d08 <vdd_pin>:
 8013d08:	48028200 00000080 00000001 00000000     ...H............
 8013d18:	0000000c 01010230 00010000 00000000     ....0...........
 8013d28:	00010000 01010102                       ........

08013d30 <g_pctr_states_table>:
 8013d30:	04000400 ffff0201 ffff0201 0707ffff     ................
 8013d40:	73373325 00000000 676e654c 6f206874     %37s....Length o
 8013d50:	61642066 2d206174 00000020 00000a0d     f data - .......
 8013d60:	73257325 73257325 00000000 6d305b1b     %s%s%s%s.....[0m
 8013d70:	00000000 73736150 00006465 6c696146     ....Passed..Fail
 8013d80:	77206465 20687469 75746572 76206e72     ed with return v
 8013d90:	65756c61 00202d20 73353225 73257325     alue - .%25s%s%s
 8013da0:	00000000                                ....

08013da4 <g_optiga_unique_application_identifier>:
 8013da4:	000076d2 6e654704 68747541 6c707041     .v...GenAuthAppl

08013db4 <secp256r1_p>:
 8013db4:	ffffffff ffffffff ffffffff 00000000     ................
	...
 8013dcc:	00000001 ffffffff                       ........

08013dd4 <secp256r1_b>:
 8013dd4:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
 8013de4:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

08013df4 <secp256r1_gx>:
 8013df4:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
 8013e04:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k

08013e14 <secp256r1_gy>:
 8013e14:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
 8013e24:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O

08013e34 <secp256r1_n>:
 8013e34:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
 8013e44:	ffffffff ffffffff 00000000 ffffffff     ................
 8013e54:	00000043                                C...

08013e58 <_global_impure_ptr>:
 8013e58:	1ffed57c                                |...

08013e5c <__sf_fake_stdin>:
	...

08013e7c <__sf_fake_stdout>:
	...

08013e9c <__sf_fake_stderr>:
	...
 8013ebc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 8013ecc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 8013edc:	31300046 35343332 39383736 64636261     F.0123456789abcd
 8013eec:	00006665                                ef..
